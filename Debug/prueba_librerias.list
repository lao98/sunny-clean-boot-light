
prueba_librerias.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e088  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  0800e288  0800e288  0001e288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9ac  0800e9ac  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9ac  0800e9ac  0001e9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9b4  0800e9b4  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9b4  0800e9b4  0001e9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9b8  0800e9b8  0001e9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800e9bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c8c  20000244  0800ec00  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ed0  0800ec00  00024ed0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   000245d6  00000000  00000000  00020272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043b3  00000000  00000000  00044848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  00048c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001588  00000000  00000000  0004a310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ea0  00000000  00000000  0004b898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c61f  00000000  00000000  00050738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108d6f  00000000  00000000  0006cd57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00175ac6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074f0  00000000  00000000  00175b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000244 	.word	0x20000244
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e270 	.word	0x0800e270

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000248 	.word	0x20000248
 800023c:	0800e270 	.word	0x0800e270

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <r9ds_getChannels>:
.zero_channels=ZERO_CHANNELS,.threshold=THRESHOLD};



r9ds_status_t r9ds_getChannels(r9ds_t *device)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
;
for(int i=0;i<10;i++) device->channels[i]=0;
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	e008      	b.n	80009f0 <r9ds_getChannels+0x20>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	3210      	adds	r2, #16
 80009e4:	2100      	movs	r1, #0
 80009e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	3301      	adds	r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2b09      	cmp	r3, #9
 80009f4:	ddf3      	ble.n	80009de <r9ds_getChannels+0xe>
	if (r9ds_readData(device))
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f000 f92e 	bl	8000c58 <r9ds_readData>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 810a 	beq.w	8000c18 <r9ds_getChannels+0x248>
	{
	    for(int i=0;i<26;i++){
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	e00e      	b.n	8000a28 <r9ds_getChannels+0x58>
		    device->buffer[i]=device->buffer_rf[i+1];
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	330c      	adds	r3, #12
 8000a1e:	460a      	mov	r2, r1
 8000a20:	701a      	strb	r2, [r3, #0]
	    for(int i=0;i<26;i++){
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	3301      	adds	r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	2b19      	cmp	r3, #25
 8000a2c:	dded      	ble.n	8000a0a <r9ds_getChannels+0x3a>
	    }
		if (device->buffer[0] == R12DS_STARTBYTE && device->buffer[24] == R12DS_FOOTERBYTE)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	7b1b      	ldrb	r3, [r3, #12]
 8000a32:	2b0f      	cmp	r3, #15
 8000a34:	f040 80cd 	bne.w	8000bd2 <r9ds_getChannels+0x202>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 80c7 	bne.w	8000bd2 <r9ds_getChannels+0x202>
		{

			device->channels[0] = ((device->buffer[1] | device->buffer[2] << 8) & 0x07FF);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	7b5b      	ldrb	r3, [r3, #13]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	7b9b      	ldrb	r3, [r3, #14]
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	4313      	orrs	r3, r2
 8000a52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	641a      	str	r2, [r3, #64]	; 0x40
			device->channels[1] = ((device->buffer[2] >> 3 | device->buffer[3] << 5) & 0x07FF);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	7b9b      	ldrb	r3, [r3, #14]
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	461a      	mov	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7bdb      	ldrb	r3, [r3, #15]
 8000a68:	015b      	lsls	r3, r3, #5
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	645a      	str	r2, [r3, #68]	; 0x44
			device->channels[2] = ((device->buffer[3] >> 6 | device->buffer[4] << 2 | device->buffer[5] << 10) & 0x07FF);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	7bdb      	ldrb	r3, [r3, #15]
 8000a78:	099b      	lsrs	r3, r3, #6
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	7c1b      	ldrb	r3, [r3, #16]
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	431a      	orrs	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	7c5b      	ldrb	r3, [r3, #17]
 8000a8a:	029b      	lsls	r3, r3, #10
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	649a      	str	r2, [r3, #72]	; 0x48
			device->channels[3] = ((device->buffer[5] >> 1 | device->buffer[6] << 7) & 0x07FF);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	7c5b      	ldrb	r3, [r3, #17]
 8000a9a:	085b      	lsrs	r3, r3, #1
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	7c9b      	ldrb	r3, [r3, #18]
 8000aa4:	01db      	lsls	r3, r3, #7
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	64da      	str	r2, [r3, #76]	; 0x4c
			device->channels[4] = ((device->buffer[6] >> 4 | device->buffer[7] << 4) & 0x07FF);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7c9b      	ldrb	r3, [r3, #18]
 8000ab4:	091b      	lsrs	r3, r3, #4
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7cdb      	ldrb	r3, [r3, #19]
 8000abe:	011b      	lsls	r3, r3, #4
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	651a      	str	r2, [r3, #80]	; 0x50
			device->channels[5] = ((device->buffer[7] >> 7 | device->buffer[8] << 1 |device-> buffer[9] << 9) & 0x07FF);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	7cdb      	ldrb	r3, [r3, #19]
 8000ace:	09db      	lsrs	r3, r3, #7
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	7d1b      	ldrb	r3, [r3, #20]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	431a      	orrs	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7d5b      	ldrb	r3, [r3, #21]
 8000ae0:	025b      	lsls	r3, r3, #9
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	655a      	str	r2, [r3, #84]	; 0x54
			device->channels[6] = ((device->buffer[9] >> 2 | device->buffer[10] << 6) & 0x07FF);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	7d5b      	ldrb	r3, [r3, #21]
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	461a      	mov	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7d9b      	ldrb	r3, [r3, #22]
 8000afa:	019b      	lsls	r3, r3, #6
 8000afc:	4313      	orrs	r3, r2
 8000afe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	659a      	str	r2, [r3, #88]	; 0x58
			device->channels[7] = ((device->buffer[10] >> 5 | device->buffer[11] << 3) & 0x07FF);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7d9b      	ldrb	r3, [r3, #22]
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	461a      	mov	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	7ddb      	ldrb	r3, [r3, #23]
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	4313      	orrs	r3, r2
 8000b18:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	65da      	str	r2, [r3, #92]	; 0x5c
			device->channels[8] = ((device->buffer[12] | device->buffer[13] << 8) & 0x07FF);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	7e1b      	ldrb	r3, [r3, #24]
 8000b24:	461a      	mov	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7e5b      	ldrb	r3, [r3, #25]
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	661a      	str	r2, [r3, #96]	; 0x60
			device->channels[9] = ((device->buffer[13] >> 3 | device->buffer[14] << 5) & 0x07FF);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	7e5b      	ldrb	r3, [r3, #25]
 8000b3a:	08db      	lsrs	r3, r3, #3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7e9b      	ldrb	r3, [r3, #26]
 8000b44:	015b      	lsls	r3, r3, #5
 8000b46:	4313      	orrs	r3, r2
 8000b48:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	665a      	str	r2, [r3, #100]	; 0x64

			printf("canal 1 %d\n",device->channels[0]);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	4619      	mov	r1, r3
 8000b56:	4835      	ldr	r0, [pc, #212]	; (8000c2c <r9ds_getChannels+0x25c>)
 8000b58:	f009 fe9c 	bl	800a894 <iprintf>
			printf("canal 2 %d\n",device->channels[1]);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b60:	4619      	mov	r1, r3
 8000b62:	4833      	ldr	r0, [pc, #204]	; (8000c30 <r9ds_getChannels+0x260>)
 8000b64:	f009 fe96 	bl	800a894 <iprintf>
			printf("canal 3 %d\n",device->channels[2]);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4831      	ldr	r0, [pc, #196]	; (8000c34 <r9ds_getChannels+0x264>)
 8000b70:	f009 fe90 	bl	800a894 <iprintf>
			printf("canal 4 %d\n",device->channels[3]);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b78:	4619      	mov	r1, r3
 8000b7a:	482f      	ldr	r0, [pc, #188]	; (8000c38 <r9ds_getChannels+0x268>)
 8000b7c:	f009 fe8a 	bl	800a894 <iprintf>
			printf("canal 5 %d\n",device->channels[4]);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b84:	4619      	mov	r1, r3
 8000b86:	482d      	ldr	r0, [pc, #180]	; (8000c3c <r9ds_getChannels+0x26c>)
 8000b88:	f009 fe84 	bl	800a894 <iprintf>
			printf("canal 6 %d\n",device->channels[5]);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b90:	4619      	mov	r1, r3
 8000b92:	482b      	ldr	r0, [pc, #172]	; (8000c40 <r9ds_getChannels+0x270>)
 8000b94:	f009 fe7e 	bl	800a894 <iprintf>
			printf("canal 7 %d\n",device->channels[6]);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4829      	ldr	r0, [pc, #164]	; (8000c44 <r9ds_getChannels+0x274>)
 8000ba0:	f009 fe78 	bl	800a894 <iprintf>
			printf("canal 8 %d\n",device->channels[7]);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4827      	ldr	r0, [pc, #156]	; (8000c48 <r9ds_getChannels+0x278>)
 8000bac:	f009 fe72 	bl	800a894 <iprintf>
			printf("canal 9 %d\n",device->channels[8]);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4825      	ldr	r0, [pc, #148]	; (8000c4c <r9ds_getChannels+0x27c>)
 8000bb8:	f009 fe6c 	bl	800a894 <iprintf>
			printf("canal 10 %d\n",device->channels[9]);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4823      	ldr	r0, [pc, #140]	; (8000c50 <r9ds_getChannels+0x280>)
 8000bc4:	f009 fe66 	bl	800a894 <iprintf>

            HAL_Delay(100);
 8000bc8:	2064      	movs	r0, #100	; 0x64
 8000bca:	f001 f99f 	bl	8001f0c <HAL_Delay>

			return R12DS_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e028      	b.n	8000c24 <r9ds_getChannels+0x254>

		}
		else
		{
			if (device->buffer[0] != R12DS_STARTBYTE)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	7b1b      	ldrb	r3, [r3, #12]
 8000bd6:	2b0f      	cmp	r3, #15
 8000bd8:	d001      	beq.n	8000bde <r9ds_getChannels+0x20e>
			{
#if R12DS_DEBUG
				//printf("bad header \n");
#endif
				return R12DS_BAD_HEADER;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e022      	b.n	8000c24 <r9ds_getChannels+0x254>
			}
			if (device->buffer[24] != R12DS_FOOTERBYTE)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <r9ds_getChannels+0x21c>
			{
#if R12DS_DEBUG
				//printf("bad footer \n");
#endif
				return R12DS_BAD_FOOTER;
 8000be8:	2302      	movs	r3, #2
 8000bea:	e01b      	b.n	8000c24 <r9ds_getChannels+0x254>
			}
			if (((device->buffer[23] >> 3) & 1))
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000bf2:	08db      	lsrs	r3, r3, #3
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <r9ds_getChannels+0x232>
			{
#if R12DS_DEBUG
				//printf("FAILSAFE \n");
#endif
				return R12DS_FAILSAFE_ACTIVATED;
 8000bfe:	2304      	movs	r3, #4
 8000c00:	e010      	b.n	8000c24 <r9ds_getChannels+0x254>
			}
			if (((device->buffer[23] >> 2) & 1))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000c08:	089b      	lsrs	r3, r3, #2
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d006      	beq.n	8000c22 <r9ds_getChannels+0x252>
			{
#if R12DS_DEBUG
				//printf("frame lost \n");
#endif
				return R12DS_FRAME_LOST;
 8000c14:	2303      	movs	r3, #3
 8000c16:	e005      	b.n	8000c24 <r9ds_getChannels+0x254>
		}
	}
	else
	{
#if R12DS_DEBUG
		printf("timeout \n");
 8000c18:	480e      	ldr	r0, [pc, #56]	; (8000c54 <r9ds_getChannels+0x284>)
 8000c1a:	f009 fed7 	bl	800a9cc <puts>
#endif
		return R12DS_RX_TIMEOUT;
 8000c1e:	2305      	movs	r3, #5
 8000c20:	e000      	b.n	8000c24 <r9ds_getChannels+0x254>
	}
	return R12DS_OK;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	0800e288 	.word	0x0800e288
 8000c30:	0800e294 	.word	0x0800e294
 8000c34:	0800e2a0 	.word	0x0800e2a0
 8000c38:	0800e2ac 	.word	0x0800e2ac
 8000c3c:	0800e2b8 	.word	0x0800e2b8
 8000c40:	0800e2c4 	.word	0x0800e2c4
 8000c44:	0800e2d0 	.word	0x0800e2d0
 8000c48:	0800e2dc 	.word	0x0800e2dc
 8000c4c:	0800e2e8 	.word	0x0800e2e8
 8000c50:	0800e2f4 	.word	0x0800e2f4
 8000c54:	0800e304 	.word	0x0800e304

08000c58 <r9ds_readData>:




bool r9ds_readData(r9ds_t *device)//
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	//block the use of the uart 

	memset(device->buffer_rf, 0, 26);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3325      	adds	r3, #37	; 0x25
 8000c64:	221a      	movs	r2, #26
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f008 ff19 	bl	8009aa0 <memset>
	osMutexAcquire(*device->mutex_uart_rx, osWaitForever);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f005 f9ff 	bl	800607c <osMutexAcquire>
	//block the semaphore until the actual block of sbus data is received, 
	//the idle interruption of uart will free the semaphore for the nextacquisition.
	osSemaphoreAcquire(*device->semaphore_uartIdle, (TickType_t)30* portTICK_PERIOD_MS);// 30->10
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	211e      	movs	r1, #30
 8000c86:	4618      	mov	r0, r3
 8000c88:	f005 fb42 	bl	8006310 <osSemaphoreAcquire>
	bool status;
	//blocks the semaphore until the process of reading is the full sbus is completed
	//if can acquire it means that something happen to the connection 
	if (osSemaphoreAcquire(*device->semaphore_uartIdle, (TickType_t)30* portTICK_PERIOD_MS) == osOK)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	211e      	movs	r1, #30
 8000c94:	4618      	mov	r0, r3
 8000c96:	f005 fb3b 	bl	8006310 <osSemaphoreAcquire>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d12a      	bne.n	8000cf6 <r9ds_readData+0x9e>
	{
		
		status = HAL_UART_Receive_DMA(device->huart_r9ds,device->buffer_rf, 26) == HAL_OK ? 1 : 0;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6818      	ldr	r0, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3325      	adds	r3, #37	; 0x25
 8000ca8:	221a      	movs	r2, #26
 8000caa:	4619      	mov	r1, r3
 8000cac:	f003 fcec 	bl	8004688 <HAL_UART_Receive_DMA>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	bf0c      	ite	eq
 8000cb6:	2301      	moveq	r3, #1
 8000cb8:	2300      	movne	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]

		//checks that the semaphore really was release by the idle interruption
		if (osSemaphoreAcquire(*device->semaphore_uartIdle, (TickType_t)30* portTICK_PERIOD_MS) != osOK || status == false)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	211e      	movs	r1, #30
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f005 fb23 	bl	8006310 <osSemaphoreAcquire>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d105      	bne.n	8000cdc <r9ds_readData+0x84>
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	f083 0301 	eor.w	r3, r3, #1
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <r9ds_readData+0x88>
		{
			status = false;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]
		}
		HAL_UART_DMAStop(device->huart_r9ds);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 fd1d 	bl	8004724 <HAL_UART_DMAStop>
#if R12DS_DEBUG
		printf("R: %s \n",device->buffer_rf);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3325      	adds	r3, #37	; 0x25
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4809      	ldr	r0, [pc, #36]	; (8000d18 <r9ds_readData+0xc0>)
 8000cf2:	f009 fdcf 	bl	800a894 <iprintf>
#endif
	}
	//release the semaphore for the next acquisition
	osSemaphoreRelease(*device->semaphore_uartIdle);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f005 fb6d 	bl	80063dc <osSemaphoreRelease>
	//release the uart interface
	osMutexRelease(*device->mutex_uart_rx);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f005 fa15 	bl	8006138 <osMutexRelease>
	return status;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	0800e310 	.word	0x0800e310

08000d1c <updateCallback>:


void updateCallback(r9ds_t* device)
    {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0ac      	sub	sp, #176	; 0xb0
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
        data_t data_rec;
        data_t data_;

        data_rec.onOff.value = convertSwitch(device->channels[CH_ONOFF]);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 f937 	bl	8000f9c <convertSwitch>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	663b      	str	r3, [r7, #96]	; 0x60
        data_rec.onOff.change = (data_.onOff.value != data_rec.onOff.value) ? 1 : 0;
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d36:	429a      	cmp	r2, r3
 8000d38:	bf14      	ite	ne
 8000d3a:	2301      	movne	r3, #1
 8000d3c:	2300      	moveq	r3, #0
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        data_rec.brake.value = convertSwitch(device->channels[CH_BRAKE]);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 f927 	bl	8000f9c <convertSwitch>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	66bb      	str	r3, [r7, #104]	; 0x68
        data_rec.brake.change = (data_.brake.value != data_rec.brake.value) ? 1 : 0;
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d56:	429a      	cmp	r2, r3
 8000d58:	bf14      	ite	ne
 8000d5a:	2301      	movne	r3, #1
 8000d5c:	2300      	moveq	r3, #0
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

        data_rec.elecValOnOff.value = convertSwitch(device->channels[CH_ELECVAL_ONOFF]);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f917 	bl	8000f9c <convertSwitch>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	673b      	str	r3, [r7, #112]	; 0x70
        data_rec.elecValOnOff.change=  (data_.elecValOnOff.value != data_rec.elecValOnOff.value) ? 1 : 0;
 8000d72:	6a3a      	ldr	r2, [r7, #32]
 8000d74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d76:	429a      	cmp	r2, r3
 8000d78:	bf14      	ite	ne
 8000d7a:	2301      	movne	r3, #1
 8000d7c:	2300      	moveq	r3, #0
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

        data_rec.brushesOnOff.value = convertSwitch(device->channels[CH_BRU_ONOFF]);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 f907 	bl	8000f9c <convertSwitch>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	67bb      	str	r3, [r7, #120]	; 0x78
        data_rec.brushesOnOff.change = (data_.brushesOnOff.value != data_rec.brushesOnOff.value) ? 1 : 0;
 8000d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d96:	429a      	cmp	r2, r3
 8000d98:	bf14      	ite	ne
 8000d9a:	2301      	movne	r3, #1
 8000d9c:	2300      	moveq	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

        data_rec.elecVal.value =  convert3Switch(device->channels[CH_ELECVAL]); //data_rec.elecValOnOff.value ? convert3Switch(device->channels[CH_ELECVAL]) : 0;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 f929 	bl	8001000 <convert3Switch>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        data_rec.elecVal.change = (data_.elecVal.value != data_rec.elecVal.value) ? 1 : 0;
 8000db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000db6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	bf14      	ite	ne
 8000dbe:	2301      	movne	r3, #1
 8000dc0:	2300      	moveq	r3, #0
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

        int brushes = convert3Switch(device->channels[CH_BRU]);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 f917 	bl	8001000 <convert3Switch>
 8000dd2:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

        data_rec.brush.value=brushes;
 8000dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000dda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        data_rec.brush.value= (data_.brush.value != data_rec.brush.value) ? 1 : 0;
 8000dde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000de4:	429a      	cmp	r2, r3
 8000de6:	bf14      	ite	ne
 8000de8:	2301      	movne	r3, #1
 8000dea:	2300      	moveq	r3, #0
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        data_rec.frontBrushSpeed.value = ((brushes == 1 ||
 8000df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d003      	beq.n	8000e02 <updateCallback+0xe6>
 8000dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d118      	bne.n	8000e34 <updateCallback+0x118>
                                     brushes == 2) &&
                                    data_rec.brushesOnOff.value)
 8000e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
                                     brushes == 2) &&
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d015      	beq.n	8000e34 <updateCallback+0x118>
                                       ? convertKnob(device->channels[CH_BRU0_VEL],
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e0c:	4a60      	ldr	r2, [pc, #384]	; (8000f90 <updateCallback+0x274>)
 8000e0e:	edd2 7a04 	vldr	s15, [r2, #16]
 8000e12:	4a5f      	ldr	r2, [pc, #380]	; (8000f90 <updateCallback+0x274>)
 8000e14:	ed92 7a05 	vldr	s14, [r2, #20]
 8000e18:	eef0 0a47 	vmov.f32	s1, s14
 8000e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f931 	bl	8001088 <convertKnob>
 8000e26:	eef0 7a40 	vmov.f32	s15, s0
        data_rec.frontBrushSpeed.value = ((brushes == 1 ||
 8000e2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e2e:	ee17 3a90 	vmov	r3, s15
 8000e32:	e000      	b.n	8000e36 <updateCallback+0x11a>
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                                                     rf_.max_speed_brush, rf_.min_speed_brush)
                                       : 0.0;
                                       
        data_rec.frontBrushSpeed.change = (data_.frontBrushSpeed.value != data_rec.frontBrushSpeed.value) ? 1 : 0;
 8000e3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e40:	429a      	cmp	r2, r3
 8000e42:	bf14      	ite	ne
 8000e44:	2301      	movne	r3, #1
 8000e46:	2300      	moveq	r3, #0
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

        data_rec.backBrushSpeed.value = ((brushes == 3 ||
 8000e4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d003      	beq.n	8000e5e <updateCallback+0x142>
 8000e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d118      	bne.n	8000e90 <updateCallback+0x174>
                                    brushes == 2) &&
                                   data_rec.brushesOnOff.value)
 8000e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
                                    brushes == 2) &&
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d015      	beq.n	8000e90 <updateCallback+0x174>
                                      ? convertKnob(device->channels[CH_BRU1_VEL],
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e68:	4a49      	ldr	r2, [pc, #292]	; (8000f90 <updateCallback+0x274>)
 8000e6a:	edd2 7a04 	vldr	s15, [r2, #16]
 8000e6e:	4a48      	ldr	r2, [pc, #288]	; (8000f90 <updateCallback+0x274>)
 8000e70:	ed92 7a05 	vldr	s14, [r2, #20]
 8000e74:	eef0 0a47 	vmov.f32	s1, s14
 8000e78:	eeb0 0a67 	vmov.f32	s0, s15
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 f903 	bl	8001088 <convertKnob>
 8000e82:	eef0 7a40 	vmov.f32	s15, s0
        data_rec.backBrushSpeed.value = ((brushes == 3 ||
 8000e86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e8a:	ee17 3a90 	vmov	r3, s15
 8000e8e:	e000      	b.n	8000e92 <updateCallback+0x176>
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                                                    rf_.max_speed_brush, rf_.min_speed_brush)
                                      : 0.0;
        data_rec.backBrushSpeed.change = (data_.backBrushSpeed.value != data_rec.backBrushSpeed.value) ? 1 : 0;
 8000e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	bf14      	ite	ne
 8000ea0:	2301      	movne	r3, #1
 8000ea2:	2300      	moveq	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

        data_rec.robotLinearVelocity.value = convertKnob(device->channels[CH_LIN_VEL], rf_.min_speed_linear, rf_.max_speed_linear);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a38      	ldr	r2, [pc, #224]	; (8000f90 <updateCallback+0x274>)
 8000eb0:	edd2 7a01 	vldr	s15, [r2, #4]
 8000eb4:	4a36      	ldr	r2, [pc, #216]	; (8000f90 <updateCallback+0x274>)
 8000eb6:	ed92 7a00 	vldr	s14, [r2]
 8000eba:	eef0 0a47 	vmov.f32	s1, s14
 8000ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f8e0 	bl	8001088 <convertKnob>
 8000ec8:	eef0 7a40 	vmov.f32	s15, s0
 8000ecc:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
        data_rec.robotLinearVelocity.change = (data_.robotLinearVelocity.value != data_rec.robotLinearVelocity.value) ? 1 : 0;
 8000ed0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000ed4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8000ed8:	eeb4 7a67 	vcmp.f32	s14, s15
 8000edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee0:	bf14      	ite	ne
 8000ee2:	2301      	movne	r3, #1
 8000ee4:	2300      	moveq	r3, #0
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
        if ( data_rec.robotLinearVelocity.value > 1 ){
 8000eec:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8000ef0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ef4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000efc:	dd03      	ble.n	8000f06 <updateCallback+0x1ea>
        	data_rec.robotLinearVelocity.value=1;
 8000efe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        }
        device->control= data_rec.robotLinearVelocity.value ;
 8000f06:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	669a      	str	r2, [r3, #104]	; 0x68
        printf(" value_lineal: %f\n",device->control);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8000f14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f18:	ec53 2b17 	vmov	r2, r3, d7
 8000f1c:	481d      	ldr	r0, [pc, #116]	; (8000f94 <updateCallback+0x278>)
 8000f1e:	f009 fcb9 	bl	800a894 <iprintf>

        data_rec.robotAngularVelocity.value = convertKnob(device->channels[CH_ANG_VEL],rf_.min_speed_angular, rf_.max_speed_angular);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	4a1a      	ldr	r2, [pc, #104]	; (8000f90 <updateCallback+0x274>)
 8000f28:	edd2 7a03 	vldr	s15, [r2, #12]
 8000f2c:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <updateCallback+0x274>)
 8000f2e:	ed92 7a02 	vldr	s14, [r2, #8]
 8000f32:	eef0 0a47 	vmov.f32	s1, s14
 8000f36:	eeb0 0a67 	vmov.f32	s0, s15
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f8a4 	bl	8001088 <convertKnob>
 8000f40:	eef0 7a40 	vmov.f32	s15, s0
 8000f44:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
        data_rec.robotAngularVelocity.change = (data_.robotAngularVelocity.value != data_rec.robotAngularVelocity.value) ? 1 : 0;
 8000f48:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000f4c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8000f50:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f58:	bf14      	ite	ne
 8000f5a:	2301      	movne	r3, #1
 8000f5c:	2300      	moveq	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4

        device->control_w= - data_rec.robotAngularVelocity.value ;
 8000f64:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8000f68:	eef1 7a67 	vneg.f32	s15, s15
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
        printf(" value_angular: %f\n",device->control_w);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8000f78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f7c:	ec53 2b17 	vmov	r2, r3, d7
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <updateCallback+0x27c>)
 8000f82:	f009 fc87 	bl	800a894 <iprintf>
        //data_ = data_rec;

        //callback_rf_();
        return data_rec;
 8000f86:	bf00      	nop
    }
 8000f88:	37b0      	adds	r7, #176	; 0xb0
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000000 	.word	0x20000000
 8000f94:	0800e318 	.word	0x0800e318
 8000f98:	0800e32c 	.word	0x0800e32c

08000f9c <convertSwitch>:

int convertSwitch(int value)
    {   
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
        //
		if (value < rf_.upper_limit_channels + rf_.threshold && value > rf_.upper_limit_channels - rf_.threshold)
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <convertSwitch+0x60>)
 8000fa6:	699a      	ldr	r2, [r3, #24]
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <convertSwitch+0x60>)
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	4413      	add	r3, r2
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	da09      	bge.n	8000fc8 <convertSwitch+0x2c>
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <convertSwitch+0x60>)
 8000fb6:	699a      	ldr	r2, [r3, #24]
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <convertSwitch+0x60>)
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	dd01      	ble.n	8000fc8 <convertSwitch+0x2c>
            return 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e013      	b.n	8000ff0 <convertSwitch+0x54>
        if (value < rf_.lower_limit_channels + rf_.threshold && value > rf_.lower_limit_channels - rf_.threshold)
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <convertSwitch+0x60>)
 8000fca:	69da      	ldr	r2, [r3, #28]
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <convertSwitch+0x60>)
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	4413      	add	r3, r2
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	da09      	bge.n	8000fec <convertSwitch+0x50>
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <convertSwitch+0x60>)
 8000fda:	69da      	ldr	r2, [r3, #28]
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <convertSwitch+0x60>)
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	dd01      	ble.n	8000fec <convertSwitch+0x50>
            return 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e001      	b.n	8000ff0 <convertSwitch+0x54>
        return -1;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
    }
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	20000000 	.word	0x20000000

08001000 <convert3Switch>:
int convert3Switch(int value)
    {
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
        if (value < rf_.zero_channels + rf_.threshold && value > rf_.zero_channels - rf_.threshold)
 8001008:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <convert3Switch+0x84>)
 800100a:	6a1a      	ldr	r2, [r3, #32]
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <convert3Switch+0x84>)
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	4413      	add	r3, r2
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	da09      	bge.n	800102c <convert3Switch+0x2c>
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <convert3Switch+0x84>)
 800101a:	6a1a      	ldr	r2, [r3, #32]
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <convert3Switch+0x84>)
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	dd01      	ble.n	800102c <convert3Switch+0x2c>

            return 2;
 8001028:	2302      	movs	r3, #2
 800102a:	e025      	b.n	8001078 <convert3Switch+0x78>

        if (value < rf_.upper_limit_channels + rf_.threshold && value > rf_.upper_limit_channels - rf_.threshold)
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <convert3Switch+0x84>)
 800102e:	699a      	ldr	r2, [r3, #24]
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <convert3Switch+0x84>)
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	4413      	add	r3, r2
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	429a      	cmp	r2, r3
 800103a:	da09      	bge.n	8001050 <convert3Switch+0x50>
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <convert3Switch+0x84>)
 800103e:	699a      	ldr	r2, [r3, #24]
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <convert3Switch+0x84>)
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	429a      	cmp	r2, r3
 800104a:	dd01      	ble.n	8001050 <convert3Switch+0x50>

            return 1;
 800104c:	2301      	movs	r3, #1
 800104e:	e013      	b.n	8001078 <convert3Switch+0x78>

        if (value < rf_.lower_limit_channels + rf_.threshold && value > rf_.lower_limit_channels - rf_.threshold)
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <convert3Switch+0x84>)
 8001052:	69da      	ldr	r2, [r3, #28]
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <convert3Switch+0x84>)
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	4413      	add	r3, r2
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	da09      	bge.n	8001074 <convert3Switch+0x74>
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <convert3Switch+0x84>)
 8001062:	69da      	ldr	r2, [r3, #28]
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <convert3Switch+0x84>)
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	dd01      	ble.n	8001074 <convert3Switch+0x74>

            return 3;
 8001070:	2303      	movs	r3, #3
 8001072:	e001      	b.n	8001078 <convert3Switch+0x78>
        return -1;
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
    }
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	20000000 	.word	0x20000000

08001088 <convertKnob>:

float convertKnob(int value, float upper_lim, float lower_lim)
    {
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	ed87 0a02 	vstr	s0, [r7, #8]
 8001094:	edc7 0a01 	vstr	s1, [r7, #4]
        if (value < rf_.zero_channels + 20 && value > rf_.zero_channels - 20)
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <convertKnob+0xac>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	3313      	adds	r3, #19
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	dc08      	bgt.n	80010b6 <convertKnob+0x2e>
 80010a4:	4b23      	ldr	r3, [pc, #140]	; (8001134 <convertKnob+0xac>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	3b13      	subs	r3, #19
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	db02      	blt.n	80010b6 <convertKnob+0x2e>
            return 0;
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	e034      	b.n	8001120 <convertKnob+0x98>


        else if (value > rf_.lower_limit_channels - 50 && value < rf_.upper_limit_channels + 50)
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <convertKnob+0xac>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	3b31      	subs	r3, #49	; 0x31
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	429a      	cmp	r2, r3
 80010c0:	db2c      	blt.n	800111c <convertKnob+0x94>
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <convertKnob+0xac>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	3331      	adds	r3, #49	; 0x31
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	dc26      	bgt.n	800111c <convertKnob+0x94>
        {
            float m = (float)(upper_lim-lower_lim) / (float)(rf_.upper_limit_channels - rf_.lower_limit_channels);
 80010ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80010d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <convertKnob+0xac>)
 80010dc:	699a      	ldr	r2, [r3, #24]
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <convertKnob+0xac>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010f0:	edc7 7a05 	vstr	s15, [r7, #20]
            float ca=m*(float)(value - rf_.lower_limit_channels) + lower_lim;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <convertKnob+0xac>)
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001104:	edd7 7a05 	vldr	s15, [r7, #20]
 8001108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001114:	edc7 7a04 	vstr	s15, [r7, #16]
            //printf("valor = %f\n",ca);
            return ca;
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	e001      	b.n	8001120 <convertKnob+0x98>
        }
        return 0;
 800111c:	f04f 0300 	mov.w	r3, #0
 8001120:	ee07 3a90 	vmov	s15, r3
    }
 8001124:	eeb0 0a67 	vmov.f32	s0, s15
 8001128:	371c      	adds	r7, #28
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000000 	.word	0x20000000

08001138 <write_keya>:
    }      
    return keya_driver_ok ;  
}

void write_keya(keya_t *device,uint8_t *data, int len)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]

	osMutexAcquire(*device->uartTXsem,osWaitForever);// try to acquire mutex
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f04f 31ff 	mov.w	r1, #4294967295
 800114e:	4618      	mov	r0, r3
 8001150:	f004 ff94 	bl	800607c <osMutexAcquire>
	HAL_UART_Transmit_IT(device->huart, data, len);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	b292      	uxth	r2, r2
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	4618      	mov	r0, r3
 8001160:	f003 fa24 	bl	80045ac <HAL_UART_Transmit_IT>
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <cmddriver>:




double cmddriver (cal_variable_t *device, double Vrl )
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	ed87 0b00 	vstr	d0, [r7]
  device->cmd[0]=device->Vrl[0];device->cmd[1]=- device->Vrl[1];
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800117e:	68f9      	ldr	r1, [r7, #12]
 8001180:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800118a:	eeb1 7b47 	vneg.f64	d7, d7
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	ed83 7b06 	vstr	d7, [r3, #24]
  device->driver[0]=0;device->driver[1]=0;
 8001194:	68f9      	ldr	r1, [r7, #12]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	e9c1 2300 	strd	r2, r3, [r1]
 80011a2:	68f9      	ldr	r1, [r7, #12]
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	f04f 0300 	mov.w	r3, #0
 80011ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (device->cmd[0] !=0 && device->cmd[1] !=0){
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	ed93 7b04 	vldr	d7, [r3, #16]
 80011b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80011ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011be:	d049      	beq.n	8001254 <cmddriver+0xe8>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	ed93 7b06 	vldr	d7, [r3, #24]
 80011c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80011ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ce:	d041      	beq.n	8001254 <cmddriver+0xe8>
	  for (size_t i = 0; i < 2; i++){
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	e03b      	b.n	800124e <cmddriver+0xe2>
	     device->driver[i]=round((lim.max_driver/lim.max_vel)*( fabs(device->cmd[i])));
 80011d6:	4b24      	ldr	r3, [pc, #144]	; (8001268 <cmddriver+0xfc>)
 80011d8:	ed93 5b02 	vldr	d5, [r3, #8]
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <cmddriver+0xfc>)
 80011de:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80011e2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3302      	adds	r3, #2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4413      	add	r3, r2
 80011f0:	ed93 7b00 	vldr	d7, [r3]
 80011f4:	eeb0 7bc7 	vabs.f64	d7, d7
 80011f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80011fc:	eeb0 0b47 	vmov.f64	d0, d7
 8001200:	f00c fff0 	bl	800e1e4 <round>
 8001204:	eeb0 7b40 	vmov.f64	d7, d0
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	4413      	add	r3, r2
 8001210:	ed83 7b00 	vstr	d7, [r3]
	     if (device->cmd[i] < 0)
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3302      	adds	r3, #2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4413      	add	r3, r2
 800121e:	ed93 7b00 	vldr	d7, [r3]
 8001222:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122a:	d50d      	bpl.n	8001248 <cmddriver+0xdc>
	     {
	       device->driver[i]= - device->driver[i];
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	4413      	add	r3, r2
 8001234:	ed93 7b00 	vldr	d7, [r3]
 8001238:	eeb1 7b47 	vneg.f64	d7, d7
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4413      	add	r3, r2
 8001244:	ed83 7b00 	vstr	d7, [r3]
	  for (size_t i = 0; i < 2; i++){
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	3301      	adds	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d9c0      	bls.n	80011d6 <cmddriver+0x6a>
	     }
	   }
  }
  //printf("comandos = %f  %f\n",device->driver[0],device->driver[1]);
  return device->driver[0];//device->driver[1];
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	ec43 2b17 	vmov	d7, r2, r3
}
 800125e:	eeb0 0b47 	vmov.f64	d0, d7
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000028 	.word	0x20000028
 800126c:	00000000 	.word	0x00000000

08001270 <controlvel>:



double controlvel(cal_variable_t*device, float velocidad_lineal,float velocidad_angular)

{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	ed87 0a02 	vstr	s0, [r7, #8]
 800127c:	edc7 0a01 	vstr	s1, [r7, #4]
    // vt=vr+vl /2 promedio velocidad total
	// si vr>vl gira en el sentido del menor vl
    // si Wr = -Wl sin avance;
	 //W= (Vr - Vl )/l   l = separation;
	velocidad_lineal=velocidad_lineal*lim.max_speed;
 8001280:	edd7 7a02 	vldr	s15, [r7, #8]
 8001284:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <controlvel+0xb0>)
 800128a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800128e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001292:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001296:	edc7 7a02 	vstr	s15, [r7, #8]
	device->Vrl[0]=velocidad_lineal - ((velocidad_angular*separation)/2);
 800129a:	edd7 7a02 	vldr	s15, [r7, #8]
 800129e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80012a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012aa:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8001318 <controlvel+0xa8>
 80012ae:	ee27 5b05 	vmul.f64	d5, d7, d5
 80012b2:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80012b6:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80012ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	device->Vrl[1]=velocidad_lineal +((velocidad_angular*separation)/2);
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80012cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012d4:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001318 <controlvel+0xa8>
 80012d8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80012dc:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80012e0:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80012e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
    //printf("velocidad %f %f\n",device->Vrl[0],device->Vrl[1]);
    cmddriver(device,device->Vrl[0]);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80012f4:	eeb0 0b47 	vmov.f64	d0, d7
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f7ff ff37 	bl	800116c <cmddriver>
    return device->W[0];
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001304:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
}
 8001308:	eeb0 0b47 	vmov.f64	d0, d7
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	f3af 8000 	nop.w
 8001318:	8d4fdf3b 	.word	0x8d4fdf3b
 800131c:	3fca6e97 	.word	0x3fca6e97
 8001320:	20000028 	.word	0x20000028

08001324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001328:	f000 fdc3 	bl	8001eb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132c:	f000 f89e 	bl	800146c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001330:	f000 f9a4 	bl	800167c <MX_GPIO_Init>
  MX_DMA_Init();
 8001334:	f000 f970 	bl	8001618 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001338:	f000 f906 	bl	8001548 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800133c:	f000 f93c 	bl	80015b8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001340:	4b31      	ldr	r3, [pc, #196]	; (8001408 <main+0xe4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4b30      	ldr	r3, [pc, #192]	; (8001408 <main+0xe4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0210 	orr.w	r2, r2, #16
 800134e:	601a      	str	r2, [r3, #0]
  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8001350:	4b2e      	ldr	r3, [pc, #184]	; (800140c <main+0xe8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <main+0xe8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0210 	orr.w	r2, r2, #16
 800135e:	601a      	str	r2, [r3, #0]
  //__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001360:	f004 fcb4 	bl	8005ccc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uartTXmutex */
  uartTXmutexHandle = osMutexNew(&uartTXmutex_attributes);
 8001364:	482a      	ldr	r0, [pc, #168]	; (8001410 <main+0xec>)
 8001366:	f004 fdef 	bl	8005f48 <osMutexNew>
 800136a:	4603      	mov	r3, r0
 800136c:	4a29      	ldr	r2, [pc, #164]	; (8001414 <main+0xf0>)
 800136e:	6013      	str	r3, [r2, #0]

  /* creation of uartRXmutex */
  uartRXmutexHandle = osMutexNew(&uartRXmutex_attributes);
 8001370:	4829      	ldr	r0, [pc, #164]	; (8001418 <main+0xf4>)
 8001372:	f004 fde9 	bl	8005f48 <osMutexNew>
 8001376:	4603      	mov	r3, r0
 8001378:	4a28      	ldr	r2, [pc, #160]	; (800141c <main+0xf8>)
 800137a:	6013      	str	r3, [r2, #0]

  /* creation of buff_TXmutex */
  buff_TXmutexHandle = osMutexNew(&buff_TXmutex_attributes);
 800137c:	4828      	ldr	r0, [pc, #160]	; (8001420 <main+0xfc>)
 800137e:	f004 fde3 	bl	8005f48 <osMutexNew>
 8001382:	4603      	mov	r3, r0
 8001384:	4a27      	ldr	r2, [pc, #156]	; (8001424 <main+0x100>)
 8001386:	6013      	str	r3, [r2, #0]

  /* creation of buff_RXmutex */
  buff_RXmutexHandle = osMutexNew(&buff_RXmutex_attributes);
 8001388:	4827      	ldr	r0, [pc, #156]	; (8001428 <main+0x104>)
 800138a:	f004 fddd 	bl	8005f48 <osMutexNew>
 800138e:	4603      	mov	r3, r0
 8001390:	4a26      	ldr	r2, [pc, #152]	; (800142c <main+0x108>)
 8001392:	6013      	str	r3, [r2, #0]

  /* creation of rf_mutex_uart_rx */
  rf_mutex_uart_rxHandle = osMutexNew(&rf_mutex_uart_rx_attributes);
 8001394:	4826      	ldr	r0, [pc, #152]	; (8001430 <main+0x10c>)
 8001396:	f004 fdd7 	bl	8005f48 <osMutexNew>
 800139a:	4603      	mov	r3, r0
 800139c:	4a25      	ldr	r2, [pc, #148]	; (8001434 <main+0x110>)
 800139e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartTXsemIT */
  uartTXsemITHandle = osSemaphoreNew(1, 1, &uartTXsemIT_attributes);
 80013a0:	4a25      	ldr	r2, [pc, #148]	; (8001438 <main+0x114>)
 80013a2:	2101      	movs	r1, #1
 80013a4:	2001      	movs	r0, #1
 80013a6:	f004 ff17 	bl	80061d8 <osSemaphoreNew>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a23      	ldr	r2, [pc, #140]	; (800143c <main+0x118>)
 80013ae:	6013      	str	r3, [r2, #0]

  /* creation of uartRXsemIT */
  uartRXsemITHandle = osSemaphoreNew(1, 1, &uartRXsemIT_attributes);
 80013b0:	4a23      	ldr	r2, [pc, #140]	; (8001440 <main+0x11c>)
 80013b2:	2101      	movs	r1, #1
 80013b4:	2001      	movs	r0, #1
 80013b6:	f004 ff0f 	bl	80061d8 <osSemaphoreNew>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a21      	ldr	r2, [pc, #132]	; (8001444 <main+0x120>)
 80013be:	6013      	str	r3, [r2, #0]

  /* creation of buff_TXsemIT */
  buff_TXsemITHandle = osSemaphoreNew(1, 1, &buff_TXsemIT_attributes);
 80013c0:	4a21      	ldr	r2, [pc, #132]	; (8001448 <main+0x124>)
 80013c2:	2101      	movs	r1, #1
 80013c4:	2001      	movs	r0, #1
 80013c6:	f004 ff07 	bl	80061d8 <osSemaphoreNew>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a1f      	ldr	r2, [pc, #124]	; (800144c <main+0x128>)
 80013ce:	6013      	str	r3, [r2, #0]

  /* creation of buff_RXsemIT */
  buff_RXsemITHandle = osSemaphoreNew(1, 1, &buff_RXsemIT_attributes);
 80013d0:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <main+0x12c>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	2001      	movs	r0, #1
 80013d6:	f004 feff 	bl	80061d8 <osSemaphoreNew>
 80013da:	4603      	mov	r3, r0
 80013dc:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <main+0x130>)
 80013de:	6013      	str	r3, [r2, #0]

  /* creation of RF_RXsemIT */
  RF_RXsemITHandle = osSemaphoreNew(1, 1, &RF_RXsemIT_attributes);
 80013e0:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <main+0x134>)
 80013e2:	2101      	movs	r1, #1
 80013e4:	2001      	movs	r0, #1
 80013e6:	f004 fef7 	bl	80061d8 <osSemaphoreNew>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a1b      	ldr	r2, [pc, #108]	; (800145c <main+0x138>)
 80013ee:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013f0:	4a1b      	ldr	r2, [pc, #108]	; (8001460 <main+0x13c>)
 80013f2:	2100      	movs	r1, #0
 80013f4:	481b      	ldr	r0, [pc, #108]	; (8001464 <main+0x140>)
 80013f6:	f004 fcd3 	bl	8005da0 <osThreadNew>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a1a      	ldr	r2, [pc, #104]	; (8001468 <main+0x144>)
 80013fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001400:	f004 fc98 	bl	8005d34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001404:	e7fe      	b.n	8001404 <main+0xe0>
 8001406:	bf00      	nop
 8001408:	20004d90 	.word	0x20004d90
 800140c:	20004cfc 	.word	0x20004cfc
 8001410:	0800e430 	.word	0x0800e430
 8001414:	20004e24 	.word	0x20004e24
 8001418:	0800e440 	.word	0x0800e440
 800141c:	20004d8c 	.word	0x20004d8c
 8001420:	0800e450 	.word	0x0800e450
 8001424:	20004e28 	.word	0x20004e28
 8001428:	0800e460 	.word	0x0800e460
 800142c:	20004e14 	.word	0x20004e14
 8001430:	0800e470 	.word	0x0800e470
 8001434:	20004e20 	.word	0x20004e20
 8001438:	0800e480 	.word	0x0800e480
 800143c:	20004d88 	.word	0x20004d88
 8001440:	0800e490 	.word	0x0800e490
 8001444:	20004e2c 	.word	0x20004e2c
 8001448:	0800e4a0 	.word	0x0800e4a0
 800144c:	20004d80 	.word	0x20004d80
 8001450:	0800e4b0 	.word	0x0800e4b0
 8001454:	20004c34 	.word	0x20004c34
 8001458:	0800e4c0 	.word	0x0800e4c0
 800145c:	20004d84 	.word	0x20004d84
 8001460:	0800e40c 	.word	0x0800e40c
 8001464:	08001789 	.word	0x08001789
 8001468:	20004c38 	.word	0x20004c38

0800146c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b094      	sub	sp, #80	; 0x50
 8001470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	2234      	movs	r2, #52	; 0x34
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f008 fb10 	bl	8009aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001490:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <SystemClock_Config+0xd4>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a2a      	ldr	r2, [pc, #168]	; (8001540 <SystemClock_Config+0xd4>)
 8001496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <SystemClock_Config+0xd4>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <SystemClock_Config+0xd8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a25      	ldr	r2, [pc, #148]	; (8001544 <SystemClock_Config+0xd8>)
 80014ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b23      	ldr	r3, [pc, #140]	; (8001544 <SystemClock_Config+0xd8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c0:	2301      	movs	r3, #1
 80014c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ca:	2302      	movs	r3, #2
 80014cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014d4:	2304      	movs	r3, #4
 80014d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80014d8:	23d8      	movs	r3, #216	; 0xd8
 80014da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014dc:	2302      	movs	r3, #2
 80014de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014e0:	2302      	movs	r3, #2
 80014e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 fc25 	bl	8002d3c <HAL_RCC_OscConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80014f8:	f000 f9ee 	bl	80018d8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014fc:	f001 fbce 	bl	8002c9c <HAL_PWREx_EnableOverDrive>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001506:	f000 f9e7 	bl	80018d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150a:	230f      	movs	r3, #15
 800150c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150e:	2302      	movs	r3, #2
 8001510:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001516:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800151a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800151c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001520:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	2107      	movs	r1, #7
 8001528:	4618      	mov	r0, r3
 800152a:	f001 feb5 	bl	8003298 <HAL_RCC_ClockConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001534:	f000 f9d0 	bl	80018d8 <Error_Handler>
  }
}
 8001538:	bf00      	nop
 800153a:	3750      	adds	r7, #80	; 0x50
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800
 8001544:	40007000 	.word	0x40007000

08001548 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <MX_USART3_UART_Init+0x64>)
 800154e:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <MX_USART3_UART_Init+0x68>)
 8001550:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <MX_USART3_UART_Init+0x64>)
 8001554:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <MX_USART3_UART_Init+0x6c>)
 8001556:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_USART3_UART_Init+0x64>)
 800155a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800155e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <MX_USART3_UART_Init+0x64>)
 8001562:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001566:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8001568:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_USART3_UART_Init+0x64>)
 800156a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800156e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_USART3_UART_Init+0x64>)
 8001572:	2204      	movs	r2, #4
 8001574:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <MX_USART3_UART_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART3_UART_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <MX_USART3_UART_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_USART3_UART_Init+0x64>)
 800158a:	2202      	movs	r2, #2
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <MX_USART3_UART_Init+0x64>)
 8001590:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001594:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_USART3_UART_Init+0x64>)
 8001598:	f002 ffba 	bl	8004510 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 80015a2:	f000 f999 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20004cfc 	.word	0x20004cfc
 80015b0:	40004800 	.word	0x40004800
 80015b4:	000186a0 	.word	0x000186a0

080015b8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <MX_USART6_UART_Init+0x58>)
 80015be:	4a15      	ldr	r2, [pc, #84]	; (8001614 <MX_USART6_UART_Init+0x5c>)
 80015c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <MX_USART6_UART_Init+0x58>)
 80015c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_USART6_UART_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <MX_USART6_UART_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MX_USART6_UART_Init+0x58>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <MX_USART6_UART_Init+0x58>)
 80015de:	220c      	movs	r2, #12
 80015e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <MX_USART6_UART_Init+0x58>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_USART6_UART_Init+0x58>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <MX_USART6_UART_Init+0x58>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <MX_USART6_UART_Init+0x58>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_USART6_UART_Init+0x58>)
 80015fc:	f002 ff88 	bl	8004510 <HAL_UART_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001606:	f000 f967 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20004d90 	.word	0x20004d90
 8001614:	40011400 	.word	0x40011400

08001618 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <MX_DMA_Init+0x60>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a15      	ldr	r2, [pc, #84]	; (8001678 <MX_DMA_Init+0x60>)
 8001624:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_DMA_Init+0x60>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <MX_DMA_Init+0x60>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <MX_DMA_Init+0x60>)
 800163c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <MX_DMA_Init+0x60>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2105      	movs	r1, #5
 8001652:	200c      	movs	r0, #12
 8001654:	f000 fd36 	bl	80020c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001658:	200c      	movs	r0, #12
 800165a:	f000 fd4f 	bl	80020fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2105      	movs	r1, #5
 8001662:	2039      	movs	r0, #57	; 0x39
 8001664:	f000 fd2e 	bl	80020c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001668:	2039      	movs	r0, #57	; 0x39
 800166a:	f000 fd47 	bl	80020fc <HAL_NVIC_EnableIRQ>

}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800

0800167c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <MX_GPIO_Init+0x5c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <MX_GPIO_Init+0x5c>)
 8001688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <MX_GPIO_Init+0x5c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <MX_GPIO_Init+0x5c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <MX_GPIO_Init+0x5c>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_GPIO_Init+0x5c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_GPIO_Init+0x5c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <MX_GPIO_Init+0x5c>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_GPIO_Init+0x5c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]

}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800

080016dc <USER_UART_IRQHandler>:

/* USER CODE BEGIN 4 */

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
    if(huart == &huart3)                                   //Determine whether it is serial port 1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <USER_UART_IRQHandler+0x38>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d10f      	bne.n	800170c <USER_UART_IRQHandler+0x30>
    {
        if(RESET != __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <USER_UART_IRQHandler+0x38>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	2b10      	cmp	r3, #16
 80016f8:	d108      	bne.n	800170c <USER_UART_IRQHandler+0x30>
        {
            __HAL_UART_CLEAR_IDLEFLAG(&huart3);                     //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <USER_UART_IRQHandler+0x38>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2210      	movs	r2, #16
 8001700:	621a      	str	r2, [r3, #32]
#if DEBUG_KEYA
            //printf("\r\nUART2 Idle IQR Detected\r\n");
#endif
            osSemaphoreRelease(RF_RXsemITHandle);
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <USER_UART_IRQHandler+0x3c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f004 fe68 	bl	80063dc <osSemaphoreRelease>
        }
    }
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20004cfc 	.word	0x20004cfc
 8001718:	20004d84 	.word	0x20004d84

0800171c <USER_UART_IRQHandler_1>:
}

*/

void USER_UART_IRQHandler_1(UART_HandleTypeDef *huart)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
    if(huart == &huart6)                                   //Determine whether it is serial port 1
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <USER_UART_IRQHandler_1+0x38>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d10f      	bne.n	800174c <USER_UART_IRQHandler_1+0x30>
    {
        if(RESET != __HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <USER_UART_IRQHandler_1+0x38>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b10      	cmp	r3, #16
 8001738:	d108      	bne.n	800174c <USER_UART_IRQHandler_1+0x30>
        {
            __HAL_UART_CLEAR_IDLEFLAG(&huart6);                     //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <USER_UART_IRQHandler_1+0x38>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2210      	movs	r2, #16
 8001740:	621a      	str	r2, [r3, #32]
#if DEBUG_KEYA
            //printf("\r\nUART2 Idle IQR Detected\r\n");
#endif
            osSemaphoreRelease(uartRXsemITHandle);
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <USER_UART_IRQHandler_1+0x3c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f004 fe48 	bl	80063dc <osSemaphoreRelease>
        }
    }
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20004d90 	.word	0x20004d90
 8001758:	20004e2c 	.word	0x20004e2c

0800175c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	 if(huart == &huart6)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_UART_TxCpltCallback+0x24>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d104      	bne.n	8001776 <HAL_UART_TxCpltCallback+0x1a>
	 {
		 osSemaphoreRelease(uartTXsemITHandle);
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <HAL_UART_TxCpltCallback+0x28>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f004 fe33 	bl	80063dc <osSemaphoreRelease>
	 }
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20004d90 	.word	0x20004d90
 8001784:	20004d88 	.word	0x20004d88

08001788 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b0d2      	sub	sp, #328	; 0x148
 800178c:	af00      	add	r7, sp, #0
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	uint8_t da[15];
	cal_variable_t  variable={.driver=0};
 8001792:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001796:	2260      	movs	r2, #96	; 0x60
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f008 f980 	bl	8009aa0 <memset>

	r9ds_t  r9ds ={.huart_r9ds=&huart3,.mutex_uart_rx=&rf_mutex_uart_rxHandle,.semaphore_uartIdle=&RF_RXsemITHandle ,.control=0,.control_w=0};//.hdma_usart_rx=&hdma_usart3_rx,
 80017a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017a4:	2274      	movs	r2, #116	; 0x74
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f008 f979 	bl	8009aa0 <memset>
 80017ae:	4b36      	ldr	r3, [pc, #216]	; (8001888 <StartDefaultTask+0x100>)
 80017b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017b2:	4b36      	ldr	r3, [pc, #216]	; (800188c <StartDefaultTask+0x104>)
 80017b4:	663b      	str	r3, [r7, #96]	; 0x60
 80017b6:	4b36      	ldr	r3, [pc, #216]	; (8001890 <StartDefaultTask+0x108>)
 80017b8:	667b      	str	r3, [r7, #100]	; 0x64
   */




	keya_t keya_driver ={.huart=&huart6, .uartRXmutex=&uartRXmutexHandle, .uartTXmutex=&uartTXmutexHandle,.uartRXsem=&uartRXsemITHandle,
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	4618      	mov	r0, r3
 80017c0:	2350      	movs	r3, #80	; 0x50
 80017c2:	461a      	mov	r2, r3
 80017c4:	2100      	movs	r1, #0
 80017c6:	f008 f96b 	bl	8009aa0 <memset>
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4a31      	ldr	r2, [pc, #196]	; (8001894 <StartDefaultTask+0x10c>)
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	4a30      	ldr	r2, [pc, #192]	; (8001898 <StartDefaultTask+0x110>)
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	4a2f      	ldr	r2, [pc, #188]	; (800189c <StartDefaultTask+0x114>)
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	4a2e      	ldr	r2, [pc, #184]	; (80018a0 <StartDefaultTask+0x118>)
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	4a2d      	ldr	r2, [pc, #180]	; (80018a4 <StartDefaultTask+0x11c>)
 80017f0:	611a      	str	r2, [r3, #16]
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	2232      	movs	r2, #50	; 0x32
 80017f8:	615a      	str	r2, [r3, #20]





	  osDelay(100);
 80017fa:	2064      	movs	r0, #100	; 0x64
 80017fc:	f004 fb76 	bl	8005eec <osDelay>

	  printf("\n");
 8001800:	200a      	movs	r0, #10
 8001802:	f009 f85f 	bl	800a8c4 <putchar>
      printf("prueba rf \n");
 8001806:	4828      	ldr	r0, [pc, #160]	; (80018a8 <StartDefaultTask+0x120>)
 8001808:	f009 f8e0 	bl	800a9cc <puts>
	  r9ds_getChannels(&r9ds);
 800180c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff f8dd 	bl	80009d0 <r9ds_getChannels>
	  updateCallback(&r9ds);
 8001816:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fa7e 	bl	8000d1c <updateCallback>
	  float velocidad_lineal=r9ds.control;
 8001820:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001824:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	  float velocidad_angular=r9ds.control_w;
 8001828:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800182c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	  controlvel(&variable,velocidad_lineal,velocidad_angular);
 8001830:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001834:	edd7 0a50 	vldr	s1, [r7, #320]	; 0x140
 8001838:	ed97 0a51 	vldr	s0, [r7, #324]	; 0x144
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fd17 	bl	8001270 <controlvel>

	  send_cmd[0] =variable.driver[0];send_cmd[1] =variable.driver[1];
 8001842:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8001846:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800184a:	ee17 2a90 	vmov	r2, s15
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <StartDefaultTask+0x124>)
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 8001856:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800185a:	ee17 2a90 	vmov	r2, s15
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <StartDefaultTask+0x124>)
 8001860:	605a      	str	r2, [r3, #4]
	  //printf("comandos = %d  %d\n",send_cmd[0],send_cmd[1]);
	  //printf("value_main : %f\n ",value_control);



	  sprintf(da,"!M %d %d",send_cmd[0],send_cmd[1]);
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <StartDefaultTask+0x124>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <StartDefaultTask+0x124>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800186e:	4910      	ldr	r1, [pc, #64]	; (80018b0 <StartDefaultTask+0x128>)
 8001870:	f009 f934 	bl	800aadc <siprintf>
	  //printf("%s\n",da);
	  //size_t len=strlen(da);
	  //HAL_UART_Transmit_IT(&huart6,da,len);

	  write_keya(&keya_driver,&da[0],15);
 8001874:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	220f      	movs	r2, #15
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fc5a 	bl	8001138 <write_keya>
  {
 8001884:	e7b9      	b.n	80017fa <StartDefaultTask+0x72>
 8001886:	bf00      	nop
 8001888:	20004cfc 	.word	0x20004cfc
 800188c:	20004d84 	.word	0x20004d84
 8001890:	20004e20 	.word	0x20004e20
 8001894:	20004d90 	.word	0x20004d90
 8001898:	20004e24 	.word	0x20004e24
 800189c:	20004d8c 	.word	0x20004d8c
 80018a0:	20004d88 	.word	0x20004d88
 80018a4:	20004e2c 	.word	0x20004e2c
 80018a8:	0800e3dc 	.word	0x0800e3dc
 80018ac:	20004e18 	.word	0x20004e18
 80018b0:	0800e3e8 	.word	0x0800e3e8

080018b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018c6:	f000 fb01 	bl	8001ecc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40010000 	.word	0x40010000

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <Error_Handler+0x8>
	...

080018e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a10      	ldr	r2, [pc, #64]	; (8001930 <HAL_MspInit+0x4c>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_MspInit+0x4c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_MspInit+0x4c>)
 8001908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_MspInit+0x4c>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	210f      	movs	r1, #15
 800191e:	f06f 0001 	mvn.w	r0, #1
 8001922:	f000 fbcf 	bl	80020c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800

08001934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0b0      	sub	sp, #192	; 0xc0
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	2290      	movs	r2, #144	; 0x90
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f008 f8a3 	bl	8009aa0 <memset>
  if(huart->Instance==USART3)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a79      	ldr	r2, [pc, #484]	; (8001b44 <HAL_UART_MspInit+0x210>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d173      	bne.n	8001a4c <HAL_UART_MspInit+0x118>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001968:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800196a:	2300      	movs	r3, #0
 800196c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	4618      	mov	r0, r3
 8001974:	f001 fec4 	bl	8003700 <HAL_RCCEx_PeriphCLKConfig>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800197e:	f7ff ffab 	bl	80018d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001982:	4b71      	ldr	r3, [pc, #452]	; (8001b48 <HAL_UART_MspInit+0x214>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a70      	ldr	r2, [pc, #448]	; (8001b48 <HAL_UART_MspInit+0x214>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b6e      	ldr	r3, [pc, #440]	; (8001b48 <HAL_UART_MspInit+0x214>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	4b6b      	ldr	r3, [pc, #428]	; (8001b48 <HAL_UART_MspInit+0x214>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a6a      	ldr	r2, [pc, #424]	; (8001b48 <HAL_UART_MspInit+0x214>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b68      	ldr	r3, [pc, #416]	; (8001b48 <HAL_UART_MspInit+0x214>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019cc:	2307      	movs	r3, #7
 80019ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019d6:	4619      	mov	r1, r3
 80019d8:	485c      	ldr	r0, [pc, #368]	; (8001b4c <HAL_UART_MspInit+0x218>)
 80019da:	f000 ffb3 	bl	8002944 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80019de:	4b5c      	ldr	r3, [pc, #368]	; (8001b50 <HAL_UART_MspInit+0x21c>)
 80019e0:	4a5c      	ldr	r2, [pc, #368]	; (8001b54 <HAL_UART_MspInit+0x220>)
 80019e2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80019e4:	4b5a      	ldr	r3, [pc, #360]	; (8001b50 <HAL_UART_MspInit+0x21c>)
 80019e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ea:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ec:	4b58      	ldr	r3, [pc, #352]	; (8001b50 <HAL_UART_MspInit+0x21c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f2:	4b57      	ldr	r3, [pc, #348]	; (8001b50 <HAL_UART_MspInit+0x21c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019f8:	4b55      	ldr	r3, [pc, #340]	; (8001b50 <HAL_UART_MspInit+0x21c>)
 80019fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019fe:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a00:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_UART_MspInit+0x21c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a06:	4b52      	ldr	r3, [pc, #328]	; (8001b50 <HAL_UART_MspInit+0x21c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001a0c:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <HAL_UART_MspInit+0x21c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a12:	4b4f      	ldr	r3, [pc, #316]	; (8001b50 <HAL_UART_MspInit+0x21c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a18:	4b4d      	ldr	r3, [pc, #308]	; (8001b50 <HAL_UART_MspInit+0x21c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a1e:	484c      	ldr	r0, [pc, #304]	; (8001b50 <HAL_UART_MspInit+0x21c>)
 8001a20:	f000 fb7a 	bl	8002118 <HAL_DMA_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001a2a:	f7ff ff55 	bl	80018d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a47      	ldr	r2, [pc, #284]	; (8001b50 <HAL_UART_MspInit+0x21c>)
 8001a32:	671a      	str	r2, [r3, #112]	; 0x70
 8001a34:	4a46      	ldr	r2, [pc, #280]	; (8001b50 <HAL_UART_MspInit+0x21c>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	2027      	movs	r0, #39	; 0x27
 8001a40:	f000 fb40 	bl	80020c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a44:	2027      	movs	r0, #39	; 0x27
 8001a46:	f000 fb59 	bl	80020fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a4a:	e076      	b.n	8001b3a <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART6)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a41      	ldr	r2, [pc, #260]	; (8001b58 <HAL_UART_MspInit+0x224>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d171      	bne.n	8001b3a <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a5a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	4618      	mov	r0, r3
 8001a66:	f001 fe4b 	bl	8003700 <HAL_RCCEx_PeriphCLKConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001a70:	f7ff ff32 	bl	80018d8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a74:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <HAL_UART_MspInit+0x214>)
 8001a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a78:	4a33      	ldr	r2, [pc, #204]	; (8001b48 <HAL_UART_MspInit+0x214>)
 8001a7a:	f043 0320 	orr.w	r3, r3, #32
 8001a7e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a80:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <HAL_UART_MspInit+0x214>)
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_UART_MspInit+0x214>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	4a2d      	ldr	r2, [pc, #180]	; (8001b48 <HAL_UART_MspInit+0x214>)
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	6313      	str	r3, [r2, #48]	; 0x30
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_UART_MspInit+0x214>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aa4:	23c0      	movs	r3, #192	; 0xc0
 8001aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001abc:	2308      	movs	r3, #8
 8001abe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4824      	ldr	r0, [pc, #144]	; (8001b5c <HAL_UART_MspInit+0x228>)
 8001aca:	f000 ff3b 	bl	8002944 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001ace:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <HAL_UART_MspInit+0x22c>)
 8001ad0:	4a24      	ldr	r2, [pc, #144]	; (8001b64 <HAL_UART_MspInit+0x230>)
 8001ad2:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001ad4:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <HAL_UART_MspInit+0x22c>)
 8001ad6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001ada:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001adc:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <HAL_UART_MspInit+0x22c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae2:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <HAL_UART_MspInit+0x22c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_UART_MspInit+0x22c>)
 8001aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aee:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_UART_MspInit+0x22c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <HAL_UART_MspInit+0x22c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <HAL_UART_MspInit+0x22c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <HAL_UART_MspInit+0x22c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_UART_MspInit+0x22c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001b0e:	4814      	ldr	r0, [pc, #80]	; (8001b60 <HAL_UART_MspInit+0x22c>)
 8001b10:	f000 fb02 	bl	8002118 <HAL_DMA_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_UART_MspInit+0x1ea>
      Error_Handler();
 8001b1a:	f7ff fedd 	bl	80018d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <HAL_UART_MspInit+0x22c>)
 8001b22:	671a      	str	r2, [r3, #112]	; 0x70
 8001b24:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <HAL_UART_MspInit+0x22c>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2105      	movs	r1, #5
 8001b2e:	2047      	movs	r0, #71	; 0x47
 8001b30:	f000 fac8 	bl	80020c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001b34:	2047      	movs	r0, #71	; 0x47
 8001b36:	f000 fae1 	bl	80020fc <HAL_NVIC_EnableIRQ>
}
 8001b3a:	bf00      	nop
 8001b3c:	37c0      	adds	r7, #192	; 0xc0
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40004800 	.word	0x40004800
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	20004c9c 	.word	0x20004c9c
 8001b54:	40026028 	.word	0x40026028
 8001b58:	40011400 	.word	0x40011400
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	20004c3c 	.word	0x20004c3c
 8001b64:	40026428 	.word	0x40026428

08001b68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08c      	sub	sp, #48	; 0x30
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	2019      	movs	r0, #25
 8001b7e:	f000 faa1 	bl	80020c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b82:	2019      	movs	r0, #25
 8001b84:	f000 faba 	bl	80020fc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <HAL_InitTick+0xa0>)
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <HAL_InitTick+0xa0>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6453      	str	r3, [r2, #68]	; 0x44
 8001b94:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <HAL_InitTick+0xa0>)
 8001b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ba0:	f107 0210 	add.w	r2, r7, #16
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f001 fd76 	bl	800369c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001bb0:	f001 fd60 	bl	8003674 <HAL_RCC_GetPCLK2Freq>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbc:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <HAL_InitTick+0xa4>)
 8001bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc2:	0c9b      	lsrs	r3, r3, #18
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_InitTick+0xa8>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <HAL_InitTick+0xac>)
 8001bcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <HAL_InitTick+0xa8>)
 8001bd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bd4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001bd6:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <HAL_InitTick+0xa8>)
 8001bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bda:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <HAL_InitTick+0xa8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_InitTick+0xa8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001be8:	4809      	ldr	r0, [pc, #36]	; (8001c10 <HAL_InitTick+0xa8>)
 8001bea:	f002 f9b1 	bl	8003f50 <HAL_TIM_Base_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d104      	bne.n	8001bfe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001bf4:	4806      	ldr	r0, [pc, #24]	; (8001c10 <HAL_InitTick+0xa8>)
 8001bf6:	f002 fa0d 	bl	8004014 <HAL_TIM_Base_Start_IT>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	e000      	b.n	8001c00 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3730      	adds	r7, #48	; 0x30
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	431bde83 	.word	0x431bde83
 8001c10:	20004e30 	.word	0x20004e30
 8001c14:	40010000 	.word	0x40010000

08001c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <NMI_Handler+0x4>

08001c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <HardFault_Handler+0x4>

08001c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <MemManage_Handler+0x4>

08001c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <BusFault_Handler+0x4>

08001c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <UsageFault_Handler+0x4>

08001c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <DMA1_Stream1_IRQHandler+0x10>)
 8001c4a:	f000 fc05 	bl	8002458 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20004c9c 	.word	0x20004c9c

08001c58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c5e:	f002 fa51 	bl	8004104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20004e30 	.word	0x20004e30

08001c6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <USART3_IRQHandler+0x14>)
 8001c72:	f002 fde9 	bl	8004848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  USER_UART_IRQHandler(&huart3);
 8001c76:	4802      	ldr	r0, [pc, #8]	; (8001c80 <USART3_IRQHandler+0x14>)
 8001c78:	f7ff fd30 	bl	80016dc <USER_UART_IRQHandler>
  /* USER CODE END USART3_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20004cfc 	.word	0x20004cfc

08001c84 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <DMA2_Stream1_IRQHandler+0x10>)
 8001c8a:	f000 fbe5 	bl	8002458 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20004c3c 	.word	0x20004c3c

08001c98 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c9c:	4803      	ldr	r0, [pc, #12]	; (8001cac <USART6_IRQHandler+0x14>)
 8001c9e:	f002 fdd3 	bl	8004848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  USER_UART_IRQHandler_1(&huart6);
 8001ca2:	4802      	ldr	r0, [pc, #8]	; (8001cac <USART6_IRQHandler+0x14>)
 8001ca4:	f7ff fd3a 	bl	800171c <USER_UART_IRQHandler_1>
  /* USER CODE END USART6_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20004d90 	.word	0x20004d90

08001cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
	return 1;
 8001cb4:	2301      	movs	r3, #1
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <_kill>:

int _kill(int pid, int sig)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cca:	f007 fdaf 	bl	800982c <__errno>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2216      	movs	r2, #22
 8001cd2:	601a      	str	r2, [r3, #0]
	return -1;
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_exit>:

void _exit (int status)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ffe7 	bl	8001cc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cf2:	e7fe      	b.n	8001cf2 <_exit+0x12>

08001cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e00a      	b.n	8001d1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d06:	f3af 8000 	nop.w
 8001d0a:	4601      	mov	r1, r0
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	60ba      	str	r2, [r7, #8]
 8001d12:	b2ca      	uxtb	r2, r1
 8001d14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dbf0      	blt.n	8001d06 <_read+0x12>
	}

return len;
 8001d24:	687b      	ldr	r3, [r7, #4]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	e009      	b.n	8001d54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	60ba      	str	r2, [r7, #8]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3301      	adds	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	dbf1      	blt.n	8001d40 <_write+0x12>
	}
	return len;
 8001d5c:	687b      	ldr	r3, [r7, #4]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_close>:

int _close(int file)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
	return -1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d8e:	605a      	str	r2, [r3, #4]
	return 0;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <_isatty>:

int _isatty(int file)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
	return 1;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
	return 0;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd8:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <_sbrk+0x5c>)
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <_sbrk+0x60>)
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de4:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <_sbrk+0x64>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <_sbrk+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d207      	bcs.n	8001e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e00:	f007 fd14 	bl	800982c <__errno>
 8001e04:	4603      	mov	r3, r0
 8001e06:	220c      	movs	r2, #12
 8001e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	e009      	b.n	8001e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <_sbrk+0x64>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <_sbrk+0x64>)
 8001e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e22:	68fb      	ldr	r3, [r7, #12]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20080000 	.word	0x20080000
 8001e30:	00000400 	.word	0x00000400
 8001e34:	20000260 	.word	0x20000260
 8001e38:	20004ed0 	.word	0x20004ed0

08001e3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <SystemInit+0x20>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <SystemInit+0x20>)
 8001e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e66:	490e      	ldr	r1, [pc, #56]	; (8001ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e68:	4a0e      	ldr	r2, [pc, #56]	; (8001ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e6c:	e002      	b.n	8001e74 <LoopCopyDataInit>

08001e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e72:	3304      	adds	r3, #4

08001e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e78:	d3f9      	bcc.n	8001e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e7c:	4c0b      	ldr	r4, [pc, #44]	; (8001eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e80:	e001      	b.n	8001e86 <LoopFillZerobss>

08001e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e84:	3204      	adds	r2, #4

08001e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e88:	d3fb      	bcc.n	8001e82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e8a:	f7ff ffd7 	bl	8001e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e8e:	f007 fdc9 	bl	8009a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e92:	f7ff fa47 	bl	8001324 <main>
  bx  lr    
 8001e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e98:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea0:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8001ea4:	0800e9bc 	.word	0x0800e9bc
  ldr r2, =_sbss
 8001ea8:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8001eac:	20004ed0 	.word	0x20004ed0

08001eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb0:	e7fe      	b.n	8001eb0 <ADC_IRQHandler>

08001eb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb6:	2003      	movs	r0, #3
 8001eb8:	f000 f8f9 	bl	80020ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ebc:	200f      	movs	r0, #15
 8001ebe:	f7ff fe53 	bl	8001b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec2:	f7ff fd0f 	bl	80018e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_IncTick+0x20>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_IncTick+0x24>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <HAL_IncTick+0x24>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000068 	.word	0x20000068
 8001ef0:	20004e7c 	.word	0x20004e7c

08001ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <HAL_GetTick+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20004e7c 	.word	0x20004e7c

08001f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff ffee 	bl	8001ef4 <HAL_GetTick>
 8001f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f24:	d005      	beq.n	8001f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_Delay+0x44>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f32:	bf00      	nop
 8001f34:	f7ff ffde 	bl	8001ef4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d8f7      	bhi.n	8001f34 <HAL_Delay+0x28>
  {
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000068 	.word	0x20000068

08001f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <__NVIC_SetPriorityGrouping+0x40>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f82:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <__NVIC_SetPriorityGrouping+0x40>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	60d3      	str	r3, [r2, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00
 8001f98:	05fa0000 	.word	0x05fa0000

08001f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db0b      	blt.n	8001fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f003 021f 	and.w	r2, r3, #31
 8001fd0:	4907      	ldr	r1, [pc, #28]	; (8001ff0 <__NVIC_EnableIRQ+0x38>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2001      	movs	r0, #1
 8001fda:	fa00 f202 	lsl.w	r2, r0, r2
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000e100 	.word	0xe000e100

08001ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	2b00      	cmp	r3, #0
 8002006:	db0a      	blt.n	800201e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	490c      	ldr	r1, [pc, #48]	; (8002040 <__NVIC_SetPriority+0x4c>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	440b      	add	r3, r1
 8002018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800201c:	e00a      	b.n	8002034 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4908      	ldr	r1, [pc, #32]	; (8002044 <__NVIC_SetPriority+0x50>)
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3b04      	subs	r3, #4
 800202c:	0112      	lsls	r2, r2, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	440b      	add	r3, r1
 8002032:	761a      	strb	r2, [r3, #24]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000e100 	.word	0xe000e100
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f1c3 0307 	rsb	r3, r3, #7
 8002062:	2b04      	cmp	r3, #4
 8002064:	bf28      	it	cs
 8002066:	2304      	movcs	r3, #4
 8002068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3304      	adds	r3, #4
 800206e:	2b06      	cmp	r3, #6
 8002070:	d902      	bls.n	8002078 <NVIC_EncodePriority+0x30>
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3b03      	subs	r3, #3
 8002076:	e000      	b.n	800207a <NVIC_EncodePriority+0x32>
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	f04f 32ff 	mov.w	r2, #4294967295
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002090:	f04f 31ff 	mov.w	r1, #4294967295
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43d9      	mvns	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	4313      	orrs	r3, r2
         );
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ff4c 	bl	8001f54 <__NVIC_SetPriorityGrouping>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d6:	f7ff ff61 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 80020da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	6978      	ldr	r0, [r7, #20]
 80020e2:	f7ff ffb1 	bl	8002048 <NVIC_EncodePriority>
 80020e6:	4602      	mov	r2, r0
 80020e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff80 	bl	8001ff4 <__NVIC_SetPriority>
}
 80020f4:	bf00      	nop
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff54 	bl	8001fb8 <__NVIC_EnableIRQ>
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002124:	f7ff fee6 	bl	8001ef4 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e099      	b.n	8002268 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002154:	e00f      	b.n	8002176 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002156:	f7ff fecd 	bl	8001ef4 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b05      	cmp	r3, #5
 8002162:	d908      	bls.n	8002176 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2220      	movs	r2, #32
 8002168:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2203      	movs	r2, #3
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e078      	b.n	8002268 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1e8      	bne.n	8002156 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	4b38      	ldr	r3, [pc, #224]	; (8002270 <HAL_DMA_Init+0x158>)
 8002190:	4013      	ands	r3, r2
 8002192:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d107      	bne.n	80021e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	4313      	orrs	r3, r2
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f023 0307 	bic.w	r3, r3, #7
 80021f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	2b04      	cmp	r3, #4
 8002208:	d117      	bne.n	800223a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00e      	beq.n	800223a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 fb15 	bl	800284c <DMA_CheckFifoParam>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2240      	movs	r2, #64	; 0x40
 800222c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002236:	2301      	movs	r3, #1
 8002238:	e016      	b.n	8002268 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 facc 	bl	80027e0 <DMA_CalcBaseAndBitshift>
 8002248:	4603      	mov	r3, r0
 800224a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	223f      	movs	r2, #63	; 0x3f
 8002252:	409a      	lsls	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	e010803f 	.word	0xe010803f

08002274 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_DMA_Start_IT+0x26>
 8002296:	2302      	movs	r3, #2
 8002298:	e048      	b.n	800232c <HAL_DMA_Start_IT+0xb8>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d137      	bne.n	800231e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2202      	movs	r2, #2
 80022b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 fa5e 	bl	8002784 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022cc:	223f      	movs	r2, #63	; 0x3f
 80022ce:	409a      	lsls	r2, r3
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0216 	orr.w	r2, r2, #22
 80022e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022f2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0208 	orr.w	r2, r2, #8
 800230a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e005      	b.n	800232a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002326:	2302      	movs	r3, #2
 8002328:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800232a:	7dfb      	ldrb	r3, [r7, #23]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002342:	f7ff fdd7 	bl	8001ef4 <HAL_GetTick>
 8002346:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d008      	beq.n	8002366 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e052      	b.n	800240c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0216 	bic.w	r2, r2, #22
 8002374:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002384:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d103      	bne.n	8002396 <HAL_DMA_Abort+0x62>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002392:	2b00      	cmp	r3, #0
 8002394:	d007      	beq.n	80023a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0208 	bic.w	r2, r2, #8
 80023a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b6:	e013      	b.n	80023e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023b8:	f7ff fd9c 	bl	8001ef4 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b05      	cmp	r3, #5
 80023c4:	d90c      	bls.n	80023e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2220      	movs	r2, #32
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2203      	movs	r2, #3
 80023d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e015      	b.n	800240c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1e4      	bne.n	80023b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	223f      	movs	r2, #63	; 0x3f
 80023f4:	409a      	lsls	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d004      	beq.n	8002432 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e00c      	b.n	800244c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2205      	movs	r2, #5
 8002436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0201 	bic.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002464:	4b92      	ldr	r3, [pc, #584]	; (80026b0 <HAL_DMA_IRQHandler+0x258>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a92      	ldr	r2, [pc, #584]	; (80026b4 <HAL_DMA_IRQHandler+0x25c>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	0a9b      	lsrs	r3, r3, #10
 8002470:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002482:	2208      	movs	r2, #8
 8002484:	409a      	lsls	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4013      	ands	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d01a      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d013      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0204 	bic.w	r2, r2, #4
 80024aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b0:	2208      	movs	r2, #8
 80024b2:	409a      	lsls	r2, r3
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024bc:	f043 0201 	orr.w	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c8:	2201      	movs	r2, #1
 80024ca:	409a      	lsls	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d012      	beq.n	80024fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e6:	2201      	movs	r2, #1
 80024e8:	409a      	lsls	r2, r3
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f2:	f043 0202 	orr.w	r2, r3, #2
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fe:	2204      	movs	r2, #4
 8002500:	409a      	lsls	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d012      	beq.n	8002530 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00b      	beq.n	8002530 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251c:	2204      	movs	r2, #4
 800251e:	409a      	lsls	r2, r3
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002528:	f043 0204 	orr.w	r2, r3, #4
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	2210      	movs	r2, #16
 8002536:	409a      	lsls	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4013      	ands	r3, r2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d043      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d03c      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002552:	2210      	movs	r2, #16
 8002554:	409a      	lsls	r2, r3
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d018      	beq.n	800259a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d108      	bne.n	8002588 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d024      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	4798      	blx	r3
 8002586:	e01f      	b.n	80025c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258c:	2b00      	cmp	r3, #0
 800258e:	d01b      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
 8002598:	e016      	b.n	80025c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d107      	bne.n	80025b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0208 	bic.w	r2, r2, #8
 80025b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025cc:	2220      	movs	r2, #32
 80025ce:	409a      	lsls	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 808e 	beq.w	80026f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 8086 	beq.w	80026f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ee:	2220      	movs	r2, #32
 80025f0:	409a      	lsls	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d136      	bne.n	8002670 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0216 	bic.w	r2, r2, #22
 8002610:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002620:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	2b00      	cmp	r3, #0
 8002628:	d103      	bne.n	8002632 <HAL_DMA_IRQHandler+0x1da>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262e:	2b00      	cmp	r3, #0
 8002630:	d007      	beq.n	8002642 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0208 	bic.w	r2, r2, #8
 8002640:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002646:	223f      	movs	r2, #63	; 0x3f
 8002648:	409a      	lsls	r2, r3
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002662:	2b00      	cmp	r3, #0
 8002664:	d07d      	beq.n	8002762 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	4798      	blx	r3
        }
        return;
 800266e:	e078      	b.n	8002762 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d01c      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d108      	bne.n	800269e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002690:	2b00      	cmp	r3, #0
 8002692:	d030      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
 800269c:	e02b      	b.n	80026f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d027      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
 80026ae:	e022      	b.n	80026f6 <HAL_DMA_IRQHandler+0x29e>
 80026b0:	20000060 	.word	0x20000060
 80026b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10f      	bne.n	80026e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0210 	bic.w	r2, r2, #16
 80026d4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d032      	beq.n	8002764 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d022      	beq.n	8002750 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2205      	movs	r2, #5
 800270e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	3301      	adds	r3, #1
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	429a      	cmp	r2, r3
 800272c:	d307      	bcc.n	800273e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f2      	bne.n	8002722 <HAL_DMA_IRQHandler+0x2ca>
 800273c:	e000      	b.n	8002740 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800273e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
 8002760:	e000      	b.n	8002764 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002762:	bf00      	nop
    }
  }
}
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop

0800276c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b40      	cmp	r3, #64	; 0x40
 80027b0:	d108      	bne.n	80027c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027c2:	e007      	b.n	80027d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	60da      	str	r2, [r3, #12]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	3b10      	subs	r3, #16
 80027f0:	4a13      	ldr	r2, [pc, #76]	; (8002840 <DMA_CalcBaseAndBitshift+0x60>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <DMA_CalcBaseAndBitshift+0x64>)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4413      	add	r3, r2
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b03      	cmp	r3, #3
 800280c:	d908      	bls.n	8002820 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <DMA_CalcBaseAndBitshift+0x68>)
 8002816:	4013      	ands	r3, r2
 8002818:	1d1a      	adds	r2, r3, #4
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	659a      	str	r2, [r3, #88]	; 0x58
 800281e:	e006      	b.n	800282e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <DMA_CalcBaseAndBitshift+0x68>)
 8002828:	4013      	ands	r3, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	aaaaaaab 	.word	0xaaaaaaab
 8002844:	0800e4e8 	.word	0x0800e4e8
 8002848:	fffffc00 	.word	0xfffffc00

0800284c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d11f      	bne.n	80028a6 <DMA_CheckFifoParam+0x5a>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b03      	cmp	r3, #3
 800286a:	d856      	bhi.n	800291a <DMA_CheckFifoParam+0xce>
 800286c:	a201      	add	r2, pc, #4	; (adr r2, 8002874 <DMA_CheckFifoParam+0x28>)
 800286e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002872:	bf00      	nop
 8002874:	08002885 	.word	0x08002885
 8002878:	08002897 	.word	0x08002897
 800287c:	08002885 	.word	0x08002885
 8002880:	0800291b 	.word	0x0800291b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d046      	beq.n	800291e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002894:	e043      	b.n	800291e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800289e:	d140      	bne.n	8002922 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a4:	e03d      	b.n	8002922 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ae:	d121      	bne.n	80028f4 <DMA_CheckFifoParam+0xa8>
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d837      	bhi.n	8002926 <DMA_CheckFifoParam+0xda>
 80028b6:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <DMA_CheckFifoParam+0x70>)
 80028b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028bc:	080028cd 	.word	0x080028cd
 80028c0:	080028d3 	.word	0x080028d3
 80028c4:	080028cd 	.word	0x080028cd
 80028c8:	080028e5 	.word	0x080028e5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      break;
 80028d0:	e030      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d025      	beq.n	800292a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e2:	e022      	b.n	800292a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028ec:	d11f      	bne.n	800292e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028f2:	e01c      	b.n	800292e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d903      	bls.n	8002902 <DMA_CheckFifoParam+0xb6>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d003      	beq.n	8002908 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002900:	e018      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
      break;
 8002906:	e015      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00e      	beq.n	8002932 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      break;
 8002918:	e00b      	b.n	8002932 <DMA_CheckFifoParam+0xe6>
      break;
 800291a:	bf00      	nop
 800291c:	e00a      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 800291e:	bf00      	nop
 8002920:	e008      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 8002922:	bf00      	nop
 8002924:	e006      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 8002926:	bf00      	nop
 8002928:	e004      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 800292a:	bf00      	nop
 800292c:	e002      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;   
 800292e:	bf00      	nop
 8002930:	e000      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 8002932:	bf00      	nop
    }
  } 
  
  return status; 
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop

08002944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	; 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	e175      	b.n	8002c50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002964:	2201      	movs	r2, #1
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	429a      	cmp	r2, r3
 800297e:	f040 8164 	bne.w	8002c4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d005      	beq.n	800299a <HAL_GPIO_Init+0x56>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d130      	bne.n	80029fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	2203      	movs	r2, #3
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d0:	2201      	movs	r2, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 0201 	and.w	r2, r3, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d017      	beq.n	8002a38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2203      	movs	r2, #3
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d123      	bne.n	8002a8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	08da      	lsrs	r2, r3, #3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3208      	adds	r2, #8
 8002a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	08da      	lsrs	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3208      	adds	r2, #8
 8002a86:	69b9      	ldr	r1, [r7, #24]
 8002a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0203 	and.w	r2, r3, #3
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80be 	beq.w	8002c4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ace:	4b66      	ldr	r3, [pc, #408]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a65      	ldr	r2, [pc, #404]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b63      	ldr	r3, [pc, #396]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ae6:	4a61      	ldr	r2, [pc, #388]	; (8002c6c <HAL_GPIO_Init+0x328>)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3302      	adds	r3, #2
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a58      	ldr	r2, [pc, #352]	; (8002c70 <HAL_GPIO_Init+0x32c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d037      	beq.n	8002b82 <HAL_GPIO_Init+0x23e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a57      	ldr	r2, [pc, #348]	; (8002c74 <HAL_GPIO_Init+0x330>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d031      	beq.n	8002b7e <HAL_GPIO_Init+0x23a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a56      	ldr	r2, [pc, #344]	; (8002c78 <HAL_GPIO_Init+0x334>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d02b      	beq.n	8002b7a <HAL_GPIO_Init+0x236>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a55      	ldr	r2, [pc, #340]	; (8002c7c <HAL_GPIO_Init+0x338>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d025      	beq.n	8002b76 <HAL_GPIO_Init+0x232>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a54      	ldr	r2, [pc, #336]	; (8002c80 <HAL_GPIO_Init+0x33c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d01f      	beq.n	8002b72 <HAL_GPIO_Init+0x22e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a53      	ldr	r2, [pc, #332]	; (8002c84 <HAL_GPIO_Init+0x340>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d019      	beq.n	8002b6e <HAL_GPIO_Init+0x22a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_GPIO_Init+0x344>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <HAL_GPIO_Init+0x226>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a51      	ldr	r2, [pc, #324]	; (8002c8c <HAL_GPIO_Init+0x348>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00d      	beq.n	8002b66 <HAL_GPIO_Init+0x222>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a50      	ldr	r2, [pc, #320]	; (8002c90 <HAL_GPIO_Init+0x34c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <HAL_GPIO_Init+0x21e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4f      	ldr	r2, [pc, #316]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_GPIO_Init+0x21a>
 8002b5a:	2309      	movs	r3, #9
 8002b5c:	e012      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b5e:	230a      	movs	r3, #10
 8002b60:	e010      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b62:	2308      	movs	r3, #8
 8002b64:	e00e      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b66:	2307      	movs	r3, #7
 8002b68:	e00c      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b6a:	2306      	movs	r3, #6
 8002b6c:	e00a      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b6e:	2305      	movs	r3, #5
 8002b70:	e008      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b72:	2304      	movs	r3, #4
 8002b74:	e006      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b76:	2303      	movs	r3, #3
 8002b78:	e004      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e002      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b82:	2300      	movs	r3, #0
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	f002 0203 	and.w	r2, r2, #3
 8002b8a:	0092      	lsls	r2, r2, #2
 8002b8c:	4093      	lsls	r3, r2
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b94:	4935      	ldr	r1, [pc, #212]	; (8002c6c <HAL_GPIO_Init+0x328>)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	089b      	lsrs	r3, r3, #2
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ba2:	4b3d      	ldr	r3, [pc, #244]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bc6:	4a34      	ldr	r2, [pc, #208]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bcc:	4b32      	ldr	r3, [pc, #200]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bf0:	4a29      	ldr	r2, [pc, #164]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bf6:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c1a:	4a1f      	ldr	r2, [pc, #124]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c20:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c44:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b0f      	cmp	r3, #15
 8002c54:	f67f ae86 	bls.w	8002964 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40013800 	.word	0x40013800
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40020400 	.word	0x40020400
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020c00 	.word	0x40020c00
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40021400 	.word	0x40021400
 8002c88:	40021800 	.word	0x40021800
 8002c8c:	40021c00 	.word	0x40021c00
 8002c90:	40022000 	.word	0x40022000
 8002c94:	40022400 	.word	0x40022400
 8002c98:	40013c00 	.word	0x40013c00

08002c9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca6:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a22      	ldr	r2, [pc, #136]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cca:	f7ff f913 	bl	8001ef4 <HAL_GetTick>
 8002cce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cd0:	e009      	b.n	8002ce6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cd2:	f7ff f90f 	bl	8001ef4 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ce0:	d901      	bls.n	8002ce6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e022      	b.n	8002d2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ce6:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf2:	d1ee      	bne.n	8002cd2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cf4:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0f      	ldr	r2, [pc, #60]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d00:	f7ff f8f8 	bl	8001ef4 <HAL_GetTick>
 8002d04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d06:	e009      	b.n	8002d1c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d08:	f7ff f8f4 	bl	8001ef4 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d16:	d901      	bls.n	8002d1c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e007      	b.n	8002d2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d28:	d1ee      	bne.n	8002d08 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40007000 	.word	0x40007000

08002d3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d44:	2300      	movs	r3, #0
 8002d46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e29b      	b.n	800328a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 8087 	beq.w	8002e6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d60:	4b96      	ldr	r3, [pc, #600]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d00c      	beq.n	8002d86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d6c:	4b93      	ldr	r3, [pc, #588]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 030c 	and.w	r3, r3, #12
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d112      	bne.n	8002d9e <HAL_RCC_OscConfig+0x62>
 8002d78:	4b90      	ldr	r3, [pc, #576]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d84:	d10b      	bne.n	8002d9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d86:	4b8d      	ldr	r3, [pc, #564]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d06c      	beq.n	8002e6c <HAL_RCC_OscConfig+0x130>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d168      	bne.n	8002e6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e275      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da6:	d106      	bne.n	8002db6 <HAL_RCC_OscConfig+0x7a>
 8002da8:	4b84      	ldr	r3, [pc, #528]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a83      	ldr	r2, [pc, #524]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	e02e      	b.n	8002e14 <HAL_RCC_OscConfig+0xd8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x9c>
 8002dbe:	4b7f      	ldr	r3, [pc, #508]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a7e      	ldr	r2, [pc, #504]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b7c      	ldr	r3, [pc, #496]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a7b      	ldr	r2, [pc, #492]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e01d      	b.n	8002e14 <HAL_RCC_OscConfig+0xd8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0xc0>
 8002de2:	4b76      	ldr	r3, [pc, #472]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a75      	ldr	r2, [pc, #468]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	4b73      	ldr	r3, [pc, #460]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a72      	ldr	r2, [pc, #456]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e00b      	b.n	8002e14 <HAL_RCC_OscConfig+0xd8>
 8002dfc:	4b6f      	ldr	r3, [pc, #444]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a6e      	ldr	r2, [pc, #440]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b6c      	ldr	r3, [pc, #432]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a6b      	ldr	r2, [pc, #428]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d013      	beq.n	8002e44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7ff f86a 	bl	8001ef4 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e24:	f7ff f866 	bl	8001ef4 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	; 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e229      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	4b61      	ldr	r3, [pc, #388]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0xe8>
 8002e42:	e014      	b.n	8002e6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7ff f856 	bl	8001ef4 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e4c:	f7ff f852 	bl	8001ef4 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	; 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e215      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5e:	4b57      	ldr	r3, [pc, #348]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x110>
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d069      	beq.n	8002f4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e7a:	4b50      	ldr	r3, [pc, #320]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00b      	beq.n	8002e9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e86:	4b4d      	ldr	r3, [pc, #308]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d11c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x190>
 8002e92:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d116      	bne.n	8002ecc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9e:	4b47      	ldr	r3, [pc, #284]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x17a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e1e9      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb6:	4b41      	ldr	r3, [pc, #260]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	493d      	ldr	r1, [pc, #244]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eca:	e040      	b.n	8002f4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d023      	beq.n	8002f1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed4:	4b39      	ldr	r3, [pc, #228]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a38      	ldr	r2, [pc, #224]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7ff f808 	bl	8001ef4 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee8:	f7ff f804 	bl	8001ef4 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e1c7      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efa:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f06:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4929      	ldr	r1, [pc, #164]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	600b      	str	r3, [r1, #0]
 8002f1a:	e018      	b.n	8002f4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1c:	4b27      	ldr	r3, [pc, #156]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a26      	ldr	r2, [pc, #152]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe ffe4 	bl	8001ef4 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f30:	f7fe ffe0 	bl	8001ef4 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e1a3      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d038      	beq.n	8002fcc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d019      	beq.n	8002f96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f66:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6e:	f7fe ffc1 	bl	8001ef4 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f76:	f7fe ffbd 	bl	8001ef4 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e180      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x23a>
 8002f94:	e01a      	b.n	8002fcc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9a:	4a08      	ldr	r2, [pc, #32]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa2:	f7fe ffa7 	bl	8001ef4 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002faa:	f7fe ffa3 	bl	8001ef4 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d903      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e166      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
 8002fbc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc0:	4b92      	ldr	r3, [pc, #584]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8002fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1ee      	bne.n	8002faa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80a4 	beq.w	8003122 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fda:	4b8c      	ldr	r3, [pc, #560]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10d      	bne.n	8003002 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	4b89      	ldr	r3, [pc, #548]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a88      	ldr	r2, [pc, #544]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b86      	ldr	r3, [pc, #536]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003002:	4b83      	ldr	r3, [pc, #524]	; (8003210 <HAL_RCC_OscConfig+0x4d4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800300e:	4b80      	ldr	r3, [pc, #512]	; (8003210 <HAL_RCC_OscConfig+0x4d4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a7f      	ldr	r2, [pc, #508]	; (8003210 <HAL_RCC_OscConfig+0x4d4>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fe ff6b 	bl	8001ef4 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fe ff67 	bl	8001ef4 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	; 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e12a      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003034:	4b76      	ldr	r3, [pc, #472]	; (8003210 <HAL_RCC_OscConfig+0x4d4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x31a>
 8003048:	4b70      	ldr	r3, [pc, #448]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	4a6f      	ldr	r2, [pc, #444]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6713      	str	r3, [r2, #112]	; 0x70
 8003054:	e02d      	b.n	80030b2 <HAL_RCC_OscConfig+0x376>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x33c>
 800305e:	4b6b      	ldr	r3, [pc, #428]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	4a6a      	ldr	r2, [pc, #424]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003064:	f023 0301 	bic.w	r3, r3, #1
 8003068:	6713      	str	r3, [r2, #112]	; 0x70
 800306a:	4b68      	ldr	r3, [pc, #416]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a67      	ldr	r2, [pc, #412]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003070:	f023 0304 	bic.w	r3, r3, #4
 8003074:	6713      	str	r3, [r2, #112]	; 0x70
 8003076:	e01c      	b.n	80030b2 <HAL_RCC_OscConfig+0x376>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b05      	cmp	r3, #5
 800307e:	d10c      	bne.n	800309a <HAL_RCC_OscConfig+0x35e>
 8003080:	4b62      	ldr	r3, [pc, #392]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	4a61      	ldr	r2, [pc, #388]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	6713      	str	r3, [r2, #112]	; 0x70
 800308c:	4b5f      	ldr	r3, [pc, #380]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	4a5e      	ldr	r2, [pc, #376]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6713      	str	r3, [r2, #112]	; 0x70
 8003098:	e00b      	b.n	80030b2 <HAL_RCC_OscConfig+0x376>
 800309a:	4b5c      	ldr	r3, [pc, #368]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	4a5b      	ldr	r2, [pc, #364]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	6713      	str	r3, [r2, #112]	; 0x70
 80030a6:	4b59      	ldr	r3, [pc, #356]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	4a58      	ldr	r2, [pc, #352]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80030ac:	f023 0304 	bic.w	r3, r3, #4
 80030b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d015      	beq.n	80030e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ba:	f7fe ff1b 	bl	8001ef4 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c2:	f7fe ff17 	bl	8001ef4 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e0d8      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d8:	4b4c      	ldr	r3, [pc, #304]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0ee      	beq.n	80030c2 <HAL_RCC_OscConfig+0x386>
 80030e4:	e014      	b.n	8003110 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e6:	f7fe ff05 	bl	8001ef4 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ec:	e00a      	b.n	8003104 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ee:	f7fe ff01 	bl	8001ef4 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e0c2      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003104:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1ee      	bne.n	80030ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d105      	bne.n	8003122 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003116:	4b3d      	ldr	r3, [pc, #244]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4a3c      	ldr	r2, [pc, #240]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 800311c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80ae 	beq.w	8003288 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800312c:	4b37      	ldr	r3, [pc, #220]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b08      	cmp	r3, #8
 8003136:	d06d      	beq.n	8003214 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d14b      	bne.n	80031d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003140:	4b32      	ldr	r3, [pc, #200]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a31      	ldr	r2, [pc, #196]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800314a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe fed2 	bl	8001ef4 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe fece 	bl	8001ef4 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e091      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003166:	4b29      	ldr	r3, [pc, #164]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69da      	ldr	r2, [r3, #28]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	019b      	lsls	r3, r3, #6
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	085b      	lsrs	r3, r3, #1
 800318a:	3b01      	subs	r3, #1
 800318c:	041b      	lsls	r3, r3, #16
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	061b      	lsls	r3, r3, #24
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	071b      	lsls	r3, r3, #28
 800319e:	491b      	ldr	r1, [pc, #108]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a4:	4b19      	ldr	r3, [pc, #100]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a18      	ldr	r2, [pc, #96]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80031aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fe fea0 	bl	8001ef4 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fe fe9c 	bl	8001ef4 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e05f      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x47c>
 80031d6:	e057      	b.n	8003288 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0b      	ldr	r2, [pc, #44]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80031de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe fe86 	bl	8001ef4 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ec:	f7fe fe82 	bl	8001ef4 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e045      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fe:	4b03      	ldr	r3, [pc, #12]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x4b0>
 800320a:	e03d      	b.n	8003288 <HAL_RCC_OscConfig+0x54c>
 800320c:	40023800 	.word	0x40023800
 8003210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003214:	4b1f      	ldr	r3, [pc, #124]	; (8003294 <HAL_RCC_OscConfig+0x558>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d030      	beq.n	8003284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d129      	bne.n	8003284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d122      	bne.n	8003284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003244:	4013      	ands	r3, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800324a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800324c:	4293      	cmp	r3, r2
 800324e:	d119      	bne.n	8003284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	3b01      	subs	r3, #1
 800325e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d10f      	bne.n	8003284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003270:	429a      	cmp	r2, r3
 8003272:	d107      	bne.n	8003284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800

08003298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0d0      	b.n	8003452 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032b0:	4b6a      	ldr	r3, [pc, #424]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d910      	bls.n	80032e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b67      	ldr	r3, [pc, #412]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 020f 	bic.w	r2, r3, #15
 80032c6:	4965      	ldr	r1, [pc, #404]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ce:	4b63      	ldr	r3, [pc, #396]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0b8      	b.n	8003452 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d020      	beq.n	800332e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f8:	4b59      	ldr	r3, [pc, #356]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	4a58      	ldr	r2, [pc, #352]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 80032fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003302:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003310:	4b53      	ldr	r3, [pc, #332]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	4a52      	ldr	r2, [pc, #328]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003316:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800331a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800331c:	4b50      	ldr	r3, [pc, #320]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	494d      	ldr	r1, [pc, #308]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 800332a:	4313      	orrs	r3, r2
 800332c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d040      	beq.n	80033bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d107      	bne.n	8003352 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003342:	4b47      	ldr	r3, [pc, #284]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d115      	bne.n	800337a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e07f      	b.n	8003452 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d107      	bne.n	800336a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335a:	4b41      	ldr	r3, [pc, #260]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e073      	b.n	8003452 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336a:	4b3d      	ldr	r3, [pc, #244]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e06b      	b.n	8003452 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800337a:	4b39      	ldr	r3, [pc, #228]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f023 0203 	bic.w	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4936      	ldr	r1, [pc, #216]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003388:	4313      	orrs	r3, r2
 800338a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800338c:	f7fe fdb2 	bl	8001ef4 <HAL_GetTick>
 8003390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	e00a      	b.n	80033aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003394:	f7fe fdae 	bl	8001ef4 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e053      	b.n	8003452 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033aa:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 020c 	and.w	r2, r3, #12
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d1eb      	bne.n	8003394 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033bc:	4b27      	ldr	r3, [pc, #156]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d210      	bcs.n	80033ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b24      	ldr	r3, [pc, #144]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 020f 	bic.w	r2, r3, #15
 80033d2:	4922      	ldr	r1, [pc, #136]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033da:	4b20      	ldr	r3, [pc, #128]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e032      	b.n	8003452 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4916      	ldr	r1, [pc, #88]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003406:	4313      	orrs	r3, r2
 8003408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d009      	beq.n	800342a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003416:	4b12      	ldr	r3, [pc, #72]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	490e      	ldr	r1, [pc, #56]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800342a:	f000 f821 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 800342e:	4602      	mov	r2, r0
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	490a      	ldr	r1, [pc, #40]	; (8003464 <HAL_RCC_ClockConfig+0x1cc>)
 800343c:	5ccb      	ldrb	r3, [r1, r3]
 800343e:	fa22 f303 	lsr.w	r3, r2, r3
 8003442:	4a09      	ldr	r2, [pc, #36]	; (8003468 <HAL_RCC_ClockConfig+0x1d0>)
 8003444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003446:	4b09      	ldr	r3, [pc, #36]	; (800346c <HAL_RCC_ClockConfig+0x1d4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe fb8c 	bl	8001b68 <HAL_InitTick>

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40023c00 	.word	0x40023c00
 8003460:	40023800 	.word	0x40023800
 8003464:	0800e4d0 	.word	0x0800e4d0
 8003468:	20000060 	.word	0x20000060
 800346c:	20000064 	.word	0x20000064

08003470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003470:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	2300      	movs	r3, #0
 8003482:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003488:	4b67      	ldr	r3, [pc, #412]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 030c 	and.w	r3, r3, #12
 8003490:	2b08      	cmp	r3, #8
 8003492:	d00d      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003494:	2b08      	cmp	r3, #8
 8003496:	f200 80bd 	bhi.w	8003614 <HAL_RCC_GetSysClockFreq+0x1a4>
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0x34>
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d003      	beq.n	80034aa <HAL_RCC_GetSysClockFreq+0x3a>
 80034a2:	e0b7      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034a4:	4b61      	ldr	r3, [pc, #388]	; (800362c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034a6:	60bb      	str	r3, [r7, #8]
      break;
 80034a8:	e0b7      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034aa:	4b61      	ldr	r3, [pc, #388]	; (8003630 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80034ac:	60bb      	str	r3, [r7, #8]
      break;
 80034ae:	e0b4      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034b0:	4b5d      	ldr	r3, [pc, #372]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034b8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034ba:	4b5b      	ldr	r3, [pc, #364]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d04d      	beq.n	8003562 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c6:	4b58      	ldr	r3, [pc, #352]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	099b      	lsrs	r3, r3, #6
 80034cc:	461a      	mov	r2, r3
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034d6:	f04f 0100 	mov.w	r1, #0
 80034da:	ea02 0800 	and.w	r8, r2, r0
 80034de:	ea03 0901 	and.w	r9, r3, r1
 80034e2:	4640      	mov	r0, r8
 80034e4:	4649      	mov	r1, r9
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	014b      	lsls	r3, r1, #5
 80034f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034f4:	0142      	lsls	r2, r0, #5
 80034f6:	4610      	mov	r0, r2
 80034f8:	4619      	mov	r1, r3
 80034fa:	ebb0 0008 	subs.w	r0, r0, r8
 80034fe:	eb61 0109 	sbc.w	r1, r1, r9
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	018b      	lsls	r3, r1, #6
 800350c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003510:	0182      	lsls	r2, r0, #6
 8003512:	1a12      	subs	r2, r2, r0
 8003514:	eb63 0301 	sbc.w	r3, r3, r1
 8003518:	f04f 0000 	mov.w	r0, #0
 800351c:	f04f 0100 	mov.w	r1, #0
 8003520:	00d9      	lsls	r1, r3, #3
 8003522:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003526:	00d0      	lsls	r0, r2, #3
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	eb12 0208 	adds.w	r2, r2, r8
 8003530:	eb43 0309 	adc.w	r3, r3, r9
 8003534:	f04f 0000 	mov.w	r0, #0
 8003538:	f04f 0100 	mov.w	r1, #0
 800353c:	0259      	lsls	r1, r3, #9
 800353e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003542:	0250      	lsls	r0, r2, #9
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4610      	mov	r0, r2
 800354a:	4619      	mov	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	461a      	mov	r2, r3
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	f7fd f888 	bl	8000668 <__aeabi_uldivmod>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4613      	mov	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e04a      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003562:	4b31      	ldr	r3, [pc, #196]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	099b      	lsrs	r3, r3, #6
 8003568:	461a      	mov	r2, r3
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003572:	f04f 0100 	mov.w	r1, #0
 8003576:	ea02 0400 	and.w	r4, r2, r0
 800357a:	ea03 0501 	and.w	r5, r3, r1
 800357e:	4620      	mov	r0, r4
 8003580:	4629      	mov	r1, r5
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	014b      	lsls	r3, r1, #5
 800358c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003590:	0142      	lsls	r2, r0, #5
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	1b00      	subs	r0, r0, r4
 8003598:	eb61 0105 	sbc.w	r1, r1, r5
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	018b      	lsls	r3, r1, #6
 80035a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035aa:	0182      	lsls	r2, r0, #6
 80035ac:	1a12      	subs	r2, r2, r0
 80035ae:	eb63 0301 	sbc.w	r3, r3, r1
 80035b2:	f04f 0000 	mov.w	r0, #0
 80035b6:	f04f 0100 	mov.w	r1, #0
 80035ba:	00d9      	lsls	r1, r3, #3
 80035bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035c0:	00d0      	lsls	r0, r2, #3
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	1912      	adds	r2, r2, r4
 80035c8:	eb45 0303 	adc.w	r3, r5, r3
 80035cc:	f04f 0000 	mov.w	r0, #0
 80035d0:	f04f 0100 	mov.w	r1, #0
 80035d4:	0299      	lsls	r1, r3, #10
 80035d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035da:	0290      	lsls	r0, r2, #10
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	461a      	mov	r2, r3
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	f7fd f83c 	bl	8000668 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4613      	mov	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	0c1b      	lsrs	r3, r3, #16
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	3301      	adds	r3, #1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	60bb      	str	r3, [r7, #8]
      break;
 8003612:	e002      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003616:	60bb      	str	r3, [r7, #8]
      break;
 8003618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800361a:	68bb      	ldr	r3, [r7, #8]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800
 800362c:	00f42400 	.word	0x00f42400
 8003630:	007a1200 	.word	0x007a1200

08003634 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003638:	4b03      	ldr	r3, [pc, #12]	; (8003648 <HAL_RCC_GetHCLKFreq+0x14>)
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	4618      	mov	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000060 	.word	0x20000060

0800364c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003650:	f7ff fff0 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 8003654:	4602      	mov	r2, r0
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	0a9b      	lsrs	r3, r3, #10
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	4903      	ldr	r1, [pc, #12]	; (8003670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003662:	5ccb      	ldrb	r3, [r1, r3]
 8003664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003668:	4618      	mov	r0, r3
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40023800 	.word	0x40023800
 8003670:	0800e4e0 	.word	0x0800e4e0

08003674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003678:	f7ff ffdc 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 800367c:	4602      	mov	r2, r0
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	0b5b      	lsrs	r3, r3, #13
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	4903      	ldr	r1, [pc, #12]	; (8003698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800368a:	5ccb      	ldrb	r3, [r1, r3]
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003690:	4618      	mov	r0, r3
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40023800 	.word	0x40023800
 8003698:	0800e4e0 	.word	0x0800e4e0

0800369c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	220f      	movs	r2, #15
 80036aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036ac:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <HAL_RCC_GetClockConfig+0x5c>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0203 	and.w	r2, r3, #3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <HAL_RCC_GetClockConfig+0x5c>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <HAL_RCC_GetClockConfig+0x5c>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80036d0:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <HAL_RCC_GetClockConfig+0x5c>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	08db      	lsrs	r3, r3, #3
 80036d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036de:	4b07      	ldr	r3, [pc, #28]	; (80036fc <HAL_RCC_GetClockConfig+0x60>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 020f 	and.w	r2, r3, #15
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	601a      	str	r2, [r3, #0]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40023c00 	.word	0x40023c00

08003700 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d012      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003728:	4b69      	ldr	r3, [pc, #420]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4a68      	ldr	r2, [pc, #416]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003732:	6093      	str	r3, [r2, #8]
 8003734:	4b66      	ldr	r3, [pc, #408]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373c:	4964      	ldr	r1, [pc, #400]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800374a:	2301      	movs	r3, #1
 800374c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d017      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800375a:	4b5d      	ldr	r3, [pc, #372]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800375c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003768:	4959      	ldr	r1, [pc, #356]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003778:	d101      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800377a:	2301      	movs	r3, #1
 800377c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003786:	2301      	movs	r3, #1
 8003788:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d017      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003796:	4b4e      	ldr	r3, [pc, #312]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800379c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	494a      	ldr	r1, [pc, #296]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b4:	d101      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80037b6:	2301      	movs	r3, #1
 80037b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80037c2:	2301      	movs	r3, #1
 80037c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80037d2:	2301      	movs	r3, #1
 80037d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 808b 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037e4:	4b3a      	ldr	r3, [pc, #232]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	4a39      	ldr	r2, [pc, #228]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ee:	6413      	str	r3, [r2, #64]	; 0x40
 80037f0:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037fc:	4b35      	ldr	r3, [pc, #212]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a34      	ldr	r2, [pc, #208]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003806:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003808:	f7fe fb74 	bl	8001ef4 <HAL_GetTick>
 800380c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003810:	f7fe fb70 	bl	8001ef4 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	; 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e38f      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003822:	4b2c      	ldr	r3, [pc, #176]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800382e:	4b28      	ldr	r3, [pc, #160]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003836:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d035      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	429a      	cmp	r2, r3
 800384a:	d02e      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800384c:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003854:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003856:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	4a1d      	ldr	r2, [pc, #116]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003860:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003862:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	4a1a      	ldr	r2, [pc, #104]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800386e:	4a18      	ldr	r2, [pc, #96]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003874:	4b16      	ldr	r3, [pc, #88]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b01      	cmp	r3, #1
 800387e:	d114      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fe fb38 	bl	8001ef4 <HAL_GetTick>
 8003884:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003886:	e00a      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003888:	f7fe fb34 	bl	8001ef4 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	; 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e351      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389e:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0ee      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038b6:	d111      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038c6:	400b      	ands	r3, r1
 80038c8:	4901      	ldr	r1, [pc, #4]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
 80038ce:	e00b      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40007000 	.word	0x40007000
 80038d8:	0ffffcff 	.word	0x0ffffcff
 80038dc:	4bb3      	ldr	r3, [pc, #716]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4ab2      	ldr	r2, [pc, #712]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038e6:	6093      	str	r3, [r2, #8]
 80038e8:	4bb0      	ldr	r3, [pc, #704]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f4:	49ad      	ldr	r1, [pc, #692]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	2b00      	cmp	r3, #0
 8003904:	d010      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003906:	4ba9      	ldr	r3, [pc, #676]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800390c:	4aa7      	ldr	r2, [pc, #668]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800390e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003912:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003916:	4ba5      	ldr	r3, [pc, #660]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003918:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	49a2      	ldr	r1, [pc, #648]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003934:	4b9d      	ldr	r3, [pc, #628]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003942:	499a      	ldr	r1, [pc, #616]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003956:	4b95      	ldr	r3, [pc, #596]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003964:	4991      	ldr	r1, [pc, #580]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003978:	4b8c      	ldr	r3, [pc, #560]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003986:	4989      	ldr	r1, [pc, #548]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800399a:	4b84      	ldr	r3, [pc, #528]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	4980      	ldr	r1, [pc, #512]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039bc:	4b7b      	ldr	r3, [pc, #492]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	f023 0203 	bic.w	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	4978      	ldr	r1, [pc, #480]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039de:	4b73      	ldr	r3, [pc, #460]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e4:	f023 020c 	bic.w	r2, r3, #12
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ec:	496f      	ldr	r1, [pc, #444]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a00:	4b6a      	ldr	r3, [pc, #424]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	4967      	ldr	r1, [pc, #412]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a22:	4b62      	ldr	r3, [pc, #392]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a28:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a30:	495e      	ldr	r1, [pc, #376]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a44:	4b59      	ldr	r3, [pc, #356]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	4956      	ldr	r1, [pc, #344]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a66:	4b51      	ldr	r3, [pc, #324]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a74:	494d      	ldr	r1, [pc, #308]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a88:	4b48      	ldr	r3, [pc, #288]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a96:	4945      	ldr	r1, [pc, #276]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003aaa:	4b40      	ldr	r3, [pc, #256]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab8:	493c      	ldr	r1, [pc, #240]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003acc:	4b37      	ldr	r3, [pc, #220]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ada:	4934      	ldr	r1, [pc, #208]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d011      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003aee:	4b2f      	ldr	r3, [pc, #188]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003afc:	492b      	ldr	r1, [pc, #172]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b2e:	4b1f      	ldr	r3, [pc, #124]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b34:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3c:	491b      	ldr	r1, [pc, #108]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00b      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b50:	4b16      	ldr	r3, [pc, #88]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b60:	4912      	ldr	r1, [pc, #72]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00b      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003b74:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b84:	4909      	ldr	r1, [pc, #36]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00f      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b98:	4b04      	ldr	r3, [pc, #16]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba8:	e002      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	4986      	ldr	r1, [pc, #536]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00b      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003bc4:	4b81      	ldr	r3, [pc, #516]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bd4:	497d      	ldr	r1, [pc, #500]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d006      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80d6 	beq.w	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bf0:	4b76      	ldr	r3, [pc, #472]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a75      	ldr	r2, [pc, #468]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bfc:	f7fe f97a 	bl	8001ef4 <HAL_GetTick>
 8003c00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c04:	f7fe f976 	bl	8001ef4 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	; 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e195      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c16:	4b6d      	ldr	r3, [pc, #436]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d021      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d11d      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c36:	4b65      	ldr	r3, [pc, #404]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c3c:	0c1b      	lsrs	r3, r3, #16
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c44:	4b61      	ldr	r3, [pc, #388]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c4a:	0e1b      	lsrs	r3, r3, #24
 8003c4c:	f003 030f 	and.w	r3, r3, #15
 8003c50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	019a      	lsls	r2, r3, #6
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	041b      	lsls	r3, r3, #16
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	061b      	lsls	r3, r3, #24
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	071b      	lsls	r3, r3, #28
 8003c6a:	4958      	ldr	r1, [pc, #352]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d004      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c86:	d00a      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d02e      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c9c:	d129      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c9e:	4b4b      	ldr	r3, [pc, #300]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca4:	0c1b      	lsrs	r3, r3, #16
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cac:	4b47      	ldr	r3, [pc, #284]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cb2:	0f1b      	lsrs	r3, r3, #28
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	019a      	lsls	r2, r3, #6
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	041b      	lsls	r3, r3, #16
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	061b      	lsls	r3, r3, #24
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	071b      	lsls	r3, r3, #28
 8003cd2:	493e      	ldr	r1, [pc, #248]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cda:	4b3c      	ldr	r3, [pc, #240]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce0:	f023 021f 	bic.w	r2, r3, #31
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	4938      	ldr	r1, [pc, #224]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d01d      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cfe:	4b33      	ldr	r3, [pc, #204]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d04:	0e1b      	lsrs	r3, r3, #24
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d0c:	4b2f      	ldr	r3, [pc, #188]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d12:	0f1b      	lsrs	r3, r3, #28
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	019a      	lsls	r2, r3, #6
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	041b      	lsls	r3, r3, #16
 8003d26:	431a      	orrs	r2, r3
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	061b      	lsls	r3, r3, #24
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	071b      	lsls	r3, r3, #28
 8003d32:	4926      	ldr	r1, [pc, #152]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d011      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	019a      	lsls	r2, r3, #6
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	041b      	lsls	r3, r3, #16
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	061b      	lsls	r3, r3, #24
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	071b      	lsls	r3, r3, #28
 8003d62:	491a      	ldr	r1, [pc, #104]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d6a:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d76:	f7fe f8bd 	bl	8001ef4 <HAL_GetTick>
 8003d7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d7e:	f7fe f8b9 	bl	8001ef4 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b64      	cmp	r3, #100	; 0x64
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e0d8      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d90:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	f040 80ce 	bne.w	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003da4:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a08      	ldr	r2, [pc, #32]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db0:	f7fe f8a0 	bl	8001ef4 <HAL_GetTick>
 8003db4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003db6:	e00b      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003db8:	f7fe f89c 	bl	8001ef4 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	; 0x64
 8003dc4:	d904      	bls.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e0bb      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003dca:	bf00      	nop
 8003dcc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dd0:	4b5e      	ldr	r3, [pc, #376]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ddc:	d0ec      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d02e      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d12a      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e06:	4b51      	ldr	r3, [pc, #324]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0c:	0c1b      	lsrs	r3, r3, #16
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e14:	4b4d      	ldr	r3, [pc, #308]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	0f1b      	lsrs	r3, r3, #28
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	019a      	lsls	r2, r3, #6
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	061b      	lsls	r3, r3, #24
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	071b      	lsls	r3, r3, #28
 8003e3a:	4944      	ldr	r1, [pc, #272]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e42:	4b42      	ldr	r3, [pc, #264]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	3b01      	subs	r3, #1
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	493d      	ldr	r1, [pc, #244]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d022      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e70:	d11d      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e72:	4b36      	ldr	r3, [pc, #216]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e78:	0e1b      	lsrs	r3, r3, #24
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e80:	4b32      	ldr	r3, [pc, #200]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	0f1b      	lsrs	r3, r3, #28
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	019a      	lsls	r2, r3, #6
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	041b      	lsls	r3, r3, #16
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	061b      	lsls	r3, r3, #24
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	071b      	lsls	r3, r3, #28
 8003ea6:	4929      	ldr	r1, [pc, #164]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d028      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003eba:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	0e1b      	lsrs	r3, r3, #24
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ec8:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	0c1b      	lsrs	r3, r3, #16
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	019a      	lsls	r2, r3, #6
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	041b      	lsls	r3, r3, #16
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	061b      	lsls	r3, r3, #24
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	071b      	lsls	r3, r3, #28
 8003eee:	4917      	ldr	r1, [pc, #92]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ef6:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	4911      	ldr	r1, [pc, #68]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a0e      	ldr	r2, [pc, #56]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f18:	f7fd ffec 	bl	8001ef4 <HAL_GetTick>
 8003f1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f20:	f7fd ffe8 	bl	8001ef4 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	; 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e007      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f3e:	d1ef      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3720      	adds	r7, #32
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40023800 	.word	0x40023800

08003f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e049      	b.n	8003ff6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f841 	bl	8003ffe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4610      	mov	r0, r2
 8003f90:	f000 fa00 	bl	8004394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
	...

08004014 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b01      	cmp	r3, #1
 8004026:	d001      	beq.n	800402c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e054      	b.n	80040d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a26      	ldr	r2, [pc, #152]	; (80040e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d022      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x80>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004056:	d01d      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x80>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a22      	ldr	r2, [pc, #136]	; (80040e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d018      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x80>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a21      	ldr	r2, [pc, #132]	; (80040ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x80>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1f      	ldr	r2, [pc, #124]	; (80040f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00e      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x80>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1e      	ldr	r2, [pc, #120]	; (80040f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d009      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x80>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1c      	ldr	r2, [pc, #112]	; (80040f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x80>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1b      	ldr	r2, [pc, #108]	; (80040fc <HAL_TIM_Base_Start_IT+0xe8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d115      	bne.n	80040c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	4b19      	ldr	r3, [pc, #100]	; (8004100 <HAL_TIM_Base_Start_IT+0xec>)
 800409c:	4013      	ands	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b06      	cmp	r3, #6
 80040a4:	d015      	beq.n	80040d2 <HAL_TIM_Base_Start_IT+0xbe>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ac:	d011      	beq.n	80040d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0201 	orr.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040be:	e008      	b.n	80040d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	e000      	b.n	80040d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40010000 	.word	0x40010000
 80040e8:	40000400 	.word	0x40000400
 80040ec:	40000800 	.word	0x40000800
 80040f0:	40000c00 	.word	0x40000c00
 80040f4:	40010400 	.word	0x40010400
 80040f8:	40014000 	.word	0x40014000
 80040fc:	40001800 	.word	0x40001800
 8004100:	00010007 	.word	0x00010007

08004104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b02      	cmp	r3, #2
 8004118:	d122      	bne.n	8004160 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b02      	cmp	r3, #2
 8004126:	d11b      	bne.n	8004160 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0202 	mvn.w	r2, #2
 8004130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f905 	bl	8004356 <HAL_TIM_IC_CaptureCallback>
 800414c:	e005      	b.n	800415a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f8f7 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f908 	bl	800436a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b04      	cmp	r3, #4
 800416c:	d122      	bne.n	80041b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b04      	cmp	r3, #4
 800417a:	d11b      	bne.n	80041b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0204 	mvn.w	r2, #4
 8004184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2202      	movs	r2, #2
 800418a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f8db 	bl	8004356 <HAL_TIM_IC_CaptureCallback>
 80041a0:	e005      	b.n	80041ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f8cd 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f8de 	bl	800436a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d122      	bne.n	8004208 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d11b      	bne.n	8004208 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0208 	mvn.w	r2, #8
 80041d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2204      	movs	r2, #4
 80041de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f8b1 	bl	8004356 <HAL_TIM_IC_CaptureCallback>
 80041f4:	e005      	b.n	8004202 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f8a3 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f8b4 	bl	800436a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b10      	cmp	r3, #16
 8004214:	d122      	bne.n	800425c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b10      	cmp	r3, #16
 8004222:	d11b      	bne.n	800425c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0210 	mvn.w	r2, #16
 800422c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2208      	movs	r2, #8
 8004232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f887 	bl	8004356 <HAL_TIM_IC_CaptureCallback>
 8004248:	e005      	b.n	8004256 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f879 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f88a 	bl	800436a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b01      	cmp	r3, #1
 8004268:	d10e      	bne.n	8004288 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b01      	cmp	r3, #1
 8004276:	d107      	bne.n	8004288 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0201 	mvn.w	r2, #1
 8004280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fd fb16 	bl	80018b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004292:	2b80      	cmp	r3, #128	; 0x80
 8004294:	d10e      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a0:	2b80      	cmp	r3, #128	; 0x80
 80042a2:	d107      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f91a 	bl	80044e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c2:	d10e      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	2b80      	cmp	r3, #128	; 0x80
 80042d0:	d107      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f90d 	bl	80044fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	d10e      	bne.n	800430e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fa:	2b40      	cmp	r3, #64	; 0x40
 80042fc:	d107      	bne.n	800430e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f838 	bl	800437e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b20      	cmp	r3, #32
 800431a:	d10e      	bne.n	800433a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b20      	cmp	r3, #32
 8004328:	d107      	bne.n	800433a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f06f 0220 	mvn.w	r2, #32
 8004332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f8cd 	bl	80044d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a40      	ldr	r2, [pc, #256]	; (80044a8 <TIM_Base_SetConfig+0x114>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d013      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b2:	d00f      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a3d      	ldr	r2, [pc, #244]	; (80044ac <TIM_Base_SetConfig+0x118>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00b      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a3c      	ldr	r2, [pc, #240]	; (80044b0 <TIM_Base_SetConfig+0x11c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d007      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a3b      	ldr	r2, [pc, #236]	; (80044b4 <TIM_Base_SetConfig+0x120>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d003      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a3a      	ldr	r2, [pc, #232]	; (80044b8 <TIM_Base_SetConfig+0x124>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d108      	bne.n	80043e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a2f      	ldr	r2, [pc, #188]	; (80044a8 <TIM_Base_SetConfig+0x114>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d02b      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f4:	d027      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a2c      	ldr	r2, [pc, #176]	; (80044ac <TIM_Base_SetConfig+0x118>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d023      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a2b      	ldr	r2, [pc, #172]	; (80044b0 <TIM_Base_SetConfig+0x11c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d01f      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a2a      	ldr	r2, [pc, #168]	; (80044b4 <TIM_Base_SetConfig+0x120>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d01b      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a29      	ldr	r2, [pc, #164]	; (80044b8 <TIM_Base_SetConfig+0x124>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d017      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a28      	ldr	r2, [pc, #160]	; (80044bc <TIM_Base_SetConfig+0x128>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d013      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a27      	ldr	r2, [pc, #156]	; (80044c0 <TIM_Base_SetConfig+0x12c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00f      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a26      	ldr	r2, [pc, #152]	; (80044c4 <TIM_Base_SetConfig+0x130>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00b      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a25      	ldr	r2, [pc, #148]	; (80044c8 <TIM_Base_SetConfig+0x134>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d007      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a24      	ldr	r2, [pc, #144]	; (80044cc <TIM_Base_SetConfig+0x138>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d003      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a23      	ldr	r2, [pc, #140]	; (80044d0 <TIM_Base_SetConfig+0x13c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d108      	bne.n	8004458 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <TIM_Base_SetConfig+0x114>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d003      	beq.n	800448c <TIM_Base_SetConfig+0xf8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a0c      	ldr	r2, [pc, #48]	; (80044b8 <TIM_Base_SetConfig+0x124>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d103      	bne.n	8004494 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	615a      	str	r2, [r3, #20]
}
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40010000 	.word	0x40010000
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40000800 	.word	0x40000800
 80044b4:	40000c00 	.word	0x40000c00
 80044b8:	40010400 	.word	0x40010400
 80044bc:	40014000 	.word	0x40014000
 80044c0:	40014400 	.word	0x40014400
 80044c4:	40014800 	.word	0x40014800
 80044c8:	40001800 	.word	0x40001800
 80044cc:	40001c00 	.word	0x40001c00
 80044d0:	40002000 	.word	0x40002000

080044d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e040      	b.n	80045a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004526:	2b00      	cmp	r3, #0
 8004528:	d106      	bne.n	8004538 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7fd f9fe 	bl	8001934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2224      	movs	r2, #36	; 0x24
 800453c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0201 	bic.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fc8e 	bl	8004e70 <UART_SetConfig>
 8004554:	4603      	mov	r3, r0
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e022      	b.n	80045a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fee4 	bl	8005334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800457a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800458a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 ff6b 	bl	8005478 <UART_CheckIdleState>
 80045a2:	4603      	mov	r3, r0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b08b      	sub	sp, #44	; 0x2c
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	4613      	mov	r3, r2
 80045b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d156      	bne.n	8004670 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_UART_Transmit_IT+0x22>
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e04f      	b.n	8004672 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_UART_Transmit_IT+0x34>
 80045dc:	2302      	movs	r3, #2
 80045de:	e048      	b.n	8004672 <HAL_UART_Transmit_IT+0xc6>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	88fa      	ldrh	r2, [r7, #6]
 80045f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	88fa      	ldrh	r2, [r7, #6]
 80045fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2221      	movs	r2, #33	; 0x21
 8004610:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461a:	d107      	bne.n	800462c <HAL_UART_Transmit_IT+0x80>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d103      	bne.n	800462c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4a16      	ldr	r2, [pc, #88]	; (8004680 <HAL_UART_Transmit_IT+0xd4>)
 8004628:	669a      	str	r2, [r3, #104]	; 0x68
 800462a:	e002      	b.n	8004632 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a15      	ldr	r2, [pc, #84]	; (8004684 <HAL_UART_Transmit_IT+0xd8>)
 8004630:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	613b      	str	r3, [r7, #16]
   return(result);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	623b      	str	r3, [r7, #32]
 800465a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	69f9      	ldr	r1, [r7, #28]
 800465e:	6a3a      	ldr	r2, [r7, #32]
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	61bb      	str	r3, [r7, #24]
   return(result);
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e6      	bne.n	800463a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	e000      	b.n	8004672 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004670:	2302      	movs	r3, #2
  }
}
 8004672:	4618      	mov	r0, r3
 8004674:	372c      	adds	r7, #44	; 0x2c
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	08005ba9 	.word	0x08005ba9
 8004684:	08005af3 	.word	0x08005af3

08004688 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08a      	sub	sp, #40	; 0x28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	4613      	mov	r3, r2
 8004694:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800469a:	2b20      	cmp	r3, #32
 800469c:	d13d      	bne.n	800471a <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_UART_Receive_DMA+0x22>
 80046a4:	88fb      	ldrh	r3, [r7, #6]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e036      	b.n	800471c <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_UART_Receive_DMA+0x34>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e02f      	b.n	800471c <HAL_UART_Receive_DMA+0x94>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d018      	beq.n	800470a <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	613b      	str	r3, [r7, #16]
   return(result);
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	623b      	str	r3, [r7, #32]
 80046f8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	69f9      	ldr	r1, [r7, #28]
 80046fc:	6a3a      	ldr	r2, [r7, #32]
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	61bb      	str	r3, [r7, #24]
   return(result);
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e6      	bne.n	80046d8 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800470a:	88fb      	ldrh	r3, [r7, #6]
 800470c:	461a      	mov	r2, r3
 800470e:	68b9      	ldr	r1, [r7, #8]
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 ffbf 	bl	8005694 <UART_Start_Receive_DMA>
 8004716:	4603      	mov	r3, r0
 8004718:	e000      	b.n	800471c <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800471a:	2302      	movs	r3, #2
  }
}
 800471c:	4618      	mov	r0, r3
 800471e:	3728      	adds	r7, #40	; 0x28
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b090      	sub	sp, #64	; 0x40
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004730:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004736:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004742:	2b80      	cmp	r3, #128	; 0x80
 8004744:	d139      	bne.n	80047ba <HAL_UART_DMAStop+0x96>
 8004746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004748:	2b21      	cmp	r3, #33	; 0x21
 800474a:	d136      	bne.n	80047ba <HAL_UART_DMAStop+0x96>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3308      	adds	r3, #8
 8004752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	e853 3f00 	ldrex	r3, [r3]
 800475a:	61fb      	str	r3, [r7, #28]
   return(result);
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004762:	637b      	str	r3, [r7, #52]	; 0x34
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3308      	adds	r3, #8
 800476a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800476c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004774:	e841 2300 	strex	r3, r2, [r1]
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e5      	bne.n	800474c <HAL_UART_DMAStop+0x28>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d015      	beq.n	80047b4 <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800478c:	4618      	mov	r0, r3
 800478e:	f7fd fdd1 	bl	8002334 <HAL_DMA_Abort>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00d      	beq.n	80047b4 <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800479c:	4618      	mov	r0, r3
 800479e:	f7fd ffe5 	bl	800276c <HAL_DMA_GetError>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	d105      	bne.n	80047b4 <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2210      	movs	r2, #16
 80047ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e044      	b.n	800483e <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f001 f813 	bl	80057e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d139      	bne.n	800483c <HAL_UART_DMAStop+0x118>
 80047c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ca:	2b22      	cmp	r3, #34	; 0x22
 80047cc:	d136      	bne.n	800483c <HAL_UART_DMAStop+0x118>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3308      	adds	r3, #8
 80047d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e4:	633b      	str	r3, [r7, #48]	; 0x30
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3308      	adds	r3, #8
 80047ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ee:	61ba      	str	r2, [r7, #24]
 80047f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f2:	6979      	ldr	r1, [r7, #20]
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	613b      	str	r3, [r7, #16]
   return(result);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e5      	bne.n	80047ce <HAL_UART_DMAStop+0xaa>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	2b00      	cmp	r3, #0
 8004808:	d015      	beq.n	8004836 <HAL_UART_DMAStop+0x112>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	4618      	mov	r0, r3
 8004810:	f7fd fd90 	bl	8002334 <HAL_DMA_Abort>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00d      	beq.n	8004836 <HAL_UART_DMAStop+0x112>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	4618      	mov	r0, r3
 8004820:	f7fd ffa4 	bl	800276c <HAL_DMA_GetError>
 8004824:	4603      	mov	r3, r0
 8004826:	2b20      	cmp	r3, #32
 8004828:	d105      	bne.n	8004836 <HAL_UART_DMAStop+0x112>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2210      	movs	r2, #16
 800482e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e003      	b.n	800483e <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fff8 	bl	800582c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3740      	adds	r7, #64	; 0x40
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b0ba      	sub	sp, #232	; 0xe8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800486e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004872:	f640 030f 	movw	r3, #2063	; 0x80f
 8004876:	4013      	ands	r3, r2
 8004878:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800487c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d115      	bne.n	80048b0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00f      	beq.n	80048b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d009      	beq.n	80048b0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 82a4 	beq.w	8004dee <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	4798      	blx	r3
      }
      return;
 80048ae:	e29e      	b.n	8004dee <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 8117 	beq.w	8004ae8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80048c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80048ca:	4b85      	ldr	r3, [pc, #532]	; (8004ae0 <HAL_UART_IRQHandler+0x298>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 810a 	beq.w	8004ae8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d011      	beq.n	8004904 <HAL_UART_IRQHandler+0xbc>
 80048e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00b      	beq.n	8004904 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2201      	movs	r2, #1
 80048f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048fa:	f043 0201 	orr.w	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d011      	beq.n	8004934 <HAL_UART_IRQHandler+0xec>
 8004910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00b      	beq.n	8004934 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2202      	movs	r2, #2
 8004922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800492a:	f043 0204 	orr.w	r2, r3, #4
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d011      	beq.n	8004964 <HAL_UART_IRQHandler+0x11c>
 8004940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00b      	beq.n	8004964 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2204      	movs	r2, #4
 8004952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800495a:	f043 0202 	orr.w	r2, r3, #2
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b00      	cmp	r3, #0
 800496e:	d017      	beq.n	80049a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b00      	cmp	r3, #0
 800497a:	d105      	bne.n	8004988 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800497c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004980:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00b      	beq.n	80049a0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2208      	movs	r2, #8
 800498e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004996:	f043 0208 	orr.w	r2, r3, #8
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d012      	beq.n	80049d2 <HAL_UART_IRQHandler+0x18a>
 80049ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00c      	beq.n	80049d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049c8:	f043 0220 	orr.w	r2, r3, #32
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 820a 	beq.w	8004df2 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80049de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00d      	beq.n	8004a06 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	2b40      	cmp	r3, #64	; 0x40
 8004a1c:	d005      	beq.n	8004a2a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d04f      	beq.n	8004aca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fefe 	bl	800582c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b40      	cmp	r3, #64	; 0x40
 8004a3c:	d141      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3308      	adds	r3, #8
 8004a44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3308      	adds	r3, #8
 8004a66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a7a:	e841 2300 	strex	r3, r2, [r1]
 8004a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1d9      	bne.n	8004a3e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d013      	beq.n	8004aba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	4a13      	ldr	r2, [pc, #76]	; (8004ae4 <HAL_UART_IRQHandler+0x29c>)
 8004a98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fd fcb8 	bl	8002414 <HAL_DMA_Abort_IT>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d017      	beq.n	8004ada <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab8:	e00f      	b.n	8004ada <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f9b8 	bl	8004e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac0:	e00b      	b.n	8004ada <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f9b4 	bl	8004e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac8:	e007      	b.n	8004ada <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f9b0 	bl	8004e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004ad8:	e18b      	b.n	8004df2 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ada:	bf00      	nop
    return;
 8004adc:	e189      	b.n	8004df2 <HAL_UART_IRQHandler+0x5aa>
 8004ade:	bf00      	nop
 8004ae0:	04000120 	.word	0x04000120
 8004ae4:	08005ac7 	.word	0x08005ac7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	f040 8144 	bne.w	8004d7a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 813d 	beq.w	8004d7a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8136 	beq.w	8004d7a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2210      	movs	r2, #16
 8004b14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b40      	cmp	r3, #64	; 0x40
 8004b22:	f040 80b2 	bne.w	8004c8a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b32:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 815d 	beq.w	8004df6 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b46:	429a      	cmp	r2, r3
 8004b48:	f080 8155 	bcs.w	8004df6 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b60:	f000 8085 	beq.w	8004c6e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b9e:	e841 2300 	strex	r3, r2, [r1]
 8004ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1da      	bne.n	8004b64 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3308      	adds	r3, #8
 8004bb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bc0:	f023 0301 	bic.w	r3, r3, #1
 8004bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3308      	adds	r3, #8
 8004bce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1e1      	bne.n	8004bae <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3308      	adds	r3, #8
 8004bf0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bf4:	e853 3f00 	ldrex	r3, [r3]
 8004bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c16:	e841 2300 	strex	r3, r2, [r1]
 8004c1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1e3      	bne.n	8004bea <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2220      	movs	r2, #32
 8004c26:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c3e:	f023 0310 	bic.w	r3, r3, #16
 8004c42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c50:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c52:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e4      	bne.n	8004c2e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fd fb63 	bl	8002334 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	4619      	mov	r1, r3
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f8de 	bl	8004e44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c88:	e0b5      	b.n	8004df6 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 80a7 	beq.w	8004dfa <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004cac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80a2 	beq.w	8004dfa <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8004cda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e4      	bne.n	8004cb6 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	623b      	str	r3, [r7, #32]
   return(result);
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
 8004d02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d10:	633a      	str	r2, [r7, #48]	; 0x30
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d18:	e841 2300 	strex	r3, r2, [r1]
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e3      	bne.n	8004cec <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2220      	movs	r2, #32
 8004d28:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0310 	bic.w	r3, r3, #16
 8004d4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	69b9      	ldr	r1, [r7, #24]
 8004d5e:	69fa      	ldr	r2, [r7, #28]
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	617b      	str	r3, [r7, #20]
   return(result);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e4      	bne.n	8004d36 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d70:	4619      	mov	r1, r3
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f866 	bl	8004e44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d78:	e03f      	b.n	8004dfa <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00e      	beq.n	8004da4 <HAL_UART_IRQHandler+0x55c>
 8004d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d008      	beq.n	8004da4 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f85d 	bl	8004e5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004da2:	e02d      	b.n	8004e00 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00e      	beq.n	8004dce <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01c      	beq.n	8004dfe <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	4798      	blx	r3
    }
    return;
 8004dcc:	e017      	b.n	8004dfe <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d012      	beq.n	8004e00 <HAL_UART_IRQHandler+0x5b8>
 8004dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00c      	beq.n	8004e00 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 ff3e 	bl	8005c68 <UART_EndTransmit_IT>
    return;
 8004dec:	e008      	b.n	8004e00 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004dee:	bf00      	nop
 8004df0:	e006      	b.n	8004e00 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004df2:	bf00      	nop
 8004df4:	e004      	b.n	8004e00 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004df6:	bf00      	nop
 8004df8:	e002      	b.n	8004e00 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004dfa:	bf00      	nop
 8004dfc:	e000      	b.n	8004e00 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004dfe:	bf00      	nop
  }

}
 8004e00:	37e8      	adds	r7, #232	; 0xe8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop

08004e08 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	4ba7      	ldr	r3, [pc, #668]	; (8005138 <UART_SetConfig+0x2c8>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6812      	ldr	r2, [r2, #0]
 8004ea2:	6979      	ldr	r1, [r7, #20]
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a95      	ldr	r2, [pc, #596]	; (800513c <UART_SetConfig+0x2cc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d120      	bne.n	8004f2e <UART_SetConfig+0xbe>
 8004eec:	4b94      	ldr	r3, [pc, #592]	; (8005140 <UART_SetConfig+0x2d0>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d816      	bhi.n	8004f28 <UART_SetConfig+0xb8>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <UART_SetConfig+0x90>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f11 	.word	0x08004f11
 8004f04:	08004f1d 	.word	0x08004f1d
 8004f08:	08004f17 	.word	0x08004f17
 8004f0c:	08004f23 	.word	0x08004f23
 8004f10:	2301      	movs	r3, #1
 8004f12:	77fb      	strb	r3, [r7, #31]
 8004f14:	e14f      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f16:	2302      	movs	r3, #2
 8004f18:	77fb      	strb	r3, [r7, #31]
 8004f1a:	e14c      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	77fb      	strb	r3, [r7, #31]
 8004f20:	e149      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f22:	2308      	movs	r3, #8
 8004f24:	77fb      	strb	r3, [r7, #31]
 8004f26:	e146      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f28:	2310      	movs	r3, #16
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e143      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a84      	ldr	r2, [pc, #528]	; (8005144 <UART_SetConfig+0x2d4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d132      	bne.n	8004f9e <UART_SetConfig+0x12e>
 8004f38:	4b81      	ldr	r3, [pc, #516]	; (8005140 <UART_SetConfig+0x2d0>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b0c      	cmp	r3, #12
 8004f44:	d828      	bhi.n	8004f98 <UART_SetConfig+0x128>
 8004f46:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <UART_SetConfig+0xdc>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004f81 	.word	0x08004f81
 8004f50:	08004f99 	.word	0x08004f99
 8004f54:	08004f99 	.word	0x08004f99
 8004f58:	08004f99 	.word	0x08004f99
 8004f5c:	08004f8d 	.word	0x08004f8d
 8004f60:	08004f99 	.word	0x08004f99
 8004f64:	08004f99 	.word	0x08004f99
 8004f68:	08004f99 	.word	0x08004f99
 8004f6c:	08004f87 	.word	0x08004f87
 8004f70:	08004f99 	.word	0x08004f99
 8004f74:	08004f99 	.word	0x08004f99
 8004f78:	08004f99 	.word	0x08004f99
 8004f7c:	08004f93 	.word	0x08004f93
 8004f80:	2300      	movs	r3, #0
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e117      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f86:	2302      	movs	r3, #2
 8004f88:	77fb      	strb	r3, [r7, #31]
 8004f8a:	e114      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e111      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f92:	2308      	movs	r3, #8
 8004f94:	77fb      	strb	r3, [r7, #31]
 8004f96:	e10e      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	77fb      	strb	r3, [r7, #31]
 8004f9c:	e10b      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a69      	ldr	r2, [pc, #420]	; (8005148 <UART_SetConfig+0x2d8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d120      	bne.n	8004fea <UART_SetConfig+0x17a>
 8004fa8:	4b65      	ldr	r3, [pc, #404]	; (8005140 <UART_SetConfig+0x2d0>)
 8004faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fb2:	2b30      	cmp	r3, #48	; 0x30
 8004fb4:	d013      	beq.n	8004fde <UART_SetConfig+0x16e>
 8004fb6:	2b30      	cmp	r3, #48	; 0x30
 8004fb8:	d814      	bhi.n	8004fe4 <UART_SetConfig+0x174>
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d009      	beq.n	8004fd2 <UART_SetConfig+0x162>
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d810      	bhi.n	8004fe4 <UART_SetConfig+0x174>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <UART_SetConfig+0x15c>
 8004fc6:	2b10      	cmp	r3, #16
 8004fc8:	d006      	beq.n	8004fd8 <UART_SetConfig+0x168>
 8004fca:	e00b      	b.n	8004fe4 <UART_SetConfig+0x174>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	e0f1      	b.n	80051b6 <UART_SetConfig+0x346>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	77fb      	strb	r3, [r7, #31]
 8004fd6:	e0ee      	b.n	80051b6 <UART_SetConfig+0x346>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	77fb      	strb	r3, [r7, #31]
 8004fdc:	e0eb      	b.n	80051b6 <UART_SetConfig+0x346>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	77fb      	strb	r3, [r7, #31]
 8004fe2:	e0e8      	b.n	80051b6 <UART_SetConfig+0x346>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	77fb      	strb	r3, [r7, #31]
 8004fe8:	e0e5      	b.n	80051b6 <UART_SetConfig+0x346>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a57      	ldr	r2, [pc, #348]	; (800514c <UART_SetConfig+0x2dc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d120      	bne.n	8005036 <UART_SetConfig+0x1c6>
 8004ff4:	4b52      	ldr	r3, [pc, #328]	; (8005140 <UART_SetConfig+0x2d0>)
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8005000:	d013      	beq.n	800502a <UART_SetConfig+0x1ba>
 8005002:	2bc0      	cmp	r3, #192	; 0xc0
 8005004:	d814      	bhi.n	8005030 <UART_SetConfig+0x1c0>
 8005006:	2b80      	cmp	r3, #128	; 0x80
 8005008:	d009      	beq.n	800501e <UART_SetConfig+0x1ae>
 800500a:	2b80      	cmp	r3, #128	; 0x80
 800500c:	d810      	bhi.n	8005030 <UART_SetConfig+0x1c0>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <UART_SetConfig+0x1a8>
 8005012:	2b40      	cmp	r3, #64	; 0x40
 8005014:	d006      	beq.n	8005024 <UART_SetConfig+0x1b4>
 8005016:	e00b      	b.n	8005030 <UART_SetConfig+0x1c0>
 8005018:	2300      	movs	r3, #0
 800501a:	77fb      	strb	r3, [r7, #31]
 800501c:	e0cb      	b.n	80051b6 <UART_SetConfig+0x346>
 800501e:	2302      	movs	r3, #2
 8005020:	77fb      	strb	r3, [r7, #31]
 8005022:	e0c8      	b.n	80051b6 <UART_SetConfig+0x346>
 8005024:	2304      	movs	r3, #4
 8005026:	77fb      	strb	r3, [r7, #31]
 8005028:	e0c5      	b.n	80051b6 <UART_SetConfig+0x346>
 800502a:	2308      	movs	r3, #8
 800502c:	77fb      	strb	r3, [r7, #31]
 800502e:	e0c2      	b.n	80051b6 <UART_SetConfig+0x346>
 8005030:	2310      	movs	r3, #16
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e0bf      	b.n	80051b6 <UART_SetConfig+0x346>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a45      	ldr	r2, [pc, #276]	; (8005150 <UART_SetConfig+0x2e0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d125      	bne.n	800508c <UART_SetConfig+0x21c>
 8005040:	4b3f      	ldr	r3, [pc, #252]	; (8005140 <UART_SetConfig+0x2d0>)
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800504e:	d017      	beq.n	8005080 <UART_SetConfig+0x210>
 8005050:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005054:	d817      	bhi.n	8005086 <UART_SetConfig+0x216>
 8005056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505a:	d00b      	beq.n	8005074 <UART_SetConfig+0x204>
 800505c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005060:	d811      	bhi.n	8005086 <UART_SetConfig+0x216>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <UART_SetConfig+0x1fe>
 8005066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800506a:	d006      	beq.n	800507a <UART_SetConfig+0x20a>
 800506c:	e00b      	b.n	8005086 <UART_SetConfig+0x216>
 800506e:	2300      	movs	r3, #0
 8005070:	77fb      	strb	r3, [r7, #31]
 8005072:	e0a0      	b.n	80051b6 <UART_SetConfig+0x346>
 8005074:	2302      	movs	r3, #2
 8005076:	77fb      	strb	r3, [r7, #31]
 8005078:	e09d      	b.n	80051b6 <UART_SetConfig+0x346>
 800507a:	2304      	movs	r3, #4
 800507c:	77fb      	strb	r3, [r7, #31]
 800507e:	e09a      	b.n	80051b6 <UART_SetConfig+0x346>
 8005080:	2308      	movs	r3, #8
 8005082:	77fb      	strb	r3, [r7, #31]
 8005084:	e097      	b.n	80051b6 <UART_SetConfig+0x346>
 8005086:	2310      	movs	r3, #16
 8005088:	77fb      	strb	r3, [r7, #31]
 800508a:	e094      	b.n	80051b6 <UART_SetConfig+0x346>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a30      	ldr	r2, [pc, #192]	; (8005154 <UART_SetConfig+0x2e4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d125      	bne.n	80050e2 <UART_SetConfig+0x272>
 8005096:	4b2a      	ldr	r3, [pc, #168]	; (8005140 <UART_SetConfig+0x2d0>)
 8005098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050a4:	d017      	beq.n	80050d6 <UART_SetConfig+0x266>
 80050a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050aa:	d817      	bhi.n	80050dc <UART_SetConfig+0x26c>
 80050ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b0:	d00b      	beq.n	80050ca <UART_SetConfig+0x25a>
 80050b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b6:	d811      	bhi.n	80050dc <UART_SetConfig+0x26c>
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <UART_SetConfig+0x254>
 80050bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c0:	d006      	beq.n	80050d0 <UART_SetConfig+0x260>
 80050c2:	e00b      	b.n	80050dc <UART_SetConfig+0x26c>
 80050c4:	2301      	movs	r3, #1
 80050c6:	77fb      	strb	r3, [r7, #31]
 80050c8:	e075      	b.n	80051b6 <UART_SetConfig+0x346>
 80050ca:	2302      	movs	r3, #2
 80050cc:	77fb      	strb	r3, [r7, #31]
 80050ce:	e072      	b.n	80051b6 <UART_SetConfig+0x346>
 80050d0:	2304      	movs	r3, #4
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e06f      	b.n	80051b6 <UART_SetConfig+0x346>
 80050d6:	2308      	movs	r3, #8
 80050d8:	77fb      	strb	r3, [r7, #31]
 80050da:	e06c      	b.n	80051b6 <UART_SetConfig+0x346>
 80050dc:	2310      	movs	r3, #16
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e069      	b.n	80051b6 <UART_SetConfig+0x346>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1c      	ldr	r2, [pc, #112]	; (8005158 <UART_SetConfig+0x2e8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d137      	bne.n	800515c <UART_SetConfig+0x2ec>
 80050ec:	4b14      	ldr	r3, [pc, #80]	; (8005140 <UART_SetConfig+0x2d0>)
 80050ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80050f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050fa:	d017      	beq.n	800512c <UART_SetConfig+0x2bc>
 80050fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005100:	d817      	bhi.n	8005132 <UART_SetConfig+0x2c2>
 8005102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005106:	d00b      	beq.n	8005120 <UART_SetConfig+0x2b0>
 8005108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800510c:	d811      	bhi.n	8005132 <UART_SetConfig+0x2c2>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <UART_SetConfig+0x2aa>
 8005112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005116:	d006      	beq.n	8005126 <UART_SetConfig+0x2b6>
 8005118:	e00b      	b.n	8005132 <UART_SetConfig+0x2c2>
 800511a:	2300      	movs	r3, #0
 800511c:	77fb      	strb	r3, [r7, #31]
 800511e:	e04a      	b.n	80051b6 <UART_SetConfig+0x346>
 8005120:	2302      	movs	r3, #2
 8005122:	77fb      	strb	r3, [r7, #31]
 8005124:	e047      	b.n	80051b6 <UART_SetConfig+0x346>
 8005126:	2304      	movs	r3, #4
 8005128:	77fb      	strb	r3, [r7, #31]
 800512a:	e044      	b.n	80051b6 <UART_SetConfig+0x346>
 800512c:	2308      	movs	r3, #8
 800512e:	77fb      	strb	r3, [r7, #31]
 8005130:	e041      	b.n	80051b6 <UART_SetConfig+0x346>
 8005132:	2310      	movs	r3, #16
 8005134:	77fb      	strb	r3, [r7, #31]
 8005136:	e03e      	b.n	80051b6 <UART_SetConfig+0x346>
 8005138:	efff69f3 	.word	0xefff69f3
 800513c:	40011000 	.word	0x40011000
 8005140:	40023800 	.word	0x40023800
 8005144:	40004400 	.word	0x40004400
 8005148:	40004800 	.word	0x40004800
 800514c:	40004c00 	.word	0x40004c00
 8005150:	40005000 	.word	0x40005000
 8005154:	40011400 	.word	0x40011400
 8005158:	40007800 	.word	0x40007800
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a71      	ldr	r2, [pc, #452]	; (8005328 <UART_SetConfig+0x4b8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d125      	bne.n	80051b2 <UART_SetConfig+0x342>
 8005166:	4b71      	ldr	r3, [pc, #452]	; (800532c <UART_SetConfig+0x4bc>)
 8005168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005170:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005174:	d017      	beq.n	80051a6 <UART_SetConfig+0x336>
 8005176:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800517a:	d817      	bhi.n	80051ac <UART_SetConfig+0x33c>
 800517c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005180:	d00b      	beq.n	800519a <UART_SetConfig+0x32a>
 8005182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005186:	d811      	bhi.n	80051ac <UART_SetConfig+0x33c>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <UART_SetConfig+0x324>
 800518c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005190:	d006      	beq.n	80051a0 <UART_SetConfig+0x330>
 8005192:	e00b      	b.n	80051ac <UART_SetConfig+0x33c>
 8005194:	2300      	movs	r3, #0
 8005196:	77fb      	strb	r3, [r7, #31]
 8005198:	e00d      	b.n	80051b6 <UART_SetConfig+0x346>
 800519a:	2302      	movs	r3, #2
 800519c:	77fb      	strb	r3, [r7, #31]
 800519e:	e00a      	b.n	80051b6 <UART_SetConfig+0x346>
 80051a0:	2304      	movs	r3, #4
 80051a2:	77fb      	strb	r3, [r7, #31]
 80051a4:	e007      	b.n	80051b6 <UART_SetConfig+0x346>
 80051a6:	2308      	movs	r3, #8
 80051a8:	77fb      	strb	r3, [r7, #31]
 80051aa:	e004      	b.n	80051b6 <UART_SetConfig+0x346>
 80051ac:	2310      	movs	r3, #16
 80051ae:	77fb      	strb	r3, [r7, #31]
 80051b0:	e001      	b.n	80051b6 <UART_SetConfig+0x346>
 80051b2:	2310      	movs	r3, #16
 80051b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051be:	d15a      	bne.n	8005276 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80051c0:	7ffb      	ldrb	r3, [r7, #31]
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d827      	bhi.n	8005216 <UART_SetConfig+0x3a6>
 80051c6:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <UART_SetConfig+0x35c>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	080051f1 	.word	0x080051f1
 80051d0:	080051f9 	.word	0x080051f9
 80051d4:	08005201 	.word	0x08005201
 80051d8:	08005217 	.word	0x08005217
 80051dc:	08005207 	.word	0x08005207
 80051e0:	08005217 	.word	0x08005217
 80051e4:	08005217 	.word	0x08005217
 80051e8:	08005217 	.word	0x08005217
 80051ec:	0800520f 	.word	0x0800520f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f0:	f7fe fa2c 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 80051f4:	61b8      	str	r0, [r7, #24]
        break;
 80051f6:	e013      	b.n	8005220 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051f8:	f7fe fa3c 	bl	8003674 <HAL_RCC_GetPCLK2Freq>
 80051fc:	61b8      	str	r0, [r7, #24]
        break;
 80051fe:	e00f      	b.n	8005220 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005200:	4b4b      	ldr	r3, [pc, #300]	; (8005330 <UART_SetConfig+0x4c0>)
 8005202:	61bb      	str	r3, [r7, #24]
        break;
 8005204:	e00c      	b.n	8005220 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005206:	f7fe f933 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 800520a:	61b8      	str	r0, [r7, #24]
        break;
 800520c:	e008      	b.n	8005220 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800520e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005212:	61bb      	str	r3, [r7, #24]
        break;
 8005214:	e004      	b.n	8005220 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	77bb      	strb	r3, [r7, #30]
        break;
 800521e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d074      	beq.n	8005310 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	005a      	lsls	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	085b      	lsrs	r3, r3, #1
 8005230:	441a      	add	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	fbb2 f3f3 	udiv	r3, r2, r3
 800523a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b0f      	cmp	r3, #15
 8005240:	d916      	bls.n	8005270 <UART_SetConfig+0x400>
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005248:	d212      	bcs.n	8005270 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f023 030f 	bic.w	r3, r3, #15
 8005252:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	b29b      	uxth	r3, r3
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	b29a      	uxth	r2, r3
 8005260:	89fb      	ldrh	r3, [r7, #14]
 8005262:	4313      	orrs	r3, r2
 8005264:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	89fa      	ldrh	r2, [r7, #14]
 800526c:	60da      	str	r2, [r3, #12]
 800526e:	e04f      	b.n	8005310 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	77bb      	strb	r3, [r7, #30]
 8005274:	e04c      	b.n	8005310 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005276:	7ffb      	ldrb	r3, [r7, #31]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d828      	bhi.n	80052ce <UART_SetConfig+0x45e>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <UART_SetConfig+0x414>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	080052a9 	.word	0x080052a9
 8005288:	080052b1 	.word	0x080052b1
 800528c:	080052b9 	.word	0x080052b9
 8005290:	080052cf 	.word	0x080052cf
 8005294:	080052bf 	.word	0x080052bf
 8005298:	080052cf 	.word	0x080052cf
 800529c:	080052cf 	.word	0x080052cf
 80052a0:	080052cf 	.word	0x080052cf
 80052a4:	080052c7 	.word	0x080052c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a8:	f7fe f9d0 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 80052ac:	61b8      	str	r0, [r7, #24]
        break;
 80052ae:	e013      	b.n	80052d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b0:	f7fe f9e0 	bl	8003674 <HAL_RCC_GetPCLK2Freq>
 80052b4:	61b8      	str	r0, [r7, #24]
        break;
 80052b6:	e00f      	b.n	80052d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b8:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <UART_SetConfig+0x4c0>)
 80052ba:	61bb      	str	r3, [r7, #24]
        break;
 80052bc:	e00c      	b.n	80052d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052be:	f7fe f8d7 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 80052c2:	61b8      	str	r0, [r7, #24]
        break;
 80052c4:	e008      	b.n	80052d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ca:	61bb      	str	r3, [r7, #24]
        break;
 80052cc:	e004      	b.n	80052d8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	77bb      	strb	r3, [r7, #30]
        break;
 80052d6:	bf00      	nop
    }

    if (pclk != 0U)
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d018      	beq.n	8005310 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	085a      	lsrs	r2, r3, #1
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	441a      	add	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	2b0f      	cmp	r3, #15
 80052f6:	d909      	bls.n	800530c <UART_SetConfig+0x49c>
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fe:	d205      	bcs.n	800530c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	b29a      	uxth	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60da      	str	r2, [r3, #12]
 800530a:	e001      	b.n	8005310 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800531c:	7fbb      	ldrb	r3, [r7, #30]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3720      	adds	r7, #32
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40007c00 	.word	0x40007c00
 800532c:	40023800 	.word	0x40023800
 8005330:	00f42400 	.word	0x00f42400

08005334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01a      	beq.n	800544a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005432:	d10a      	bne.n	800544a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	605a      	str	r2, [r3, #4]
  }
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af02      	add	r7, sp, #8
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005488:	f7fc fd34 	bl	8001ef4 <HAL_GetTick>
 800548c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b08      	cmp	r3, #8
 800549a:	d10e      	bne.n	80054ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800549c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f82d 	bl	800550a <UART_WaitOnFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e023      	b.n	8005502 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d10e      	bne.n	80054e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f817 	bl	800550a <UART_WaitOnFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e00d      	b.n	8005502 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b09c      	sub	sp, #112	; 0x70
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	4613      	mov	r3, r2
 8005518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800551a:	e0a5      	b.n	8005668 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800551e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005522:	f000 80a1 	beq.w	8005668 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005526:	f7fc fce5 	bl	8001ef4 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005532:	429a      	cmp	r2, r3
 8005534:	d302      	bcc.n	800553c <UART_WaitOnFlagUntilTimeout+0x32>
 8005536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005538:	2b00      	cmp	r3, #0
 800553a:	d13e      	bne.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800554a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005550:	667b      	str	r3, [r7, #100]	; 0x64
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800555a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800555c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005560:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1e6      	bne.n	800553c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3308      	adds	r3, #8
 8005574:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	f023 0301 	bic.w	r3, r3, #1
 8005584:	663b      	str	r3, [r7, #96]	; 0x60
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3308      	adds	r3, #8
 800558c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800558e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005590:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800559c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e5      	bne.n	800556e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2220      	movs	r2, #32
 80055ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e067      	b.n	800568a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d04f      	beq.n	8005668 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d6:	d147      	bne.n	8005668 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	461a      	mov	r2, r3
 80055fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005600:	637b      	str	r3, [r7, #52]	; 0x34
 8005602:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e6      	bne.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3308      	adds	r3, #8
 800561a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	613b      	str	r3, [r7, #16]
   return(result);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	66bb      	str	r3, [r7, #104]	; 0x68
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3308      	adds	r3, #8
 8005632:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005634:	623a      	str	r2, [r7, #32]
 8005636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	69f9      	ldr	r1, [r7, #28]
 800563a:	6a3a      	ldr	r2, [r7, #32]
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	61bb      	str	r3, [r7, #24]
   return(result);
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e5      	bne.n	8005614 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e010      	b.n	800568a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69da      	ldr	r2, [r3, #28]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	4013      	ands	r3, r2
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	429a      	cmp	r2, r3
 8005676:	bf0c      	ite	eq
 8005678:	2301      	moveq	r3, #1
 800567a:	2300      	movne	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	461a      	mov	r2, r3
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	429a      	cmp	r2, r3
 8005684:	f43f af4a 	beq.w	800551c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3770      	adds	r7, #112	; 0x70
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b096      	sub	sp, #88	; 0x58
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	4613      	mov	r3, r2
 80056a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	88fa      	ldrh	r2, [r7, #6]
 80056ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2222      	movs	r2, #34	; 0x22
 80056bc:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d02b      	beq.n	800571e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	4a42      	ldr	r2, [pc, #264]	; (80057d4 <UART_Start_Receive_DMA+0x140>)
 80056cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d2:	4a41      	ldr	r2, [pc, #260]	; (80057d8 <UART_Start_Receive_DMA+0x144>)
 80056d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056da:	4a40      	ldr	r2, [pc, #256]	; (80057dc <UART_Start_Receive_DMA+0x148>)
 80056dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e2:	2200      	movs	r2, #0
 80056e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3324      	adds	r3, #36	; 0x24
 80056f0:	4619      	mov	r1, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f6:	461a      	mov	r2, r3
 80056f8:	88fb      	ldrh	r3, [r7, #6]
 80056fa:	f7fc fdbb 	bl	8002274 <HAL_DMA_Start_IT>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00c      	beq.n	800571e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2210      	movs	r2, #16
 8005708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e055      	b.n	80057ca <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d018      	beq.n	8005760 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800573c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005742:	657b      	str	r3, [r7, #84]	; 0x54
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800574c:	64bb      	str	r3, [r7, #72]	; 0x48
 800574e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800575a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e6      	bne.n	800572e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3308      	adds	r3, #8
 8005766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	e853 3f00 	ldrex	r3, [r3]
 800576e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	f043 0301 	orr.w	r3, r3, #1
 8005776:	653b      	str	r3, [r7, #80]	; 0x50
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3308      	adds	r3, #8
 800577e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005780:	637a      	str	r2, [r7, #52]	; 0x34
 8005782:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005784:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005788:	e841 2300 	strex	r3, r2, [r1]
 800578c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1e5      	bne.n	8005760 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3308      	adds	r3, #8
 800579a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	e853 3f00 	ldrex	r3, [r3]
 80057a2:	613b      	str	r3, [r7, #16]
   return(result);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3308      	adds	r3, #8
 80057b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057b4:	623a      	str	r2, [r7, #32]
 80057b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b8:	69f9      	ldr	r1, [r7, #28]
 80057ba:	6a3a      	ldr	r2, [r7, #32]
 80057bc:	e841 2300 	strex	r3, r2, [r1]
 80057c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e5      	bne.n	8005794 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3758      	adds	r7, #88	; 0x58
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	080058f3 	.word	0x080058f3
 80057d8:	08005a13 	.word	0x08005a13
 80057dc:	08005a4b 	.word	0x08005a4b

080057e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b089      	sub	sp, #36	; 0x24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80057fc:	61fb      	str	r3, [r7, #28]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6979      	ldr	r1, [r7, #20]
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	613b      	str	r3, [r7, #16]
   return(result);
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e6      	bne.n	80057e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005820:	bf00      	nop
 8005822:	3724      	adds	r7, #36	; 0x24
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b095      	sub	sp, #84	; 0x54
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005852:	643b      	str	r3, [r7, #64]	; 0x40
 8005854:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e6      	bne.n	8005834 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3308      	adds	r3, #8
 800586c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	61fb      	str	r3, [r7, #28]
   return(result);
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	f023 0301 	bic.w	r3, r3, #1
 800587c:	64bb      	str	r3, [r7, #72]	; 0x48
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3308      	adds	r3, #8
 8005884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005888:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800588c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e5      	bne.n	8005866 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d118      	bne.n	80058d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f023 0310 	bic.w	r3, r3, #16
 80058b6:	647b      	str	r3, [r7, #68]	; 0x44
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	6979      	ldr	r1, [r7, #20]
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	613b      	str	r3, [r7, #16]
   return(result);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e6      	bne.n	80058a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80058e6:	bf00      	nop
 80058e8:	3754      	adds	r7, #84	; 0x54
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b09c      	sub	sp, #112	; 0x70
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005908:	d070      	beq.n	80059ec <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800590a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800590c:	2200      	movs	r2, #0
 800590e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005926:	66bb      	str	r3, [r7, #104]	; 0x68
 8005928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005930:	65bb      	str	r3, [r7, #88]	; 0x58
 8005932:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005936:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800593e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e6      	bne.n	8005912 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3308      	adds	r3, #8
 800594a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005956:	f023 0301 	bic.w	r3, r3, #1
 800595a:	667b      	str	r3, [r7, #100]	; 0x64
 800595c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3308      	adds	r3, #8
 8005962:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005964:	647a      	str	r2, [r7, #68]	; 0x44
 8005966:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800596a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e5      	bne.n	8005944 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3308      	adds	r3, #8
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	623b      	str	r3, [r7, #32]
   return(result);
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800598e:	663b      	str	r3, [r7, #96]	; 0x60
 8005990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3308      	adds	r3, #8
 8005996:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005998:	633a      	str	r2, [r7, #48]	; 0x30
 800599a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800599e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059a0:	e841 2300 	strex	r3, r2, [r1]
 80059a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1e5      	bne.n	8005978 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ae:	2220      	movs	r2, #32
 80059b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d118      	bne.n	80059ec <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	e853 3f00 	ldrex	r3, [r3]
 80059c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0310 	bic.w	r3, r3, #16
 80059ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	461a      	mov	r2, r3
 80059d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059d8:	61fb      	str	r3, [r7, #28]
 80059da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059dc:	69b9      	ldr	r1, [r7, #24]
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	e841 2300 	strex	r3, r2, [r1]
 80059e4:	617b      	str	r3, [r7, #20]
   return(result);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1e6      	bne.n	80059ba <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d107      	bne.n	8005a04 <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059fa:	4619      	mov	r1, r3
 80059fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80059fe:	f7ff fa21 	bl	8004e44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a02:	e002      	b.n	8005a0a <UART_DMAReceiveCplt+0x118>
    HAL_UART_RxCpltCallback(huart);
 8005a04:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a06:	f7ff f9ff 	bl	8004e08 <HAL_UART_RxCpltCallback>
}
 8005a0a:	bf00      	nop
 8005a0c:	3770      	adds	r7, #112	; 0x70
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d109      	bne.n	8005a3c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a2e:	085b      	lsrs	r3, r3, #1
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	4619      	mov	r1, r3
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f7ff fa05 	bl	8004e44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a3a:	e002      	b.n	8005a42 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f7ff f9ed 	bl	8004e1c <HAL_UART_RxHalfCpltCallback>
}
 8005a42:	bf00      	nop
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b086      	sub	sp, #24
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a5c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6e:	2b80      	cmp	r3, #128	; 0x80
 8005a70:	d109      	bne.n	8005a86 <UART_DMAError+0x3c>
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	2b21      	cmp	r3, #33	; 0x21
 8005a76:	d106      	bne.n	8005a86 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005a80:	6978      	ldr	r0, [r7, #20]
 8005a82:	f7ff fead 	bl	80057e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	d109      	bne.n	8005aa8 <UART_DMAError+0x5e>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b22      	cmp	r3, #34	; 0x22
 8005a98:	d106      	bne.n	8005aa8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005aa2:	6978      	ldr	r0, [r7, #20]
 8005aa4:	f7ff fec2 	bl	800582c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aae:	f043 0210 	orr.w	r2, r3, #16
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ab8:	6978      	ldr	r0, [r7, #20]
 8005aba:	f7ff f9b9 	bl	8004e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005abe:	bf00      	nop
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f7ff f9a3 	bl	8004e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b08f      	sub	sp, #60	; 0x3c
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005afe:	2b21      	cmp	r3, #33	; 0x21
 8005b00:	d14c      	bne.n	8005b9c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d132      	bne.n	8005b74 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	e853 3f00 	ldrex	r3, [r3]
 8005b1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b22:	637b      	str	r3, [r7, #52]	; 0x34
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b2e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b34:	e841 2300 	strex	r3, r2, [r1]
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1e6      	bne.n	8005b0e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b54:	633b      	str	r3, [r7, #48]	; 0x30
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	61bb      	str	r3, [r7, #24]
 8005b60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	6979      	ldr	r1, [r7, #20]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e6      	bne.n	8005b40 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005b72:	e013      	b.n	8005b9c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b78:	781a      	ldrb	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005b9c:	bf00      	nop
 8005b9e:	373c      	adds	r7, #60	; 0x3c
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b091      	sub	sp, #68	; 0x44
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bb4:	2b21      	cmp	r3, #33	; 0x21
 8005bb6:	d151      	bne.n	8005c5c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d132      	bne.n	8005c2a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be2:	633b      	str	r3, [r7, #48]	; 0x30
 8005be4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e6      	bne.n	8005bc4 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	461a      	mov	r2, r3
 8005c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c14:	61fb      	str	r3, [r7, #28]
 8005c16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	69b9      	ldr	r1, [r7, #24]
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	617b      	str	r3, [r7, #20]
   return(result);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e6      	bne.n	8005bf6 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005c28:	e018      	b.n	8005c5c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	461a      	mov	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c3e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c44:	1c9a      	adds	r2, r3, #2
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005c5c:	bf00      	nop
 8005c5e:	3744      	adds	r7, #68	; 0x44
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c84:	61fb      	str	r3, [r7, #28]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	61bb      	str	r3, [r7, #24]
 8005c90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c92:	6979      	ldr	r1, [r7, #20]
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1e6      	bne.n	8005c70 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7fb fd54 	bl	800175c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cb4:	bf00      	nop
 8005cb6:	3720      	adds	r7, #32
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005cc0:	bf00      	nop
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
	...

08005ccc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cd2:	f3ef 8305 	mrs	r3, IPSR
 8005cd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10f      	bne.n	8005cfe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cde:	f3ef 8310 	mrs	r3, PRIMASK
 8005ce2:	607b      	str	r3, [r7, #4]
  return(result);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d105      	bne.n	8005cf6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cea:	f3ef 8311 	mrs	r3, BASEPRI
 8005cee:	603b      	str	r3, [r7, #0]
  return(result);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d007      	beq.n	8005d06 <osKernelInitialize+0x3a>
 8005cf6:	4b0e      	ldr	r3, [pc, #56]	; (8005d30 <osKernelInitialize+0x64>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d103      	bne.n	8005d06 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005cfe:	f06f 0305 	mvn.w	r3, #5
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e00c      	b.n	8005d20 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d06:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <osKernelInitialize+0x64>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d105      	bne.n	8005d1a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d0e:	4b08      	ldr	r3, [pc, #32]	; (8005d30 <osKernelInitialize+0x64>)
 8005d10:	2201      	movs	r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	e002      	b.n	8005d20 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d1e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005d20:	68fb      	ldr	r3, [r7, #12]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	20000264 	.word	0x20000264

08005d34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d3a:	f3ef 8305 	mrs	r3, IPSR
 8005d3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10f      	bne.n	8005d66 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d46:	f3ef 8310 	mrs	r3, PRIMASK
 8005d4a:	607b      	str	r3, [r7, #4]
  return(result);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d105      	bne.n	8005d5e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d52:	f3ef 8311 	mrs	r3, BASEPRI
 8005d56:	603b      	str	r3, [r7, #0]
  return(result);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d007      	beq.n	8005d6e <osKernelStart+0x3a>
 8005d5e:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <osKernelStart+0x68>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d103      	bne.n	8005d6e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005d66:	f06f 0305 	mvn.w	r3, #5
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e010      	b.n	8005d90 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005d6e:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <osKernelStart+0x68>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d109      	bne.n	8005d8a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d76:	f7ff ffa1 	bl	8005cbc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d7a:	4b08      	ldr	r3, [pc, #32]	; (8005d9c <osKernelStart+0x68>)
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d80:	f001 ff72 	bl	8007c68 <vTaskStartScheduler>
      stat = osOK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	e002      	b.n	8005d90 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005d90:	68fb      	ldr	r3, [r7, #12]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	20000264 	.word	0x20000264

08005da0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b090      	sub	sp, #64	; 0x40
 8005da4:	af04      	add	r7, sp, #16
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005dac:	2300      	movs	r3, #0
 8005dae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005db0:	f3ef 8305 	mrs	r3, IPSR
 8005db4:	61fb      	str	r3, [r7, #28]
  return(result);
 8005db6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f040 808f 	bne.w	8005edc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc2:	61bb      	str	r3, [r7, #24]
  return(result);
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d105      	bne.n	8005dd6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dca:	f3ef 8311 	mrs	r3, BASEPRI
 8005dce:	617b      	str	r3, [r7, #20]
  return(result);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <osThreadNew+0x3e>
 8005dd6:	4b44      	ldr	r3, [pc, #272]	; (8005ee8 <osThreadNew+0x148>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d07e      	beq.n	8005edc <osThreadNew+0x13c>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d07b      	beq.n	8005edc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005de4:	2380      	movs	r3, #128	; 0x80
 8005de6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005de8:	2318      	movs	r3, #24
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005dec:	2300      	movs	r3, #0
 8005dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005df0:	f04f 33ff 	mov.w	r3, #4294967295
 8005df4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d045      	beq.n	8005e88 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <osThreadNew+0x6a>
        name = attr->name;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d008      	beq.n	8005e30 <osThreadNew+0x90>
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	2b38      	cmp	r3, #56	; 0x38
 8005e22:	d805      	bhi.n	8005e30 <osThreadNew+0x90>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <osThreadNew+0x94>
        return (NULL);
 8005e30:	2300      	movs	r3, #0
 8005e32:	e054      	b.n	8005ede <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	089b      	lsrs	r3, r3, #2
 8005e42:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00e      	beq.n	8005e6a <osThreadNew+0xca>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	2bbb      	cmp	r3, #187	; 0xbb
 8005e52:	d90a      	bls.n	8005e6a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d006      	beq.n	8005e6a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <osThreadNew+0xca>
        mem = 1;
 8005e64:	2301      	movs	r3, #1
 8005e66:	623b      	str	r3, [r7, #32]
 8005e68:	e010      	b.n	8005e8c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10c      	bne.n	8005e8c <osThreadNew+0xec>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d108      	bne.n	8005e8c <osThreadNew+0xec>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d104      	bne.n	8005e8c <osThreadNew+0xec>
          mem = 0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	623b      	str	r3, [r7, #32]
 8005e86:	e001      	b.n	8005e8c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d110      	bne.n	8005eb4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e9a:	9202      	str	r2, [sp, #8]
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f001 fce7 	bl	800787c <xTaskCreateStatic>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	e013      	b.n	8005edc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d110      	bne.n	8005edc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	f107 0310 	add.w	r3, r7, #16
 8005ec2:	9301      	str	r3, [sp, #4]
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f001 fd38 	bl	8007942 <xTaskCreate>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d001      	beq.n	8005edc <osThreadNew+0x13c>
          hTask = NULL;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005edc:	693b      	ldr	r3, [r7, #16]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3730      	adds	r7, #48	; 0x30
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20000264 	.word	0x20000264

08005eec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ef4:	f3ef 8305 	mrs	r3, IPSR
 8005ef8:	613b      	str	r3, [r7, #16]
  return(result);
 8005efa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10f      	bne.n	8005f20 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f00:	f3ef 8310 	mrs	r3, PRIMASK
 8005f04:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d105      	bne.n	8005f18 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f0c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f10:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d007      	beq.n	8005f28 <osDelay+0x3c>
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <osDelay+0x58>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d103      	bne.n	8005f28 <osDelay+0x3c>
    stat = osErrorISR;
 8005f20:	f06f 0305 	mvn.w	r3, #5
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	e007      	b.n	8005f38 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f001 fe62 	bl	8007bfc <vTaskDelay>
    }
  }

  return (stat);
 8005f38:	697b      	ldr	r3, [r7, #20]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000264 	.word	0x20000264

08005f48 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08a      	sub	sp, #40	; 0x28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005f50:	2300      	movs	r3, #0
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f54:	f3ef 8305 	mrs	r3, IPSR
 8005f58:	613b      	str	r3, [r7, #16]
  return(result);
 8005f5a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f040 8085 	bne.w	800606c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f62:	f3ef 8310 	mrs	r3, PRIMASK
 8005f66:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d105      	bne.n	8005f7a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f6e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f72:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <osMutexNew+0x3a>
 8005f7a:	4b3f      	ldr	r3, [pc, #252]	; (8006078 <osMutexNew+0x130>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d074      	beq.n	800606c <osMutexNew+0x124>
    if (attr != NULL) {
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <osMutexNew+0x48>
      type = attr->attr_bits;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	623b      	str	r3, [r7, #32]
 8005f8e:	e001      	b.n	8005f94 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <osMutexNew+0x5c>
      rmtx = 1U;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	61fb      	str	r3, [r7, #28]
 8005fa2:	e001      	b.n	8005fa8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d15c      	bne.n	800606c <osMutexNew+0x124>
      mem = -1;
 8005fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d015      	beq.n	8005fea <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d006      	beq.n	8005fd4 <osMutexNew+0x8c>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	2b4f      	cmp	r3, #79	; 0x4f
 8005fcc:	d902      	bls.n	8005fd4 <osMutexNew+0x8c>
          mem = 1;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	e00c      	b.n	8005fee <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d108      	bne.n	8005fee <osMutexNew+0xa6>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d104      	bne.n	8005fee <osMutexNew+0xa6>
            mem = 0;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	e001      	b.n	8005fee <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d112      	bne.n	800601a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	4619      	mov	r1, r3
 8006000:	2004      	movs	r0, #4
 8006002:	f000 fcae 	bl	8006962 <xQueueCreateMutexStatic>
 8006006:	6278      	str	r0, [r7, #36]	; 0x24
 8006008:	e016      	b.n	8006038 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	4619      	mov	r1, r3
 8006010:	2001      	movs	r0, #1
 8006012:	f000 fca6 	bl	8006962 <xQueueCreateMutexStatic>
 8006016:	6278      	str	r0, [r7, #36]	; 0x24
 8006018:	e00e      	b.n	8006038 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10b      	bne.n	8006038 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d004      	beq.n	8006030 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006026:	2004      	movs	r0, #4
 8006028:	f000 fc83 	bl	8006932 <xQueueCreateMutex>
 800602c:	6278      	str	r0, [r7, #36]	; 0x24
 800602e:	e003      	b.n	8006038 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006030:	2001      	movs	r0, #1
 8006032:	f000 fc7e 	bl	8006932 <xQueueCreateMutex>
 8006036:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00c      	beq.n	8006058 <osMutexNew+0x110>
        if (attr != NULL) {
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <osMutexNew+0x104>
          name = attr->name;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	617b      	str	r3, [r7, #20]
 800604a:	e001      	b.n	8006050 <osMutexNew+0x108>
        } else {
          name = NULL;
 800604c:	2300      	movs	r3, #0
 800604e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006050:	6979      	ldr	r1, [r7, #20]
 8006052:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006054:	f001 fb8a 	bl	800776c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	2b00      	cmp	r3, #0
 800605c:	d006      	beq.n	800606c <osMutexNew+0x124>
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	f043 0301 	orr.w	r3, r3, #1
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800606e:	4618      	mov	r0, r3
 8006070:	3728      	adds	r7, #40	; 0x28
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20000264 	.word	0x20000264

0800607c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f023 0301 	bic.w	r3, r3, #1
 800608c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006096:	2300      	movs	r3, #0
 8006098:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800609a:	f3ef 8305 	mrs	r3, IPSR
 800609e:	613b      	str	r3, [r7, #16]
  return(result);
 80060a0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10f      	bne.n	80060c6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060a6:	f3ef 8310 	mrs	r3, PRIMASK
 80060aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d105      	bne.n	80060be <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060b2:	f3ef 8311 	mrs	r3, BASEPRI
 80060b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <osMutexAcquire+0x52>
 80060be:	4b1d      	ldr	r3, [pc, #116]	; (8006134 <osMutexAcquire+0xb8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d103      	bne.n	80060ce <osMutexAcquire+0x52>
    stat = osErrorISR;
 80060c6:	f06f 0305 	mvn.w	r3, #5
 80060ca:	61fb      	str	r3, [r7, #28]
 80060cc:	e02c      	b.n	8006128 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d103      	bne.n	80060dc <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80060d4:	f06f 0303 	mvn.w	r3, #3
 80060d8:	61fb      	str	r3, [r7, #28]
 80060da:	e025      	b.n	8006128 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d011      	beq.n	8006106 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	69b8      	ldr	r0, [r7, #24]
 80060e6:	f000 fc8d 	bl	8006a04 <xQueueTakeMutexRecursive>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d01b      	beq.n	8006128 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80060f6:	f06f 0301 	mvn.w	r3, #1
 80060fa:	61fb      	str	r3, [r7, #28]
 80060fc:	e014      	b.n	8006128 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80060fe:	f06f 0302 	mvn.w	r3, #2
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	e010      	b.n	8006128 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	69b8      	ldr	r0, [r7, #24]
 800610a:	f001 f847 	bl	800719c <xQueueSemaphoreTake>
 800610e:	4603      	mov	r3, r0
 8006110:	2b01      	cmp	r3, #1
 8006112:	d009      	beq.n	8006128 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800611a:	f06f 0301 	mvn.w	r3, #1
 800611e:	61fb      	str	r3, [r7, #28]
 8006120:	e002      	b.n	8006128 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006122:	f06f 0302 	mvn.w	r3, #2
 8006126:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006128:	69fb      	ldr	r3, [r7, #28]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3720      	adds	r7, #32
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20000264 	.word	0x20000264

08006138 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f023 0301 	bic.w	r3, r3, #1
 8006146:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006150:	2300      	movs	r3, #0
 8006152:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006154:	f3ef 8305 	mrs	r3, IPSR
 8006158:	613b      	str	r3, [r7, #16]
  return(result);
 800615a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10f      	bne.n	8006180 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006160:	f3ef 8310 	mrs	r3, PRIMASK
 8006164:	60fb      	str	r3, [r7, #12]
  return(result);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d105      	bne.n	8006178 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800616c:	f3ef 8311 	mrs	r3, BASEPRI
 8006170:	60bb      	str	r3, [r7, #8]
  return(result);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <osMutexRelease+0x50>
 8006178:	4b16      	ldr	r3, [pc, #88]	; (80061d4 <osMutexRelease+0x9c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b02      	cmp	r3, #2
 800617e:	d103      	bne.n	8006188 <osMutexRelease+0x50>
    stat = osErrorISR;
 8006180:	f06f 0305 	mvn.w	r3, #5
 8006184:	61fb      	str	r3, [r7, #28]
 8006186:	e01f      	b.n	80061c8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d103      	bne.n	8006196 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800618e:	f06f 0303 	mvn.w	r3, #3
 8006192:	61fb      	str	r3, [r7, #28]
 8006194:	e018      	b.n	80061c8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d009      	beq.n	80061b0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800619c:	69b8      	ldr	r0, [r7, #24]
 800619e:	f000 fbfb 	bl	8006998 <xQueueGiveMutexRecursive>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d00f      	beq.n	80061c8 <osMutexRelease+0x90>
        stat = osErrorResource;
 80061a8:	f06f 0302 	mvn.w	r3, #2
 80061ac:	61fb      	str	r3, [r7, #28]
 80061ae:	e00b      	b.n	80061c8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80061b0:	2300      	movs	r3, #0
 80061b2:	2200      	movs	r2, #0
 80061b4:	2100      	movs	r1, #0
 80061b6:	69b8      	ldr	r0, [r7, #24]
 80061b8:	f000 fcce 	bl	8006b58 <xQueueGenericSend>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d002      	beq.n	80061c8 <osMutexRelease+0x90>
        stat = osErrorResource;
 80061c2:	f06f 0302 	mvn.w	r3, #2
 80061c6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80061c8:	69fb      	ldr	r3, [r7, #28]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3720      	adds	r7, #32
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000264 	.word	0x20000264

080061d8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08c      	sub	sp, #48	; 0x30
 80061dc:	af02      	add	r7, sp, #8
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80061e4:	2300      	movs	r3, #0
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061e8:	f3ef 8305 	mrs	r3, IPSR
 80061ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80061ee:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f040 8086 	bne.w	8006302 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061f6:	f3ef 8310 	mrs	r3, PRIMASK
 80061fa:	617b      	str	r3, [r7, #20]
  return(result);
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d105      	bne.n	800620e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006202:	f3ef 8311 	mrs	r3, BASEPRI
 8006206:	613b      	str	r3, [r7, #16]
  return(result);
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <osSemaphoreNew+0x3e>
 800620e:	4b3f      	ldr	r3, [pc, #252]	; (800630c <osSemaphoreNew+0x134>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d075      	beq.n	8006302 <osSemaphoreNew+0x12a>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d072      	beq.n	8006302 <osSemaphoreNew+0x12a>
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	429a      	cmp	r2, r3
 8006222:	d86e      	bhi.n	8006302 <osSemaphoreNew+0x12a>
    mem = -1;
 8006224:	f04f 33ff 	mov.w	r3, #4294967295
 8006228:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d015      	beq.n	800625c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d006      	beq.n	8006246 <osSemaphoreNew+0x6e>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	2b4f      	cmp	r3, #79	; 0x4f
 800623e:	d902      	bls.n	8006246 <osSemaphoreNew+0x6e>
        mem = 1;
 8006240:	2301      	movs	r3, #1
 8006242:	623b      	str	r3, [r7, #32]
 8006244:	e00c      	b.n	8006260 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d108      	bne.n	8006260 <osSemaphoreNew+0x88>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d104      	bne.n	8006260 <osSemaphoreNew+0x88>
          mem = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	623b      	str	r3, [r7, #32]
 800625a:	e001      	b.n	8006260 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006266:	d04c      	beq.n	8006302 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d128      	bne.n	80062c0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d10a      	bne.n	800628a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2203      	movs	r2, #3
 800627a:	9200      	str	r2, [sp, #0]
 800627c:	2200      	movs	r2, #0
 800627e:	2100      	movs	r1, #0
 8006280:	2001      	movs	r0, #1
 8006282:	f000 fa55 	bl	8006730 <xQueueGenericCreateStatic>
 8006286:	6278      	str	r0, [r7, #36]	; 0x24
 8006288:	e005      	b.n	8006296 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800628a:	2203      	movs	r2, #3
 800628c:	2100      	movs	r1, #0
 800628e:	2001      	movs	r0, #1
 8006290:	f000 fad0 	bl	8006834 <xQueueGenericCreate>
 8006294:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	2b00      	cmp	r3, #0
 800629a:	d022      	beq.n	80062e2 <osSemaphoreNew+0x10a>
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d01f      	beq.n	80062e2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80062a2:	2300      	movs	r3, #0
 80062a4:	2200      	movs	r2, #0
 80062a6:	2100      	movs	r1, #0
 80062a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062aa:	f000 fc55 	bl	8006b58 <xQueueGenericSend>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d016      	beq.n	80062e2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80062b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062b6:	f001 f90b 	bl	80074d0 <vQueueDelete>
            hSemaphore = NULL;
 80062ba:	2300      	movs	r3, #0
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
 80062be:	e010      	b.n	80062e2 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d108      	bne.n	80062d8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	461a      	mov	r2, r3
 80062cc:	68b9      	ldr	r1, [r7, #8]
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 fbd0 	bl	8006a74 <xQueueCreateCountingSemaphoreStatic>
 80062d4:	6278      	str	r0, [r7, #36]	; 0x24
 80062d6:	e004      	b.n	80062e2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 fc05 	bl	8006aea <xQueueCreateCountingSemaphore>
 80062e0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00c      	beq.n	8006302 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <osSemaphoreNew+0x11e>
          name = attr->name;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	61fb      	str	r3, [r7, #28]
 80062f4:	e001      	b.n	80062fa <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80062fa:	69f9      	ldr	r1, [r7, #28]
 80062fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062fe:	f001 fa35 	bl	800776c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006304:	4618      	mov	r0, r3
 8006306:	3728      	adds	r7, #40	; 0x28
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	20000264 	.word	0x20000264

08006310 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800631e:	2300      	movs	r3, #0
 8006320:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d103      	bne.n	8006330 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006328:	f06f 0303 	mvn.w	r3, #3
 800632c:	61fb      	str	r3, [r7, #28]
 800632e:	e04b      	b.n	80063c8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006330:	f3ef 8305 	mrs	r3, IPSR
 8006334:	617b      	str	r3, [r7, #20]
  return(result);
 8006336:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10f      	bne.n	800635c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800633c:	f3ef 8310 	mrs	r3, PRIMASK
 8006340:	613b      	str	r3, [r7, #16]
  return(result);
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d105      	bne.n	8006354 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006348:	f3ef 8311 	mrs	r3, BASEPRI
 800634c:	60fb      	str	r3, [r7, #12]
  return(result);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d026      	beq.n	80063a2 <osSemaphoreAcquire+0x92>
 8006354:	4b1f      	ldr	r3, [pc, #124]	; (80063d4 <osSemaphoreAcquire+0xc4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d122      	bne.n	80063a2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006362:	f06f 0303 	mvn.w	r3, #3
 8006366:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006368:	e02d      	b.n	80063c6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800636a:	2300      	movs	r3, #0
 800636c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800636e:	f107 0308 	add.w	r3, r7, #8
 8006372:	461a      	mov	r2, r3
 8006374:	2100      	movs	r1, #0
 8006376:	69b8      	ldr	r0, [r7, #24]
 8006378:	f001 f824 	bl	80073c4 <xQueueReceiveFromISR>
 800637c:	4603      	mov	r3, r0
 800637e:	2b01      	cmp	r3, #1
 8006380:	d003      	beq.n	800638a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006382:	f06f 0302 	mvn.w	r3, #2
 8006386:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006388:	e01d      	b.n	80063c6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01a      	beq.n	80063c6 <osSemaphoreAcquire+0xb6>
 8006390:	4b11      	ldr	r3, [pc, #68]	; (80063d8 <osSemaphoreAcquire+0xc8>)
 8006392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80063a0:	e011      	b.n	80063c6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	69b8      	ldr	r0, [r7, #24]
 80063a6:	f000 fef9 	bl	800719c <xQueueSemaphoreTake>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d00b      	beq.n	80063c8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80063b6:	f06f 0301 	mvn.w	r3, #1
 80063ba:	61fb      	str	r3, [r7, #28]
 80063bc:	e004      	b.n	80063c8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80063be:	f06f 0302 	mvn.w	r3, #2
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	e000      	b.n	80063c8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80063c6:	bf00      	nop
      }
    }
  }

  return (stat);
 80063c8:	69fb      	ldr	r3, [r7, #28]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3720      	adds	r7, #32
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20000264 	.word	0x20000264
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d103      	bne.n	80063fa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80063f2:	f06f 0303 	mvn.w	r3, #3
 80063f6:	61fb      	str	r3, [r7, #28]
 80063f8:	e03e      	b.n	8006478 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063fa:	f3ef 8305 	mrs	r3, IPSR
 80063fe:	617b      	str	r3, [r7, #20]
  return(result);
 8006400:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10f      	bne.n	8006426 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006406:	f3ef 8310 	mrs	r3, PRIMASK
 800640a:	613b      	str	r3, [r7, #16]
  return(result);
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d105      	bne.n	800641e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006412:	f3ef 8311 	mrs	r3, BASEPRI
 8006416:	60fb      	str	r3, [r7, #12]
  return(result);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d01e      	beq.n	800645c <osSemaphoreRelease+0x80>
 800641e:	4b19      	ldr	r3, [pc, #100]	; (8006484 <osSemaphoreRelease+0xa8>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b02      	cmp	r3, #2
 8006424:	d11a      	bne.n	800645c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006426:	2300      	movs	r3, #0
 8006428:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800642a:	f107 0308 	add.w	r3, r7, #8
 800642e:	4619      	mov	r1, r3
 8006430:	69b8      	ldr	r0, [r7, #24]
 8006432:	f000 fd37 	bl	8006ea4 <xQueueGiveFromISR>
 8006436:	4603      	mov	r3, r0
 8006438:	2b01      	cmp	r3, #1
 800643a:	d003      	beq.n	8006444 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800643c:	f06f 0302 	mvn.w	r3, #2
 8006440:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006442:	e018      	b.n	8006476 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d015      	beq.n	8006476 <osSemaphoreRelease+0x9a>
 800644a:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <osSemaphoreRelease+0xac>)
 800644c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800645a:	e00c      	b.n	8006476 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800645c:	2300      	movs	r3, #0
 800645e:	2200      	movs	r2, #0
 8006460:	2100      	movs	r1, #0
 8006462:	69b8      	ldr	r0, [r7, #24]
 8006464:	f000 fb78 	bl	8006b58 <xQueueGenericSend>
 8006468:	4603      	mov	r3, r0
 800646a:	2b01      	cmp	r3, #1
 800646c:	d004      	beq.n	8006478 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800646e:	f06f 0302 	mvn.w	r3, #2
 8006472:	61fb      	str	r3, [r7, #28]
 8006474:	e000      	b.n	8006478 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006476:	bf00      	nop
    }
  }

  return (stat);
 8006478:	69fb      	ldr	r3, [r7, #28]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3720      	adds	r7, #32
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	20000264 	.word	0x20000264
 8006488:	e000ed04 	.word	0xe000ed04

0800648c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4a07      	ldr	r2, [pc, #28]	; (80064b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800649c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4a06      	ldr	r2, [pc, #24]	; (80064bc <vApplicationGetIdleTaskMemory+0x30>)
 80064a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2280      	movs	r2, #128	; 0x80
 80064a8:	601a      	str	r2, [r3, #0]
}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	20000268 	.word	0x20000268
 80064bc:	20000324 	.word	0x20000324

080064c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	4a07      	ldr	r2, [pc, #28]	; (80064ec <vApplicationGetTimerTaskMemory+0x2c>)
 80064d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	4a06      	ldr	r2, [pc, #24]	; (80064f0 <vApplicationGetTimerTaskMemory+0x30>)
 80064d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064de:	601a      	str	r2, [r3, #0]
}
 80064e0:	bf00      	nop
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	20000524 	.word	0x20000524
 80064f0:	200005e0 	.word	0x200005e0

080064f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f103 0208 	add.w	r2, r3, #8
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f04f 32ff 	mov.w	r2, #4294967295
 800650c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f103 0208 	add.w	r2, r3, #8
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f103 0208 	add.w	r2, r3, #8
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006542:	bf00      	nop
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800654e:	b480      	push	{r7}
 8006550:	b085      	sub	sp, #20
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	601a      	str	r2, [r3, #0]
}
 800658a:	bf00      	nop
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006596:	b480      	push	{r7}
 8006598:	b085      	sub	sp, #20
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ac:	d103      	bne.n	80065b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	e00c      	b.n	80065d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3308      	adds	r3, #8
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	e002      	b.n	80065c4 <vListInsert+0x2e>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d2f6      	bcs.n	80065be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	601a      	str	r2, [r3, #0]
}
 80065fc:	bf00      	nop
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	6892      	ldr	r2, [r2, #8]
 800661e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6852      	ldr	r2, [r2, #4]
 8006628:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	429a      	cmp	r2, r3
 8006632:	d103      	bne.n	800663c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689a      	ldr	r2, [r3, #8]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	1e5a      	subs	r2, r3, #1
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10c      	bne.n	800668a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	b672      	cpsid	i
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	b662      	cpsie	i
 8006684:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800668a:	f002 fdbf 	bl	800920c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006696:	68f9      	ldr	r1, [r7, #12]
 8006698:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800669a:	fb01 f303 	mul.w	r3, r1, r3
 800669e:	441a      	add	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ba:	3b01      	subs	r3, #1
 80066bc:	68f9      	ldr	r1, [r7, #12]
 80066be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066c0:	fb01 f303 	mul.w	r3, r1, r3
 80066c4:	441a      	add	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	22ff      	movs	r2, #255	; 0xff
 80066ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	22ff      	movs	r2, #255	; 0xff
 80066d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d114      	bne.n	800670a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d01a      	beq.n	800671e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3310      	adds	r3, #16
 80066ec:	4618      	mov	r0, r3
 80066ee:	f001 fd63 	bl	80081b8 <xTaskRemoveFromEventList>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d012      	beq.n	800671e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066f8:	4b0c      	ldr	r3, [pc, #48]	; (800672c <xQueueGenericReset+0xd0>)
 80066fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	e009      	b.n	800671e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3310      	adds	r3, #16
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff fef0 	bl	80064f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3324      	adds	r3, #36	; 0x24
 8006718:	4618      	mov	r0, r3
 800671a:	f7ff feeb 	bl	80064f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800671e:	f002 fda9 	bl	8009274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006722:	2301      	movs	r3, #1
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	e000ed04 	.word	0xe000ed04

08006730 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08e      	sub	sp, #56	; 0x38
 8006734:	af02      	add	r7, sp, #8
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10c      	bne.n	800675e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006748:	b672      	cpsid	i
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	b662      	cpsie	i
 8006758:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800675a:	bf00      	nop
 800675c:	e7fe      	b.n	800675c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10c      	bne.n	800677e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	b672      	cpsid	i
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	b662      	cpsie	i
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
}
 800677a:	bf00      	nop
 800677c:	e7fe      	b.n	800677c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <xQueueGenericCreateStatic+0x5a>
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <xQueueGenericCreateStatic+0x5e>
 800678a:	2301      	movs	r3, #1
 800678c:	e000      	b.n	8006790 <xQueueGenericCreateStatic+0x60>
 800678e:	2300      	movs	r3, #0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10c      	bne.n	80067ae <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	b672      	cpsid	i
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	b662      	cpsie	i
 80067a8:	623b      	str	r3, [r7, #32]
}
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d102      	bne.n	80067ba <xQueueGenericCreateStatic+0x8a>
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <xQueueGenericCreateStatic+0x8e>
 80067ba:	2301      	movs	r3, #1
 80067bc:	e000      	b.n	80067c0 <xQueueGenericCreateStatic+0x90>
 80067be:	2300      	movs	r3, #0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10c      	bne.n	80067de <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	b672      	cpsid	i
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	b662      	cpsie	i
 80067d8:	61fb      	str	r3, [r7, #28]
}
 80067da:	bf00      	nop
 80067dc:	e7fe      	b.n	80067dc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067de:	2350      	movs	r3, #80	; 0x50
 80067e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b50      	cmp	r3, #80	; 0x50
 80067e6:	d00c      	beq.n	8006802 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ec:	b672      	cpsid	i
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	b662      	cpsie	i
 80067fc:	61bb      	str	r3, [r7, #24]
}
 80067fe:	bf00      	nop
 8006800:	e7fe      	b.n	8006800 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006802:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00d      	beq.n	800682a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006816:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	4613      	mov	r3, r2
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	68b9      	ldr	r1, [r7, #8]
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f847 	bl	80068b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800682a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800682c:	4618      	mov	r0, r3
 800682e:	3730      	adds	r7, #48	; 0x30
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08a      	sub	sp, #40	; 0x28
 8006838:	af02      	add	r7, sp, #8
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	4613      	mov	r3, r2
 8006840:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10c      	bne.n	8006862 <xQueueGenericCreate+0x2e>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	b672      	cpsid	i
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	b662      	cpsie	i
 800685c:	613b      	str	r3, [r7, #16]
}
 800685e:	bf00      	nop
 8006860:	e7fe      	b.n	8006860 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d102      	bne.n	800686e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006868:	2300      	movs	r3, #0
 800686a:	61fb      	str	r3, [r7, #28]
 800686c:	e004      	b.n	8006878 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	fb02 f303 	mul.w	r3, r2, r3
 8006876:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	3350      	adds	r3, #80	; 0x50
 800687c:	4618      	mov	r0, r3
 800687e:	f002 fdf1 	bl	8009464 <pvPortMalloc>
 8006882:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d011      	beq.n	80068ae <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	3350      	adds	r3, #80	; 0x50
 8006892:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800689c:	79fa      	ldrb	r2, [r7, #7]
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	4613      	mov	r3, r2
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	68b9      	ldr	r1, [r7, #8]
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f805 	bl	80068b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068ae:	69bb      	ldr	r3, [r7, #24]
	}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3720      	adds	r7, #32
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
 80068c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d103      	bne.n	80068d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	e002      	b.n	80068da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068e6:	2101      	movs	r1, #1
 80068e8:	69b8      	ldr	r0, [r7, #24]
 80068ea:	f7ff feb7 	bl	800665c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	78fa      	ldrb	r2, [r7, #3]
 80068f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068f6:	bf00      	nop
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b082      	sub	sp, #8
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00e      	beq.n	800692a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800691e:	2300      	movs	r3, #0
 8006920:	2200      	movs	r2, #0
 8006922:	2100      	movs	r1, #0
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f917 	bl	8006b58 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800692a:	bf00      	nop
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006932:	b580      	push	{r7, lr}
 8006934:	b086      	sub	sp, #24
 8006936:	af00      	add	r7, sp, #0
 8006938:	4603      	mov	r3, r0
 800693a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800693c:	2301      	movs	r3, #1
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	2300      	movs	r3, #0
 8006942:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	461a      	mov	r2, r3
 8006948:	6939      	ldr	r1, [r7, #16]
 800694a:	6978      	ldr	r0, [r7, #20]
 800694c:	f7ff ff72 	bl	8006834 <xQueueGenericCreate>
 8006950:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f7ff ffd3 	bl	80068fe <prvInitialiseMutex>

		return xNewQueue;
 8006958:	68fb      	ldr	r3, [r7, #12]
	}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006962:	b580      	push	{r7, lr}
 8006964:	b088      	sub	sp, #32
 8006966:	af02      	add	r7, sp, #8
 8006968:	4603      	mov	r3, r0
 800696a:	6039      	str	r1, [r7, #0]
 800696c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800696e:	2301      	movs	r3, #1
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	2300      	movs	r3, #0
 8006974:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2200      	movs	r2, #0
 800697e:	6939      	ldr	r1, [r7, #16]
 8006980:	6978      	ldr	r0, [r7, #20]
 8006982:	f7ff fed5 	bl	8006730 <xQueueGenericCreateStatic>
 8006986:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f7ff ffb8 	bl	80068fe <prvInitialiseMutex>

		return xNewQueue;
 800698e:	68fb      	ldr	r3, [r7, #12]
	}
 8006990:	4618      	mov	r0, r3
 8006992:	3718      	adds	r7, #24
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006998:	b590      	push	{r4, r7, lr}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10c      	bne.n	80069c4 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ae:	b672      	cpsid	i
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	b662      	cpsie	i
 80069be:	60fb      	str	r3, [r7, #12]
}
 80069c0:	bf00      	nop
 80069c2:	e7fe      	b.n	80069c2 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	689c      	ldr	r4, [r3, #8]
 80069c8:	f001 fdc0 	bl	800854c <xTaskGetCurrentTaskHandle>
 80069cc:	4603      	mov	r3, r0
 80069ce:	429c      	cmp	r4, r3
 80069d0:	d111      	bne.n	80069f6 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	1e5a      	subs	r2, r3, #1
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d105      	bne.n	80069f0 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80069e4:	2300      	movs	r3, #0
 80069e6:	2200      	movs	r2, #0
 80069e8:	2100      	movs	r1, #0
 80069ea:	6938      	ldr	r0, [r7, #16]
 80069ec:	f000 f8b4 	bl	8006b58 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80069f0:	2301      	movs	r3, #1
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	e001      	b.n	80069fa <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80069fa:	697b      	ldr	r3, [r7, #20]
	}
 80069fc:	4618      	mov	r0, r3
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd90      	pop	{r4, r7, pc}

08006a04 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006a04:	b590      	push	{r4, r7, lr}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10c      	bne.n	8006a32 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	b672      	cpsid	i
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	b662      	cpsie	i
 8006a2c:	60fb      	str	r3, [r7, #12]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	689c      	ldr	r4, [r3, #8]
 8006a36:	f001 fd89 	bl	800854c <xTaskGetCurrentTaskHandle>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	429c      	cmp	r4, r3
 8006a3e:	d107      	bne.n	8006a50 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	e00c      	b.n	8006a6a <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6938      	ldr	r0, [r7, #16]
 8006a54:	f000 fba2 	bl	800719c <xQueueSemaphoreTake>
 8006a58:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d004      	beq.n	8006a6a <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006a6a:	697b      	ldr	r3, [r7, #20]
	}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	371c      	adds	r7, #28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd90      	pop	{r4, r7, pc}

08006a74 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b08a      	sub	sp, #40	; 0x28
 8006a78:	af02      	add	r7, sp, #8
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10c      	bne.n	8006aa0 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8006a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8a:	b672      	cpsid	i
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	b662      	cpsie	i
 8006a9a:	61bb      	str	r3, [r7, #24]
}
 8006a9c:	bf00      	nop
 8006a9e:	e7fe      	b.n	8006a9e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d90c      	bls.n	8006ac2 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	b672      	cpsid	i
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	b662      	cpsie	i
 8006abc:	617b      	str	r3, [r7, #20]
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2100      	movs	r1, #0
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f7ff fe2f 	bl	8006730 <xQueueGenericCreateStatic>
 8006ad2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006ae0:	69fb      	ldr	r3, [r7, #28]
	}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3720      	adds	r7, #32
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b086      	sub	sp, #24
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10c      	bne.n	8006b14 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	b672      	cpsid	i
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	b662      	cpsie	i
 8006b0e:	613b      	str	r3, [r7, #16]
}
 8006b10:	bf00      	nop
 8006b12:	e7fe      	b.n	8006b12 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d90c      	bls.n	8006b36 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	b672      	cpsid	i
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	b662      	cpsie	i
 8006b30:	60fb      	str	r3, [r7, #12]
}
 8006b32:	bf00      	nop
 8006b34:	e7fe      	b.n	8006b34 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006b36:	2202      	movs	r2, #2
 8006b38:	2100      	movs	r1, #0
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7ff fe7a 	bl	8006834 <xQueueGenericCreate>
 8006b40:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006b4e:	697b      	ldr	r3, [r7, #20]
	}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08e      	sub	sp, #56	; 0x38
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b66:	2300      	movs	r3, #0
 8006b68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10c      	bne.n	8006b8e <xQueueGenericSend+0x36>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	b672      	cpsid	i
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	b662      	cpsie	i
 8006b88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b8a:	bf00      	nop
 8006b8c:	e7fe      	b.n	8006b8c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d103      	bne.n	8006b9c <xQueueGenericSend+0x44>
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <xQueueGenericSend+0x48>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <xQueueGenericSend+0x4a>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10c      	bne.n	8006bc0 <xQueueGenericSend+0x68>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	b672      	cpsid	i
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	b662      	cpsie	i
 8006bba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bbc:	bf00      	nop
 8006bbe:	e7fe      	b.n	8006bbe <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d103      	bne.n	8006bce <xQueueGenericSend+0x76>
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d101      	bne.n	8006bd2 <xQueueGenericSend+0x7a>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e000      	b.n	8006bd4 <xQueueGenericSend+0x7c>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10c      	bne.n	8006bf2 <xQueueGenericSend+0x9a>
	__asm volatile
 8006bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bdc:	b672      	cpsid	i
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	b662      	cpsie	i
 8006bec:	623b      	str	r3, [r7, #32]
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bf2:	f001 fcbb 	bl	800856c <xTaskGetSchedulerState>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d102      	bne.n	8006c02 <xQueueGenericSend+0xaa>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <xQueueGenericSend+0xae>
 8006c02:	2301      	movs	r3, #1
 8006c04:	e000      	b.n	8006c08 <xQueueGenericSend+0xb0>
 8006c06:	2300      	movs	r3, #0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10c      	bne.n	8006c26 <xQueueGenericSend+0xce>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	b672      	cpsid	i
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	b662      	cpsie	i
 8006c20:	61fb      	str	r3, [r7, #28]
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c26:	f002 faf1 	bl	800920c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d302      	bcc.n	8006c3c <xQueueGenericSend+0xe4>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d129      	bne.n	8006c90 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c42:	f000 fc82 	bl	800754a <prvCopyDataToQueue>
 8006c46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d010      	beq.n	8006c72 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	3324      	adds	r3, #36	; 0x24
 8006c54:	4618      	mov	r0, r3
 8006c56:	f001 faaf 	bl	80081b8 <xTaskRemoveFromEventList>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d013      	beq.n	8006c88 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c60:	4b3f      	ldr	r3, [pc, #252]	; (8006d60 <xQueueGenericSend+0x208>)
 8006c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	e00a      	b.n	8006c88 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d007      	beq.n	8006c88 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c78:	4b39      	ldr	r3, [pc, #228]	; (8006d60 <xQueueGenericSend+0x208>)
 8006c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c88:	f002 faf4 	bl	8009274 <vPortExitCritical>
				return pdPASS;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e063      	b.n	8006d58 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d103      	bne.n	8006c9e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c96:	f002 faed 	bl	8009274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e05c      	b.n	8006d58 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d106      	bne.n	8006cb2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ca4:	f107 0314 	add.w	r3, r7, #20
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f001 faeb 	bl	8008284 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cb2:	f002 fadf 	bl	8009274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cb6:	f001 f84b 	bl	8007d50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cba:	f002 faa7 	bl	800920c <vPortEnterCritical>
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cc4:	b25b      	sxtb	r3, r3
 8006cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cca:	d103      	bne.n	8006cd4 <xQueueGenericSend+0x17c>
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cda:	b25b      	sxtb	r3, r3
 8006cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce0:	d103      	bne.n	8006cea <xQueueGenericSend+0x192>
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cea:	f002 fac3 	bl	8009274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cee:	1d3a      	adds	r2, r7, #4
 8006cf0:	f107 0314 	add.w	r3, r7, #20
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f001 fada 	bl	80082b0 <xTaskCheckForTimeOut>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d124      	bne.n	8006d4c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d04:	f000 fd19 	bl	800773a <prvIsQueueFull>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d018      	beq.n	8006d40 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	3310      	adds	r3, #16
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	4611      	mov	r1, r2
 8006d16:	4618      	mov	r0, r3
 8006d18:	f001 f9fa 	bl	8008110 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d1e:	f000 fca4 	bl	800766a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d22:	f001 f823 	bl	8007d6c <xTaskResumeAll>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f47f af7c 	bne.w	8006c26 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006d2e:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <xQueueGenericSend+0x208>)
 8006d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	e772      	b.n	8006c26 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d42:	f000 fc92 	bl	800766a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d46:	f001 f811 	bl	8007d6c <xTaskResumeAll>
 8006d4a:	e76c      	b.n	8006c26 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d4e:	f000 fc8c 	bl	800766a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d52:	f001 f80b 	bl	8007d6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3738      	adds	r7, #56	; 0x38
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	e000ed04 	.word	0xe000ed04

08006d64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08e      	sub	sp, #56	; 0x38
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10c      	bne.n	8006d96 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	b672      	cpsid	i
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	b662      	cpsie	i
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d92:	bf00      	nop
 8006d94:	e7fe      	b.n	8006d94 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d103      	bne.n	8006da4 <xQueueGenericSendFromISR+0x40>
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <xQueueGenericSendFromISR+0x44>
 8006da4:	2301      	movs	r3, #1
 8006da6:	e000      	b.n	8006daa <xQueueGenericSendFromISR+0x46>
 8006da8:	2300      	movs	r3, #0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10c      	bne.n	8006dc8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	b672      	cpsid	i
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	b662      	cpsie	i
 8006dc2:	623b      	str	r3, [r7, #32]
}
 8006dc4:	bf00      	nop
 8006dc6:	e7fe      	b.n	8006dc6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d103      	bne.n	8006dd6 <xQueueGenericSendFromISR+0x72>
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d101      	bne.n	8006dda <xQueueGenericSendFromISR+0x76>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e000      	b.n	8006ddc <xQueueGenericSendFromISR+0x78>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10c      	bne.n	8006dfa <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	b672      	cpsid	i
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	b662      	cpsie	i
 8006df4:	61fb      	str	r3, [r7, #28]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dfa:	f002 faef 	bl	80093dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006dfe:	f3ef 8211 	mrs	r2, BASEPRI
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	b672      	cpsid	i
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	b662      	cpsie	i
 8006e16:	61ba      	str	r2, [r7, #24]
 8006e18:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e1a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d302      	bcc.n	8006e30 <xQueueGenericSendFromISR+0xcc>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d12c      	bne.n	8006e8a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	68b9      	ldr	r1, [r7, #8]
 8006e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e40:	f000 fb83 	bl	800754a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e44:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4c:	d112      	bne.n	8006e74 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d016      	beq.n	8006e84 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e58:	3324      	adds	r3, #36	; 0x24
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f001 f9ac 	bl	80081b8 <xTaskRemoveFromEventList>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00e      	beq.n	8006e84 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00b      	beq.n	8006e84 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	e007      	b.n	8006e84 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e78:	3301      	adds	r3, #1
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	b25a      	sxtb	r2, r3
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e84:	2301      	movs	r3, #1
 8006e86:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006e88:	e001      	b.n	8006e8e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3738      	adds	r7, #56	; 0x38
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08e      	sub	sp, #56	; 0x38
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10c      	bne.n	8006ed2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	b672      	cpsid	i
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	b662      	cpsie	i
 8006ecc:	623b      	str	r3, [r7, #32]
}
 8006ece:	bf00      	nop
 8006ed0:	e7fe      	b.n	8006ed0 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00c      	beq.n	8006ef4 <xQueueGiveFromISR+0x50>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	b672      	cpsid	i
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	b662      	cpsie	i
 8006eee:	61fb      	str	r3, [r7, #28]
}
 8006ef0:	bf00      	nop
 8006ef2:	e7fe      	b.n	8006ef2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d103      	bne.n	8006f04 <xQueueGiveFromISR+0x60>
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <xQueueGiveFromISR+0x64>
 8006f04:	2301      	movs	r3, #1
 8006f06:	e000      	b.n	8006f0a <xQueueGiveFromISR+0x66>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10c      	bne.n	8006f28 <xQueueGiveFromISR+0x84>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	b672      	cpsid	i
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	b662      	cpsie	i
 8006f22:	61bb      	str	r3, [r7, #24]
}
 8006f24:	bf00      	nop
 8006f26:	e7fe      	b.n	8006f26 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f28:	f002 fa58 	bl	80093dc <vPortValidateInterruptPriority>
	__asm volatile
 8006f2c:	f3ef 8211 	mrs	r2, BASEPRI
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	b672      	cpsid	i
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	b662      	cpsie	i
 8006f44:	617a      	str	r2, [r7, #20]
 8006f46:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006f48:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f50:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d22b      	bcs.n	8006fb4 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f76:	d112      	bne.n	8006f9e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d016      	beq.n	8006fae <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f82:	3324      	adds	r3, #36	; 0x24
 8006f84:	4618      	mov	r0, r3
 8006f86:	f001 f917 	bl	80081b8 <xTaskRemoveFromEventList>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00e      	beq.n	8006fae <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00b      	beq.n	8006fae <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	e007      	b.n	8006fae <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	b25a      	sxtb	r2, r3
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb2:	e001      	b.n	8006fb8 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fba:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f383 8811 	msr	BASEPRI, r3
}
 8006fc2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3738      	adds	r7, #56	; 0x38
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08c      	sub	sp, #48	; 0x30
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10c      	bne.n	8007004 <xQueueReceive+0x34>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	b672      	cpsid	i
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	b662      	cpsie	i
 8006ffe:	623b      	str	r3, [r7, #32]
}
 8007000:	bf00      	nop
 8007002:	e7fe      	b.n	8007002 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d103      	bne.n	8007012 <xQueueReceive+0x42>
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <xQueueReceive+0x46>
 8007012:	2301      	movs	r3, #1
 8007014:	e000      	b.n	8007018 <xQueueReceive+0x48>
 8007016:	2300      	movs	r3, #0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10c      	bne.n	8007036 <xQueueReceive+0x66>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007020:	b672      	cpsid	i
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	b662      	cpsie	i
 8007030:	61fb      	str	r3, [r7, #28]
}
 8007032:	bf00      	nop
 8007034:	e7fe      	b.n	8007034 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007036:	f001 fa99 	bl	800856c <xTaskGetSchedulerState>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d102      	bne.n	8007046 <xQueueReceive+0x76>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <xQueueReceive+0x7a>
 8007046:	2301      	movs	r3, #1
 8007048:	e000      	b.n	800704c <xQueueReceive+0x7c>
 800704a:	2300      	movs	r3, #0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10c      	bne.n	800706a <xQueueReceive+0x9a>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007054:	b672      	cpsid	i
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	b662      	cpsie	i
 8007064:	61bb      	str	r3, [r7, #24]
}
 8007066:	bf00      	nop
 8007068:	e7fe      	b.n	8007068 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800706a:	f002 f8cf 	bl	800920c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800706e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007072:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	2b00      	cmp	r3, #0
 8007078:	d01f      	beq.n	80070ba <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800707a:	68b9      	ldr	r1, [r7, #8]
 800707c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800707e:	f000 face 	bl	800761e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	1e5a      	subs	r2, r3, #1
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00f      	beq.n	80070b2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007094:	3310      	adds	r3, #16
 8007096:	4618      	mov	r0, r3
 8007098:	f001 f88e 	bl	80081b8 <xTaskRemoveFromEventList>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d007      	beq.n	80070b2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070a2:	4b3d      	ldr	r3, [pc, #244]	; (8007198 <xQueueReceive+0x1c8>)
 80070a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070b2:	f002 f8df 	bl	8009274 <vPortExitCritical>
				return pdPASS;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e069      	b.n	800718e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d103      	bne.n	80070c8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070c0:	f002 f8d8 	bl	8009274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070c4:	2300      	movs	r3, #0
 80070c6:	e062      	b.n	800718e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070ce:	f107 0310 	add.w	r3, r7, #16
 80070d2:	4618      	mov	r0, r3
 80070d4:	f001 f8d6 	bl	8008284 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070d8:	2301      	movs	r3, #1
 80070da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070dc:	f002 f8ca 	bl	8009274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070e0:	f000 fe36 	bl	8007d50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070e4:	f002 f892 	bl	800920c <vPortEnterCritical>
 80070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070ee:	b25b      	sxtb	r3, r3
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f4:	d103      	bne.n	80070fe <xQueueReceive+0x12e>
 80070f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007104:	b25b      	sxtb	r3, r3
 8007106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710a:	d103      	bne.n	8007114 <xQueueReceive+0x144>
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	2200      	movs	r2, #0
 8007110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007114:	f002 f8ae 	bl	8009274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007118:	1d3a      	adds	r2, r7, #4
 800711a:	f107 0310 	add.w	r3, r7, #16
 800711e:	4611      	mov	r1, r2
 8007120:	4618      	mov	r0, r3
 8007122:	f001 f8c5 	bl	80082b0 <xTaskCheckForTimeOut>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d123      	bne.n	8007174 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800712c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800712e:	f000 faee 	bl	800770e <prvIsQueueEmpty>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d017      	beq.n	8007168 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713a:	3324      	adds	r3, #36	; 0x24
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	4611      	mov	r1, r2
 8007140:	4618      	mov	r0, r3
 8007142:	f000 ffe5 	bl	8008110 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007148:	f000 fa8f 	bl	800766a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800714c:	f000 fe0e 	bl	8007d6c <xTaskResumeAll>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d189      	bne.n	800706a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007156:	4b10      	ldr	r3, [pc, #64]	; (8007198 <xQueueReceive+0x1c8>)
 8007158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800715c:	601a      	str	r2, [r3, #0]
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	e780      	b.n	800706a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800716a:	f000 fa7e 	bl	800766a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800716e:	f000 fdfd 	bl	8007d6c <xTaskResumeAll>
 8007172:	e77a      	b.n	800706a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007176:	f000 fa78 	bl	800766a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800717a:	f000 fdf7 	bl	8007d6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800717e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007180:	f000 fac5 	bl	800770e <prvIsQueueEmpty>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	f43f af6f 	beq.w	800706a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800718c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800718e:	4618      	mov	r0, r3
 8007190:	3730      	adds	r7, #48	; 0x30
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	e000ed04 	.word	0xe000ed04

0800719c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b08e      	sub	sp, #56	; 0x38
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80071a6:	2300      	movs	r3, #0
 80071a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80071ae:	2300      	movs	r3, #0
 80071b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10c      	bne.n	80071d2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071bc:	b672      	cpsid	i
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	b662      	cpsie	i
 80071cc:	623b      	str	r3, [r7, #32]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00c      	beq.n	80071f4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	b672      	cpsid	i
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	b662      	cpsie	i
 80071ee:	61fb      	str	r3, [r7, #28]
}
 80071f0:	bf00      	nop
 80071f2:	e7fe      	b.n	80071f2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071f4:	f001 f9ba 	bl	800856c <xTaskGetSchedulerState>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d102      	bne.n	8007204 <xQueueSemaphoreTake+0x68>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <xQueueSemaphoreTake+0x6c>
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <xQueueSemaphoreTake+0x6e>
 8007208:	2300      	movs	r3, #0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10c      	bne.n	8007228 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	b672      	cpsid	i
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	b662      	cpsie	i
 8007222:	61bb      	str	r3, [r7, #24]
}
 8007224:	bf00      	nop
 8007226:	e7fe      	b.n	8007226 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007228:	f001 fff0 	bl	800920c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007230:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007234:	2b00      	cmp	r3, #0
 8007236:	d024      	beq.n	8007282 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	1e5a      	subs	r2, r3, #1
 800723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d104      	bne.n	8007252 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007248:	f001 fb0e 	bl	8008868 <pvTaskIncrementMutexHeldCount>
 800724c:	4602      	mov	r2, r0
 800724e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007250:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00f      	beq.n	800727a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800725a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725c:	3310      	adds	r3, #16
 800725e:	4618      	mov	r0, r3
 8007260:	f000 ffaa 	bl	80081b8 <xTaskRemoveFromEventList>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d007      	beq.n	800727a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800726a:	4b55      	ldr	r3, [pc, #340]	; (80073c0 <xQueueSemaphoreTake+0x224>)
 800726c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800727a:	f001 fffb 	bl	8009274 <vPortExitCritical>
				return pdPASS;
 800727e:	2301      	movs	r3, #1
 8007280:	e099      	b.n	80073b6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d113      	bne.n	80072b0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00c      	beq.n	80072a8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	b672      	cpsid	i
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	b662      	cpsie	i
 80072a2:	617b      	str	r3, [r7, #20]
}
 80072a4:	bf00      	nop
 80072a6:	e7fe      	b.n	80072a6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80072a8:	f001 ffe4 	bl	8009274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072ac:	2300      	movs	r3, #0
 80072ae:	e082      	b.n	80073b6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d106      	bne.n	80072c4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072b6:	f107 030c 	add.w	r3, r7, #12
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 ffe2 	bl	8008284 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072c0:	2301      	movs	r3, #1
 80072c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072c4:	f001 ffd6 	bl	8009274 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072c8:	f000 fd42 	bl	8007d50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072cc:	f001 ff9e 	bl	800920c <vPortEnterCritical>
 80072d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072d6:	b25b      	sxtb	r3, r3
 80072d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072dc:	d103      	bne.n	80072e6 <xQueueSemaphoreTake+0x14a>
 80072de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072ec:	b25b      	sxtb	r3, r3
 80072ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f2:	d103      	bne.n	80072fc <xQueueSemaphoreTake+0x160>
 80072f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072fc:	f001 ffba 	bl	8009274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007300:	463a      	mov	r2, r7
 8007302:	f107 030c 	add.w	r3, r7, #12
 8007306:	4611      	mov	r1, r2
 8007308:	4618      	mov	r0, r3
 800730a:	f000 ffd1 	bl	80082b0 <xTaskCheckForTimeOut>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d132      	bne.n	800737a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007314:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007316:	f000 f9fa 	bl	800770e <prvIsQueueEmpty>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d026      	beq.n	800736e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d109      	bne.n	800733c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007328:	f001 ff70 	bl	800920c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	4618      	mov	r0, r3
 8007332:	f001 f939 	bl	80085a8 <xTaskPriorityInherit>
 8007336:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007338:	f001 ff9c 	bl	8009274 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733e:	3324      	adds	r3, #36	; 0x24
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	4611      	mov	r1, r2
 8007344:	4618      	mov	r0, r3
 8007346:	f000 fee3 	bl	8008110 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800734a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800734c:	f000 f98d 	bl	800766a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007350:	f000 fd0c 	bl	8007d6c <xTaskResumeAll>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	f47f af66 	bne.w	8007228 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800735c:	4b18      	ldr	r3, [pc, #96]	; (80073c0 <xQueueSemaphoreTake+0x224>)
 800735e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	e75c      	b.n	8007228 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800736e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007370:	f000 f97b 	bl	800766a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007374:	f000 fcfa 	bl	8007d6c <xTaskResumeAll>
 8007378:	e756      	b.n	8007228 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800737a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800737c:	f000 f975 	bl	800766a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007380:	f000 fcf4 	bl	8007d6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007384:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007386:	f000 f9c2 	bl	800770e <prvIsQueueEmpty>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	f43f af4b 	beq.w	8007228 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00d      	beq.n	80073b4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007398:	f001 ff38 	bl	800920c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800739c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800739e:	f000 f8bc 	bl	800751a <prvGetDisinheritPriorityAfterTimeout>
 80073a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073aa:	4618      	mov	r0, r3
 80073ac:	f001 f9d6 	bl	800875c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80073b0:	f001 ff60 	bl	8009274 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3738      	adds	r7, #56	; 0x38
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	e000ed04 	.word	0xe000ed04

080073c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08e      	sub	sp, #56	; 0x38
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80073d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10c      	bne.n	80073f4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	b672      	cpsid	i
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	b662      	cpsie	i
 80073ee:	623b      	str	r3, [r7, #32]
}
 80073f0:	bf00      	nop
 80073f2:	e7fe      	b.n	80073f2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d103      	bne.n	8007402 <xQueueReceiveFromISR+0x3e>
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <xQueueReceiveFromISR+0x42>
 8007402:	2301      	movs	r3, #1
 8007404:	e000      	b.n	8007408 <xQueueReceiveFromISR+0x44>
 8007406:	2300      	movs	r3, #0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10c      	bne.n	8007426 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007410:	b672      	cpsid	i
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	b662      	cpsie	i
 8007420:	61fb      	str	r3, [r7, #28]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007426:	f001 ffd9 	bl	80093dc <vPortValidateInterruptPriority>
	__asm volatile
 800742a:	f3ef 8211 	mrs	r2, BASEPRI
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	b672      	cpsid	i
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	b662      	cpsie	i
 8007442:	61ba      	str	r2, [r7, #24]
 8007444:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007446:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007448:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	2b00      	cmp	r3, #0
 8007454:	d02f      	beq.n	80074b6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800745c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007460:	68b9      	ldr	r1, [r7, #8]
 8007462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007464:	f000 f8db 	bl	800761e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	1e5a      	subs	r2, r3, #1
 800746c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007470:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007478:	d112      	bne.n	80074a0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d016      	beq.n	80074b0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007484:	3310      	adds	r3, #16
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fe96 	bl	80081b8 <xTaskRemoveFromEventList>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00e      	beq.n	80074b0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00b      	beq.n	80074b0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	e007      	b.n	80074b0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80074a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074a4:	3301      	adds	r3, #1
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	b25a      	sxtb	r2, r3
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80074b0:	2301      	movs	r3, #1
 80074b2:	637b      	str	r3, [r7, #52]	; 0x34
 80074b4:	e001      	b.n	80074ba <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	f383 8811 	msr	BASEPRI, r3
}
 80074c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3738      	adds	r7, #56	; 0x38
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10c      	bne.n	80074fc <vQueueDelete+0x2c>
	__asm volatile
 80074e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e6:	b672      	cpsid	i
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	b662      	cpsie	i
 80074f6:	60bb      	str	r3, [r7, #8]
}
 80074f8:	bf00      	nop
 80074fa:	e7fe      	b.n	80074fa <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 f95f 	bl	80077c0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007508:	2b00      	cmp	r3, #0
 800750a:	d102      	bne.n	8007512 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f002 f873 	bl	80095f8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007512:	bf00      	nop
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800751a:	b480      	push	{r7}
 800751c:	b085      	sub	sp, #20
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	2b00      	cmp	r3, #0
 8007528:	d006      	beq.n	8007538 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007534:	60fb      	str	r3, [r7, #12]
 8007536:	e001      	b.n	800753c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007538:	2300      	movs	r3, #0
 800753a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800753c:	68fb      	ldr	r3, [r7, #12]
	}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b086      	sub	sp, #24
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007556:	2300      	movs	r3, #0
 8007558:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10d      	bne.n	8007584 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d14d      	bne.n	800760c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	4618      	mov	r0, r3
 8007576:	f001 f87f 	bl	8008678 <xTaskPriorityDisinherit>
 800757a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	609a      	str	r2, [r3, #8]
 8007582:	e043      	b.n	800760c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d119      	bne.n	80075be <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6858      	ldr	r0, [r3, #4]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	461a      	mov	r2, r3
 8007594:	68b9      	ldr	r1, [r7, #8]
 8007596:	f002 fa75 	bl	8009a84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	441a      	add	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d32b      	bcc.n	800760c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	605a      	str	r2, [r3, #4]
 80075bc:	e026      	b.n	800760c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	68d8      	ldr	r0, [r3, #12]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	461a      	mov	r2, r3
 80075c8:	68b9      	ldr	r1, [r7, #8]
 80075ca:	f002 fa5b 	bl	8009a84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	68da      	ldr	r2, [r3, #12]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	425b      	negs	r3, r3
 80075d8:	441a      	add	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d207      	bcs.n	80075fa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	425b      	negs	r3, r3
 80075f4:	441a      	add	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d105      	bne.n	800760c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	3b01      	subs	r3, #1
 800760a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007614:	697b      	ldr	r3, [r7, #20]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762c:	2b00      	cmp	r3, #0
 800762e:	d018      	beq.n	8007662 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	441a      	add	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	429a      	cmp	r2, r3
 8007648:	d303      	bcc.n	8007652 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68d9      	ldr	r1, [r3, #12]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	461a      	mov	r2, r3
 800765c:	6838      	ldr	r0, [r7, #0]
 800765e:	f002 fa11 	bl	8009a84 <memcpy>
	}
}
 8007662:	bf00      	nop
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007672:	f001 fdcb 	bl	800920c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800767c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800767e:	e011      	b.n	80076a4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	2b00      	cmp	r3, #0
 8007686:	d012      	beq.n	80076ae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3324      	adds	r3, #36	; 0x24
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fd93 	bl	80081b8 <xTaskRemoveFromEventList>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007698:	f000 fe70 	bl	800837c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800769c:	7bfb      	ldrb	r3, [r7, #15]
 800769e:	3b01      	subs	r3, #1
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	dce9      	bgt.n	8007680 <prvUnlockQueue+0x16>
 80076ac:	e000      	b.n	80076b0 <prvUnlockQueue+0x46>
					break;
 80076ae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	22ff      	movs	r2, #255	; 0xff
 80076b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80076b8:	f001 fddc 	bl	8009274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076bc:	f001 fda6 	bl	800920c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076c6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076c8:	e011      	b.n	80076ee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d012      	beq.n	80076f8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	3310      	adds	r3, #16
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 fd6e 	bl	80081b8 <xTaskRemoveFromEventList>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80076e2:	f000 fe4b 	bl	800837c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	3b01      	subs	r3, #1
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	dce9      	bgt.n	80076ca <prvUnlockQueue+0x60>
 80076f6:	e000      	b.n	80076fa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076f8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	22ff      	movs	r2, #255	; 0xff
 80076fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007702:	f001 fdb7 	bl	8009274 <vPortExitCritical>
}
 8007706:	bf00      	nop
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007716:	f001 fd79 	bl	800920c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771e:	2b00      	cmp	r3, #0
 8007720:	d102      	bne.n	8007728 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007722:	2301      	movs	r3, #1
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	e001      	b.n	800772c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007728:	2300      	movs	r3, #0
 800772a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800772c:	f001 fda2 	bl	8009274 <vPortExitCritical>

	return xReturn;
 8007730:	68fb      	ldr	r3, [r7, #12]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b084      	sub	sp, #16
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007742:	f001 fd63 	bl	800920c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774e:	429a      	cmp	r2, r3
 8007750:	d102      	bne.n	8007758 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007752:	2301      	movs	r3, #1
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	e001      	b.n	800775c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007758:	2300      	movs	r3, #0
 800775a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800775c:	f001 fd8a 	bl	8009274 <vPortExitCritical>

	return xReturn;
 8007760:	68fb      	ldr	r3, [r7, #12]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
	...

0800776c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]
 800777a:	e014      	b.n	80077a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800777c:	4a0f      	ldr	r2, [pc, #60]	; (80077bc <vQueueAddToRegistry+0x50>)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10b      	bne.n	80077a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007788:	490c      	ldr	r1, [pc, #48]	; (80077bc <vQueueAddToRegistry+0x50>)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007792:	4a0a      	ldr	r2, [pc, #40]	; (80077bc <vQueueAddToRegistry+0x50>)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	00db      	lsls	r3, r3, #3
 8007798:	4413      	add	r3, r2
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800779e:	e006      	b.n	80077ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	3301      	adds	r3, #1
 80077a4:	60fb      	str	r3, [r7, #12]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2b07      	cmp	r3, #7
 80077aa:	d9e7      	bls.n	800777c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077ac:	bf00      	nop
 80077ae:	bf00      	nop
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	20004e80 	.word	0x20004e80

080077c0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077c8:	2300      	movs	r3, #0
 80077ca:	60fb      	str	r3, [r7, #12]
 80077cc:	e016      	b.n	80077fc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80077ce:	4a10      	ldr	r2, [pc, #64]	; (8007810 <vQueueUnregisterQueue+0x50>)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	4413      	add	r3, r2
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d10b      	bne.n	80077f6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80077de:	4a0c      	ldr	r2, [pc, #48]	; (8007810 <vQueueUnregisterQueue+0x50>)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2100      	movs	r1, #0
 80077e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80077e8:	4a09      	ldr	r2, [pc, #36]	; (8007810 <vQueueUnregisterQueue+0x50>)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	4413      	add	r3, r2
 80077f0:	2200      	movs	r2, #0
 80077f2:	605a      	str	r2, [r3, #4]
				break;
 80077f4:	e006      	b.n	8007804 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3301      	adds	r3, #1
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b07      	cmp	r3, #7
 8007800:	d9e5      	bls.n	80077ce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007802:	bf00      	nop
 8007804:	bf00      	nop
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	20004e80 	.word	0x20004e80

08007814 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007824:	f001 fcf2 	bl	800920c <vPortEnterCritical>
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800782e:	b25b      	sxtb	r3, r3
 8007830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007834:	d103      	bne.n	800783e <vQueueWaitForMessageRestricted+0x2a>
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007844:	b25b      	sxtb	r3, r3
 8007846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784a:	d103      	bne.n	8007854 <vQueueWaitForMessageRestricted+0x40>
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007854:	f001 fd0e 	bl	8009274 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785c:	2b00      	cmp	r3, #0
 800785e:	d106      	bne.n	800786e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	3324      	adds	r3, #36	; 0x24
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	68b9      	ldr	r1, [r7, #8]
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fc77 	bl	800815c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800786e:	6978      	ldr	r0, [r7, #20]
 8007870:	f7ff fefb 	bl	800766a <prvUnlockQueue>
	}
 8007874:	bf00      	nop
 8007876:	3718      	adds	r7, #24
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800787c:	b580      	push	{r7, lr}
 800787e:	b08e      	sub	sp, #56	; 0x38
 8007880:	af04      	add	r7, sp, #16
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
 8007888:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800788a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10c      	bne.n	80078aa <xTaskCreateStatic+0x2e>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007894:	b672      	cpsid	i
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	b662      	cpsie	i
 80078a4:	623b      	str	r3, [r7, #32]
}
 80078a6:	bf00      	nop
 80078a8:	e7fe      	b.n	80078a8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80078aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10c      	bne.n	80078ca <xTaskCreateStatic+0x4e>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	b672      	cpsid	i
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	b662      	cpsie	i
 80078c4:	61fb      	str	r3, [r7, #28]
}
 80078c6:	bf00      	nop
 80078c8:	e7fe      	b.n	80078c8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078ca:	23bc      	movs	r3, #188	; 0xbc
 80078cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	2bbc      	cmp	r3, #188	; 0xbc
 80078d2:	d00c      	beq.n	80078ee <xTaskCreateStatic+0x72>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	b672      	cpsid	i
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	b662      	cpsie	i
 80078e8:	61bb      	str	r3, [r7, #24]
}
 80078ea:	bf00      	nop
 80078ec:	e7fe      	b.n	80078ec <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d01e      	beq.n	8007934 <xTaskCreateStatic+0xb8>
 80078f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01b      	beq.n	8007934 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007904:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	2202      	movs	r2, #2
 800790a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800790e:	2300      	movs	r3, #0
 8007910:	9303      	str	r3, [sp, #12]
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	9302      	str	r3, [sp, #8]
 8007916:	f107 0314 	add.w	r3, r7, #20
 800791a:	9301      	str	r3, [sp, #4]
 800791c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	68b9      	ldr	r1, [r7, #8]
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f000 f850 	bl	80079cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800792c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800792e:	f000 f8f5 	bl	8007b1c <prvAddNewTaskToReadyList>
 8007932:	e001      	b.n	8007938 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007934:	2300      	movs	r3, #0
 8007936:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007938:	697b      	ldr	r3, [r7, #20]
	}
 800793a:	4618      	mov	r0, r3
 800793c:	3728      	adds	r7, #40	; 0x28
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007942:	b580      	push	{r7, lr}
 8007944:	b08c      	sub	sp, #48	; 0x30
 8007946:	af04      	add	r7, sp, #16
 8007948:	60f8      	str	r0, [r7, #12]
 800794a:	60b9      	str	r1, [r7, #8]
 800794c:	603b      	str	r3, [r7, #0]
 800794e:	4613      	mov	r3, r2
 8007950:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4618      	mov	r0, r3
 8007958:	f001 fd84 	bl	8009464 <pvPortMalloc>
 800795c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00e      	beq.n	8007982 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007964:	20bc      	movs	r0, #188	; 0xbc
 8007966:	f001 fd7d 	bl	8009464 <pvPortMalloc>
 800796a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	631a      	str	r2, [r3, #48]	; 0x30
 8007978:	e005      	b.n	8007986 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800797a:	6978      	ldr	r0, [r7, #20]
 800797c:	f001 fe3c 	bl	80095f8 <vPortFree>
 8007980:	e001      	b.n	8007986 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007982:	2300      	movs	r3, #0
 8007984:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d017      	beq.n	80079bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007994:	88fa      	ldrh	r2, [r7, #6]
 8007996:	2300      	movs	r3, #0
 8007998:	9303      	str	r3, [sp, #12]
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	9302      	str	r3, [sp, #8]
 800799e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a0:	9301      	str	r3, [sp, #4]
 80079a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	68b9      	ldr	r1, [r7, #8]
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 f80e 	bl	80079cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079b0:	69f8      	ldr	r0, [r7, #28]
 80079b2:	f000 f8b3 	bl	8007b1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079b6:	2301      	movs	r3, #1
 80079b8:	61bb      	str	r3, [r7, #24]
 80079ba:	e002      	b.n	80079c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079bc:	f04f 33ff 	mov.w	r3, #4294967295
 80079c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079c2:	69bb      	ldr	r3, [r7, #24]
	}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3720      	adds	r7, #32
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b088      	sub	sp, #32
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	461a      	mov	r2, r3
 80079e4:	21a5      	movs	r1, #165	; 0xa5
 80079e6:	f002 f85b 	bl	8009aa0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079ee:	6879      	ldr	r1, [r7, #4]
 80079f0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80079f4:	440b      	add	r3, r1
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	f023 0307 	bic.w	r3, r3, #7
 8007a02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00c      	beq.n	8007a28 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	b672      	cpsid	i
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	b662      	cpsie	i
 8007a22:	617b      	str	r3, [r7, #20]
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d01f      	beq.n	8007a6e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61fb      	str	r3, [r7, #28]
 8007a32:	e012      	b.n	8007a5a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	4413      	add	r3, r2
 8007a3a:	7819      	ldrb	r1, [r3, #0]
 8007a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	4413      	add	r3, r2
 8007a42:	3334      	adds	r3, #52	; 0x34
 8007a44:	460a      	mov	r2, r1
 8007a46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d006      	beq.n	8007a62 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	3301      	adds	r3, #1
 8007a58:	61fb      	str	r3, [r7, #28]
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	2b0f      	cmp	r3, #15
 8007a5e:	d9e9      	bls.n	8007a34 <prvInitialiseNewTask+0x68>
 8007a60:	e000      	b.n	8007a64 <prvInitialiseNewTask+0x98>
			{
				break;
 8007a62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a6c:	e003      	b.n	8007a76 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a78:	2b37      	cmp	r3, #55	; 0x37
 8007a7a:	d901      	bls.n	8007a80 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a7c:	2337      	movs	r3, #55	; 0x37
 8007a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8e:	2200      	movs	r2, #0
 8007a90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	3304      	adds	r3, #4
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fe fd4c 	bl	8006534 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9e:	3318      	adds	r3, #24
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fe fd47 	bl	8006534 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aaa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	3354      	adds	r3, #84	; 0x54
 8007ad0:	2260      	movs	r2, #96	; 0x60
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f001 ffe3 	bl	8009aa0 <memset>
 8007ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007adc:	4a0c      	ldr	r2, [pc, #48]	; (8007b10 <prvInitialiseNewTask+0x144>)
 8007ade:	659a      	str	r2, [r3, #88]	; 0x58
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	4a0c      	ldr	r2, [pc, #48]	; (8007b14 <prvInitialiseNewTask+0x148>)
 8007ae4:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	4a0b      	ldr	r2, [pc, #44]	; (8007b18 <prvInitialiseNewTask+0x14c>)
 8007aea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	68f9      	ldr	r1, [r7, #12]
 8007af0:	69b8      	ldr	r0, [r7, #24]
 8007af2:	f001 fa7d 	bl	8008ff0 <pxPortInitialiseStack>
 8007af6:	4602      	mov	r2, r0
 8007af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b08:	bf00      	nop
 8007b0a:	3720      	adds	r7, #32
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	0800e614 	.word	0x0800e614
 8007b14:	0800e634 	.word	0x0800e634
 8007b18:	0800e5f4 	.word	0x0800e5f4

08007b1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b24:	f001 fb72 	bl	800920c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b28:	4b2d      	ldr	r3, [pc, #180]	; (8007be0 <prvAddNewTaskToReadyList+0xc4>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	4a2c      	ldr	r2, [pc, #176]	; (8007be0 <prvAddNewTaskToReadyList+0xc4>)
 8007b30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b32:	4b2c      	ldr	r3, [pc, #176]	; (8007be4 <prvAddNewTaskToReadyList+0xc8>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d109      	bne.n	8007b4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b3a:	4a2a      	ldr	r2, [pc, #168]	; (8007be4 <prvAddNewTaskToReadyList+0xc8>)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b40:	4b27      	ldr	r3, [pc, #156]	; (8007be0 <prvAddNewTaskToReadyList+0xc4>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d110      	bne.n	8007b6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b48:	f000 fc3c 	bl	80083c4 <prvInitialiseTaskLists>
 8007b4c:	e00d      	b.n	8007b6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b4e:	4b26      	ldr	r3, [pc, #152]	; (8007be8 <prvAddNewTaskToReadyList+0xcc>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d109      	bne.n	8007b6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b56:	4b23      	ldr	r3, [pc, #140]	; (8007be4 <prvAddNewTaskToReadyList+0xc8>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d802      	bhi.n	8007b6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b64:	4a1f      	ldr	r2, [pc, #124]	; (8007be4 <prvAddNewTaskToReadyList+0xc8>)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b6a:	4b20      	ldr	r3, [pc, #128]	; (8007bec <prvAddNewTaskToReadyList+0xd0>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	4a1e      	ldr	r2, [pc, #120]	; (8007bec <prvAddNewTaskToReadyList+0xd0>)
 8007b72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b74:	4b1d      	ldr	r3, [pc, #116]	; (8007bec <prvAddNewTaskToReadyList+0xd0>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b80:	4b1b      	ldr	r3, [pc, #108]	; (8007bf0 <prvAddNewTaskToReadyList+0xd4>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d903      	bls.n	8007b90 <prvAddNewTaskToReadyList+0x74>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	4a18      	ldr	r2, [pc, #96]	; (8007bf0 <prvAddNewTaskToReadyList+0xd4>)
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b94:	4613      	mov	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4a15      	ldr	r2, [pc, #84]	; (8007bf4 <prvAddNewTaskToReadyList+0xd8>)
 8007b9e:	441a      	add	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	f7fe fcd1 	bl	800654e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007bac:	f001 fb62 	bl	8009274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007bb0:	4b0d      	ldr	r3, [pc, #52]	; (8007be8 <prvAddNewTaskToReadyList+0xcc>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00e      	beq.n	8007bd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007bb8:	4b0a      	ldr	r3, [pc, #40]	; (8007be4 <prvAddNewTaskToReadyList+0xc8>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d207      	bcs.n	8007bd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bc6:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <prvAddNewTaskToReadyList+0xdc>)
 8007bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bd6:	bf00      	nop
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	20000eb4 	.word	0x20000eb4
 8007be4:	200009e0 	.word	0x200009e0
 8007be8:	20000ec0 	.word	0x20000ec0
 8007bec:	20000ed0 	.word	0x20000ed0
 8007bf0:	20000ebc 	.word	0x20000ebc
 8007bf4:	200009e4 	.word	0x200009e4
 8007bf8:	e000ed04 	.word	0xe000ed04

08007bfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d019      	beq.n	8007c42 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c0e:	4b14      	ldr	r3, [pc, #80]	; (8007c60 <vTaskDelay+0x64>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00c      	beq.n	8007c30 <vTaskDelay+0x34>
	__asm volatile
 8007c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1a:	b672      	cpsid	i
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	b662      	cpsie	i
 8007c2a:	60bb      	str	r3, [r7, #8]
}
 8007c2c:	bf00      	nop
 8007c2e:	e7fe      	b.n	8007c2e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007c30:	f000 f88e 	bl	8007d50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c34:	2100      	movs	r1, #0
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fe2a 	bl	8008890 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c3c:	f000 f896 	bl	8007d6c <xTaskResumeAll>
 8007c40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d107      	bne.n	8007c58 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007c48:	4b06      	ldr	r3, [pc, #24]	; (8007c64 <vTaskDelay+0x68>)
 8007c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c4e:	601a      	str	r2, [r3, #0]
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c58:	bf00      	nop
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	20000edc 	.word	0x20000edc
 8007c64:	e000ed04 	.word	0xe000ed04

08007c68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08a      	sub	sp, #40	; 0x28
 8007c6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c72:	2300      	movs	r3, #0
 8007c74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c76:	463a      	mov	r2, r7
 8007c78:	1d39      	adds	r1, r7, #4
 8007c7a:	f107 0308 	add.w	r3, r7, #8
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fe fc04 	bl	800648c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	9202      	str	r2, [sp, #8]
 8007c8c:	9301      	str	r3, [sp, #4]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	2300      	movs	r3, #0
 8007c94:	460a      	mov	r2, r1
 8007c96:	4926      	ldr	r1, [pc, #152]	; (8007d30 <vTaskStartScheduler+0xc8>)
 8007c98:	4826      	ldr	r0, [pc, #152]	; (8007d34 <vTaskStartScheduler+0xcc>)
 8007c9a:	f7ff fdef 	bl	800787c <xTaskCreateStatic>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	4a25      	ldr	r2, [pc, #148]	; (8007d38 <vTaskStartScheduler+0xd0>)
 8007ca2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ca4:	4b24      	ldr	r3, [pc, #144]	; (8007d38 <vTaskStartScheduler+0xd0>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007cac:	2301      	movs	r3, #1
 8007cae:	617b      	str	r3, [r7, #20]
 8007cb0:	e001      	b.n	8007cb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d102      	bne.n	8007cc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007cbc:	f000 fe3c 	bl	8008938 <xTimerCreateTimerTask>
 8007cc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d11d      	bne.n	8007d04 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ccc:	b672      	cpsid	i
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	b662      	cpsie	i
 8007cdc:	613b      	str	r3, [r7, #16]
}
 8007cde:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ce0:	4b16      	ldr	r3, [pc, #88]	; (8007d3c <vTaskStartScheduler+0xd4>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3354      	adds	r3, #84	; 0x54
 8007ce6:	4a16      	ldr	r2, [pc, #88]	; (8007d40 <vTaskStartScheduler+0xd8>)
 8007ce8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007cea:	4b16      	ldr	r3, [pc, #88]	; (8007d44 <vTaskStartScheduler+0xdc>)
 8007cec:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007cf2:	4b15      	ldr	r3, [pc, #84]	; (8007d48 <vTaskStartScheduler+0xe0>)
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007cf8:	4b14      	ldr	r3, [pc, #80]	; (8007d4c <vTaskStartScheduler+0xe4>)
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cfe:	f001 fa07 	bl	8009110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d02:	e010      	b.n	8007d26 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0a:	d10c      	bne.n	8007d26 <vTaskStartScheduler+0xbe>
	__asm volatile
 8007d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d10:	b672      	cpsid	i
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	b662      	cpsie	i
 8007d20:	60fb      	str	r3, [r7, #12]
}
 8007d22:	bf00      	nop
 8007d24:	e7fe      	b.n	8007d24 <vTaskStartScheduler+0xbc>
}
 8007d26:	bf00      	nop
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	0800e3f4 	.word	0x0800e3f4
 8007d34:	08008395 	.word	0x08008395
 8007d38:	20000ed8 	.word	0x20000ed8
 8007d3c:	200009e0 	.word	0x200009e0
 8007d40:	20000070 	.word	0x20000070
 8007d44:	20000ed4 	.word	0x20000ed4
 8007d48:	20000ec0 	.word	0x20000ec0
 8007d4c:	20000eb8 	.word	0x20000eb8

08007d50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d50:	b480      	push	{r7}
 8007d52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d54:	4b04      	ldr	r3, [pc, #16]	; (8007d68 <vTaskSuspendAll+0x18>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	4a03      	ldr	r2, [pc, #12]	; (8007d68 <vTaskSuspendAll+0x18>)
 8007d5c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007d5e:	bf00      	nop
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	20000edc 	.word	0x20000edc

08007d6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d72:	2300      	movs	r3, #0
 8007d74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d76:	2300      	movs	r3, #0
 8007d78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d7a:	4b43      	ldr	r3, [pc, #268]	; (8007e88 <xTaskResumeAll+0x11c>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10c      	bne.n	8007d9c <xTaskResumeAll+0x30>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	b672      	cpsid	i
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	b662      	cpsie	i
 8007d96:	603b      	str	r3, [r7, #0]
}
 8007d98:	bf00      	nop
 8007d9a:	e7fe      	b.n	8007d9a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d9c:	f001 fa36 	bl	800920c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007da0:	4b39      	ldr	r3, [pc, #228]	; (8007e88 <xTaskResumeAll+0x11c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	4a38      	ldr	r2, [pc, #224]	; (8007e88 <xTaskResumeAll+0x11c>)
 8007da8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007daa:	4b37      	ldr	r3, [pc, #220]	; (8007e88 <xTaskResumeAll+0x11c>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d162      	bne.n	8007e78 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007db2:	4b36      	ldr	r3, [pc, #216]	; (8007e8c <xTaskResumeAll+0x120>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d05e      	beq.n	8007e78 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dba:	e02f      	b.n	8007e1c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dbc:	4b34      	ldr	r3, [pc, #208]	; (8007e90 <xTaskResumeAll+0x124>)
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3318      	adds	r3, #24
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe fc1d 	bl	8006608 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3304      	adds	r3, #4
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe fc18 	bl	8006608 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ddc:	4b2d      	ldr	r3, [pc, #180]	; (8007e94 <xTaskResumeAll+0x128>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d903      	bls.n	8007dec <xTaskResumeAll+0x80>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de8:	4a2a      	ldr	r2, [pc, #168]	; (8007e94 <xTaskResumeAll+0x128>)
 8007dea:	6013      	str	r3, [r2, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df0:	4613      	mov	r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4413      	add	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4a27      	ldr	r2, [pc, #156]	; (8007e98 <xTaskResumeAll+0x12c>)
 8007dfa:	441a      	add	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	4619      	mov	r1, r3
 8007e02:	4610      	mov	r0, r2
 8007e04:	f7fe fba3 	bl	800654e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e0c:	4b23      	ldr	r3, [pc, #140]	; (8007e9c <xTaskResumeAll+0x130>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d302      	bcc.n	8007e1c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007e16:	4b22      	ldr	r3, [pc, #136]	; (8007ea0 <xTaskResumeAll+0x134>)
 8007e18:	2201      	movs	r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e1c:	4b1c      	ldr	r3, [pc, #112]	; (8007e90 <xTaskResumeAll+0x124>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1cb      	bne.n	8007dbc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e2a:	f000 fb6f 	bl	800850c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007e2e:	4b1d      	ldr	r3, [pc, #116]	; (8007ea4 <xTaskResumeAll+0x138>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d010      	beq.n	8007e5c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e3a:	f000 f847 	bl	8007ecc <xTaskIncrementTick>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007e44:	4b16      	ldr	r3, [pc, #88]	; (8007ea0 <xTaskResumeAll+0x134>)
 8007e46:	2201      	movs	r2, #1
 8007e48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1f1      	bne.n	8007e3a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007e56:	4b13      	ldr	r3, [pc, #76]	; (8007ea4 <xTaskResumeAll+0x138>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e5c:	4b10      	ldr	r3, [pc, #64]	; (8007ea0 <xTaskResumeAll+0x134>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d009      	beq.n	8007e78 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e64:	2301      	movs	r3, #1
 8007e66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e68:	4b0f      	ldr	r3, [pc, #60]	; (8007ea8 <xTaskResumeAll+0x13c>)
 8007e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e78:	f001 f9fc 	bl	8009274 <vPortExitCritical>

	return xAlreadyYielded;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20000edc 	.word	0x20000edc
 8007e8c:	20000eb4 	.word	0x20000eb4
 8007e90:	20000e74 	.word	0x20000e74
 8007e94:	20000ebc 	.word	0x20000ebc
 8007e98:	200009e4 	.word	0x200009e4
 8007e9c:	200009e0 	.word	0x200009e0
 8007ea0:	20000ec8 	.word	0x20000ec8
 8007ea4:	20000ec4 	.word	0x20000ec4
 8007ea8:	e000ed04 	.word	0xe000ed04

08007eac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007eb2:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <xTaskGetTickCount+0x1c>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007eb8:	687b      	ldr	r3, [r7, #4]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	20000eb8 	.word	0x20000eb8

08007ecc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ed6:	4b50      	ldr	r3, [pc, #320]	; (8008018 <xTaskIncrementTick+0x14c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f040 808b 	bne.w	8007ff6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ee0:	4b4e      	ldr	r3, [pc, #312]	; (800801c <xTaskIncrementTick+0x150>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ee8:	4a4c      	ldr	r2, [pc, #304]	; (800801c <xTaskIncrementTick+0x150>)
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d122      	bne.n	8007f3a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ef4:	4b4a      	ldr	r3, [pc, #296]	; (8008020 <xTaskIncrementTick+0x154>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00c      	beq.n	8007f18 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	b672      	cpsid	i
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	b662      	cpsie	i
 8007f12:	603b      	str	r3, [r7, #0]
}
 8007f14:	bf00      	nop
 8007f16:	e7fe      	b.n	8007f16 <xTaskIncrementTick+0x4a>
 8007f18:	4b41      	ldr	r3, [pc, #260]	; (8008020 <xTaskIncrementTick+0x154>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60fb      	str	r3, [r7, #12]
 8007f1e:	4b41      	ldr	r3, [pc, #260]	; (8008024 <xTaskIncrementTick+0x158>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a3f      	ldr	r2, [pc, #252]	; (8008020 <xTaskIncrementTick+0x154>)
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	4a3f      	ldr	r2, [pc, #252]	; (8008024 <xTaskIncrementTick+0x158>)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6013      	str	r3, [r2, #0]
 8007f2c:	4b3e      	ldr	r3, [pc, #248]	; (8008028 <xTaskIncrementTick+0x15c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3301      	adds	r3, #1
 8007f32:	4a3d      	ldr	r2, [pc, #244]	; (8008028 <xTaskIncrementTick+0x15c>)
 8007f34:	6013      	str	r3, [r2, #0]
 8007f36:	f000 fae9 	bl	800850c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f3a:	4b3c      	ldr	r3, [pc, #240]	; (800802c <xTaskIncrementTick+0x160>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d349      	bcc.n	8007fd8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f44:	4b36      	ldr	r3, [pc, #216]	; (8008020 <xTaskIncrementTick+0x154>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d104      	bne.n	8007f58 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f4e:	4b37      	ldr	r3, [pc, #220]	; (800802c <xTaskIncrementTick+0x160>)
 8007f50:	f04f 32ff 	mov.w	r2, #4294967295
 8007f54:	601a      	str	r2, [r3, #0]
					break;
 8007f56:	e03f      	b.n	8007fd8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f58:	4b31      	ldr	r3, [pc, #196]	; (8008020 <xTaskIncrementTick+0x154>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d203      	bcs.n	8007f78 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f70:	4a2e      	ldr	r2, [pc, #184]	; (800802c <xTaskIncrementTick+0x160>)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f76:	e02f      	b.n	8007fd8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fe fb43 	bl	8006608 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d004      	beq.n	8007f94 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	3318      	adds	r3, #24
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fe fb3a 	bl	8006608 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f98:	4b25      	ldr	r3, [pc, #148]	; (8008030 <xTaskIncrementTick+0x164>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d903      	bls.n	8007fa8 <xTaskIncrementTick+0xdc>
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa4:	4a22      	ldr	r2, [pc, #136]	; (8008030 <xTaskIncrementTick+0x164>)
 8007fa6:	6013      	str	r3, [r2, #0]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fac:	4613      	mov	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4a1f      	ldr	r2, [pc, #124]	; (8008034 <xTaskIncrementTick+0x168>)
 8007fb6:	441a      	add	r2, r3
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	3304      	adds	r3, #4
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	f7fe fac5 	bl	800654e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc8:	4b1b      	ldr	r3, [pc, #108]	; (8008038 <xTaskIncrementTick+0x16c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d3b8      	bcc.n	8007f44 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fd6:	e7b5      	b.n	8007f44 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fd8:	4b17      	ldr	r3, [pc, #92]	; (8008038 <xTaskIncrementTick+0x16c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fde:	4915      	ldr	r1, [pc, #84]	; (8008034 <xTaskIncrementTick+0x168>)
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	440b      	add	r3, r1
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d907      	bls.n	8008000 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	617b      	str	r3, [r7, #20]
 8007ff4:	e004      	b.n	8008000 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007ff6:	4b11      	ldr	r3, [pc, #68]	; (800803c <xTaskIncrementTick+0x170>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	4a0f      	ldr	r2, [pc, #60]	; (800803c <xTaskIncrementTick+0x170>)
 8007ffe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008000:	4b0f      	ldr	r3, [pc, #60]	; (8008040 <xTaskIncrementTick+0x174>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008008:	2301      	movs	r3, #1
 800800a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800800c:	697b      	ldr	r3, [r7, #20]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3718      	adds	r7, #24
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	20000edc 	.word	0x20000edc
 800801c:	20000eb8 	.word	0x20000eb8
 8008020:	20000e6c 	.word	0x20000e6c
 8008024:	20000e70 	.word	0x20000e70
 8008028:	20000ecc 	.word	0x20000ecc
 800802c:	20000ed4 	.word	0x20000ed4
 8008030:	20000ebc 	.word	0x20000ebc
 8008034:	200009e4 	.word	0x200009e4
 8008038:	200009e0 	.word	0x200009e0
 800803c:	20000ec4 	.word	0x20000ec4
 8008040:	20000ec8 	.word	0x20000ec8

08008044 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800804a:	4b2b      	ldr	r3, [pc, #172]	; (80080f8 <vTaskSwitchContext+0xb4>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008052:	4b2a      	ldr	r3, [pc, #168]	; (80080fc <vTaskSwitchContext+0xb8>)
 8008054:	2201      	movs	r2, #1
 8008056:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008058:	e048      	b.n	80080ec <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800805a:	4b28      	ldr	r3, [pc, #160]	; (80080fc <vTaskSwitchContext+0xb8>)
 800805c:	2200      	movs	r2, #0
 800805e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008060:	4b27      	ldr	r3, [pc, #156]	; (8008100 <vTaskSwitchContext+0xbc>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	60fb      	str	r3, [r7, #12]
 8008066:	e012      	b.n	800808e <vTaskSwitchContext+0x4a>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10c      	bne.n	8008088 <vTaskSwitchContext+0x44>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008072:	b672      	cpsid	i
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	b662      	cpsie	i
 8008082:	607b      	str	r3, [r7, #4]
}
 8008084:	bf00      	nop
 8008086:	e7fe      	b.n	8008086 <vTaskSwitchContext+0x42>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	3b01      	subs	r3, #1
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	491d      	ldr	r1, [pc, #116]	; (8008104 <vTaskSwitchContext+0xc0>)
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	4613      	mov	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	440b      	add	r3, r1
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0e2      	beq.n	8008068 <vTaskSwitchContext+0x24>
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	4613      	mov	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4a15      	ldr	r2, [pc, #84]	; (8008104 <vTaskSwitchContext+0xc0>)
 80080ae:	4413      	add	r3, r2
 80080b0:	60bb      	str	r3, [r7, #8]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	605a      	str	r2, [r3, #4]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	3308      	adds	r3, #8
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d104      	bne.n	80080d2 <vTaskSwitchContext+0x8e>
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	605a      	str	r2, [r3, #4]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	4a0b      	ldr	r2, [pc, #44]	; (8008108 <vTaskSwitchContext+0xc4>)
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	4a08      	ldr	r2, [pc, #32]	; (8008100 <vTaskSwitchContext+0xbc>)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080e2:	4b09      	ldr	r3, [pc, #36]	; (8008108 <vTaskSwitchContext+0xc4>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3354      	adds	r3, #84	; 0x54
 80080e8:	4a08      	ldr	r2, [pc, #32]	; (800810c <vTaskSwitchContext+0xc8>)
 80080ea:	6013      	str	r3, [r2, #0]
}
 80080ec:	bf00      	nop
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr
 80080f8:	20000edc 	.word	0x20000edc
 80080fc:	20000ec8 	.word	0x20000ec8
 8008100:	20000ebc 	.word	0x20000ebc
 8008104:	200009e4 	.word	0x200009e4
 8008108:	200009e0 	.word	0x200009e0
 800810c:	20000070 	.word	0x20000070

08008110 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10c      	bne.n	800813a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	b672      	cpsid	i
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	b662      	cpsie	i
 8008134:	60fb      	str	r3, [r7, #12]
}
 8008136:	bf00      	nop
 8008138:	e7fe      	b.n	8008138 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800813a:	4b07      	ldr	r3, [pc, #28]	; (8008158 <vTaskPlaceOnEventList+0x48>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3318      	adds	r3, #24
 8008140:	4619      	mov	r1, r3
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7fe fa27 	bl	8006596 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008148:	2101      	movs	r1, #1
 800814a:	6838      	ldr	r0, [r7, #0]
 800814c:	f000 fba0 	bl	8008890 <prvAddCurrentTaskToDelayedList>
}
 8008150:	bf00      	nop
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	200009e0 	.word	0x200009e0

0800815c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10c      	bne.n	8008188 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008172:	b672      	cpsid	i
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	b662      	cpsie	i
 8008182:	617b      	str	r3, [r7, #20]
}
 8008184:	bf00      	nop
 8008186:	e7fe      	b.n	8008186 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008188:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <vTaskPlaceOnEventListRestricted+0x58>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3318      	adds	r3, #24
 800818e:	4619      	mov	r1, r3
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f7fe f9dc 	bl	800654e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800819c:	f04f 33ff 	mov.w	r3, #4294967295
 80081a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	68b8      	ldr	r0, [r7, #8]
 80081a6:	f000 fb73 	bl	8008890 <prvAddCurrentTaskToDelayedList>
	}
 80081aa:	bf00      	nop
 80081ac:	3718      	adds	r7, #24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	200009e0 	.word	0x200009e0

080081b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10c      	bne.n	80081e8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	b672      	cpsid	i
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	b662      	cpsie	i
 80081e2:	60fb      	str	r3, [r7, #12]
}
 80081e4:	bf00      	nop
 80081e6:	e7fe      	b.n	80081e6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	3318      	adds	r3, #24
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fe fa0b 	bl	8006608 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081f2:	4b1e      	ldr	r3, [pc, #120]	; (800826c <xTaskRemoveFromEventList+0xb4>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d11d      	bne.n	8008236 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	3304      	adds	r3, #4
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fe fa02 	bl	8006608 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008208:	4b19      	ldr	r3, [pc, #100]	; (8008270 <xTaskRemoveFromEventList+0xb8>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	429a      	cmp	r2, r3
 800820e:	d903      	bls.n	8008218 <xTaskRemoveFromEventList+0x60>
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	4a16      	ldr	r2, [pc, #88]	; (8008270 <xTaskRemoveFromEventList+0xb8>)
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821c:	4613      	mov	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4a13      	ldr	r2, [pc, #76]	; (8008274 <xTaskRemoveFromEventList+0xbc>)
 8008226:	441a      	add	r2, r3
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	3304      	adds	r3, #4
 800822c:	4619      	mov	r1, r3
 800822e:	4610      	mov	r0, r2
 8008230:	f7fe f98d 	bl	800654e <vListInsertEnd>
 8008234:	e005      	b.n	8008242 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	3318      	adds	r3, #24
 800823a:	4619      	mov	r1, r3
 800823c:	480e      	ldr	r0, [pc, #56]	; (8008278 <xTaskRemoveFromEventList+0xc0>)
 800823e:	f7fe f986 	bl	800654e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008246:	4b0d      	ldr	r3, [pc, #52]	; (800827c <xTaskRemoveFromEventList+0xc4>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	429a      	cmp	r2, r3
 800824e:	d905      	bls.n	800825c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008250:	2301      	movs	r3, #1
 8008252:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008254:	4b0a      	ldr	r3, [pc, #40]	; (8008280 <xTaskRemoveFromEventList+0xc8>)
 8008256:	2201      	movs	r2, #1
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	e001      	b.n	8008260 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800825c:	2300      	movs	r3, #0
 800825e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008260:	697b      	ldr	r3, [r7, #20]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	20000edc 	.word	0x20000edc
 8008270:	20000ebc 	.word	0x20000ebc
 8008274:	200009e4 	.word	0x200009e4
 8008278:	20000e74 	.word	0x20000e74
 800827c:	200009e0 	.word	0x200009e0
 8008280:	20000ec8 	.word	0x20000ec8

08008284 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800828c:	4b06      	ldr	r3, [pc, #24]	; (80082a8 <vTaskInternalSetTimeOutState+0x24>)
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008294:	4b05      	ldr	r3, [pc, #20]	; (80082ac <vTaskInternalSetTimeOutState+0x28>)
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	605a      	str	r2, [r3, #4]
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	20000ecc 	.word	0x20000ecc
 80082ac:	20000eb8 	.word	0x20000eb8

080082b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10c      	bne.n	80082da <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	b672      	cpsid	i
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	b662      	cpsie	i
 80082d4:	613b      	str	r3, [r7, #16]
}
 80082d6:	bf00      	nop
 80082d8:	e7fe      	b.n	80082d8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10c      	bne.n	80082fa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	b672      	cpsid	i
 80082e6:	f383 8811 	msr	BASEPRI, r3
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	b662      	cpsie	i
 80082f4:	60fb      	str	r3, [r7, #12]
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80082fa:	f000 ff87 	bl	800920c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082fe:	4b1d      	ldr	r3, [pc, #116]	; (8008374 <xTaskCheckForTimeOut+0xc4>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008316:	d102      	bne.n	800831e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008318:	2300      	movs	r3, #0
 800831a:	61fb      	str	r3, [r7, #28]
 800831c:	e023      	b.n	8008366 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	4b15      	ldr	r3, [pc, #84]	; (8008378 <xTaskCheckForTimeOut+0xc8>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	429a      	cmp	r2, r3
 8008328:	d007      	beq.n	800833a <xTaskCheckForTimeOut+0x8a>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	429a      	cmp	r2, r3
 8008332:	d302      	bcc.n	800833a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008334:	2301      	movs	r3, #1
 8008336:	61fb      	str	r3, [r7, #28]
 8008338:	e015      	b.n	8008366 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	429a      	cmp	r2, r3
 8008342:	d20b      	bcs.n	800835c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	1ad2      	subs	r2, r2, r3
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7ff ff97 	bl	8008284 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008356:	2300      	movs	r3, #0
 8008358:	61fb      	str	r3, [r7, #28]
 800835a:	e004      	b.n	8008366 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	2200      	movs	r2, #0
 8008360:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008362:	2301      	movs	r3, #1
 8008364:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008366:	f000 ff85 	bl	8009274 <vPortExitCritical>

	return xReturn;
 800836a:	69fb      	ldr	r3, [r7, #28]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3720      	adds	r7, #32
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	20000eb8 	.word	0x20000eb8
 8008378:	20000ecc 	.word	0x20000ecc

0800837c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008380:	4b03      	ldr	r3, [pc, #12]	; (8008390 <vTaskMissedYield+0x14>)
 8008382:	2201      	movs	r2, #1
 8008384:	601a      	str	r2, [r3, #0]
}
 8008386:	bf00      	nop
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	20000ec8 	.word	0x20000ec8

08008394 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800839c:	f000 f852 	bl	8008444 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083a0:	4b06      	ldr	r3, [pc, #24]	; (80083bc <prvIdleTask+0x28>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d9f9      	bls.n	800839c <prvIdleTask+0x8>
			{
				taskYIELD();
 80083a8:	4b05      	ldr	r3, [pc, #20]	; (80083c0 <prvIdleTask+0x2c>)
 80083aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083b8:	e7f0      	b.n	800839c <prvIdleTask+0x8>
 80083ba:	bf00      	nop
 80083bc:	200009e4 	.word	0x200009e4
 80083c0:	e000ed04 	.word	0xe000ed04

080083c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083ca:	2300      	movs	r3, #0
 80083cc:	607b      	str	r3, [r7, #4]
 80083ce:	e00c      	b.n	80083ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	4613      	mov	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4a12      	ldr	r2, [pc, #72]	; (8008424 <prvInitialiseTaskLists+0x60>)
 80083dc:	4413      	add	r3, r2
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fe f888 	bl	80064f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3301      	adds	r3, #1
 80083e8:	607b      	str	r3, [r7, #4]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b37      	cmp	r3, #55	; 0x37
 80083ee:	d9ef      	bls.n	80083d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083f0:	480d      	ldr	r0, [pc, #52]	; (8008428 <prvInitialiseTaskLists+0x64>)
 80083f2:	f7fe f87f 	bl	80064f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083f6:	480d      	ldr	r0, [pc, #52]	; (800842c <prvInitialiseTaskLists+0x68>)
 80083f8:	f7fe f87c 	bl	80064f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083fc:	480c      	ldr	r0, [pc, #48]	; (8008430 <prvInitialiseTaskLists+0x6c>)
 80083fe:	f7fe f879 	bl	80064f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008402:	480c      	ldr	r0, [pc, #48]	; (8008434 <prvInitialiseTaskLists+0x70>)
 8008404:	f7fe f876 	bl	80064f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008408:	480b      	ldr	r0, [pc, #44]	; (8008438 <prvInitialiseTaskLists+0x74>)
 800840a:	f7fe f873 	bl	80064f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800840e:	4b0b      	ldr	r3, [pc, #44]	; (800843c <prvInitialiseTaskLists+0x78>)
 8008410:	4a05      	ldr	r2, [pc, #20]	; (8008428 <prvInitialiseTaskLists+0x64>)
 8008412:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008414:	4b0a      	ldr	r3, [pc, #40]	; (8008440 <prvInitialiseTaskLists+0x7c>)
 8008416:	4a05      	ldr	r2, [pc, #20]	; (800842c <prvInitialiseTaskLists+0x68>)
 8008418:	601a      	str	r2, [r3, #0]
}
 800841a:	bf00      	nop
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	200009e4 	.word	0x200009e4
 8008428:	20000e44 	.word	0x20000e44
 800842c:	20000e58 	.word	0x20000e58
 8008430:	20000e74 	.word	0x20000e74
 8008434:	20000e88 	.word	0x20000e88
 8008438:	20000ea0 	.word	0x20000ea0
 800843c:	20000e6c 	.word	0x20000e6c
 8008440:	20000e70 	.word	0x20000e70

08008444 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800844a:	e019      	b.n	8008480 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800844c:	f000 fede 	bl	800920c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008450:	4b10      	ldr	r3, [pc, #64]	; (8008494 <prvCheckTasksWaitingTermination+0x50>)
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	3304      	adds	r3, #4
 800845c:	4618      	mov	r0, r3
 800845e:	f7fe f8d3 	bl	8006608 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008462:	4b0d      	ldr	r3, [pc, #52]	; (8008498 <prvCheckTasksWaitingTermination+0x54>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3b01      	subs	r3, #1
 8008468:	4a0b      	ldr	r2, [pc, #44]	; (8008498 <prvCheckTasksWaitingTermination+0x54>)
 800846a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800846c:	4b0b      	ldr	r3, [pc, #44]	; (800849c <prvCheckTasksWaitingTermination+0x58>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3b01      	subs	r3, #1
 8008472:	4a0a      	ldr	r2, [pc, #40]	; (800849c <prvCheckTasksWaitingTermination+0x58>)
 8008474:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008476:	f000 fefd 	bl	8009274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f810 	bl	80084a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008480:	4b06      	ldr	r3, [pc, #24]	; (800849c <prvCheckTasksWaitingTermination+0x58>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e1      	bne.n	800844c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008488:	bf00      	nop
 800848a:	bf00      	nop
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20000e88 	.word	0x20000e88
 8008498:	20000eb4 	.word	0x20000eb4
 800849c:	20000e9c 	.word	0x20000e9c

080084a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3354      	adds	r3, #84	; 0x54
 80084ac:	4618      	mov	r0, r3
 80084ae:	f002 faa3 	bl	800a9f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d108      	bne.n	80084ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c0:	4618      	mov	r0, r3
 80084c2:	f001 f899 	bl	80095f8 <vPortFree>
				vPortFree( pxTCB );
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 f896 	bl	80095f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084cc:	e01a      	b.n	8008504 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d103      	bne.n	80084e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f001 f88d 	bl	80095f8 <vPortFree>
	}
 80084de:	e011      	b.n	8008504 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d00c      	beq.n	8008504 <prvDeleteTCB+0x64>
	__asm volatile
 80084ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ee:	b672      	cpsid	i
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	b662      	cpsie	i
 80084fe:	60fb      	str	r3, [r7, #12]
}
 8008500:	bf00      	nop
 8008502:	e7fe      	b.n	8008502 <prvDeleteTCB+0x62>
	}
 8008504:	bf00      	nop
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008512:	4b0c      	ldr	r3, [pc, #48]	; (8008544 <prvResetNextTaskUnblockTime+0x38>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d104      	bne.n	8008526 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800851c:	4b0a      	ldr	r3, [pc, #40]	; (8008548 <prvResetNextTaskUnblockTime+0x3c>)
 800851e:	f04f 32ff 	mov.w	r2, #4294967295
 8008522:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008524:	e008      	b.n	8008538 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008526:	4b07      	ldr	r3, [pc, #28]	; (8008544 <prvResetNextTaskUnblockTime+0x38>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	4a04      	ldr	r2, [pc, #16]	; (8008548 <prvResetNextTaskUnblockTime+0x3c>)
 8008536:	6013      	str	r3, [r2, #0]
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	20000e6c 	.word	0x20000e6c
 8008548:	20000ed4 	.word	0x20000ed4

0800854c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008552:	4b05      	ldr	r3, [pc, #20]	; (8008568 <xTaskGetCurrentTaskHandle+0x1c>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008558:	687b      	ldr	r3, [r7, #4]
	}
 800855a:	4618      	mov	r0, r3
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	200009e0 	.word	0x200009e0

0800856c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008572:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <xTaskGetSchedulerState+0x34>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d102      	bne.n	8008580 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800857a:	2301      	movs	r3, #1
 800857c:	607b      	str	r3, [r7, #4]
 800857e:	e008      	b.n	8008592 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008580:	4b08      	ldr	r3, [pc, #32]	; (80085a4 <xTaskGetSchedulerState+0x38>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d102      	bne.n	800858e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008588:	2302      	movs	r3, #2
 800858a:	607b      	str	r3, [r7, #4]
 800858c:	e001      	b.n	8008592 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800858e:	2300      	movs	r3, #0
 8008590:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008592:	687b      	ldr	r3, [r7, #4]
	}
 8008594:	4618      	mov	r0, r3
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	20000ec0 	.word	0x20000ec0
 80085a4:	20000edc 	.word	0x20000edc

080085a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80085b4:	2300      	movs	r3, #0
 80085b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d051      	beq.n	8008662 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c2:	4b2a      	ldr	r3, [pc, #168]	; (800866c <xTaskPriorityInherit+0xc4>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d241      	bcs.n	8008650 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	db06      	blt.n	80085e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085d4:	4b25      	ldr	r3, [pc, #148]	; (800866c <xTaskPriorityInherit+0xc4>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	6959      	ldr	r1, [r3, #20]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ea:	4613      	mov	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4a1f      	ldr	r2, [pc, #124]	; (8008670 <xTaskPriorityInherit+0xc8>)
 80085f4:	4413      	add	r3, r2
 80085f6:	4299      	cmp	r1, r3
 80085f8:	d122      	bne.n	8008640 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	3304      	adds	r3, #4
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fe f802 	bl	8006608 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008604:	4b19      	ldr	r3, [pc, #100]	; (800866c <xTaskPriorityInherit+0xc4>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008612:	4b18      	ldr	r3, [pc, #96]	; (8008674 <xTaskPriorityInherit+0xcc>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d903      	bls.n	8008622 <xTaskPriorityInherit+0x7a>
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861e:	4a15      	ldr	r2, [pc, #84]	; (8008674 <xTaskPriorityInherit+0xcc>)
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008626:	4613      	mov	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4a10      	ldr	r2, [pc, #64]	; (8008670 <xTaskPriorityInherit+0xc8>)
 8008630:	441a      	add	r2, r3
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	3304      	adds	r3, #4
 8008636:	4619      	mov	r1, r3
 8008638:	4610      	mov	r0, r2
 800863a:	f7fd ff88 	bl	800654e <vListInsertEnd>
 800863e:	e004      	b.n	800864a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008640:	4b0a      	ldr	r3, [pc, #40]	; (800866c <xTaskPriorityInherit+0xc4>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800864a:	2301      	movs	r3, #1
 800864c:	60fb      	str	r3, [r7, #12]
 800864e:	e008      	b.n	8008662 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008654:	4b05      	ldr	r3, [pc, #20]	; (800866c <xTaskPriorityInherit+0xc4>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865a:	429a      	cmp	r2, r3
 800865c:	d201      	bcs.n	8008662 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800865e:	2301      	movs	r3, #1
 8008660:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008662:	68fb      	ldr	r3, [r7, #12]
	}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	200009e0 	.word	0x200009e0
 8008670:	200009e4 	.word	0x200009e4
 8008674:	20000ebc 	.word	0x20000ebc

08008678 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008684:	2300      	movs	r3, #0
 8008686:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d05a      	beq.n	8008744 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800868e:	4b30      	ldr	r3, [pc, #192]	; (8008750 <xTaskPriorityDisinherit+0xd8>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	429a      	cmp	r2, r3
 8008696:	d00c      	beq.n	80086b2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	b672      	cpsid	i
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	b662      	cpsie	i
 80086ac:	60fb      	str	r3, [r7, #12]
}
 80086ae:	bf00      	nop
 80086b0:	e7fe      	b.n	80086b0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10c      	bne.n	80086d4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80086ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086be:	b672      	cpsid	i
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	b662      	cpsie	i
 80086ce:	60bb      	str	r3, [r7, #8]
}
 80086d0:	bf00      	nop
 80086d2:	e7fe      	b.n	80086d2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d8:	1e5a      	subs	r2, r3, #1
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d02c      	beq.n	8008744 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d128      	bne.n	8008744 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	3304      	adds	r3, #4
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fd ff86 	bl	8006608 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008708:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008714:	4b0f      	ldr	r3, [pc, #60]	; (8008754 <xTaskPriorityDisinherit+0xdc>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	429a      	cmp	r2, r3
 800871a:	d903      	bls.n	8008724 <xTaskPriorityDisinherit+0xac>
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008720:	4a0c      	ldr	r2, [pc, #48]	; (8008754 <xTaskPriorityDisinherit+0xdc>)
 8008722:	6013      	str	r3, [r2, #0]
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008728:	4613      	mov	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4a09      	ldr	r2, [pc, #36]	; (8008758 <xTaskPriorityDisinherit+0xe0>)
 8008732:	441a      	add	r2, r3
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	3304      	adds	r3, #4
 8008738:	4619      	mov	r1, r3
 800873a:	4610      	mov	r0, r2
 800873c:	f7fd ff07 	bl	800654e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008740:	2301      	movs	r3, #1
 8008742:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008744:	697b      	ldr	r3, [r7, #20]
	}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	200009e0 	.word	0x200009e0
 8008754:	20000ebc 	.word	0x20000ebc
 8008758:	200009e4 	.word	0x200009e4

0800875c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800876a:	2301      	movs	r3, #1
 800876c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d06e      	beq.n	8008852 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10c      	bne.n	8008796 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008780:	b672      	cpsid	i
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	b662      	cpsie	i
 8008790:	60fb      	str	r3, [r7, #12]
}
 8008792:	bf00      	nop
 8008794:	e7fe      	b.n	8008794 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800879a:	683a      	ldr	r2, [r7, #0]
 800879c:	429a      	cmp	r2, r3
 800879e:	d902      	bls.n	80087a6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	61fb      	str	r3, [r7, #28]
 80087a4:	e002      	b.n	80087ac <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b0:	69fa      	ldr	r2, [r7, #28]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d04d      	beq.n	8008852 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d148      	bne.n	8008852 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80087c0:	4b26      	ldr	r3, [pc, #152]	; (800885c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	69ba      	ldr	r2, [r7, #24]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d10c      	bne.n	80087e4 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	b672      	cpsid	i
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	b662      	cpsie	i
 80087de:	60bb      	str	r3, [r7, #8]
}
 80087e0:	bf00      	nop
 80087e2:	e7fe      	b.n	80087e2 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	69fa      	ldr	r2, [r7, #28]
 80087ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	db04      	blt.n	8008802 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	6959      	ldr	r1, [r3, #20]
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	4613      	mov	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	4413      	add	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4a13      	ldr	r2, [pc, #76]	; (8008860 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008812:	4413      	add	r3, r2
 8008814:	4299      	cmp	r1, r3
 8008816:	d11c      	bne.n	8008852 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	3304      	adds	r3, #4
 800881c:	4618      	mov	r0, r3
 800881e:	f7fd fef3 	bl	8006608 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008826:	4b0f      	ldr	r3, [pc, #60]	; (8008864 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	429a      	cmp	r2, r3
 800882c:	d903      	bls.n	8008836 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008832:	4a0c      	ldr	r2, [pc, #48]	; (8008864 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008834:	6013      	str	r3, [r2, #0]
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800883a:	4613      	mov	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4a07      	ldr	r2, [pc, #28]	; (8008860 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008844:	441a      	add	r2, r3
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	3304      	adds	r3, #4
 800884a:	4619      	mov	r1, r3
 800884c:	4610      	mov	r0, r2
 800884e:	f7fd fe7e 	bl	800654e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008852:	bf00      	nop
 8008854:	3720      	adds	r7, #32
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	200009e0 	.word	0x200009e0
 8008860:	200009e4 	.word	0x200009e4
 8008864:	20000ebc 	.word	0x20000ebc

08008868 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008868:	b480      	push	{r7}
 800886a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800886c:	4b07      	ldr	r3, [pc, #28]	; (800888c <pvTaskIncrementMutexHeldCount+0x24>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d004      	beq.n	800887e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008874:	4b05      	ldr	r3, [pc, #20]	; (800888c <pvTaskIncrementMutexHeldCount+0x24>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800887a:	3201      	adds	r2, #1
 800887c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800887e:	4b03      	ldr	r3, [pc, #12]	; (800888c <pvTaskIncrementMutexHeldCount+0x24>)
 8008880:	681b      	ldr	r3, [r3, #0]
	}
 8008882:	4618      	mov	r0, r3
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	200009e0 	.word	0x200009e0

08008890 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800889a:	4b21      	ldr	r3, [pc, #132]	; (8008920 <prvAddCurrentTaskToDelayedList+0x90>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088a0:	4b20      	ldr	r3, [pc, #128]	; (8008924 <prvAddCurrentTaskToDelayedList+0x94>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3304      	adds	r3, #4
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fd feae 	bl	8006608 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b2:	d10a      	bne.n	80088ca <prvAddCurrentTaskToDelayedList+0x3a>
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d007      	beq.n	80088ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088ba:	4b1a      	ldr	r3, [pc, #104]	; (8008924 <prvAddCurrentTaskToDelayedList+0x94>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	3304      	adds	r3, #4
 80088c0:	4619      	mov	r1, r3
 80088c2:	4819      	ldr	r0, [pc, #100]	; (8008928 <prvAddCurrentTaskToDelayedList+0x98>)
 80088c4:	f7fd fe43 	bl	800654e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088c8:	e026      	b.n	8008918 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4413      	add	r3, r2
 80088d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088d2:	4b14      	ldr	r3, [pc, #80]	; (8008924 <prvAddCurrentTaskToDelayedList+0x94>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d209      	bcs.n	80088f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088e2:	4b12      	ldr	r3, [pc, #72]	; (800892c <prvAddCurrentTaskToDelayedList+0x9c>)
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	4b0f      	ldr	r3, [pc, #60]	; (8008924 <prvAddCurrentTaskToDelayedList+0x94>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3304      	adds	r3, #4
 80088ec:	4619      	mov	r1, r3
 80088ee:	4610      	mov	r0, r2
 80088f0:	f7fd fe51 	bl	8006596 <vListInsert>
}
 80088f4:	e010      	b.n	8008918 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088f6:	4b0e      	ldr	r3, [pc, #56]	; (8008930 <prvAddCurrentTaskToDelayedList+0xa0>)
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	4b0a      	ldr	r3, [pc, #40]	; (8008924 <prvAddCurrentTaskToDelayedList+0x94>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3304      	adds	r3, #4
 8008900:	4619      	mov	r1, r3
 8008902:	4610      	mov	r0, r2
 8008904:	f7fd fe47 	bl	8006596 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008908:	4b0a      	ldr	r3, [pc, #40]	; (8008934 <prvAddCurrentTaskToDelayedList+0xa4>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	429a      	cmp	r2, r3
 8008910:	d202      	bcs.n	8008918 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008912:	4a08      	ldr	r2, [pc, #32]	; (8008934 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	6013      	str	r3, [r2, #0]
}
 8008918:	bf00      	nop
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	20000eb8 	.word	0x20000eb8
 8008924:	200009e0 	.word	0x200009e0
 8008928:	20000ea0 	.word	0x20000ea0
 800892c:	20000e70 	.word	0x20000e70
 8008930:	20000e6c 	.word	0x20000e6c
 8008934:	20000ed4 	.word	0x20000ed4

08008938 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08a      	sub	sp, #40	; 0x28
 800893c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800893e:	2300      	movs	r3, #0
 8008940:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008942:	f000 fb15 	bl	8008f70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008946:	4b1d      	ldr	r3, [pc, #116]	; (80089bc <xTimerCreateTimerTask+0x84>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d021      	beq.n	8008992 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008952:	2300      	movs	r3, #0
 8008954:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008956:	1d3a      	adds	r2, r7, #4
 8008958:	f107 0108 	add.w	r1, r7, #8
 800895c:	f107 030c 	add.w	r3, r7, #12
 8008960:	4618      	mov	r0, r3
 8008962:	f7fd fdad 	bl	80064c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008966:	6879      	ldr	r1, [r7, #4]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	9202      	str	r2, [sp, #8]
 800896e:	9301      	str	r3, [sp, #4]
 8008970:	2302      	movs	r3, #2
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	2300      	movs	r3, #0
 8008976:	460a      	mov	r2, r1
 8008978:	4911      	ldr	r1, [pc, #68]	; (80089c0 <xTimerCreateTimerTask+0x88>)
 800897a:	4812      	ldr	r0, [pc, #72]	; (80089c4 <xTimerCreateTimerTask+0x8c>)
 800897c:	f7fe ff7e 	bl	800787c <xTaskCreateStatic>
 8008980:	4603      	mov	r3, r0
 8008982:	4a11      	ldr	r2, [pc, #68]	; (80089c8 <xTimerCreateTimerTask+0x90>)
 8008984:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008986:	4b10      	ldr	r3, [pc, #64]	; (80089c8 <xTimerCreateTimerTask+0x90>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800898e:	2301      	movs	r3, #1
 8008990:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10c      	bne.n	80089b2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	b672      	cpsid	i
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	b662      	cpsie	i
 80089ac:	613b      	str	r3, [r7, #16]
}
 80089ae:	bf00      	nop
 80089b0:	e7fe      	b.n	80089b0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80089b2:	697b      	ldr	r3, [r7, #20]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	20000f10 	.word	0x20000f10
 80089c0:	0800e3fc 	.word	0x0800e3fc
 80089c4:	08008b09 	.word	0x08008b09
 80089c8:	20000f14 	.word	0x20000f14

080089cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b08a      	sub	sp, #40	; 0x28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
 80089d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80089da:	2300      	movs	r3, #0
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10c      	bne.n	80089fe <xTimerGenericCommand+0x32>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e8:	b672      	cpsid	i
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	b662      	cpsie	i
 80089f8:	623b      	str	r3, [r7, #32]
}
 80089fa:	bf00      	nop
 80089fc:	e7fe      	b.n	80089fc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80089fe:	4b1a      	ldr	r3, [pc, #104]	; (8008a68 <xTimerGenericCommand+0x9c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d02a      	beq.n	8008a5c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2b05      	cmp	r3, #5
 8008a16:	dc18      	bgt.n	8008a4a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a18:	f7ff fda8 	bl	800856c <xTaskGetSchedulerState>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d109      	bne.n	8008a36 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a22:	4b11      	ldr	r3, [pc, #68]	; (8008a68 <xTimerGenericCommand+0x9c>)
 8008a24:	6818      	ldr	r0, [r3, #0]
 8008a26:	f107 0110 	add.w	r1, r7, #16
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a2e:	f7fe f893 	bl	8006b58 <xQueueGenericSend>
 8008a32:	6278      	str	r0, [r7, #36]	; 0x24
 8008a34:	e012      	b.n	8008a5c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a36:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <xTimerGenericCommand+0x9c>)
 8008a38:	6818      	ldr	r0, [r3, #0]
 8008a3a:	f107 0110 	add.w	r1, r7, #16
 8008a3e:	2300      	movs	r3, #0
 8008a40:	2200      	movs	r2, #0
 8008a42:	f7fe f889 	bl	8006b58 <xQueueGenericSend>
 8008a46:	6278      	str	r0, [r7, #36]	; 0x24
 8008a48:	e008      	b.n	8008a5c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a4a:	4b07      	ldr	r3, [pc, #28]	; (8008a68 <xTimerGenericCommand+0x9c>)
 8008a4c:	6818      	ldr	r0, [r3, #0]
 8008a4e:	f107 0110 	add.w	r1, r7, #16
 8008a52:	2300      	movs	r3, #0
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	f7fe f985 	bl	8006d64 <xQueueGenericSendFromISR>
 8008a5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3728      	adds	r7, #40	; 0x28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20000f10 	.word	0x20000f10

08008a6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b088      	sub	sp, #32
 8008a70:	af02      	add	r7, sp, #8
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a76:	4b23      	ldr	r3, [pc, #140]	; (8008b04 <prvProcessExpiredTimer+0x98>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	3304      	adds	r3, #4
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fd fdbf 	bl	8006608 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a90:	f003 0304 	and.w	r3, r3, #4
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d024      	beq.n	8008ae2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	699a      	ldr	r2, [r3, #24]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	18d1      	adds	r1, r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	6978      	ldr	r0, [r7, #20]
 8008aa6:	f000 f8d3 	bl	8008c50 <prvInsertTimerInActiveList>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d021      	beq.n	8008af4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	2100      	movs	r1, #0
 8008aba:	6978      	ldr	r0, [r7, #20]
 8008abc:	f7ff ff86 	bl	80089cc <xTimerGenericCommand>
 8008ac0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d115      	bne.n	8008af4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	b672      	cpsid	i
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	b662      	cpsie	i
 8008adc:	60fb      	str	r3, [r7, #12]
}
 8008ade:	bf00      	nop
 8008ae0:	e7fe      	b.n	8008ae0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ae8:	f023 0301 	bic.w	r3, r3, #1
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	6a1b      	ldr	r3, [r3, #32]
 8008af8:	6978      	ldr	r0, [r7, #20]
 8008afa:	4798      	blx	r3
}
 8008afc:	bf00      	nop
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	20000f08 	.word	0x20000f08

08008b08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b10:	f107 0308 	add.w	r3, r7, #8
 8008b14:	4618      	mov	r0, r3
 8008b16:	f000 f857 	bl	8008bc8 <prvGetNextExpireTime>
 8008b1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 f803 	bl	8008b2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b26:	f000 f8d5 	bl	8008cd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b2a:	e7f1      	b.n	8008b10 <prvTimerTask+0x8>

08008b2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b36:	f7ff f90b 	bl	8007d50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b3a:	f107 0308 	add.w	r3, r7, #8
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 f866 	bl	8008c10 <prvSampleTimeNow>
 8008b44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d130      	bne.n	8008bae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10a      	bne.n	8008b68 <prvProcessTimerOrBlockTask+0x3c>
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d806      	bhi.n	8008b68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008b5a:	f7ff f907 	bl	8007d6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b5e:	68f9      	ldr	r1, [r7, #12]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7ff ff83 	bl	8008a6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b66:	e024      	b.n	8008bb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d008      	beq.n	8008b80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b6e:	4b13      	ldr	r3, [pc, #76]	; (8008bbc <prvProcessTimerOrBlockTask+0x90>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <prvProcessTimerOrBlockTask+0x50>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e000      	b.n	8008b7e <prvProcessTimerOrBlockTask+0x52>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b80:	4b0f      	ldr	r3, [pc, #60]	; (8008bc0 <prvProcessTimerOrBlockTask+0x94>)
 8008b82:	6818      	ldr	r0, [r3, #0]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	f7fe fe41 	bl	8007814 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b92:	f7ff f8eb 	bl	8007d6c <xTaskResumeAll>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10a      	bne.n	8008bb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b9c:	4b09      	ldr	r3, [pc, #36]	; (8008bc4 <prvProcessTimerOrBlockTask+0x98>)
 8008b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	f3bf 8f6f 	isb	sy
}
 8008bac:	e001      	b.n	8008bb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008bae:	f7ff f8dd 	bl	8007d6c <xTaskResumeAll>
}
 8008bb2:	bf00      	nop
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	20000f0c 	.word	0x20000f0c
 8008bc0:	20000f10 	.word	0x20000f10
 8008bc4:	e000ed04 	.word	0xe000ed04

08008bc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008bd0:	4b0e      	ldr	r3, [pc, #56]	; (8008c0c <prvGetNextExpireTime+0x44>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <prvGetNextExpireTime+0x16>
 8008bda:	2201      	movs	r2, #1
 8008bdc:	e000      	b.n	8008be0 <prvGetNextExpireTime+0x18>
 8008bde:	2200      	movs	r2, #0
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d105      	bne.n	8008bf8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008bec:	4b07      	ldr	r3, [pc, #28]	; (8008c0c <prvGetNextExpireTime+0x44>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	60fb      	str	r3, [r7, #12]
 8008bf6:	e001      	b.n	8008bfc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	20000f08 	.word	0x20000f08

08008c10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c18:	f7ff f948 	bl	8007eac <xTaskGetTickCount>
 8008c1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c1e:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <prvSampleTimeNow+0x3c>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d205      	bcs.n	8008c34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c28:	f000 f93c 	bl	8008ea4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	601a      	str	r2, [r3, #0]
 8008c32:	e002      	b.n	8008c3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c3a:	4a04      	ldr	r2, [pc, #16]	; (8008c4c <prvSampleTimeNow+0x3c>)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008c40:	68fb      	ldr	r3, [r7, #12]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20000f18 	.word	0x20000f18

08008c50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
 8008c5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d812      	bhi.n	8008c9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	1ad2      	subs	r2, r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d302      	bcc.n	8008c8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c84:	2301      	movs	r3, #1
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	e01b      	b.n	8008cc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c8a:	4b10      	ldr	r3, [pc, #64]	; (8008ccc <prvInsertTimerInActiveList+0x7c>)
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	3304      	adds	r3, #4
 8008c92:	4619      	mov	r1, r3
 8008c94:	4610      	mov	r0, r2
 8008c96:	f7fd fc7e 	bl	8006596 <vListInsert>
 8008c9a:	e012      	b.n	8008cc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d206      	bcs.n	8008cb2 <prvInsertTimerInActiveList+0x62>
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d302      	bcc.n	8008cb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008cac:	2301      	movs	r3, #1
 8008cae:	617b      	str	r3, [r7, #20]
 8008cb0:	e007      	b.n	8008cc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cb2:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <prvInsertTimerInActiveList+0x80>)
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	3304      	adds	r3, #4
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	f7fd fc6a 	bl	8006596 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008cc2:	697b      	ldr	r3, [r7, #20]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3718      	adds	r7, #24
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	20000f0c 	.word	0x20000f0c
 8008cd0:	20000f08 	.word	0x20000f08

08008cd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08e      	sub	sp, #56	; 0x38
 8008cd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cda:	e0d0      	b.n	8008e7e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	da1a      	bge.n	8008d18 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ce2:	1d3b      	adds	r3, r7, #4
 8008ce4:	3304      	adds	r3, #4
 8008ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10c      	bne.n	8008d08 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	b672      	cpsid	i
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	b662      	cpsie	i
 8008d02:	61fb      	str	r3, [r7, #28]
}
 8008d04:	bf00      	nop
 8008d06:	e7fe      	b.n	8008d06 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d0e:	6850      	ldr	r0, [r2, #4]
 8008d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d12:	6892      	ldr	r2, [r2, #8]
 8008d14:	4611      	mov	r1, r2
 8008d16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f2c0 80ae 	blt.w	8008e7c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d004      	beq.n	8008d36 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	3304      	adds	r3, #4
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fd fc69 	bl	8006608 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d36:	463b      	mov	r3, r7
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7ff ff69 	bl	8008c10 <prvSampleTimeNow>
 8008d3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b09      	cmp	r3, #9
 8008d44:	f200 809b 	bhi.w	8008e7e <prvProcessReceivedCommands+0x1aa>
 8008d48:	a201      	add	r2, pc, #4	; (adr r2, 8008d50 <prvProcessReceivedCommands+0x7c>)
 8008d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4e:	bf00      	nop
 8008d50:	08008d79 	.word	0x08008d79
 8008d54:	08008d79 	.word	0x08008d79
 8008d58:	08008d79 	.word	0x08008d79
 8008d5c:	08008df1 	.word	0x08008df1
 8008d60:	08008e05 	.word	0x08008e05
 8008d64:	08008e53 	.word	0x08008e53
 8008d68:	08008d79 	.word	0x08008d79
 8008d6c:	08008d79 	.word	0x08008d79
 8008d70:	08008df1 	.word	0x08008df1
 8008d74:	08008e05 	.word	0x08008e05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d7e:	f043 0301 	orr.w	r3, r3, #1
 8008d82:	b2da      	uxtb	r2, r3
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	18d1      	adds	r1, r2, r3
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d98:	f7ff ff5a 	bl	8008c50 <prvInsertTimerInActiveList>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d06d      	beq.n	8008e7e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008da8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008db0:	f003 0304 	and.w	r3, r3, #4
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d062      	beq.n	8008e7e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	441a      	add	r2, r3
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dca:	f7ff fdff 	bl	80089cc <xTimerGenericCommand>
 8008dce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008dd0:	6a3b      	ldr	r3, [r7, #32]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d153      	bne.n	8008e7e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8008dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dda:	b672      	cpsid	i
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	b662      	cpsie	i
 8008dea:	61bb      	str	r3, [r7, #24]
}
 8008dec:	bf00      	nop
 8008dee:	e7fe      	b.n	8008dee <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008df6:	f023 0301 	bic.w	r3, r3, #1
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008e02:	e03c      	b.n	8008e7e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e0a:	f043 0301 	orr.w	r3, r3, #1
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10c      	bne.n	8008e3e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	b672      	cpsid	i
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	b662      	cpsie	i
 8008e38:	617b      	str	r3, [r7, #20]
}
 8008e3a:	bf00      	nop
 8008e3c:	e7fe      	b.n	8008e3c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e40:	699a      	ldr	r2, [r3, #24]
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	18d1      	adds	r1, r2, r3
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e4c:	f7ff ff00 	bl	8008c50 <prvInsertTimerInActiveList>
					break;
 8008e50:	e015      	b.n	8008e7e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d103      	bne.n	8008e68 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e62:	f000 fbc9 	bl	80095f8 <vPortFree>
 8008e66:	e00a      	b.n	8008e7e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e6e:	f023 0301 	bic.w	r3, r3, #1
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e7a:	e000      	b.n	8008e7e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008e7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e7e:	4b08      	ldr	r3, [pc, #32]	; (8008ea0 <prvProcessReceivedCommands+0x1cc>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	1d39      	adds	r1, r7, #4
 8008e84:	2200      	movs	r2, #0
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe f8a2 	bl	8006fd0 <xQueueReceive>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f47f af24 	bne.w	8008cdc <prvProcessReceivedCommands+0x8>
	}
}
 8008e94:	bf00      	nop
 8008e96:	bf00      	nop
 8008e98:	3730      	adds	r7, #48	; 0x30
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20000f10 	.word	0x20000f10

08008ea4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b088      	sub	sp, #32
 8008ea8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008eaa:	e04a      	b.n	8008f42 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008eac:	4b2e      	ldr	r3, [pc, #184]	; (8008f68 <prvSwitchTimerLists+0xc4>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb6:	4b2c      	ldr	r3, [pc, #176]	; (8008f68 <prvSwitchTimerLists+0xc4>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7fd fb9f 	bl	8006608 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ed8:	f003 0304 	and.w	r3, r3, #4
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d030      	beq.n	8008f42 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d90e      	bls.n	8008f10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008efe:	4b1a      	ldr	r3, [pc, #104]	; (8008f68 <prvSwitchTimerLists+0xc4>)
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3304      	adds	r3, #4
 8008f06:	4619      	mov	r1, r3
 8008f08:	4610      	mov	r0, r2
 8008f0a:	f7fd fb44 	bl	8006596 <vListInsert>
 8008f0e:	e018      	b.n	8008f42 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f10:	2300      	movs	r3, #0
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	2300      	movs	r3, #0
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	2100      	movs	r1, #0
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f7ff fd56 	bl	80089cc <xTimerGenericCommand>
 8008f20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10c      	bne.n	8008f42 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2c:	b672      	cpsid	i
 8008f2e:	f383 8811 	msr	BASEPRI, r3
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	b662      	cpsie	i
 8008f3c:	603b      	str	r3, [r7, #0]
}
 8008f3e:	bf00      	nop
 8008f40:	e7fe      	b.n	8008f40 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f42:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <prvSwitchTimerLists+0xc4>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1af      	bne.n	8008eac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008f4c:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <prvSwitchTimerLists+0xc4>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008f52:	4b06      	ldr	r3, [pc, #24]	; (8008f6c <prvSwitchTimerLists+0xc8>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a04      	ldr	r2, [pc, #16]	; (8008f68 <prvSwitchTimerLists+0xc4>)
 8008f58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f5a:	4a04      	ldr	r2, [pc, #16]	; (8008f6c <prvSwitchTimerLists+0xc8>)
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	6013      	str	r3, [r2, #0]
}
 8008f60:	bf00      	nop
 8008f62:	3718      	adds	r7, #24
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	20000f08 	.word	0x20000f08
 8008f6c:	20000f0c 	.word	0x20000f0c

08008f70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008f76:	f000 f949 	bl	800920c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f7a:	4b15      	ldr	r3, [pc, #84]	; (8008fd0 <prvCheckForValidListAndQueue+0x60>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d120      	bne.n	8008fc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f82:	4814      	ldr	r0, [pc, #80]	; (8008fd4 <prvCheckForValidListAndQueue+0x64>)
 8008f84:	f7fd fab6 	bl	80064f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f88:	4813      	ldr	r0, [pc, #76]	; (8008fd8 <prvCheckForValidListAndQueue+0x68>)
 8008f8a:	f7fd fab3 	bl	80064f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f8e:	4b13      	ldr	r3, [pc, #76]	; (8008fdc <prvCheckForValidListAndQueue+0x6c>)
 8008f90:	4a10      	ldr	r2, [pc, #64]	; (8008fd4 <prvCheckForValidListAndQueue+0x64>)
 8008f92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f94:	4b12      	ldr	r3, [pc, #72]	; (8008fe0 <prvCheckForValidListAndQueue+0x70>)
 8008f96:	4a10      	ldr	r2, [pc, #64]	; (8008fd8 <prvCheckForValidListAndQueue+0x68>)
 8008f98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	4b11      	ldr	r3, [pc, #68]	; (8008fe4 <prvCheckForValidListAndQueue+0x74>)
 8008fa0:	4a11      	ldr	r2, [pc, #68]	; (8008fe8 <prvCheckForValidListAndQueue+0x78>)
 8008fa2:	2110      	movs	r1, #16
 8008fa4:	200a      	movs	r0, #10
 8008fa6:	f7fd fbc3 	bl	8006730 <xQueueGenericCreateStatic>
 8008faa:	4603      	mov	r3, r0
 8008fac:	4a08      	ldr	r2, [pc, #32]	; (8008fd0 <prvCheckForValidListAndQueue+0x60>)
 8008fae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008fb0:	4b07      	ldr	r3, [pc, #28]	; (8008fd0 <prvCheckForValidListAndQueue+0x60>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d005      	beq.n	8008fc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008fb8:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <prvCheckForValidListAndQueue+0x60>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	490b      	ldr	r1, [pc, #44]	; (8008fec <prvCheckForValidListAndQueue+0x7c>)
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe fbd4 	bl	800776c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fc4:	f000 f956 	bl	8009274 <vPortExitCritical>
}
 8008fc8:	bf00      	nop
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20000f10 	.word	0x20000f10
 8008fd4:	20000ee0 	.word	0x20000ee0
 8008fd8:	20000ef4 	.word	0x20000ef4
 8008fdc:	20000f08 	.word	0x20000f08
 8008fe0:	20000f0c 	.word	0x20000f0c
 8008fe4:	20000fbc 	.word	0x20000fbc
 8008fe8:	20000f1c 	.word	0x20000f1c
 8008fec:	0800e404 	.word	0x0800e404

08008ff0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	3b04      	subs	r3, #4
 8009000:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009008:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	3b04      	subs	r3, #4
 800900e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	f023 0201 	bic.w	r2, r3, #1
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	3b04      	subs	r3, #4
 800901e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009020:	4a0c      	ldr	r2, [pc, #48]	; (8009054 <pxPortInitialiseStack+0x64>)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	3b14      	subs	r3, #20
 800902a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	3b04      	subs	r3, #4
 8009036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f06f 0202 	mvn.w	r2, #2
 800903e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	3b20      	subs	r3, #32
 8009044:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009046:	68fb      	ldr	r3, [r7, #12]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3714      	adds	r7, #20
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	08009059 	.word	0x08009059

08009058 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009062:	4b14      	ldr	r3, [pc, #80]	; (80090b4 <prvTaskExitError+0x5c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906a:	d00c      	beq.n	8009086 <prvTaskExitError+0x2e>
	__asm volatile
 800906c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009070:	b672      	cpsid	i
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	b662      	cpsie	i
 8009080:	60fb      	str	r3, [r7, #12]
}
 8009082:	bf00      	nop
 8009084:	e7fe      	b.n	8009084 <prvTaskExitError+0x2c>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	b672      	cpsid	i
 800908c:	f383 8811 	msr	BASEPRI, r3
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	b662      	cpsie	i
 800909a:	60bb      	str	r3, [r7, #8]
}
 800909c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800909e:	bf00      	nop
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0fc      	beq.n	80090a0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80090a6:	bf00      	nop
 80090a8:	bf00      	nop
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	2000006c 	.word	0x2000006c
	...

080090c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80090c0:	4b07      	ldr	r3, [pc, #28]	; (80090e0 <pxCurrentTCBConst2>)
 80090c2:	6819      	ldr	r1, [r3, #0]
 80090c4:	6808      	ldr	r0, [r1, #0]
 80090c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ca:	f380 8809 	msr	PSP, r0
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f04f 0000 	mov.w	r0, #0
 80090d6:	f380 8811 	msr	BASEPRI, r0
 80090da:	4770      	bx	lr
 80090dc:	f3af 8000 	nop.w

080090e0 <pxCurrentTCBConst2>:
 80090e0:	200009e0 	.word	0x200009e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80090e4:	bf00      	nop
 80090e6:	bf00      	nop

080090e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80090e8:	4808      	ldr	r0, [pc, #32]	; (800910c <prvPortStartFirstTask+0x24>)
 80090ea:	6800      	ldr	r0, [r0, #0]
 80090ec:	6800      	ldr	r0, [r0, #0]
 80090ee:	f380 8808 	msr	MSP, r0
 80090f2:	f04f 0000 	mov.w	r0, #0
 80090f6:	f380 8814 	msr	CONTROL, r0
 80090fa:	b662      	cpsie	i
 80090fc:	b661      	cpsie	f
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	df00      	svc	0
 8009108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800910a:	bf00      	nop
 800910c:	e000ed08 	.word	0xe000ed08

08009110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009116:	4b37      	ldr	r3, [pc, #220]	; (80091f4 <xPortStartScheduler+0xe4>)
 8009118:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	22ff      	movs	r2, #255	; 0xff
 8009126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	b2db      	uxtb	r3, r3
 800912e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	b2db      	uxtb	r3, r3
 8009134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009138:	b2da      	uxtb	r2, r3
 800913a:	4b2f      	ldr	r3, [pc, #188]	; (80091f8 <xPortStartScheduler+0xe8>)
 800913c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800913e:	4b2f      	ldr	r3, [pc, #188]	; (80091fc <xPortStartScheduler+0xec>)
 8009140:	2207      	movs	r2, #7
 8009142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009144:	e009      	b.n	800915a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009146:	4b2d      	ldr	r3, [pc, #180]	; (80091fc <xPortStartScheduler+0xec>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3b01      	subs	r3, #1
 800914c:	4a2b      	ldr	r2, [pc, #172]	; (80091fc <xPortStartScheduler+0xec>)
 800914e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	b2db      	uxtb	r3, r3
 8009154:	005b      	lsls	r3, r3, #1
 8009156:	b2db      	uxtb	r3, r3
 8009158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	b2db      	uxtb	r3, r3
 800915e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009162:	2b80      	cmp	r3, #128	; 0x80
 8009164:	d0ef      	beq.n	8009146 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009166:	4b25      	ldr	r3, [pc, #148]	; (80091fc <xPortStartScheduler+0xec>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f1c3 0307 	rsb	r3, r3, #7
 800916e:	2b04      	cmp	r3, #4
 8009170:	d00c      	beq.n	800918c <xPortStartScheduler+0x7c>
	__asm volatile
 8009172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009176:	b672      	cpsid	i
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	b662      	cpsie	i
 8009186:	60bb      	str	r3, [r7, #8]
}
 8009188:	bf00      	nop
 800918a:	e7fe      	b.n	800918a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800918c:	4b1b      	ldr	r3, [pc, #108]	; (80091fc <xPortStartScheduler+0xec>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	021b      	lsls	r3, r3, #8
 8009192:	4a1a      	ldr	r2, [pc, #104]	; (80091fc <xPortStartScheduler+0xec>)
 8009194:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009196:	4b19      	ldr	r3, [pc, #100]	; (80091fc <xPortStartScheduler+0xec>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800919e:	4a17      	ldr	r2, [pc, #92]	; (80091fc <xPortStartScheduler+0xec>)
 80091a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80091aa:	4b15      	ldr	r3, [pc, #84]	; (8009200 <xPortStartScheduler+0xf0>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a14      	ldr	r2, [pc, #80]	; (8009200 <xPortStartScheduler+0xf0>)
 80091b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80091b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80091b6:	4b12      	ldr	r3, [pc, #72]	; (8009200 <xPortStartScheduler+0xf0>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a11      	ldr	r2, [pc, #68]	; (8009200 <xPortStartScheduler+0xf0>)
 80091bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80091c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80091c2:	f000 f8dd 	bl	8009380 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80091c6:	4b0f      	ldr	r3, [pc, #60]	; (8009204 <xPortStartScheduler+0xf4>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80091cc:	f000 f8fc 	bl	80093c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80091d0:	4b0d      	ldr	r3, [pc, #52]	; (8009208 <xPortStartScheduler+0xf8>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a0c      	ldr	r2, [pc, #48]	; (8009208 <xPortStartScheduler+0xf8>)
 80091d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80091da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80091dc:	f7ff ff84 	bl	80090e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80091e0:	f7fe ff30 	bl	8008044 <vTaskSwitchContext>
	prvTaskExitError();
 80091e4:	f7ff ff38 	bl	8009058 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	e000e400 	.word	0xe000e400
 80091f8:	2000100c 	.word	0x2000100c
 80091fc:	20001010 	.word	0x20001010
 8009200:	e000ed20 	.word	0xe000ed20
 8009204:	2000006c 	.word	0x2000006c
 8009208:	e000ef34 	.word	0xe000ef34

0800920c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
	__asm volatile
 8009212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009216:	b672      	cpsid	i
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	b662      	cpsie	i
 8009226:	607b      	str	r3, [r7, #4]
}
 8009228:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800922a:	4b10      	ldr	r3, [pc, #64]	; (800926c <vPortEnterCritical+0x60>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3301      	adds	r3, #1
 8009230:	4a0e      	ldr	r2, [pc, #56]	; (800926c <vPortEnterCritical+0x60>)
 8009232:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009234:	4b0d      	ldr	r3, [pc, #52]	; (800926c <vPortEnterCritical+0x60>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d111      	bne.n	8009260 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800923c:	4b0c      	ldr	r3, [pc, #48]	; (8009270 <vPortEnterCritical+0x64>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00c      	beq.n	8009260 <vPortEnterCritical+0x54>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	b672      	cpsid	i
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	b662      	cpsie	i
 800925a:	603b      	str	r3, [r7, #0]
}
 800925c:	bf00      	nop
 800925e:	e7fe      	b.n	800925e <vPortEnterCritical+0x52>
	}
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	2000006c 	.word	0x2000006c
 8009270:	e000ed04 	.word	0xe000ed04

08009274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800927a:	4b13      	ldr	r3, [pc, #76]	; (80092c8 <vPortExitCritical+0x54>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10c      	bne.n	800929c <vPortExitCritical+0x28>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	b672      	cpsid	i
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	b662      	cpsie	i
 8009296:	607b      	str	r3, [r7, #4]
}
 8009298:	bf00      	nop
 800929a:	e7fe      	b.n	800929a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800929c:	4b0a      	ldr	r3, [pc, #40]	; (80092c8 <vPortExitCritical+0x54>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3b01      	subs	r3, #1
 80092a2:	4a09      	ldr	r2, [pc, #36]	; (80092c8 <vPortExitCritical+0x54>)
 80092a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80092a6:	4b08      	ldr	r3, [pc, #32]	; (80092c8 <vPortExitCritical+0x54>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d105      	bne.n	80092ba <vPortExitCritical+0x46>
 80092ae:	2300      	movs	r3, #0
 80092b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	f383 8811 	msr	BASEPRI, r3
}
 80092b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80092ba:	bf00      	nop
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	2000006c 	.word	0x2000006c
 80092cc:	00000000 	.word	0x00000000

080092d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80092d0:	f3ef 8009 	mrs	r0, PSP
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	4b15      	ldr	r3, [pc, #84]	; (8009330 <pxCurrentTCBConst>)
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	f01e 0f10 	tst.w	lr, #16
 80092e0:	bf08      	it	eq
 80092e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80092e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ea:	6010      	str	r0, [r2, #0]
 80092ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80092f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80092f4:	b672      	cpsid	i
 80092f6:	f380 8811 	msr	BASEPRI, r0
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	b662      	cpsie	i
 8009304:	f7fe fe9e 	bl	8008044 <vTaskSwitchContext>
 8009308:	f04f 0000 	mov.w	r0, #0
 800930c:	f380 8811 	msr	BASEPRI, r0
 8009310:	bc09      	pop	{r0, r3}
 8009312:	6819      	ldr	r1, [r3, #0]
 8009314:	6808      	ldr	r0, [r1, #0]
 8009316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931a:	f01e 0f10 	tst.w	lr, #16
 800931e:	bf08      	it	eq
 8009320:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009324:	f380 8809 	msr	PSP, r0
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop

08009330 <pxCurrentTCBConst>:
 8009330:	200009e0 	.word	0x200009e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop

08009338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
	__asm volatile
 800933e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009342:	b672      	cpsid	i
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	b662      	cpsie	i
 8009352:	607b      	str	r3, [r7, #4]
}
 8009354:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009356:	f7fe fdb9 	bl	8007ecc <xTaskIncrementTick>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d003      	beq.n	8009368 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009360:	4b06      	ldr	r3, [pc, #24]	; (800937c <SysTick_Handler+0x44>)
 8009362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009366:	601a      	str	r2, [r3, #0]
 8009368:	2300      	movs	r3, #0
 800936a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	f383 8811 	msr	BASEPRI, r3
}
 8009372:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009374:	bf00      	nop
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	e000ed04 	.word	0xe000ed04

08009380 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009380:	b480      	push	{r7}
 8009382:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009384:	4b0b      	ldr	r3, [pc, #44]	; (80093b4 <vPortSetupTimerInterrupt+0x34>)
 8009386:	2200      	movs	r2, #0
 8009388:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800938a:	4b0b      	ldr	r3, [pc, #44]	; (80093b8 <vPortSetupTimerInterrupt+0x38>)
 800938c:	2200      	movs	r2, #0
 800938e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009390:	4b0a      	ldr	r3, [pc, #40]	; (80093bc <vPortSetupTimerInterrupt+0x3c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a0a      	ldr	r2, [pc, #40]	; (80093c0 <vPortSetupTimerInterrupt+0x40>)
 8009396:	fba2 2303 	umull	r2, r3, r2, r3
 800939a:	099b      	lsrs	r3, r3, #6
 800939c:	4a09      	ldr	r2, [pc, #36]	; (80093c4 <vPortSetupTimerInterrupt+0x44>)
 800939e:	3b01      	subs	r3, #1
 80093a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80093a2:	4b04      	ldr	r3, [pc, #16]	; (80093b4 <vPortSetupTimerInterrupt+0x34>)
 80093a4:	2207      	movs	r2, #7
 80093a6:	601a      	str	r2, [r3, #0]
}
 80093a8:	bf00      	nop
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	e000e010 	.word	0xe000e010
 80093b8:	e000e018 	.word	0xe000e018
 80093bc:	20000060 	.word	0x20000060
 80093c0:	10624dd3 	.word	0x10624dd3
 80093c4:	e000e014 	.word	0xe000e014

080093c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80093c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80093d8 <vPortEnableVFP+0x10>
 80093cc:	6801      	ldr	r1, [r0, #0]
 80093ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80093d2:	6001      	str	r1, [r0, #0]
 80093d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80093d6:	bf00      	nop
 80093d8:	e000ed88 	.word	0xe000ed88

080093dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80093e2:	f3ef 8305 	mrs	r3, IPSR
 80093e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2b0f      	cmp	r3, #15
 80093ec:	d916      	bls.n	800941c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80093ee:	4a19      	ldr	r2, [pc, #100]	; (8009454 <vPortValidateInterruptPriority+0x78>)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	4413      	add	r3, r2
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80093f8:	4b17      	ldr	r3, [pc, #92]	; (8009458 <vPortValidateInterruptPriority+0x7c>)
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	7afa      	ldrb	r2, [r7, #11]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d20c      	bcs.n	800941c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	b672      	cpsid	i
 8009408:	f383 8811 	msr	BASEPRI, r3
 800940c:	f3bf 8f6f 	isb	sy
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	b662      	cpsie	i
 8009416:	607b      	str	r3, [r7, #4]
}
 8009418:	bf00      	nop
 800941a:	e7fe      	b.n	800941a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800941c:	4b0f      	ldr	r3, [pc, #60]	; (800945c <vPortValidateInterruptPriority+0x80>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009424:	4b0e      	ldr	r3, [pc, #56]	; (8009460 <vPortValidateInterruptPriority+0x84>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	429a      	cmp	r2, r3
 800942a:	d90c      	bls.n	8009446 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	b672      	cpsid	i
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	b662      	cpsie	i
 8009440:	603b      	str	r3, [r7, #0]
}
 8009442:	bf00      	nop
 8009444:	e7fe      	b.n	8009444 <vPortValidateInterruptPriority+0x68>
	}
 8009446:	bf00      	nop
 8009448:	3714      	adds	r7, #20
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	e000e3f0 	.word	0xe000e3f0
 8009458:	2000100c 	.word	0x2000100c
 800945c:	e000ed0c 	.word	0xe000ed0c
 8009460:	20001010 	.word	0x20001010

08009464 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b08a      	sub	sp, #40	; 0x28
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800946c:	2300      	movs	r3, #0
 800946e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009470:	f7fe fc6e 	bl	8007d50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009474:	4b5b      	ldr	r3, [pc, #364]	; (80095e4 <pvPortMalloc+0x180>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800947c:	f000 f91a 	bl	80096b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009480:	4b59      	ldr	r3, [pc, #356]	; (80095e8 <pvPortMalloc+0x184>)
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4013      	ands	r3, r2
 8009488:	2b00      	cmp	r3, #0
 800948a:	f040 8092 	bne.w	80095b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d01f      	beq.n	80094d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009494:	2208      	movs	r2, #8
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4413      	add	r3, r2
 800949a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f003 0307 	and.w	r3, r3, #7
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d016      	beq.n	80094d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f023 0307 	bic.w	r3, r3, #7
 80094ac:	3308      	adds	r3, #8
 80094ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f003 0307 	and.w	r3, r3, #7
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00c      	beq.n	80094d4 <pvPortMalloc+0x70>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094be:	b672      	cpsid	i
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	b662      	cpsie	i
 80094ce:	617b      	str	r3, [r7, #20]
}
 80094d0:	bf00      	nop
 80094d2:	e7fe      	b.n	80094d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d06b      	beq.n	80095b2 <pvPortMalloc+0x14e>
 80094da:	4b44      	ldr	r3, [pc, #272]	; (80095ec <pvPortMalloc+0x188>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d866      	bhi.n	80095b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80094e4:	4b42      	ldr	r3, [pc, #264]	; (80095f0 <pvPortMalloc+0x18c>)
 80094e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80094e8:	4b41      	ldr	r3, [pc, #260]	; (80095f0 <pvPortMalloc+0x18c>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094ee:	e004      	b.n	80094fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	429a      	cmp	r2, r3
 8009502:	d903      	bls.n	800950c <pvPortMalloc+0xa8>
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1f1      	bne.n	80094f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800950c:	4b35      	ldr	r3, [pc, #212]	; (80095e4 <pvPortMalloc+0x180>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009512:	429a      	cmp	r2, r3
 8009514:	d04d      	beq.n	80095b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2208      	movs	r2, #8
 800951c:	4413      	add	r3, r2
 800951e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	6a3b      	ldr	r3, [r7, #32]
 8009526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	1ad2      	subs	r2, r2, r3
 8009530:	2308      	movs	r3, #8
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	429a      	cmp	r2, r3
 8009536:	d921      	bls.n	800957c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4413      	add	r3, r2
 800953e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	f003 0307 	and.w	r3, r3, #7
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00c      	beq.n	8009564 <pvPortMalloc+0x100>
	__asm volatile
 800954a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954e:	b672      	cpsid	i
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	b662      	cpsie	i
 800955e:	613b      	str	r3, [r7, #16]
}
 8009560:	bf00      	nop
 8009562:	e7fe      	b.n	8009562 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	1ad2      	subs	r2, r2, r3
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009576:	69b8      	ldr	r0, [r7, #24]
 8009578:	f000 f8fe 	bl	8009778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800957c:	4b1b      	ldr	r3, [pc, #108]	; (80095ec <pvPortMalloc+0x188>)
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	4a19      	ldr	r2, [pc, #100]	; (80095ec <pvPortMalloc+0x188>)
 8009588:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800958a:	4b18      	ldr	r3, [pc, #96]	; (80095ec <pvPortMalloc+0x188>)
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	4b19      	ldr	r3, [pc, #100]	; (80095f4 <pvPortMalloc+0x190>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	429a      	cmp	r2, r3
 8009594:	d203      	bcs.n	800959e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009596:	4b15      	ldr	r3, [pc, #84]	; (80095ec <pvPortMalloc+0x188>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a16      	ldr	r2, [pc, #88]	; (80095f4 <pvPortMalloc+0x190>)
 800959c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800959e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	4b11      	ldr	r3, [pc, #68]	; (80095e8 <pvPortMalloc+0x184>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	431a      	orrs	r2, r3
 80095a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	2200      	movs	r2, #0
 80095b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80095b2:	f7fe fbdb 	bl	8007d6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	f003 0307 	and.w	r3, r3, #7
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00c      	beq.n	80095da <pvPortMalloc+0x176>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	b672      	cpsid	i
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	b662      	cpsie	i
 80095d4:	60fb      	str	r3, [r7, #12]
}
 80095d6:	bf00      	nop
 80095d8:	e7fe      	b.n	80095d8 <pvPortMalloc+0x174>
	return pvReturn;
 80095da:	69fb      	ldr	r3, [r7, #28]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3728      	adds	r7, #40	; 0x28
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	20004c1c 	.word	0x20004c1c
 80095e8:	20004c28 	.word	0x20004c28
 80095ec:	20004c20 	.word	0x20004c20
 80095f0:	20004c14 	.word	0x20004c14
 80095f4:	20004c24 	.word	0x20004c24

080095f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d04c      	beq.n	80096a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800960a:	2308      	movs	r3, #8
 800960c:	425b      	negs	r3, r3
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	4413      	add	r3, r2
 8009612:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	685a      	ldr	r2, [r3, #4]
 800961c:	4b23      	ldr	r3, [pc, #140]	; (80096ac <vPortFree+0xb4>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4013      	ands	r3, r2
 8009622:	2b00      	cmp	r3, #0
 8009624:	d10c      	bne.n	8009640 <vPortFree+0x48>
	__asm volatile
 8009626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962a:	b672      	cpsid	i
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	b662      	cpsie	i
 800963a:	60fb      	str	r3, [r7, #12]
}
 800963c:	bf00      	nop
 800963e:	e7fe      	b.n	800963e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00c      	beq.n	8009662 <vPortFree+0x6a>
	__asm volatile
 8009648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964c:	b672      	cpsid	i
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	b662      	cpsie	i
 800965c:	60bb      	str	r3, [r7, #8]
}
 800965e:	bf00      	nop
 8009660:	e7fe      	b.n	8009660 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	4b11      	ldr	r3, [pc, #68]	; (80096ac <vPortFree+0xb4>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4013      	ands	r3, r2
 800966c:	2b00      	cmp	r3, #0
 800966e:	d019      	beq.n	80096a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d115      	bne.n	80096a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	4b0b      	ldr	r3, [pc, #44]	; (80096ac <vPortFree+0xb4>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	43db      	mvns	r3, r3
 8009682:	401a      	ands	r2, r3
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009688:	f7fe fb62 	bl	8007d50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <vPortFree+0xb8>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4413      	add	r3, r2
 8009696:	4a06      	ldr	r2, [pc, #24]	; (80096b0 <vPortFree+0xb8>)
 8009698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800969a:	6938      	ldr	r0, [r7, #16]
 800969c:	f000 f86c 	bl	8009778 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80096a0:	f7fe fb64 	bl	8007d6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80096a4:	bf00      	nop
 80096a6:	3718      	adds	r7, #24
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	20004c28 	.word	0x20004c28
 80096b0:	20004c20 	.word	0x20004c20

080096b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80096ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80096be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80096c0:	4b27      	ldr	r3, [pc, #156]	; (8009760 <prvHeapInit+0xac>)
 80096c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f003 0307 	and.w	r3, r3, #7
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00c      	beq.n	80096e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3307      	adds	r3, #7
 80096d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f023 0307 	bic.w	r3, r3, #7
 80096da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	4a1f      	ldr	r2, [pc, #124]	; (8009760 <prvHeapInit+0xac>)
 80096e4:	4413      	add	r3, r2
 80096e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80096ec:	4a1d      	ldr	r2, [pc, #116]	; (8009764 <prvHeapInit+0xb0>)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80096f2:	4b1c      	ldr	r3, [pc, #112]	; (8009764 <prvHeapInit+0xb0>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	4413      	add	r3, r2
 80096fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009700:	2208      	movs	r2, #8
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	1a9b      	subs	r3, r3, r2
 8009706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f023 0307 	bic.w	r3, r3, #7
 800970e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4a15      	ldr	r2, [pc, #84]	; (8009768 <prvHeapInit+0xb4>)
 8009714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009716:	4b14      	ldr	r3, [pc, #80]	; (8009768 <prvHeapInit+0xb4>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2200      	movs	r2, #0
 800971c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800971e:	4b12      	ldr	r3, [pc, #72]	; (8009768 <prvHeapInit+0xb4>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2200      	movs	r2, #0
 8009724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	1ad2      	subs	r2, r2, r3
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009734:	4b0c      	ldr	r3, [pc, #48]	; (8009768 <prvHeapInit+0xb4>)
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	4a0a      	ldr	r2, [pc, #40]	; (800976c <prvHeapInit+0xb8>)
 8009742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	4a09      	ldr	r2, [pc, #36]	; (8009770 <prvHeapInit+0xbc>)
 800974a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800974c:	4b09      	ldr	r3, [pc, #36]	; (8009774 <prvHeapInit+0xc0>)
 800974e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009752:	601a      	str	r2, [r3, #0]
}
 8009754:	bf00      	nop
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	20001014 	.word	0x20001014
 8009764:	20004c14 	.word	0x20004c14
 8009768:	20004c1c 	.word	0x20004c1c
 800976c:	20004c24 	.word	0x20004c24
 8009770:	20004c20 	.word	0x20004c20
 8009774:	20004c28 	.word	0x20004c28

08009778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009780:	4b28      	ldr	r3, [pc, #160]	; (8009824 <prvInsertBlockIntoFreeList+0xac>)
 8009782:	60fb      	str	r3, [r7, #12]
 8009784:	e002      	b.n	800978c <prvInsertBlockIntoFreeList+0x14>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	60fb      	str	r3, [r7, #12]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	429a      	cmp	r2, r3
 8009794:	d8f7      	bhi.n	8009786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	4413      	add	r3, r2
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d108      	bne.n	80097ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	441a      	add	r2, r3
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	441a      	add	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d118      	bne.n	8009800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	4b15      	ldr	r3, [pc, #84]	; (8009828 <prvInsertBlockIntoFreeList+0xb0>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d00d      	beq.n	80097f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	441a      	add	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	e008      	b.n	8009808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80097f6:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <prvInsertBlockIntoFreeList+0xb0>)
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	e003      	b.n	8009808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	429a      	cmp	r2, r3
 800980e:	d002      	beq.n	8009816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009816:	bf00      	nop
 8009818:	3714      	adds	r7, #20
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	20004c14 	.word	0x20004c14
 8009828:	20004c1c 	.word	0x20004c1c

0800982c <__errno>:
 800982c:	4b01      	ldr	r3, [pc, #4]	; (8009834 <__errno+0x8>)
 800982e:	6818      	ldr	r0, [r3, #0]
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	20000070 	.word	0x20000070

08009838 <std>:
 8009838:	2300      	movs	r3, #0
 800983a:	b510      	push	{r4, lr}
 800983c:	4604      	mov	r4, r0
 800983e:	e9c0 3300 	strd	r3, r3, [r0]
 8009842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009846:	6083      	str	r3, [r0, #8]
 8009848:	8181      	strh	r1, [r0, #12]
 800984a:	6643      	str	r3, [r0, #100]	; 0x64
 800984c:	81c2      	strh	r2, [r0, #14]
 800984e:	6183      	str	r3, [r0, #24]
 8009850:	4619      	mov	r1, r3
 8009852:	2208      	movs	r2, #8
 8009854:	305c      	adds	r0, #92	; 0x5c
 8009856:	f000 f923 	bl	8009aa0 <memset>
 800985a:	4b05      	ldr	r3, [pc, #20]	; (8009870 <std+0x38>)
 800985c:	6263      	str	r3, [r4, #36]	; 0x24
 800985e:	4b05      	ldr	r3, [pc, #20]	; (8009874 <std+0x3c>)
 8009860:	62a3      	str	r3, [r4, #40]	; 0x28
 8009862:	4b05      	ldr	r3, [pc, #20]	; (8009878 <std+0x40>)
 8009864:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009866:	4b05      	ldr	r3, [pc, #20]	; (800987c <std+0x44>)
 8009868:	6224      	str	r4, [r4, #32]
 800986a:	6323      	str	r3, [r4, #48]	; 0x30
 800986c:	bd10      	pop	{r4, pc}
 800986e:	bf00      	nop
 8009870:	0800ab1d 	.word	0x0800ab1d
 8009874:	0800ab3f 	.word	0x0800ab3f
 8009878:	0800ab77 	.word	0x0800ab77
 800987c:	0800ab9b 	.word	0x0800ab9b

08009880 <_cleanup_r>:
 8009880:	4901      	ldr	r1, [pc, #4]	; (8009888 <_cleanup_r+0x8>)
 8009882:	f000 b8af 	b.w	80099e4 <_fwalk_reent>
 8009886:	bf00      	nop
 8009888:	0800c789 	.word	0x0800c789

0800988c <__sfmoreglue>:
 800988c:	b570      	push	{r4, r5, r6, lr}
 800988e:	1e4a      	subs	r2, r1, #1
 8009890:	2568      	movs	r5, #104	; 0x68
 8009892:	4355      	muls	r5, r2
 8009894:	460e      	mov	r6, r1
 8009896:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800989a:	f000 f959 	bl	8009b50 <_malloc_r>
 800989e:	4604      	mov	r4, r0
 80098a0:	b140      	cbz	r0, 80098b4 <__sfmoreglue+0x28>
 80098a2:	2100      	movs	r1, #0
 80098a4:	e9c0 1600 	strd	r1, r6, [r0]
 80098a8:	300c      	adds	r0, #12
 80098aa:	60a0      	str	r0, [r4, #8]
 80098ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80098b0:	f000 f8f6 	bl	8009aa0 <memset>
 80098b4:	4620      	mov	r0, r4
 80098b6:	bd70      	pop	{r4, r5, r6, pc}

080098b8 <__sfp_lock_acquire>:
 80098b8:	4801      	ldr	r0, [pc, #4]	; (80098c0 <__sfp_lock_acquire+0x8>)
 80098ba:	f000 b8d8 	b.w	8009a6e <__retarget_lock_acquire_recursive>
 80098be:	bf00      	nop
 80098c0:	20004ec8 	.word	0x20004ec8

080098c4 <__sfp_lock_release>:
 80098c4:	4801      	ldr	r0, [pc, #4]	; (80098cc <__sfp_lock_release+0x8>)
 80098c6:	f000 b8d3 	b.w	8009a70 <__retarget_lock_release_recursive>
 80098ca:	bf00      	nop
 80098cc:	20004ec8 	.word	0x20004ec8

080098d0 <__sinit_lock_acquire>:
 80098d0:	4801      	ldr	r0, [pc, #4]	; (80098d8 <__sinit_lock_acquire+0x8>)
 80098d2:	f000 b8cc 	b.w	8009a6e <__retarget_lock_acquire_recursive>
 80098d6:	bf00      	nop
 80098d8:	20004ec3 	.word	0x20004ec3

080098dc <__sinit_lock_release>:
 80098dc:	4801      	ldr	r0, [pc, #4]	; (80098e4 <__sinit_lock_release+0x8>)
 80098de:	f000 b8c7 	b.w	8009a70 <__retarget_lock_release_recursive>
 80098e2:	bf00      	nop
 80098e4:	20004ec3 	.word	0x20004ec3

080098e8 <__sinit>:
 80098e8:	b510      	push	{r4, lr}
 80098ea:	4604      	mov	r4, r0
 80098ec:	f7ff fff0 	bl	80098d0 <__sinit_lock_acquire>
 80098f0:	69a3      	ldr	r3, [r4, #24]
 80098f2:	b11b      	cbz	r3, 80098fc <__sinit+0x14>
 80098f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098f8:	f7ff bff0 	b.w	80098dc <__sinit_lock_release>
 80098fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009900:	6523      	str	r3, [r4, #80]	; 0x50
 8009902:	4b13      	ldr	r3, [pc, #76]	; (8009950 <__sinit+0x68>)
 8009904:	4a13      	ldr	r2, [pc, #76]	; (8009954 <__sinit+0x6c>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	62a2      	str	r2, [r4, #40]	; 0x28
 800990a:	42a3      	cmp	r3, r4
 800990c:	bf04      	itt	eq
 800990e:	2301      	moveq	r3, #1
 8009910:	61a3      	streq	r3, [r4, #24]
 8009912:	4620      	mov	r0, r4
 8009914:	f000 f820 	bl	8009958 <__sfp>
 8009918:	6060      	str	r0, [r4, #4]
 800991a:	4620      	mov	r0, r4
 800991c:	f000 f81c 	bl	8009958 <__sfp>
 8009920:	60a0      	str	r0, [r4, #8]
 8009922:	4620      	mov	r0, r4
 8009924:	f000 f818 	bl	8009958 <__sfp>
 8009928:	2200      	movs	r2, #0
 800992a:	60e0      	str	r0, [r4, #12]
 800992c:	2104      	movs	r1, #4
 800992e:	6860      	ldr	r0, [r4, #4]
 8009930:	f7ff ff82 	bl	8009838 <std>
 8009934:	68a0      	ldr	r0, [r4, #8]
 8009936:	2201      	movs	r2, #1
 8009938:	2109      	movs	r1, #9
 800993a:	f7ff ff7d 	bl	8009838 <std>
 800993e:	68e0      	ldr	r0, [r4, #12]
 8009940:	2202      	movs	r2, #2
 8009942:	2112      	movs	r1, #18
 8009944:	f7ff ff78 	bl	8009838 <std>
 8009948:	2301      	movs	r3, #1
 800994a:	61a3      	str	r3, [r4, #24]
 800994c:	e7d2      	b.n	80098f4 <__sinit+0xc>
 800994e:	bf00      	nop
 8009950:	0800e654 	.word	0x0800e654
 8009954:	08009881 	.word	0x08009881

08009958 <__sfp>:
 8009958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995a:	4607      	mov	r7, r0
 800995c:	f7ff ffac 	bl	80098b8 <__sfp_lock_acquire>
 8009960:	4b1e      	ldr	r3, [pc, #120]	; (80099dc <__sfp+0x84>)
 8009962:	681e      	ldr	r6, [r3, #0]
 8009964:	69b3      	ldr	r3, [r6, #24]
 8009966:	b913      	cbnz	r3, 800996e <__sfp+0x16>
 8009968:	4630      	mov	r0, r6
 800996a:	f7ff ffbd 	bl	80098e8 <__sinit>
 800996e:	3648      	adds	r6, #72	; 0x48
 8009970:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009974:	3b01      	subs	r3, #1
 8009976:	d503      	bpl.n	8009980 <__sfp+0x28>
 8009978:	6833      	ldr	r3, [r6, #0]
 800997a:	b30b      	cbz	r3, 80099c0 <__sfp+0x68>
 800997c:	6836      	ldr	r6, [r6, #0]
 800997e:	e7f7      	b.n	8009970 <__sfp+0x18>
 8009980:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009984:	b9d5      	cbnz	r5, 80099bc <__sfp+0x64>
 8009986:	4b16      	ldr	r3, [pc, #88]	; (80099e0 <__sfp+0x88>)
 8009988:	60e3      	str	r3, [r4, #12]
 800998a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800998e:	6665      	str	r5, [r4, #100]	; 0x64
 8009990:	f000 f86c 	bl	8009a6c <__retarget_lock_init_recursive>
 8009994:	f7ff ff96 	bl	80098c4 <__sfp_lock_release>
 8009998:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800999c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80099a0:	6025      	str	r5, [r4, #0]
 80099a2:	61a5      	str	r5, [r4, #24]
 80099a4:	2208      	movs	r2, #8
 80099a6:	4629      	mov	r1, r5
 80099a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80099ac:	f000 f878 	bl	8009aa0 <memset>
 80099b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80099b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80099b8:	4620      	mov	r0, r4
 80099ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099bc:	3468      	adds	r4, #104	; 0x68
 80099be:	e7d9      	b.n	8009974 <__sfp+0x1c>
 80099c0:	2104      	movs	r1, #4
 80099c2:	4638      	mov	r0, r7
 80099c4:	f7ff ff62 	bl	800988c <__sfmoreglue>
 80099c8:	4604      	mov	r4, r0
 80099ca:	6030      	str	r0, [r6, #0]
 80099cc:	2800      	cmp	r0, #0
 80099ce:	d1d5      	bne.n	800997c <__sfp+0x24>
 80099d0:	f7ff ff78 	bl	80098c4 <__sfp_lock_release>
 80099d4:	230c      	movs	r3, #12
 80099d6:	603b      	str	r3, [r7, #0]
 80099d8:	e7ee      	b.n	80099b8 <__sfp+0x60>
 80099da:	bf00      	nop
 80099dc:	0800e654 	.word	0x0800e654
 80099e0:	ffff0001 	.word	0xffff0001

080099e4 <_fwalk_reent>:
 80099e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099e8:	4606      	mov	r6, r0
 80099ea:	4688      	mov	r8, r1
 80099ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099f0:	2700      	movs	r7, #0
 80099f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099f6:	f1b9 0901 	subs.w	r9, r9, #1
 80099fa:	d505      	bpl.n	8009a08 <_fwalk_reent+0x24>
 80099fc:	6824      	ldr	r4, [r4, #0]
 80099fe:	2c00      	cmp	r4, #0
 8009a00:	d1f7      	bne.n	80099f2 <_fwalk_reent+0xe>
 8009a02:	4638      	mov	r0, r7
 8009a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a08:	89ab      	ldrh	r3, [r5, #12]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d907      	bls.n	8009a1e <_fwalk_reent+0x3a>
 8009a0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a12:	3301      	adds	r3, #1
 8009a14:	d003      	beq.n	8009a1e <_fwalk_reent+0x3a>
 8009a16:	4629      	mov	r1, r5
 8009a18:	4630      	mov	r0, r6
 8009a1a:	47c0      	blx	r8
 8009a1c:	4307      	orrs	r7, r0
 8009a1e:	3568      	adds	r5, #104	; 0x68
 8009a20:	e7e9      	b.n	80099f6 <_fwalk_reent+0x12>
	...

08009a24 <__libc_init_array>:
 8009a24:	b570      	push	{r4, r5, r6, lr}
 8009a26:	4d0d      	ldr	r5, [pc, #52]	; (8009a5c <__libc_init_array+0x38>)
 8009a28:	4c0d      	ldr	r4, [pc, #52]	; (8009a60 <__libc_init_array+0x3c>)
 8009a2a:	1b64      	subs	r4, r4, r5
 8009a2c:	10a4      	asrs	r4, r4, #2
 8009a2e:	2600      	movs	r6, #0
 8009a30:	42a6      	cmp	r6, r4
 8009a32:	d109      	bne.n	8009a48 <__libc_init_array+0x24>
 8009a34:	4d0b      	ldr	r5, [pc, #44]	; (8009a64 <__libc_init_array+0x40>)
 8009a36:	4c0c      	ldr	r4, [pc, #48]	; (8009a68 <__libc_init_array+0x44>)
 8009a38:	f004 fc1a 	bl	800e270 <_init>
 8009a3c:	1b64      	subs	r4, r4, r5
 8009a3e:	10a4      	asrs	r4, r4, #2
 8009a40:	2600      	movs	r6, #0
 8009a42:	42a6      	cmp	r6, r4
 8009a44:	d105      	bne.n	8009a52 <__libc_init_array+0x2e>
 8009a46:	bd70      	pop	{r4, r5, r6, pc}
 8009a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a4c:	4798      	blx	r3
 8009a4e:	3601      	adds	r6, #1
 8009a50:	e7ee      	b.n	8009a30 <__libc_init_array+0xc>
 8009a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a56:	4798      	blx	r3
 8009a58:	3601      	adds	r6, #1
 8009a5a:	e7f2      	b.n	8009a42 <__libc_init_array+0x1e>
 8009a5c:	0800e9b4 	.word	0x0800e9b4
 8009a60:	0800e9b4 	.word	0x0800e9b4
 8009a64:	0800e9b4 	.word	0x0800e9b4
 8009a68:	0800e9b8 	.word	0x0800e9b8

08009a6c <__retarget_lock_init_recursive>:
 8009a6c:	4770      	bx	lr

08009a6e <__retarget_lock_acquire_recursive>:
 8009a6e:	4770      	bx	lr

08009a70 <__retarget_lock_release_recursive>:
 8009a70:	4770      	bx	lr
	...

08009a74 <malloc>:
 8009a74:	4b02      	ldr	r3, [pc, #8]	; (8009a80 <malloc+0xc>)
 8009a76:	4601      	mov	r1, r0
 8009a78:	6818      	ldr	r0, [r3, #0]
 8009a7a:	f000 b869 	b.w	8009b50 <_malloc_r>
 8009a7e:	bf00      	nop
 8009a80:	20000070 	.word	0x20000070

08009a84 <memcpy>:
 8009a84:	440a      	add	r2, r1
 8009a86:	4291      	cmp	r1, r2
 8009a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a8c:	d100      	bne.n	8009a90 <memcpy+0xc>
 8009a8e:	4770      	bx	lr
 8009a90:	b510      	push	{r4, lr}
 8009a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a9a:	4291      	cmp	r1, r2
 8009a9c:	d1f9      	bne.n	8009a92 <memcpy+0xe>
 8009a9e:	bd10      	pop	{r4, pc}

08009aa0 <memset>:
 8009aa0:	4402      	add	r2, r0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d100      	bne.n	8009aaa <memset+0xa>
 8009aa8:	4770      	bx	lr
 8009aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8009aae:	e7f9      	b.n	8009aa4 <memset+0x4>

08009ab0 <_free_r>:
 8009ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ab2:	2900      	cmp	r1, #0
 8009ab4:	d048      	beq.n	8009b48 <_free_r+0x98>
 8009ab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aba:	9001      	str	r0, [sp, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f1a1 0404 	sub.w	r4, r1, #4
 8009ac2:	bfb8      	it	lt
 8009ac4:	18e4      	addlt	r4, r4, r3
 8009ac6:	f003 fa97 	bl	800cff8 <__malloc_lock>
 8009aca:	4a20      	ldr	r2, [pc, #128]	; (8009b4c <_free_r+0x9c>)
 8009acc:	9801      	ldr	r0, [sp, #4]
 8009ace:	6813      	ldr	r3, [r2, #0]
 8009ad0:	4615      	mov	r5, r2
 8009ad2:	b933      	cbnz	r3, 8009ae2 <_free_r+0x32>
 8009ad4:	6063      	str	r3, [r4, #4]
 8009ad6:	6014      	str	r4, [r2, #0]
 8009ad8:	b003      	add	sp, #12
 8009ada:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ade:	f003 ba91 	b.w	800d004 <__malloc_unlock>
 8009ae2:	42a3      	cmp	r3, r4
 8009ae4:	d90b      	bls.n	8009afe <_free_r+0x4e>
 8009ae6:	6821      	ldr	r1, [r4, #0]
 8009ae8:	1862      	adds	r2, r4, r1
 8009aea:	4293      	cmp	r3, r2
 8009aec:	bf04      	itt	eq
 8009aee:	681a      	ldreq	r2, [r3, #0]
 8009af0:	685b      	ldreq	r3, [r3, #4]
 8009af2:	6063      	str	r3, [r4, #4]
 8009af4:	bf04      	itt	eq
 8009af6:	1852      	addeq	r2, r2, r1
 8009af8:	6022      	streq	r2, [r4, #0]
 8009afa:	602c      	str	r4, [r5, #0]
 8009afc:	e7ec      	b.n	8009ad8 <_free_r+0x28>
 8009afe:	461a      	mov	r2, r3
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	b10b      	cbz	r3, 8009b08 <_free_r+0x58>
 8009b04:	42a3      	cmp	r3, r4
 8009b06:	d9fa      	bls.n	8009afe <_free_r+0x4e>
 8009b08:	6811      	ldr	r1, [r2, #0]
 8009b0a:	1855      	adds	r5, r2, r1
 8009b0c:	42a5      	cmp	r5, r4
 8009b0e:	d10b      	bne.n	8009b28 <_free_r+0x78>
 8009b10:	6824      	ldr	r4, [r4, #0]
 8009b12:	4421      	add	r1, r4
 8009b14:	1854      	adds	r4, r2, r1
 8009b16:	42a3      	cmp	r3, r4
 8009b18:	6011      	str	r1, [r2, #0]
 8009b1a:	d1dd      	bne.n	8009ad8 <_free_r+0x28>
 8009b1c:	681c      	ldr	r4, [r3, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	6053      	str	r3, [r2, #4]
 8009b22:	4421      	add	r1, r4
 8009b24:	6011      	str	r1, [r2, #0]
 8009b26:	e7d7      	b.n	8009ad8 <_free_r+0x28>
 8009b28:	d902      	bls.n	8009b30 <_free_r+0x80>
 8009b2a:	230c      	movs	r3, #12
 8009b2c:	6003      	str	r3, [r0, #0]
 8009b2e:	e7d3      	b.n	8009ad8 <_free_r+0x28>
 8009b30:	6825      	ldr	r5, [r4, #0]
 8009b32:	1961      	adds	r1, r4, r5
 8009b34:	428b      	cmp	r3, r1
 8009b36:	bf04      	itt	eq
 8009b38:	6819      	ldreq	r1, [r3, #0]
 8009b3a:	685b      	ldreq	r3, [r3, #4]
 8009b3c:	6063      	str	r3, [r4, #4]
 8009b3e:	bf04      	itt	eq
 8009b40:	1949      	addeq	r1, r1, r5
 8009b42:	6021      	streq	r1, [r4, #0]
 8009b44:	6054      	str	r4, [r2, #4]
 8009b46:	e7c7      	b.n	8009ad8 <_free_r+0x28>
 8009b48:	b003      	add	sp, #12
 8009b4a:	bd30      	pop	{r4, r5, pc}
 8009b4c:	20004c2c 	.word	0x20004c2c

08009b50 <_malloc_r>:
 8009b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b52:	1ccd      	adds	r5, r1, #3
 8009b54:	f025 0503 	bic.w	r5, r5, #3
 8009b58:	3508      	adds	r5, #8
 8009b5a:	2d0c      	cmp	r5, #12
 8009b5c:	bf38      	it	cc
 8009b5e:	250c      	movcc	r5, #12
 8009b60:	2d00      	cmp	r5, #0
 8009b62:	4606      	mov	r6, r0
 8009b64:	db01      	blt.n	8009b6a <_malloc_r+0x1a>
 8009b66:	42a9      	cmp	r1, r5
 8009b68:	d903      	bls.n	8009b72 <_malloc_r+0x22>
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	6033      	str	r3, [r6, #0]
 8009b6e:	2000      	movs	r0, #0
 8009b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b72:	f003 fa41 	bl	800cff8 <__malloc_lock>
 8009b76:	4921      	ldr	r1, [pc, #132]	; (8009bfc <_malloc_r+0xac>)
 8009b78:	680a      	ldr	r2, [r1, #0]
 8009b7a:	4614      	mov	r4, r2
 8009b7c:	b99c      	cbnz	r4, 8009ba6 <_malloc_r+0x56>
 8009b7e:	4f20      	ldr	r7, [pc, #128]	; (8009c00 <_malloc_r+0xb0>)
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	b923      	cbnz	r3, 8009b8e <_malloc_r+0x3e>
 8009b84:	4621      	mov	r1, r4
 8009b86:	4630      	mov	r0, r6
 8009b88:	f000 ff92 	bl	800aab0 <_sbrk_r>
 8009b8c:	6038      	str	r0, [r7, #0]
 8009b8e:	4629      	mov	r1, r5
 8009b90:	4630      	mov	r0, r6
 8009b92:	f000 ff8d 	bl	800aab0 <_sbrk_r>
 8009b96:	1c43      	adds	r3, r0, #1
 8009b98:	d123      	bne.n	8009be2 <_malloc_r+0x92>
 8009b9a:	230c      	movs	r3, #12
 8009b9c:	6033      	str	r3, [r6, #0]
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	f003 fa30 	bl	800d004 <__malloc_unlock>
 8009ba4:	e7e3      	b.n	8009b6e <_malloc_r+0x1e>
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	1b5b      	subs	r3, r3, r5
 8009baa:	d417      	bmi.n	8009bdc <_malloc_r+0x8c>
 8009bac:	2b0b      	cmp	r3, #11
 8009bae:	d903      	bls.n	8009bb8 <_malloc_r+0x68>
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	441c      	add	r4, r3
 8009bb4:	6025      	str	r5, [r4, #0]
 8009bb6:	e004      	b.n	8009bc2 <_malloc_r+0x72>
 8009bb8:	6863      	ldr	r3, [r4, #4]
 8009bba:	42a2      	cmp	r2, r4
 8009bbc:	bf0c      	ite	eq
 8009bbe:	600b      	streq	r3, [r1, #0]
 8009bc0:	6053      	strne	r3, [r2, #4]
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	f003 fa1e 	bl	800d004 <__malloc_unlock>
 8009bc8:	f104 000b 	add.w	r0, r4, #11
 8009bcc:	1d23      	adds	r3, r4, #4
 8009bce:	f020 0007 	bic.w	r0, r0, #7
 8009bd2:	1ac2      	subs	r2, r0, r3
 8009bd4:	d0cc      	beq.n	8009b70 <_malloc_r+0x20>
 8009bd6:	1a1b      	subs	r3, r3, r0
 8009bd8:	50a3      	str	r3, [r4, r2]
 8009bda:	e7c9      	b.n	8009b70 <_malloc_r+0x20>
 8009bdc:	4622      	mov	r2, r4
 8009bde:	6864      	ldr	r4, [r4, #4]
 8009be0:	e7cc      	b.n	8009b7c <_malloc_r+0x2c>
 8009be2:	1cc4      	adds	r4, r0, #3
 8009be4:	f024 0403 	bic.w	r4, r4, #3
 8009be8:	42a0      	cmp	r0, r4
 8009bea:	d0e3      	beq.n	8009bb4 <_malloc_r+0x64>
 8009bec:	1a21      	subs	r1, r4, r0
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f000 ff5e 	bl	800aab0 <_sbrk_r>
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	d1dd      	bne.n	8009bb4 <_malloc_r+0x64>
 8009bf8:	e7cf      	b.n	8009b9a <_malloc_r+0x4a>
 8009bfa:	bf00      	nop
 8009bfc:	20004c2c 	.word	0x20004c2c
 8009c00:	20004c30 	.word	0x20004c30

08009c04 <__cvt>:
 8009c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c06:	ed2d 8b02 	vpush	{d8}
 8009c0a:	eeb0 8b40 	vmov.f64	d8, d0
 8009c0e:	b085      	sub	sp, #20
 8009c10:	4617      	mov	r7, r2
 8009c12:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009c14:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009c16:	ee18 2a90 	vmov	r2, s17
 8009c1a:	f025 0520 	bic.w	r5, r5, #32
 8009c1e:	2a00      	cmp	r2, #0
 8009c20:	bfb6      	itet	lt
 8009c22:	222d      	movlt	r2, #45	; 0x2d
 8009c24:	2200      	movge	r2, #0
 8009c26:	eeb1 8b40 	vneglt.f64	d8, d0
 8009c2a:	2d46      	cmp	r5, #70	; 0x46
 8009c2c:	460c      	mov	r4, r1
 8009c2e:	701a      	strb	r2, [r3, #0]
 8009c30:	d004      	beq.n	8009c3c <__cvt+0x38>
 8009c32:	2d45      	cmp	r5, #69	; 0x45
 8009c34:	d100      	bne.n	8009c38 <__cvt+0x34>
 8009c36:	3401      	adds	r4, #1
 8009c38:	2102      	movs	r1, #2
 8009c3a:	e000      	b.n	8009c3e <__cvt+0x3a>
 8009c3c:	2103      	movs	r1, #3
 8009c3e:	ab03      	add	r3, sp, #12
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	ab02      	add	r3, sp, #8
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	4622      	mov	r2, r4
 8009c48:	4633      	mov	r3, r6
 8009c4a:	eeb0 0b48 	vmov.f64	d0, d8
 8009c4e:	f001 ff93 	bl	800bb78 <_dtoa_r>
 8009c52:	2d47      	cmp	r5, #71	; 0x47
 8009c54:	d109      	bne.n	8009c6a <__cvt+0x66>
 8009c56:	07fb      	lsls	r3, r7, #31
 8009c58:	d407      	bmi.n	8009c6a <__cvt+0x66>
 8009c5a:	9b03      	ldr	r3, [sp, #12]
 8009c5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c5e:	1a1b      	subs	r3, r3, r0
 8009c60:	6013      	str	r3, [r2, #0]
 8009c62:	b005      	add	sp, #20
 8009c64:	ecbd 8b02 	vpop	{d8}
 8009c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c6a:	2d46      	cmp	r5, #70	; 0x46
 8009c6c:	eb00 0204 	add.w	r2, r0, r4
 8009c70:	d10c      	bne.n	8009c8c <__cvt+0x88>
 8009c72:	7803      	ldrb	r3, [r0, #0]
 8009c74:	2b30      	cmp	r3, #48	; 0x30
 8009c76:	d107      	bne.n	8009c88 <__cvt+0x84>
 8009c78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c80:	bf1c      	itt	ne
 8009c82:	f1c4 0401 	rsbne	r4, r4, #1
 8009c86:	6034      	strne	r4, [r6, #0]
 8009c88:	6833      	ldr	r3, [r6, #0]
 8009c8a:	441a      	add	r2, r3
 8009c8c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c94:	bf08      	it	eq
 8009c96:	9203      	streq	r2, [sp, #12]
 8009c98:	2130      	movs	r1, #48	; 0x30
 8009c9a:	9b03      	ldr	r3, [sp, #12]
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d2dc      	bcs.n	8009c5a <__cvt+0x56>
 8009ca0:	1c5c      	adds	r4, r3, #1
 8009ca2:	9403      	str	r4, [sp, #12]
 8009ca4:	7019      	strb	r1, [r3, #0]
 8009ca6:	e7f8      	b.n	8009c9a <__cvt+0x96>

08009ca8 <__exponent>:
 8009ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009caa:	4603      	mov	r3, r0
 8009cac:	2900      	cmp	r1, #0
 8009cae:	bfb8      	it	lt
 8009cb0:	4249      	neglt	r1, r1
 8009cb2:	f803 2b02 	strb.w	r2, [r3], #2
 8009cb6:	bfb4      	ite	lt
 8009cb8:	222d      	movlt	r2, #45	; 0x2d
 8009cba:	222b      	movge	r2, #43	; 0x2b
 8009cbc:	2909      	cmp	r1, #9
 8009cbe:	7042      	strb	r2, [r0, #1]
 8009cc0:	dd2a      	ble.n	8009d18 <__exponent+0x70>
 8009cc2:	f10d 0407 	add.w	r4, sp, #7
 8009cc6:	46a4      	mov	ip, r4
 8009cc8:	270a      	movs	r7, #10
 8009cca:	46a6      	mov	lr, r4
 8009ccc:	460a      	mov	r2, r1
 8009cce:	fb91 f6f7 	sdiv	r6, r1, r7
 8009cd2:	fb07 1516 	mls	r5, r7, r6, r1
 8009cd6:	3530      	adds	r5, #48	; 0x30
 8009cd8:	2a63      	cmp	r2, #99	; 0x63
 8009cda:	f104 34ff 	add.w	r4, r4, #4294967295
 8009cde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009ce2:	4631      	mov	r1, r6
 8009ce4:	dcf1      	bgt.n	8009cca <__exponent+0x22>
 8009ce6:	3130      	adds	r1, #48	; 0x30
 8009ce8:	f1ae 0502 	sub.w	r5, lr, #2
 8009cec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009cf0:	1c44      	adds	r4, r0, #1
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	4561      	cmp	r1, ip
 8009cf6:	d30a      	bcc.n	8009d0e <__exponent+0x66>
 8009cf8:	f10d 0209 	add.w	r2, sp, #9
 8009cfc:	eba2 020e 	sub.w	r2, r2, lr
 8009d00:	4565      	cmp	r5, ip
 8009d02:	bf88      	it	hi
 8009d04:	2200      	movhi	r2, #0
 8009d06:	4413      	add	r3, r2
 8009d08:	1a18      	subs	r0, r3, r0
 8009d0a:	b003      	add	sp, #12
 8009d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d12:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009d16:	e7ed      	b.n	8009cf4 <__exponent+0x4c>
 8009d18:	2330      	movs	r3, #48	; 0x30
 8009d1a:	3130      	adds	r1, #48	; 0x30
 8009d1c:	7083      	strb	r3, [r0, #2]
 8009d1e:	70c1      	strb	r1, [r0, #3]
 8009d20:	1d03      	adds	r3, r0, #4
 8009d22:	e7f1      	b.n	8009d08 <__exponent+0x60>
 8009d24:	0000      	movs	r0, r0
	...

08009d28 <_printf_float>:
 8009d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	b08b      	sub	sp, #44	; 0x2c
 8009d2e:	460c      	mov	r4, r1
 8009d30:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009d34:	4616      	mov	r6, r2
 8009d36:	461f      	mov	r7, r3
 8009d38:	4605      	mov	r5, r0
 8009d3a:	f003 f8d1 	bl	800cee0 <_localeconv_r>
 8009d3e:	f8d0 b000 	ldr.w	fp, [r0]
 8009d42:	4658      	mov	r0, fp
 8009d44:	f7f6 fa7c 	bl	8000240 <strlen>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	9308      	str	r3, [sp, #32]
 8009d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8009d50:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009d54:	6822      	ldr	r2, [r4, #0]
 8009d56:	3307      	adds	r3, #7
 8009d58:	f023 0307 	bic.w	r3, r3, #7
 8009d5c:	f103 0108 	add.w	r1, r3, #8
 8009d60:	f8c8 1000 	str.w	r1, [r8]
 8009d64:	4682      	mov	sl, r0
 8009d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d6a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009d6e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009fd0 <_printf_float+0x2a8>
 8009d72:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8009d76:	eeb0 6bc0 	vabs.f64	d6, d0
 8009d7a:	eeb4 6b47 	vcmp.f64	d6, d7
 8009d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d82:	dd24      	ble.n	8009dce <_printf_float+0xa6>
 8009d84:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d8c:	d502      	bpl.n	8009d94 <_printf_float+0x6c>
 8009d8e:	232d      	movs	r3, #45	; 0x2d
 8009d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d94:	4b90      	ldr	r3, [pc, #576]	; (8009fd8 <_printf_float+0x2b0>)
 8009d96:	4891      	ldr	r0, [pc, #580]	; (8009fdc <_printf_float+0x2b4>)
 8009d98:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009d9c:	bf94      	ite	ls
 8009d9e:	4698      	movls	r8, r3
 8009da0:	4680      	movhi	r8, r0
 8009da2:	2303      	movs	r3, #3
 8009da4:	6123      	str	r3, [r4, #16]
 8009da6:	f022 0204 	bic.w	r2, r2, #4
 8009daa:	2300      	movs	r3, #0
 8009dac:	6022      	str	r2, [r4, #0]
 8009dae:	9304      	str	r3, [sp, #16]
 8009db0:	9700      	str	r7, [sp, #0]
 8009db2:	4633      	mov	r3, r6
 8009db4:	aa09      	add	r2, sp, #36	; 0x24
 8009db6:	4621      	mov	r1, r4
 8009db8:	4628      	mov	r0, r5
 8009dba:	f000 f9d3 	bl	800a164 <_printf_common>
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	f040 808a 	bne.w	8009ed8 <_printf_float+0x1b0>
 8009dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc8:	b00b      	add	sp, #44	; 0x2c
 8009dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dce:	eeb4 0b40 	vcmp.f64	d0, d0
 8009dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd6:	d709      	bvc.n	8009dec <_printf_float+0xc4>
 8009dd8:	ee10 3a90 	vmov	r3, s1
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	bfbc      	itt	lt
 8009de0:	232d      	movlt	r3, #45	; 0x2d
 8009de2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009de6:	487e      	ldr	r0, [pc, #504]	; (8009fe0 <_printf_float+0x2b8>)
 8009de8:	4b7e      	ldr	r3, [pc, #504]	; (8009fe4 <_printf_float+0x2bc>)
 8009dea:	e7d5      	b.n	8009d98 <_printf_float+0x70>
 8009dec:	6863      	ldr	r3, [r4, #4]
 8009dee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009df2:	9104      	str	r1, [sp, #16]
 8009df4:	1c59      	adds	r1, r3, #1
 8009df6:	d13c      	bne.n	8009e72 <_printf_float+0x14a>
 8009df8:	2306      	movs	r3, #6
 8009dfa:	6063      	str	r3, [r4, #4]
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	9303      	str	r3, [sp, #12]
 8009e00:	ab08      	add	r3, sp, #32
 8009e02:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009e06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009e0a:	ab07      	add	r3, sp, #28
 8009e0c:	6861      	ldr	r1, [r4, #4]
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	6022      	str	r2, [r4, #0]
 8009e12:	f10d 031b 	add.w	r3, sp, #27
 8009e16:	4628      	mov	r0, r5
 8009e18:	f7ff fef4 	bl	8009c04 <__cvt>
 8009e1c:	9b04      	ldr	r3, [sp, #16]
 8009e1e:	9907      	ldr	r1, [sp, #28]
 8009e20:	2b47      	cmp	r3, #71	; 0x47
 8009e22:	4680      	mov	r8, r0
 8009e24:	d108      	bne.n	8009e38 <_printf_float+0x110>
 8009e26:	1cc8      	adds	r0, r1, #3
 8009e28:	db02      	blt.n	8009e30 <_printf_float+0x108>
 8009e2a:	6863      	ldr	r3, [r4, #4]
 8009e2c:	4299      	cmp	r1, r3
 8009e2e:	dd41      	ble.n	8009eb4 <_printf_float+0x18c>
 8009e30:	f1a9 0902 	sub.w	r9, r9, #2
 8009e34:	fa5f f989 	uxtb.w	r9, r9
 8009e38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009e3c:	d820      	bhi.n	8009e80 <_printf_float+0x158>
 8009e3e:	3901      	subs	r1, #1
 8009e40:	464a      	mov	r2, r9
 8009e42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e46:	9107      	str	r1, [sp, #28]
 8009e48:	f7ff ff2e 	bl	8009ca8 <__exponent>
 8009e4c:	9a08      	ldr	r2, [sp, #32]
 8009e4e:	9004      	str	r0, [sp, #16]
 8009e50:	1813      	adds	r3, r2, r0
 8009e52:	2a01      	cmp	r2, #1
 8009e54:	6123      	str	r3, [r4, #16]
 8009e56:	dc02      	bgt.n	8009e5e <_printf_float+0x136>
 8009e58:	6822      	ldr	r2, [r4, #0]
 8009e5a:	07d2      	lsls	r2, r2, #31
 8009e5c:	d501      	bpl.n	8009e62 <_printf_float+0x13a>
 8009e5e:	3301      	adds	r3, #1
 8009e60:	6123      	str	r3, [r4, #16]
 8009e62:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d0a2      	beq.n	8009db0 <_printf_float+0x88>
 8009e6a:	232d      	movs	r3, #45	; 0x2d
 8009e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e70:	e79e      	b.n	8009db0 <_printf_float+0x88>
 8009e72:	9904      	ldr	r1, [sp, #16]
 8009e74:	2947      	cmp	r1, #71	; 0x47
 8009e76:	d1c1      	bne.n	8009dfc <_printf_float+0xd4>
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1bf      	bne.n	8009dfc <_printf_float+0xd4>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e7bc      	b.n	8009dfa <_printf_float+0xd2>
 8009e80:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009e84:	d118      	bne.n	8009eb8 <_printf_float+0x190>
 8009e86:	2900      	cmp	r1, #0
 8009e88:	6863      	ldr	r3, [r4, #4]
 8009e8a:	dd0b      	ble.n	8009ea4 <_printf_float+0x17c>
 8009e8c:	6121      	str	r1, [r4, #16]
 8009e8e:	b913      	cbnz	r3, 8009e96 <_printf_float+0x16e>
 8009e90:	6822      	ldr	r2, [r4, #0]
 8009e92:	07d0      	lsls	r0, r2, #31
 8009e94:	d502      	bpl.n	8009e9c <_printf_float+0x174>
 8009e96:	3301      	adds	r3, #1
 8009e98:	440b      	add	r3, r1
 8009e9a:	6123      	str	r3, [r4, #16]
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ea0:	9304      	str	r3, [sp, #16]
 8009ea2:	e7de      	b.n	8009e62 <_printf_float+0x13a>
 8009ea4:	b913      	cbnz	r3, 8009eac <_printf_float+0x184>
 8009ea6:	6822      	ldr	r2, [r4, #0]
 8009ea8:	07d2      	lsls	r2, r2, #31
 8009eaa:	d501      	bpl.n	8009eb0 <_printf_float+0x188>
 8009eac:	3302      	adds	r3, #2
 8009eae:	e7f4      	b.n	8009e9a <_printf_float+0x172>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e7f2      	b.n	8009e9a <_printf_float+0x172>
 8009eb4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009eb8:	9b08      	ldr	r3, [sp, #32]
 8009eba:	4299      	cmp	r1, r3
 8009ebc:	db05      	blt.n	8009eca <_printf_float+0x1a2>
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	6121      	str	r1, [r4, #16]
 8009ec2:	07d8      	lsls	r0, r3, #31
 8009ec4:	d5ea      	bpl.n	8009e9c <_printf_float+0x174>
 8009ec6:	1c4b      	adds	r3, r1, #1
 8009ec8:	e7e7      	b.n	8009e9a <_printf_float+0x172>
 8009eca:	2900      	cmp	r1, #0
 8009ecc:	bfd4      	ite	le
 8009ece:	f1c1 0202 	rsble	r2, r1, #2
 8009ed2:	2201      	movgt	r2, #1
 8009ed4:	4413      	add	r3, r2
 8009ed6:	e7e0      	b.n	8009e9a <_printf_float+0x172>
 8009ed8:	6823      	ldr	r3, [r4, #0]
 8009eda:	055a      	lsls	r2, r3, #21
 8009edc:	d407      	bmi.n	8009eee <_printf_float+0x1c6>
 8009ede:	6923      	ldr	r3, [r4, #16]
 8009ee0:	4642      	mov	r2, r8
 8009ee2:	4631      	mov	r1, r6
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	47b8      	blx	r7
 8009ee8:	3001      	adds	r0, #1
 8009eea:	d12a      	bne.n	8009f42 <_printf_float+0x21a>
 8009eec:	e76a      	b.n	8009dc4 <_printf_float+0x9c>
 8009eee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009ef2:	f240 80e2 	bls.w	800a0ba <_printf_float+0x392>
 8009ef6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009efa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f02:	d133      	bne.n	8009f6c <_printf_float+0x244>
 8009f04:	4a38      	ldr	r2, [pc, #224]	; (8009fe8 <_printf_float+0x2c0>)
 8009f06:	2301      	movs	r3, #1
 8009f08:	4631      	mov	r1, r6
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	47b8      	blx	r7
 8009f0e:	3001      	adds	r0, #1
 8009f10:	f43f af58 	beq.w	8009dc4 <_printf_float+0x9c>
 8009f14:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	db02      	blt.n	8009f22 <_printf_float+0x1fa>
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	07d8      	lsls	r0, r3, #31
 8009f20:	d50f      	bpl.n	8009f42 <_printf_float+0x21a>
 8009f22:	4653      	mov	r3, sl
 8009f24:	465a      	mov	r2, fp
 8009f26:	4631      	mov	r1, r6
 8009f28:	4628      	mov	r0, r5
 8009f2a:	47b8      	blx	r7
 8009f2c:	3001      	adds	r0, #1
 8009f2e:	f43f af49 	beq.w	8009dc4 <_printf_float+0x9c>
 8009f32:	f04f 0800 	mov.w	r8, #0
 8009f36:	f104 091a 	add.w	r9, r4, #26
 8009f3a:	9b08      	ldr	r3, [sp, #32]
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	4543      	cmp	r3, r8
 8009f40:	dc09      	bgt.n	8009f56 <_printf_float+0x22e>
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	079b      	lsls	r3, r3, #30
 8009f46:	f100 8108 	bmi.w	800a15a <_printf_float+0x432>
 8009f4a:	68e0      	ldr	r0, [r4, #12]
 8009f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f4e:	4298      	cmp	r0, r3
 8009f50:	bfb8      	it	lt
 8009f52:	4618      	movlt	r0, r3
 8009f54:	e738      	b.n	8009dc8 <_printf_float+0xa0>
 8009f56:	2301      	movs	r3, #1
 8009f58:	464a      	mov	r2, r9
 8009f5a:	4631      	mov	r1, r6
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	47b8      	blx	r7
 8009f60:	3001      	adds	r0, #1
 8009f62:	f43f af2f 	beq.w	8009dc4 <_printf_float+0x9c>
 8009f66:	f108 0801 	add.w	r8, r8, #1
 8009f6a:	e7e6      	b.n	8009f3a <_printf_float+0x212>
 8009f6c:	9b07      	ldr	r3, [sp, #28]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	dc3c      	bgt.n	8009fec <_printf_float+0x2c4>
 8009f72:	4a1d      	ldr	r2, [pc, #116]	; (8009fe8 <_printf_float+0x2c0>)
 8009f74:	2301      	movs	r3, #1
 8009f76:	4631      	mov	r1, r6
 8009f78:	4628      	mov	r0, r5
 8009f7a:	47b8      	blx	r7
 8009f7c:	3001      	adds	r0, #1
 8009f7e:	f43f af21 	beq.w	8009dc4 <_printf_float+0x9c>
 8009f82:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	d102      	bne.n	8009f90 <_printf_float+0x268>
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	07d9      	lsls	r1, r3, #31
 8009f8e:	d5d8      	bpl.n	8009f42 <_printf_float+0x21a>
 8009f90:	4653      	mov	r3, sl
 8009f92:	465a      	mov	r2, fp
 8009f94:	4631      	mov	r1, r6
 8009f96:	4628      	mov	r0, r5
 8009f98:	47b8      	blx	r7
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	f43f af12 	beq.w	8009dc4 <_printf_float+0x9c>
 8009fa0:	f04f 0900 	mov.w	r9, #0
 8009fa4:	f104 0a1a 	add.w	sl, r4, #26
 8009fa8:	9b07      	ldr	r3, [sp, #28]
 8009faa:	425b      	negs	r3, r3
 8009fac:	454b      	cmp	r3, r9
 8009fae:	dc01      	bgt.n	8009fb4 <_printf_float+0x28c>
 8009fb0:	9b08      	ldr	r3, [sp, #32]
 8009fb2:	e795      	b.n	8009ee0 <_printf_float+0x1b8>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	4652      	mov	r2, sl
 8009fb8:	4631      	mov	r1, r6
 8009fba:	4628      	mov	r0, r5
 8009fbc:	47b8      	blx	r7
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	f43f af00 	beq.w	8009dc4 <_printf_float+0x9c>
 8009fc4:	f109 0901 	add.w	r9, r9, #1
 8009fc8:	e7ee      	b.n	8009fa8 <_printf_float+0x280>
 8009fca:	bf00      	nop
 8009fcc:	f3af 8000 	nop.w
 8009fd0:	ffffffff 	.word	0xffffffff
 8009fd4:	7fefffff 	.word	0x7fefffff
 8009fd8:	0800e658 	.word	0x0800e658
 8009fdc:	0800e65c 	.word	0x0800e65c
 8009fe0:	0800e664 	.word	0x0800e664
 8009fe4:	0800e660 	.word	0x0800e660
 8009fe8:	0800e668 	.word	0x0800e668
 8009fec:	9a08      	ldr	r2, [sp, #32]
 8009fee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	bfa8      	it	ge
 8009ff4:	461a      	movge	r2, r3
 8009ff6:	2a00      	cmp	r2, #0
 8009ff8:	4691      	mov	r9, r2
 8009ffa:	dc38      	bgt.n	800a06e <_printf_float+0x346>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	9305      	str	r3, [sp, #20]
 800a000:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a004:	f104 021a 	add.w	r2, r4, #26
 800a008:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a00a:	9905      	ldr	r1, [sp, #20]
 800a00c:	9304      	str	r3, [sp, #16]
 800a00e:	eba3 0309 	sub.w	r3, r3, r9
 800a012:	428b      	cmp	r3, r1
 800a014:	dc33      	bgt.n	800a07e <_printf_float+0x356>
 800a016:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	db3c      	blt.n	800a098 <_printf_float+0x370>
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	07da      	lsls	r2, r3, #31
 800a022:	d439      	bmi.n	800a098 <_printf_float+0x370>
 800a024:	9a08      	ldr	r2, [sp, #32]
 800a026:	9b04      	ldr	r3, [sp, #16]
 800a028:	9907      	ldr	r1, [sp, #28]
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	eba2 0901 	sub.w	r9, r2, r1
 800a030:	4599      	cmp	r9, r3
 800a032:	bfa8      	it	ge
 800a034:	4699      	movge	r9, r3
 800a036:	f1b9 0f00 	cmp.w	r9, #0
 800a03a:	dc35      	bgt.n	800a0a8 <_printf_float+0x380>
 800a03c:	f04f 0800 	mov.w	r8, #0
 800a040:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a044:	f104 0a1a 	add.w	sl, r4, #26
 800a048:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a04c:	1a9b      	subs	r3, r3, r2
 800a04e:	eba3 0309 	sub.w	r3, r3, r9
 800a052:	4543      	cmp	r3, r8
 800a054:	f77f af75 	ble.w	8009f42 <_printf_float+0x21a>
 800a058:	2301      	movs	r3, #1
 800a05a:	4652      	mov	r2, sl
 800a05c:	4631      	mov	r1, r6
 800a05e:	4628      	mov	r0, r5
 800a060:	47b8      	blx	r7
 800a062:	3001      	adds	r0, #1
 800a064:	f43f aeae 	beq.w	8009dc4 <_printf_float+0x9c>
 800a068:	f108 0801 	add.w	r8, r8, #1
 800a06c:	e7ec      	b.n	800a048 <_printf_float+0x320>
 800a06e:	4613      	mov	r3, r2
 800a070:	4631      	mov	r1, r6
 800a072:	4642      	mov	r2, r8
 800a074:	4628      	mov	r0, r5
 800a076:	47b8      	blx	r7
 800a078:	3001      	adds	r0, #1
 800a07a:	d1bf      	bne.n	8009ffc <_printf_float+0x2d4>
 800a07c:	e6a2      	b.n	8009dc4 <_printf_float+0x9c>
 800a07e:	2301      	movs	r3, #1
 800a080:	4631      	mov	r1, r6
 800a082:	4628      	mov	r0, r5
 800a084:	9204      	str	r2, [sp, #16]
 800a086:	47b8      	blx	r7
 800a088:	3001      	adds	r0, #1
 800a08a:	f43f ae9b 	beq.w	8009dc4 <_printf_float+0x9c>
 800a08e:	9b05      	ldr	r3, [sp, #20]
 800a090:	9a04      	ldr	r2, [sp, #16]
 800a092:	3301      	adds	r3, #1
 800a094:	9305      	str	r3, [sp, #20]
 800a096:	e7b7      	b.n	800a008 <_printf_float+0x2e0>
 800a098:	4653      	mov	r3, sl
 800a09a:	465a      	mov	r2, fp
 800a09c:	4631      	mov	r1, r6
 800a09e:	4628      	mov	r0, r5
 800a0a0:	47b8      	blx	r7
 800a0a2:	3001      	adds	r0, #1
 800a0a4:	d1be      	bne.n	800a024 <_printf_float+0x2fc>
 800a0a6:	e68d      	b.n	8009dc4 <_printf_float+0x9c>
 800a0a8:	9a04      	ldr	r2, [sp, #16]
 800a0aa:	464b      	mov	r3, r9
 800a0ac:	4442      	add	r2, r8
 800a0ae:	4631      	mov	r1, r6
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	47b8      	blx	r7
 800a0b4:	3001      	adds	r0, #1
 800a0b6:	d1c1      	bne.n	800a03c <_printf_float+0x314>
 800a0b8:	e684      	b.n	8009dc4 <_printf_float+0x9c>
 800a0ba:	9a08      	ldr	r2, [sp, #32]
 800a0bc:	2a01      	cmp	r2, #1
 800a0be:	dc01      	bgt.n	800a0c4 <_printf_float+0x39c>
 800a0c0:	07db      	lsls	r3, r3, #31
 800a0c2:	d537      	bpl.n	800a134 <_printf_float+0x40c>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	4642      	mov	r2, r8
 800a0c8:	4631      	mov	r1, r6
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	47b8      	blx	r7
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	f43f ae78 	beq.w	8009dc4 <_printf_float+0x9c>
 800a0d4:	4653      	mov	r3, sl
 800a0d6:	465a      	mov	r2, fp
 800a0d8:	4631      	mov	r1, r6
 800a0da:	4628      	mov	r0, r5
 800a0dc:	47b8      	blx	r7
 800a0de:	3001      	adds	r0, #1
 800a0e0:	f43f ae70 	beq.w	8009dc4 <_printf_float+0x9c>
 800a0e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a0e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f0:	d01b      	beq.n	800a12a <_printf_float+0x402>
 800a0f2:	9b08      	ldr	r3, [sp, #32]
 800a0f4:	f108 0201 	add.w	r2, r8, #1
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	47b8      	blx	r7
 800a100:	3001      	adds	r0, #1
 800a102:	d10e      	bne.n	800a122 <_printf_float+0x3fa>
 800a104:	e65e      	b.n	8009dc4 <_printf_float+0x9c>
 800a106:	2301      	movs	r3, #1
 800a108:	464a      	mov	r2, r9
 800a10a:	4631      	mov	r1, r6
 800a10c:	4628      	mov	r0, r5
 800a10e:	47b8      	blx	r7
 800a110:	3001      	adds	r0, #1
 800a112:	f43f ae57 	beq.w	8009dc4 <_printf_float+0x9c>
 800a116:	f108 0801 	add.w	r8, r8, #1
 800a11a:	9b08      	ldr	r3, [sp, #32]
 800a11c:	3b01      	subs	r3, #1
 800a11e:	4543      	cmp	r3, r8
 800a120:	dcf1      	bgt.n	800a106 <_printf_float+0x3de>
 800a122:	9b04      	ldr	r3, [sp, #16]
 800a124:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a128:	e6db      	b.n	8009ee2 <_printf_float+0x1ba>
 800a12a:	f04f 0800 	mov.w	r8, #0
 800a12e:	f104 091a 	add.w	r9, r4, #26
 800a132:	e7f2      	b.n	800a11a <_printf_float+0x3f2>
 800a134:	2301      	movs	r3, #1
 800a136:	4642      	mov	r2, r8
 800a138:	e7df      	b.n	800a0fa <_printf_float+0x3d2>
 800a13a:	2301      	movs	r3, #1
 800a13c:	464a      	mov	r2, r9
 800a13e:	4631      	mov	r1, r6
 800a140:	4628      	mov	r0, r5
 800a142:	47b8      	blx	r7
 800a144:	3001      	adds	r0, #1
 800a146:	f43f ae3d 	beq.w	8009dc4 <_printf_float+0x9c>
 800a14a:	f108 0801 	add.w	r8, r8, #1
 800a14e:	68e3      	ldr	r3, [r4, #12]
 800a150:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a152:	1a5b      	subs	r3, r3, r1
 800a154:	4543      	cmp	r3, r8
 800a156:	dcf0      	bgt.n	800a13a <_printf_float+0x412>
 800a158:	e6f7      	b.n	8009f4a <_printf_float+0x222>
 800a15a:	f04f 0800 	mov.w	r8, #0
 800a15e:	f104 0919 	add.w	r9, r4, #25
 800a162:	e7f4      	b.n	800a14e <_printf_float+0x426>

0800a164 <_printf_common>:
 800a164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a168:	4616      	mov	r6, r2
 800a16a:	4699      	mov	r9, r3
 800a16c:	688a      	ldr	r2, [r1, #8]
 800a16e:	690b      	ldr	r3, [r1, #16]
 800a170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a174:	4293      	cmp	r3, r2
 800a176:	bfb8      	it	lt
 800a178:	4613      	movlt	r3, r2
 800a17a:	6033      	str	r3, [r6, #0]
 800a17c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a180:	4607      	mov	r7, r0
 800a182:	460c      	mov	r4, r1
 800a184:	b10a      	cbz	r2, 800a18a <_printf_common+0x26>
 800a186:	3301      	adds	r3, #1
 800a188:	6033      	str	r3, [r6, #0]
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	0699      	lsls	r1, r3, #26
 800a18e:	bf42      	ittt	mi
 800a190:	6833      	ldrmi	r3, [r6, #0]
 800a192:	3302      	addmi	r3, #2
 800a194:	6033      	strmi	r3, [r6, #0]
 800a196:	6825      	ldr	r5, [r4, #0]
 800a198:	f015 0506 	ands.w	r5, r5, #6
 800a19c:	d106      	bne.n	800a1ac <_printf_common+0x48>
 800a19e:	f104 0a19 	add.w	sl, r4, #25
 800a1a2:	68e3      	ldr	r3, [r4, #12]
 800a1a4:	6832      	ldr	r2, [r6, #0]
 800a1a6:	1a9b      	subs	r3, r3, r2
 800a1a8:	42ab      	cmp	r3, r5
 800a1aa:	dc26      	bgt.n	800a1fa <_printf_common+0x96>
 800a1ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1b0:	1e13      	subs	r3, r2, #0
 800a1b2:	6822      	ldr	r2, [r4, #0]
 800a1b4:	bf18      	it	ne
 800a1b6:	2301      	movne	r3, #1
 800a1b8:	0692      	lsls	r2, r2, #26
 800a1ba:	d42b      	bmi.n	800a214 <_printf_common+0xb0>
 800a1bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1c0:	4649      	mov	r1, r9
 800a1c2:	4638      	mov	r0, r7
 800a1c4:	47c0      	blx	r8
 800a1c6:	3001      	adds	r0, #1
 800a1c8:	d01e      	beq.n	800a208 <_printf_common+0xa4>
 800a1ca:	6823      	ldr	r3, [r4, #0]
 800a1cc:	68e5      	ldr	r5, [r4, #12]
 800a1ce:	6832      	ldr	r2, [r6, #0]
 800a1d0:	f003 0306 	and.w	r3, r3, #6
 800a1d4:	2b04      	cmp	r3, #4
 800a1d6:	bf08      	it	eq
 800a1d8:	1aad      	subeq	r5, r5, r2
 800a1da:	68a3      	ldr	r3, [r4, #8]
 800a1dc:	6922      	ldr	r2, [r4, #16]
 800a1de:	bf0c      	ite	eq
 800a1e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1e4:	2500      	movne	r5, #0
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	bfc4      	itt	gt
 800a1ea:	1a9b      	subgt	r3, r3, r2
 800a1ec:	18ed      	addgt	r5, r5, r3
 800a1ee:	2600      	movs	r6, #0
 800a1f0:	341a      	adds	r4, #26
 800a1f2:	42b5      	cmp	r5, r6
 800a1f4:	d11a      	bne.n	800a22c <_printf_common+0xc8>
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	e008      	b.n	800a20c <_printf_common+0xa8>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	4652      	mov	r2, sl
 800a1fe:	4649      	mov	r1, r9
 800a200:	4638      	mov	r0, r7
 800a202:	47c0      	blx	r8
 800a204:	3001      	adds	r0, #1
 800a206:	d103      	bne.n	800a210 <_printf_common+0xac>
 800a208:	f04f 30ff 	mov.w	r0, #4294967295
 800a20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a210:	3501      	adds	r5, #1
 800a212:	e7c6      	b.n	800a1a2 <_printf_common+0x3e>
 800a214:	18e1      	adds	r1, r4, r3
 800a216:	1c5a      	adds	r2, r3, #1
 800a218:	2030      	movs	r0, #48	; 0x30
 800a21a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a21e:	4422      	add	r2, r4
 800a220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a228:	3302      	adds	r3, #2
 800a22a:	e7c7      	b.n	800a1bc <_printf_common+0x58>
 800a22c:	2301      	movs	r3, #1
 800a22e:	4622      	mov	r2, r4
 800a230:	4649      	mov	r1, r9
 800a232:	4638      	mov	r0, r7
 800a234:	47c0      	blx	r8
 800a236:	3001      	adds	r0, #1
 800a238:	d0e6      	beq.n	800a208 <_printf_common+0xa4>
 800a23a:	3601      	adds	r6, #1
 800a23c:	e7d9      	b.n	800a1f2 <_printf_common+0x8e>
	...

0800a240 <_printf_i>:
 800a240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a244:	460c      	mov	r4, r1
 800a246:	4691      	mov	r9, r2
 800a248:	7e27      	ldrb	r7, [r4, #24]
 800a24a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a24c:	2f78      	cmp	r7, #120	; 0x78
 800a24e:	4680      	mov	r8, r0
 800a250:	469a      	mov	sl, r3
 800a252:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a256:	d807      	bhi.n	800a268 <_printf_i+0x28>
 800a258:	2f62      	cmp	r7, #98	; 0x62
 800a25a:	d80a      	bhi.n	800a272 <_printf_i+0x32>
 800a25c:	2f00      	cmp	r7, #0
 800a25e:	f000 80d8 	beq.w	800a412 <_printf_i+0x1d2>
 800a262:	2f58      	cmp	r7, #88	; 0x58
 800a264:	f000 80a3 	beq.w	800a3ae <_printf_i+0x16e>
 800a268:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a26c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a270:	e03a      	b.n	800a2e8 <_printf_i+0xa8>
 800a272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a276:	2b15      	cmp	r3, #21
 800a278:	d8f6      	bhi.n	800a268 <_printf_i+0x28>
 800a27a:	a001      	add	r0, pc, #4	; (adr r0, 800a280 <_printf_i+0x40>)
 800a27c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a280:	0800a2d9 	.word	0x0800a2d9
 800a284:	0800a2ed 	.word	0x0800a2ed
 800a288:	0800a269 	.word	0x0800a269
 800a28c:	0800a269 	.word	0x0800a269
 800a290:	0800a269 	.word	0x0800a269
 800a294:	0800a269 	.word	0x0800a269
 800a298:	0800a2ed 	.word	0x0800a2ed
 800a29c:	0800a269 	.word	0x0800a269
 800a2a0:	0800a269 	.word	0x0800a269
 800a2a4:	0800a269 	.word	0x0800a269
 800a2a8:	0800a269 	.word	0x0800a269
 800a2ac:	0800a3f9 	.word	0x0800a3f9
 800a2b0:	0800a31d 	.word	0x0800a31d
 800a2b4:	0800a3db 	.word	0x0800a3db
 800a2b8:	0800a269 	.word	0x0800a269
 800a2bc:	0800a269 	.word	0x0800a269
 800a2c0:	0800a41b 	.word	0x0800a41b
 800a2c4:	0800a269 	.word	0x0800a269
 800a2c8:	0800a31d 	.word	0x0800a31d
 800a2cc:	0800a269 	.word	0x0800a269
 800a2d0:	0800a269 	.word	0x0800a269
 800a2d4:	0800a3e3 	.word	0x0800a3e3
 800a2d8:	680b      	ldr	r3, [r1, #0]
 800a2da:	1d1a      	adds	r2, r3, #4
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	600a      	str	r2, [r1, #0]
 800a2e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a2e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e0a3      	b.n	800a434 <_printf_i+0x1f4>
 800a2ec:	6825      	ldr	r5, [r4, #0]
 800a2ee:	6808      	ldr	r0, [r1, #0]
 800a2f0:	062e      	lsls	r6, r5, #24
 800a2f2:	f100 0304 	add.w	r3, r0, #4
 800a2f6:	d50a      	bpl.n	800a30e <_printf_i+0xce>
 800a2f8:	6805      	ldr	r5, [r0, #0]
 800a2fa:	600b      	str	r3, [r1, #0]
 800a2fc:	2d00      	cmp	r5, #0
 800a2fe:	da03      	bge.n	800a308 <_printf_i+0xc8>
 800a300:	232d      	movs	r3, #45	; 0x2d
 800a302:	426d      	negs	r5, r5
 800a304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a308:	485e      	ldr	r0, [pc, #376]	; (800a484 <_printf_i+0x244>)
 800a30a:	230a      	movs	r3, #10
 800a30c:	e019      	b.n	800a342 <_printf_i+0x102>
 800a30e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a312:	6805      	ldr	r5, [r0, #0]
 800a314:	600b      	str	r3, [r1, #0]
 800a316:	bf18      	it	ne
 800a318:	b22d      	sxthne	r5, r5
 800a31a:	e7ef      	b.n	800a2fc <_printf_i+0xbc>
 800a31c:	680b      	ldr	r3, [r1, #0]
 800a31e:	6825      	ldr	r5, [r4, #0]
 800a320:	1d18      	adds	r0, r3, #4
 800a322:	6008      	str	r0, [r1, #0]
 800a324:	0628      	lsls	r0, r5, #24
 800a326:	d501      	bpl.n	800a32c <_printf_i+0xec>
 800a328:	681d      	ldr	r5, [r3, #0]
 800a32a:	e002      	b.n	800a332 <_printf_i+0xf2>
 800a32c:	0669      	lsls	r1, r5, #25
 800a32e:	d5fb      	bpl.n	800a328 <_printf_i+0xe8>
 800a330:	881d      	ldrh	r5, [r3, #0]
 800a332:	4854      	ldr	r0, [pc, #336]	; (800a484 <_printf_i+0x244>)
 800a334:	2f6f      	cmp	r7, #111	; 0x6f
 800a336:	bf0c      	ite	eq
 800a338:	2308      	moveq	r3, #8
 800a33a:	230a      	movne	r3, #10
 800a33c:	2100      	movs	r1, #0
 800a33e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a342:	6866      	ldr	r6, [r4, #4]
 800a344:	60a6      	str	r6, [r4, #8]
 800a346:	2e00      	cmp	r6, #0
 800a348:	bfa2      	ittt	ge
 800a34a:	6821      	ldrge	r1, [r4, #0]
 800a34c:	f021 0104 	bicge.w	r1, r1, #4
 800a350:	6021      	strge	r1, [r4, #0]
 800a352:	b90d      	cbnz	r5, 800a358 <_printf_i+0x118>
 800a354:	2e00      	cmp	r6, #0
 800a356:	d04d      	beq.n	800a3f4 <_printf_i+0x1b4>
 800a358:	4616      	mov	r6, r2
 800a35a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a35e:	fb03 5711 	mls	r7, r3, r1, r5
 800a362:	5dc7      	ldrb	r7, [r0, r7]
 800a364:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a368:	462f      	mov	r7, r5
 800a36a:	42bb      	cmp	r3, r7
 800a36c:	460d      	mov	r5, r1
 800a36e:	d9f4      	bls.n	800a35a <_printf_i+0x11a>
 800a370:	2b08      	cmp	r3, #8
 800a372:	d10b      	bne.n	800a38c <_printf_i+0x14c>
 800a374:	6823      	ldr	r3, [r4, #0]
 800a376:	07df      	lsls	r7, r3, #31
 800a378:	d508      	bpl.n	800a38c <_printf_i+0x14c>
 800a37a:	6923      	ldr	r3, [r4, #16]
 800a37c:	6861      	ldr	r1, [r4, #4]
 800a37e:	4299      	cmp	r1, r3
 800a380:	bfde      	ittt	le
 800a382:	2330      	movle	r3, #48	; 0x30
 800a384:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a388:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a38c:	1b92      	subs	r2, r2, r6
 800a38e:	6122      	str	r2, [r4, #16]
 800a390:	f8cd a000 	str.w	sl, [sp]
 800a394:	464b      	mov	r3, r9
 800a396:	aa03      	add	r2, sp, #12
 800a398:	4621      	mov	r1, r4
 800a39a:	4640      	mov	r0, r8
 800a39c:	f7ff fee2 	bl	800a164 <_printf_common>
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	d14c      	bne.n	800a43e <_printf_i+0x1fe>
 800a3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a8:	b004      	add	sp, #16
 800a3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ae:	4835      	ldr	r0, [pc, #212]	; (800a484 <_printf_i+0x244>)
 800a3b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a3b4:	6823      	ldr	r3, [r4, #0]
 800a3b6:	680e      	ldr	r6, [r1, #0]
 800a3b8:	061f      	lsls	r7, r3, #24
 800a3ba:	f856 5b04 	ldr.w	r5, [r6], #4
 800a3be:	600e      	str	r6, [r1, #0]
 800a3c0:	d514      	bpl.n	800a3ec <_printf_i+0x1ac>
 800a3c2:	07d9      	lsls	r1, r3, #31
 800a3c4:	bf44      	itt	mi
 800a3c6:	f043 0320 	orrmi.w	r3, r3, #32
 800a3ca:	6023      	strmi	r3, [r4, #0]
 800a3cc:	b91d      	cbnz	r5, 800a3d6 <_printf_i+0x196>
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	f023 0320 	bic.w	r3, r3, #32
 800a3d4:	6023      	str	r3, [r4, #0]
 800a3d6:	2310      	movs	r3, #16
 800a3d8:	e7b0      	b.n	800a33c <_printf_i+0xfc>
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	f043 0320 	orr.w	r3, r3, #32
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	2378      	movs	r3, #120	; 0x78
 800a3e4:	4828      	ldr	r0, [pc, #160]	; (800a488 <_printf_i+0x248>)
 800a3e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3ea:	e7e3      	b.n	800a3b4 <_printf_i+0x174>
 800a3ec:	065e      	lsls	r6, r3, #25
 800a3ee:	bf48      	it	mi
 800a3f0:	b2ad      	uxthmi	r5, r5
 800a3f2:	e7e6      	b.n	800a3c2 <_printf_i+0x182>
 800a3f4:	4616      	mov	r6, r2
 800a3f6:	e7bb      	b.n	800a370 <_printf_i+0x130>
 800a3f8:	680b      	ldr	r3, [r1, #0]
 800a3fa:	6826      	ldr	r6, [r4, #0]
 800a3fc:	6960      	ldr	r0, [r4, #20]
 800a3fe:	1d1d      	adds	r5, r3, #4
 800a400:	600d      	str	r5, [r1, #0]
 800a402:	0635      	lsls	r5, r6, #24
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	d501      	bpl.n	800a40c <_printf_i+0x1cc>
 800a408:	6018      	str	r0, [r3, #0]
 800a40a:	e002      	b.n	800a412 <_printf_i+0x1d2>
 800a40c:	0671      	lsls	r1, r6, #25
 800a40e:	d5fb      	bpl.n	800a408 <_printf_i+0x1c8>
 800a410:	8018      	strh	r0, [r3, #0]
 800a412:	2300      	movs	r3, #0
 800a414:	6123      	str	r3, [r4, #16]
 800a416:	4616      	mov	r6, r2
 800a418:	e7ba      	b.n	800a390 <_printf_i+0x150>
 800a41a:	680b      	ldr	r3, [r1, #0]
 800a41c:	1d1a      	adds	r2, r3, #4
 800a41e:	600a      	str	r2, [r1, #0]
 800a420:	681e      	ldr	r6, [r3, #0]
 800a422:	6862      	ldr	r2, [r4, #4]
 800a424:	2100      	movs	r1, #0
 800a426:	4630      	mov	r0, r6
 800a428:	f7f5 ff12 	bl	8000250 <memchr>
 800a42c:	b108      	cbz	r0, 800a432 <_printf_i+0x1f2>
 800a42e:	1b80      	subs	r0, r0, r6
 800a430:	6060      	str	r0, [r4, #4]
 800a432:	6863      	ldr	r3, [r4, #4]
 800a434:	6123      	str	r3, [r4, #16]
 800a436:	2300      	movs	r3, #0
 800a438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a43c:	e7a8      	b.n	800a390 <_printf_i+0x150>
 800a43e:	6923      	ldr	r3, [r4, #16]
 800a440:	4632      	mov	r2, r6
 800a442:	4649      	mov	r1, r9
 800a444:	4640      	mov	r0, r8
 800a446:	47d0      	blx	sl
 800a448:	3001      	adds	r0, #1
 800a44a:	d0ab      	beq.n	800a3a4 <_printf_i+0x164>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	079b      	lsls	r3, r3, #30
 800a450:	d413      	bmi.n	800a47a <_printf_i+0x23a>
 800a452:	68e0      	ldr	r0, [r4, #12]
 800a454:	9b03      	ldr	r3, [sp, #12]
 800a456:	4298      	cmp	r0, r3
 800a458:	bfb8      	it	lt
 800a45a:	4618      	movlt	r0, r3
 800a45c:	e7a4      	b.n	800a3a8 <_printf_i+0x168>
 800a45e:	2301      	movs	r3, #1
 800a460:	4632      	mov	r2, r6
 800a462:	4649      	mov	r1, r9
 800a464:	4640      	mov	r0, r8
 800a466:	47d0      	blx	sl
 800a468:	3001      	adds	r0, #1
 800a46a:	d09b      	beq.n	800a3a4 <_printf_i+0x164>
 800a46c:	3501      	adds	r5, #1
 800a46e:	68e3      	ldr	r3, [r4, #12]
 800a470:	9903      	ldr	r1, [sp, #12]
 800a472:	1a5b      	subs	r3, r3, r1
 800a474:	42ab      	cmp	r3, r5
 800a476:	dcf2      	bgt.n	800a45e <_printf_i+0x21e>
 800a478:	e7eb      	b.n	800a452 <_printf_i+0x212>
 800a47a:	2500      	movs	r5, #0
 800a47c:	f104 0619 	add.w	r6, r4, #25
 800a480:	e7f5      	b.n	800a46e <_printf_i+0x22e>
 800a482:	bf00      	nop
 800a484:	0800e66a 	.word	0x0800e66a
 800a488:	0800e67b 	.word	0x0800e67b

0800a48c <_scanf_float>:
 800a48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a490:	b087      	sub	sp, #28
 800a492:	4617      	mov	r7, r2
 800a494:	9303      	str	r3, [sp, #12]
 800a496:	688b      	ldr	r3, [r1, #8]
 800a498:	1e5a      	subs	r2, r3, #1
 800a49a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a49e:	bf83      	ittte	hi
 800a4a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a4a4:	195b      	addhi	r3, r3, r5
 800a4a6:	9302      	strhi	r3, [sp, #8]
 800a4a8:	2300      	movls	r3, #0
 800a4aa:	bf86      	itte	hi
 800a4ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a4b0:	608b      	strhi	r3, [r1, #8]
 800a4b2:	9302      	strls	r3, [sp, #8]
 800a4b4:	680b      	ldr	r3, [r1, #0]
 800a4b6:	468b      	mov	fp, r1
 800a4b8:	2500      	movs	r5, #0
 800a4ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a4be:	f84b 3b1c 	str.w	r3, [fp], #28
 800a4c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a4c6:	4680      	mov	r8, r0
 800a4c8:	460c      	mov	r4, r1
 800a4ca:	465e      	mov	r6, fp
 800a4cc:	46aa      	mov	sl, r5
 800a4ce:	46a9      	mov	r9, r5
 800a4d0:	9501      	str	r5, [sp, #4]
 800a4d2:	68a2      	ldr	r2, [r4, #8]
 800a4d4:	b152      	cbz	r2, 800a4ec <_scanf_float+0x60>
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	2b4e      	cmp	r3, #78	; 0x4e
 800a4dc:	d864      	bhi.n	800a5a8 <_scanf_float+0x11c>
 800a4de:	2b40      	cmp	r3, #64	; 0x40
 800a4e0:	d83c      	bhi.n	800a55c <_scanf_float+0xd0>
 800a4e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a4e6:	b2c8      	uxtb	r0, r1
 800a4e8:	280e      	cmp	r0, #14
 800a4ea:	d93a      	bls.n	800a562 <_scanf_float+0xd6>
 800a4ec:	f1b9 0f00 	cmp.w	r9, #0
 800a4f0:	d003      	beq.n	800a4fa <_scanf_float+0x6e>
 800a4f2:	6823      	ldr	r3, [r4, #0]
 800a4f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4f8:	6023      	str	r3, [r4, #0]
 800a4fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4fe:	f1ba 0f01 	cmp.w	sl, #1
 800a502:	f200 8113 	bhi.w	800a72c <_scanf_float+0x2a0>
 800a506:	455e      	cmp	r6, fp
 800a508:	f200 8105 	bhi.w	800a716 <_scanf_float+0x28a>
 800a50c:	2501      	movs	r5, #1
 800a50e:	4628      	mov	r0, r5
 800a510:	b007      	add	sp, #28
 800a512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a516:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a51a:	2a0d      	cmp	r2, #13
 800a51c:	d8e6      	bhi.n	800a4ec <_scanf_float+0x60>
 800a51e:	a101      	add	r1, pc, #4	; (adr r1, 800a524 <_scanf_float+0x98>)
 800a520:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a524:	0800a663 	.word	0x0800a663
 800a528:	0800a4ed 	.word	0x0800a4ed
 800a52c:	0800a4ed 	.word	0x0800a4ed
 800a530:	0800a4ed 	.word	0x0800a4ed
 800a534:	0800a6c3 	.word	0x0800a6c3
 800a538:	0800a69b 	.word	0x0800a69b
 800a53c:	0800a4ed 	.word	0x0800a4ed
 800a540:	0800a4ed 	.word	0x0800a4ed
 800a544:	0800a671 	.word	0x0800a671
 800a548:	0800a4ed 	.word	0x0800a4ed
 800a54c:	0800a4ed 	.word	0x0800a4ed
 800a550:	0800a4ed 	.word	0x0800a4ed
 800a554:	0800a4ed 	.word	0x0800a4ed
 800a558:	0800a629 	.word	0x0800a629
 800a55c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a560:	e7db      	b.n	800a51a <_scanf_float+0x8e>
 800a562:	290e      	cmp	r1, #14
 800a564:	d8c2      	bhi.n	800a4ec <_scanf_float+0x60>
 800a566:	a001      	add	r0, pc, #4	; (adr r0, 800a56c <_scanf_float+0xe0>)
 800a568:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a56c:	0800a61b 	.word	0x0800a61b
 800a570:	0800a4ed 	.word	0x0800a4ed
 800a574:	0800a61b 	.word	0x0800a61b
 800a578:	0800a6af 	.word	0x0800a6af
 800a57c:	0800a4ed 	.word	0x0800a4ed
 800a580:	0800a5c9 	.word	0x0800a5c9
 800a584:	0800a605 	.word	0x0800a605
 800a588:	0800a605 	.word	0x0800a605
 800a58c:	0800a605 	.word	0x0800a605
 800a590:	0800a605 	.word	0x0800a605
 800a594:	0800a605 	.word	0x0800a605
 800a598:	0800a605 	.word	0x0800a605
 800a59c:	0800a605 	.word	0x0800a605
 800a5a0:	0800a605 	.word	0x0800a605
 800a5a4:	0800a605 	.word	0x0800a605
 800a5a8:	2b6e      	cmp	r3, #110	; 0x6e
 800a5aa:	d809      	bhi.n	800a5c0 <_scanf_float+0x134>
 800a5ac:	2b60      	cmp	r3, #96	; 0x60
 800a5ae:	d8b2      	bhi.n	800a516 <_scanf_float+0x8a>
 800a5b0:	2b54      	cmp	r3, #84	; 0x54
 800a5b2:	d077      	beq.n	800a6a4 <_scanf_float+0x218>
 800a5b4:	2b59      	cmp	r3, #89	; 0x59
 800a5b6:	d199      	bne.n	800a4ec <_scanf_float+0x60>
 800a5b8:	2d07      	cmp	r5, #7
 800a5ba:	d197      	bne.n	800a4ec <_scanf_float+0x60>
 800a5bc:	2508      	movs	r5, #8
 800a5be:	e029      	b.n	800a614 <_scanf_float+0x188>
 800a5c0:	2b74      	cmp	r3, #116	; 0x74
 800a5c2:	d06f      	beq.n	800a6a4 <_scanf_float+0x218>
 800a5c4:	2b79      	cmp	r3, #121	; 0x79
 800a5c6:	e7f6      	b.n	800a5b6 <_scanf_float+0x12a>
 800a5c8:	6821      	ldr	r1, [r4, #0]
 800a5ca:	05c8      	lsls	r0, r1, #23
 800a5cc:	d51a      	bpl.n	800a604 <_scanf_float+0x178>
 800a5ce:	9b02      	ldr	r3, [sp, #8]
 800a5d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a5d4:	6021      	str	r1, [r4, #0]
 800a5d6:	f109 0901 	add.w	r9, r9, #1
 800a5da:	b11b      	cbz	r3, 800a5e4 <_scanf_float+0x158>
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	3201      	adds	r2, #1
 800a5e0:	9302      	str	r3, [sp, #8]
 800a5e2:	60a2      	str	r2, [r4, #8]
 800a5e4:	68a3      	ldr	r3, [r4, #8]
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	60a3      	str	r3, [r4, #8]
 800a5ea:	6923      	ldr	r3, [r4, #16]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	6123      	str	r3, [r4, #16]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	607b      	str	r3, [r7, #4]
 800a5f8:	f340 8084 	ble.w	800a704 <_scanf_float+0x278>
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	3301      	adds	r3, #1
 800a600:	603b      	str	r3, [r7, #0]
 800a602:	e766      	b.n	800a4d2 <_scanf_float+0x46>
 800a604:	eb1a 0f05 	cmn.w	sl, r5
 800a608:	f47f af70 	bne.w	800a4ec <_scanf_float+0x60>
 800a60c:	6822      	ldr	r2, [r4, #0]
 800a60e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a612:	6022      	str	r2, [r4, #0]
 800a614:	f806 3b01 	strb.w	r3, [r6], #1
 800a618:	e7e4      	b.n	800a5e4 <_scanf_float+0x158>
 800a61a:	6822      	ldr	r2, [r4, #0]
 800a61c:	0610      	lsls	r0, r2, #24
 800a61e:	f57f af65 	bpl.w	800a4ec <_scanf_float+0x60>
 800a622:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a626:	e7f4      	b.n	800a612 <_scanf_float+0x186>
 800a628:	f1ba 0f00 	cmp.w	sl, #0
 800a62c:	d10e      	bne.n	800a64c <_scanf_float+0x1c0>
 800a62e:	f1b9 0f00 	cmp.w	r9, #0
 800a632:	d10e      	bne.n	800a652 <_scanf_float+0x1c6>
 800a634:	6822      	ldr	r2, [r4, #0]
 800a636:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a63a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a63e:	d108      	bne.n	800a652 <_scanf_float+0x1c6>
 800a640:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a644:	6022      	str	r2, [r4, #0]
 800a646:	f04f 0a01 	mov.w	sl, #1
 800a64a:	e7e3      	b.n	800a614 <_scanf_float+0x188>
 800a64c:	f1ba 0f02 	cmp.w	sl, #2
 800a650:	d055      	beq.n	800a6fe <_scanf_float+0x272>
 800a652:	2d01      	cmp	r5, #1
 800a654:	d002      	beq.n	800a65c <_scanf_float+0x1d0>
 800a656:	2d04      	cmp	r5, #4
 800a658:	f47f af48 	bne.w	800a4ec <_scanf_float+0x60>
 800a65c:	3501      	adds	r5, #1
 800a65e:	b2ed      	uxtb	r5, r5
 800a660:	e7d8      	b.n	800a614 <_scanf_float+0x188>
 800a662:	f1ba 0f01 	cmp.w	sl, #1
 800a666:	f47f af41 	bne.w	800a4ec <_scanf_float+0x60>
 800a66a:	f04f 0a02 	mov.w	sl, #2
 800a66e:	e7d1      	b.n	800a614 <_scanf_float+0x188>
 800a670:	b97d      	cbnz	r5, 800a692 <_scanf_float+0x206>
 800a672:	f1b9 0f00 	cmp.w	r9, #0
 800a676:	f47f af3c 	bne.w	800a4f2 <_scanf_float+0x66>
 800a67a:	6822      	ldr	r2, [r4, #0]
 800a67c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a680:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a684:	f47f af39 	bne.w	800a4fa <_scanf_float+0x6e>
 800a688:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a68c:	6022      	str	r2, [r4, #0]
 800a68e:	2501      	movs	r5, #1
 800a690:	e7c0      	b.n	800a614 <_scanf_float+0x188>
 800a692:	2d03      	cmp	r5, #3
 800a694:	d0e2      	beq.n	800a65c <_scanf_float+0x1d0>
 800a696:	2d05      	cmp	r5, #5
 800a698:	e7de      	b.n	800a658 <_scanf_float+0x1cc>
 800a69a:	2d02      	cmp	r5, #2
 800a69c:	f47f af26 	bne.w	800a4ec <_scanf_float+0x60>
 800a6a0:	2503      	movs	r5, #3
 800a6a2:	e7b7      	b.n	800a614 <_scanf_float+0x188>
 800a6a4:	2d06      	cmp	r5, #6
 800a6a6:	f47f af21 	bne.w	800a4ec <_scanf_float+0x60>
 800a6aa:	2507      	movs	r5, #7
 800a6ac:	e7b2      	b.n	800a614 <_scanf_float+0x188>
 800a6ae:	6822      	ldr	r2, [r4, #0]
 800a6b0:	0591      	lsls	r1, r2, #22
 800a6b2:	f57f af1b 	bpl.w	800a4ec <_scanf_float+0x60>
 800a6b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a6ba:	6022      	str	r2, [r4, #0]
 800a6bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a6c0:	e7a8      	b.n	800a614 <_scanf_float+0x188>
 800a6c2:	6822      	ldr	r2, [r4, #0]
 800a6c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a6c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a6cc:	d006      	beq.n	800a6dc <_scanf_float+0x250>
 800a6ce:	0550      	lsls	r0, r2, #21
 800a6d0:	f57f af0c 	bpl.w	800a4ec <_scanf_float+0x60>
 800a6d4:	f1b9 0f00 	cmp.w	r9, #0
 800a6d8:	f43f af0f 	beq.w	800a4fa <_scanf_float+0x6e>
 800a6dc:	0591      	lsls	r1, r2, #22
 800a6de:	bf58      	it	pl
 800a6e0:	9901      	ldrpl	r1, [sp, #4]
 800a6e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a6e6:	bf58      	it	pl
 800a6e8:	eba9 0101 	subpl.w	r1, r9, r1
 800a6ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a6f0:	bf58      	it	pl
 800a6f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a6f6:	6022      	str	r2, [r4, #0]
 800a6f8:	f04f 0900 	mov.w	r9, #0
 800a6fc:	e78a      	b.n	800a614 <_scanf_float+0x188>
 800a6fe:	f04f 0a03 	mov.w	sl, #3
 800a702:	e787      	b.n	800a614 <_scanf_float+0x188>
 800a704:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a708:	4639      	mov	r1, r7
 800a70a:	4640      	mov	r0, r8
 800a70c:	4798      	blx	r3
 800a70e:	2800      	cmp	r0, #0
 800a710:	f43f aedf 	beq.w	800a4d2 <_scanf_float+0x46>
 800a714:	e6ea      	b.n	800a4ec <_scanf_float+0x60>
 800a716:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a71a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a71e:	463a      	mov	r2, r7
 800a720:	4640      	mov	r0, r8
 800a722:	4798      	blx	r3
 800a724:	6923      	ldr	r3, [r4, #16]
 800a726:	3b01      	subs	r3, #1
 800a728:	6123      	str	r3, [r4, #16]
 800a72a:	e6ec      	b.n	800a506 <_scanf_float+0x7a>
 800a72c:	1e6b      	subs	r3, r5, #1
 800a72e:	2b06      	cmp	r3, #6
 800a730:	d825      	bhi.n	800a77e <_scanf_float+0x2f2>
 800a732:	2d02      	cmp	r5, #2
 800a734:	d836      	bhi.n	800a7a4 <_scanf_float+0x318>
 800a736:	455e      	cmp	r6, fp
 800a738:	f67f aee8 	bls.w	800a50c <_scanf_float+0x80>
 800a73c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a740:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a744:	463a      	mov	r2, r7
 800a746:	4640      	mov	r0, r8
 800a748:	4798      	blx	r3
 800a74a:	6923      	ldr	r3, [r4, #16]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	6123      	str	r3, [r4, #16]
 800a750:	e7f1      	b.n	800a736 <_scanf_float+0x2aa>
 800a752:	9802      	ldr	r0, [sp, #8]
 800a754:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a758:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a75c:	9002      	str	r0, [sp, #8]
 800a75e:	463a      	mov	r2, r7
 800a760:	4640      	mov	r0, r8
 800a762:	4798      	blx	r3
 800a764:	6923      	ldr	r3, [r4, #16]
 800a766:	3b01      	subs	r3, #1
 800a768:	6123      	str	r3, [r4, #16]
 800a76a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a76e:	fa5f fa8a 	uxtb.w	sl, sl
 800a772:	f1ba 0f02 	cmp.w	sl, #2
 800a776:	d1ec      	bne.n	800a752 <_scanf_float+0x2c6>
 800a778:	3d03      	subs	r5, #3
 800a77a:	b2ed      	uxtb	r5, r5
 800a77c:	1b76      	subs	r6, r6, r5
 800a77e:	6823      	ldr	r3, [r4, #0]
 800a780:	05da      	lsls	r2, r3, #23
 800a782:	d52f      	bpl.n	800a7e4 <_scanf_float+0x358>
 800a784:	055b      	lsls	r3, r3, #21
 800a786:	d510      	bpl.n	800a7aa <_scanf_float+0x31e>
 800a788:	455e      	cmp	r6, fp
 800a78a:	f67f aebf 	bls.w	800a50c <_scanf_float+0x80>
 800a78e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a792:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a796:	463a      	mov	r2, r7
 800a798:	4640      	mov	r0, r8
 800a79a:	4798      	blx	r3
 800a79c:	6923      	ldr	r3, [r4, #16]
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	6123      	str	r3, [r4, #16]
 800a7a2:	e7f1      	b.n	800a788 <_scanf_float+0x2fc>
 800a7a4:	46aa      	mov	sl, r5
 800a7a6:	9602      	str	r6, [sp, #8]
 800a7a8:	e7df      	b.n	800a76a <_scanf_float+0x2de>
 800a7aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a7ae:	6923      	ldr	r3, [r4, #16]
 800a7b0:	2965      	cmp	r1, #101	; 0x65
 800a7b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7b6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a7ba:	6123      	str	r3, [r4, #16]
 800a7bc:	d00c      	beq.n	800a7d8 <_scanf_float+0x34c>
 800a7be:	2945      	cmp	r1, #69	; 0x45
 800a7c0:	d00a      	beq.n	800a7d8 <_scanf_float+0x34c>
 800a7c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a7c6:	463a      	mov	r2, r7
 800a7c8:	4640      	mov	r0, r8
 800a7ca:	4798      	blx	r3
 800a7cc:	6923      	ldr	r3, [r4, #16]
 800a7ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	1eb5      	subs	r5, r6, #2
 800a7d6:	6123      	str	r3, [r4, #16]
 800a7d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a7dc:	463a      	mov	r2, r7
 800a7de:	4640      	mov	r0, r8
 800a7e0:	4798      	blx	r3
 800a7e2:	462e      	mov	r6, r5
 800a7e4:	6825      	ldr	r5, [r4, #0]
 800a7e6:	f015 0510 	ands.w	r5, r5, #16
 800a7ea:	d14d      	bne.n	800a888 <_scanf_float+0x3fc>
 800a7ec:	7035      	strb	r5, [r6, #0]
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a7f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7f8:	d11a      	bne.n	800a830 <_scanf_float+0x3a4>
 800a7fa:	9b01      	ldr	r3, [sp, #4]
 800a7fc:	454b      	cmp	r3, r9
 800a7fe:	eba3 0209 	sub.w	r2, r3, r9
 800a802:	d122      	bne.n	800a84a <_scanf_float+0x3be>
 800a804:	2200      	movs	r2, #0
 800a806:	4659      	mov	r1, fp
 800a808:	4640      	mov	r0, r8
 800a80a:	f000 ffbb 	bl	800b784 <_strtod_r>
 800a80e:	9b03      	ldr	r3, [sp, #12]
 800a810:	6821      	ldr	r1, [r4, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f011 0f02 	tst.w	r1, #2
 800a818:	f103 0204 	add.w	r2, r3, #4
 800a81c:	d020      	beq.n	800a860 <_scanf_float+0x3d4>
 800a81e:	9903      	ldr	r1, [sp, #12]
 800a820:	600a      	str	r2, [r1, #0]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	ed83 0b00 	vstr	d0, [r3]
 800a828:	68e3      	ldr	r3, [r4, #12]
 800a82a:	3301      	adds	r3, #1
 800a82c:	60e3      	str	r3, [r4, #12]
 800a82e:	e66e      	b.n	800a50e <_scanf_float+0x82>
 800a830:	9b04      	ldr	r3, [sp, #16]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d0e6      	beq.n	800a804 <_scanf_float+0x378>
 800a836:	9905      	ldr	r1, [sp, #20]
 800a838:	230a      	movs	r3, #10
 800a83a:	462a      	mov	r2, r5
 800a83c:	3101      	adds	r1, #1
 800a83e:	4640      	mov	r0, r8
 800a840:	f001 f82a 	bl	800b898 <_strtol_r>
 800a844:	9b04      	ldr	r3, [sp, #16]
 800a846:	9e05      	ldr	r6, [sp, #20]
 800a848:	1ac2      	subs	r2, r0, r3
 800a84a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a84e:	429e      	cmp	r6, r3
 800a850:	bf28      	it	cs
 800a852:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a856:	490d      	ldr	r1, [pc, #52]	; (800a88c <_scanf_float+0x400>)
 800a858:	4630      	mov	r0, r6
 800a85a:	f000 f93f 	bl	800aadc <siprintf>
 800a85e:	e7d1      	b.n	800a804 <_scanf_float+0x378>
 800a860:	f011 0f04 	tst.w	r1, #4
 800a864:	9903      	ldr	r1, [sp, #12]
 800a866:	600a      	str	r2, [r1, #0]
 800a868:	d1db      	bne.n	800a822 <_scanf_float+0x396>
 800a86a:	eeb4 0b40 	vcmp.f64	d0, d0
 800a86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a872:	681e      	ldr	r6, [r3, #0]
 800a874:	d705      	bvc.n	800a882 <_scanf_float+0x3f6>
 800a876:	4806      	ldr	r0, [pc, #24]	; (800a890 <_scanf_float+0x404>)
 800a878:	f000 f92a 	bl	800aad0 <nanf>
 800a87c:	ed86 0a00 	vstr	s0, [r6]
 800a880:	e7d2      	b.n	800a828 <_scanf_float+0x39c>
 800a882:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a886:	e7f9      	b.n	800a87c <_scanf_float+0x3f0>
 800a888:	2500      	movs	r5, #0
 800a88a:	e640      	b.n	800a50e <_scanf_float+0x82>
 800a88c:	0800e68c 	.word	0x0800e68c
 800a890:	0800e9a8 	.word	0x0800e9a8

0800a894 <iprintf>:
 800a894:	b40f      	push	{r0, r1, r2, r3}
 800a896:	4b0a      	ldr	r3, [pc, #40]	; (800a8c0 <iprintf+0x2c>)
 800a898:	b513      	push	{r0, r1, r4, lr}
 800a89a:	681c      	ldr	r4, [r3, #0]
 800a89c:	b124      	cbz	r4, 800a8a8 <iprintf+0x14>
 800a89e:	69a3      	ldr	r3, [r4, #24]
 800a8a0:	b913      	cbnz	r3, 800a8a8 <iprintf+0x14>
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f7ff f820 	bl	80098e8 <__sinit>
 800a8a8:	ab05      	add	r3, sp, #20
 800a8aa:	9a04      	ldr	r2, [sp, #16]
 800a8ac:	68a1      	ldr	r1, [r4, #8]
 800a8ae:	9301      	str	r3, [sp, #4]
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f003 f9fd 	bl	800dcb0 <_vfiprintf_r>
 800a8b6:	b002      	add	sp, #8
 800a8b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8bc:	b004      	add	sp, #16
 800a8be:	4770      	bx	lr
 800a8c0:	20000070 	.word	0x20000070

0800a8c4 <putchar>:
 800a8c4:	4b09      	ldr	r3, [pc, #36]	; (800a8ec <putchar+0x28>)
 800a8c6:	b513      	push	{r0, r1, r4, lr}
 800a8c8:	681c      	ldr	r4, [r3, #0]
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	b134      	cbz	r4, 800a8dc <putchar+0x18>
 800a8ce:	69a3      	ldr	r3, [r4, #24]
 800a8d0:	b923      	cbnz	r3, 800a8dc <putchar+0x18>
 800a8d2:	9001      	str	r0, [sp, #4]
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f7ff f807 	bl	80098e8 <__sinit>
 800a8da:	9901      	ldr	r1, [sp, #4]
 800a8dc:	68a2      	ldr	r2, [r4, #8]
 800a8de:	4620      	mov	r0, r4
 800a8e0:	b002      	add	sp, #8
 800a8e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8e6:	f003 bb13 	b.w	800df10 <_putc_r>
 800a8ea:	bf00      	nop
 800a8ec:	20000070 	.word	0x20000070

0800a8f0 <_puts_r>:
 800a8f0:	b570      	push	{r4, r5, r6, lr}
 800a8f2:	460e      	mov	r6, r1
 800a8f4:	4605      	mov	r5, r0
 800a8f6:	b118      	cbz	r0, 800a900 <_puts_r+0x10>
 800a8f8:	6983      	ldr	r3, [r0, #24]
 800a8fa:	b90b      	cbnz	r3, 800a900 <_puts_r+0x10>
 800a8fc:	f7fe fff4 	bl	80098e8 <__sinit>
 800a900:	69ab      	ldr	r3, [r5, #24]
 800a902:	68ac      	ldr	r4, [r5, #8]
 800a904:	b913      	cbnz	r3, 800a90c <_puts_r+0x1c>
 800a906:	4628      	mov	r0, r5
 800a908:	f7fe ffee 	bl	80098e8 <__sinit>
 800a90c:	4b2c      	ldr	r3, [pc, #176]	; (800a9c0 <_puts_r+0xd0>)
 800a90e:	429c      	cmp	r4, r3
 800a910:	d120      	bne.n	800a954 <_puts_r+0x64>
 800a912:	686c      	ldr	r4, [r5, #4]
 800a914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a916:	07db      	lsls	r3, r3, #31
 800a918:	d405      	bmi.n	800a926 <_puts_r+0x36>
 800a91a:	89a3      	ldrh	r3, [r4, #12]
 800a91c:	0598      	lsls	r0, r3, #22
 800a91e:	d402      	bmi.n	800a926 <_puts_r+0x36>
 800a920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a922:	f7ff f8a4 	bl	8009a6e <__retarget_lock_acquire_recursive>
 800a926:	89a3      	ldrh	r3, [r4, #12]
 800a928:	0719      	lsls	r1, r3, #28
 800a92a:	d51d      	bpl.n	800a968 <_puts_r+0x78>
 800a92c:	6923      	ldr	r3, [r4, #16]
 800a92e:	b1db      	cbz	r3, 800a968 <_puts_r+0x78>
 800a930:	3e01      	subs	r6, #1
 800a932:	68a3      	ldr	r3, [r4, #8]
 800a934:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a938:	3b01      	subs	r3, #1
 800a93a:	60a3      	str	r3, [r4, #8]
 800a93c:	bb39      	cbnz	r1, 800a98e <_puts_r+0x9e>
 800a93e:	2b00      	cmp	r3, #0
 800a940:	da38      	bge.n	800a9b4 <_puts_r+0xc4>
 800a942:	4622      	mov	r2, r4
 800a944:	210a      	movs	r1, #10
 800a946:	4628      	mov	r0, r5
 800a948:	f000 ffa8 	bl	800b89c <__swbuf_r>
 800a94c:	3001      	adds	r0, #1
 800a94e:	d011      	beq.n	800a974 <_puts_r+0x84>
 800a950:	250a      	movs	r5, #10
 800a952:	e011      	b.n	800a978 <_puts_r+0x88>
 800a954:	4b1b      	ldr	r3, [pc, #108]	; (800a9c4 <_puts_r+0xd4>)
 800a956:	429c      	cmp	r4, r3
 800a958:	d101      	bne.n	800a95e <_puts_r+0x6e>
 800a95a:	68ac      	ldr	r4, [r5, #8]
 800a95c:	e7da      	b.n	800a914 <_puts_r+0x24>
 800a95e:	4b1a      	ldr	r3, [pc, #104]	; (800a9c8 <_puts_r+0xd8>)
 800a960:	429c      	cmp	r4, r3
 800a962:	bf08      	it	eq
 800a964:	68ec      	ldreq	r4, [r5, #12]
 800a966:	e7d5      	b.n	800a914 <_puts_r+0x24>
 800a968:	4621      	mov	r1, r4
 800a96a:	4628      	mov	r0, r5
 800a96c:	f000 fffa 	bl	800b964 <__swsetup_r>
 800a970:	2800      	cmp	r0, #0
 800a972:	d0dd      	beq.n	800a930 <_puts_r+0x40>
 800a974:	f04f 35ff 	mov.w	r5, #4294967295
 800a978:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a97a:	07da      	lsls	r2, r3, #31
 800a97c:	d405      	bmi.n	800a98a <_puts_r+0x9a>
 800a97e:	89a3      	ldrh	r3, [r4, #12]
 800a980:	059b      	lsls	r3, r3, #22
 800a982:	d402      	bmi.n	800a98a <_puts_r+0x9a>
 800a984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a986:	f7ff f873 	bl	8009a70 <__retarget_lock_release_recursive>
 800a98a:	4628      	mov	r0, r5
 800a98c:	bd70      	pop	{r4, r5, r6, pc}
 800a98e:	2b00      	cmp	r3, #0
 800a990:	da04      	bge.n	800a99c <_puts_r+0xac>
 800a992:	69a2      	ldr	r2, [r4, #24]
 800a994:	429a      	cmp	r2, r3
 800a996:	dc06      	bgt.n	800a9a6 <_puts_r+0xb6>
 800a998:	290a      	cmp	r1, #10
 800a99a:	d004      	beq.n	800a9a6 <_puts_r+0xb6>
 800a99c:	6823      	ldr	r3, [r4, #0]
 800a99e:	1c5a      	adds	r2, r3, #1
 800a9a0:	6022      	str	r2, [r4, #0]
 800a9a2:	7019      	strb	r1, [r3, #0]
 800a9a4:	e7c5      	b.n	800a932 <_puts_r+0x42>
 800a9a6:	4622      	mov	r2, r4
 800a9a8:	4628      	mov	r0, r5
 800a9aa:	f000 ff77 	bl	800b89c <__swbuf_r>
 800a9ae:	3001      	adds	r0, #1
 800a9b0:	d1bf      	bne.n	800a932 <_puts_r+0x42>
 800a9b2:	e7df      	b.n	800a974 <_puts_r+0x84>
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	250a      	movs	r5, #10
 800a9b8:	1c5a      	adds	r2, r3, #1
 800a9ba:	6022      	str	r2, [r4, #0]
 800a9bc:	701d      	strb	r5, [r3, #0]
 800a9be:	e7db      	b.n	800a978 <_puts_r+0x88>
 800a9c0:	0800e614 	.word	0x0800e614
 800a9c4:	0800e634 	.word	0x0800e634
 800a9c8:	0800e5f4 	.word	0x0800e5f4

0800a9cc <puts>:
 800a9cc:	4b02      	ldr	r3, [pc, #8]	; (800a9d8 <puts+0xc>)
 800a9ce:	4601      	mov	r1, r0
 800a9d0:	6818      	ldr	r0, [r3, #0]
 800a9d2:	f7ff bf8d 	b.w	800a8f0 <_puts_r>
 800a9d6:	bf00      	nop
 800a9d8:	20000070 	.word	0x20000070

0800a9dc <cleanup_glue>:
 800a9dc:	b538      	push	{r3, r4, r5, lr}
 800a9de:	460c      	mov	r4, r1
 800a9e0:	6809      	ldr	r1, [r1, #0]
 800a9e2:	4605      	mov	r5, r0
 800a9e4:	b109      	cbz	r1, 800a9ea <cleanup_glue+0xe>
 800a9e6:	f7ff fff9 	bl	800a9dc <cleanup_glue>
 800a9ea:	4621      	mov	r1, r4
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9f2:	f7ff b85d 	b.w	8009ab0 <_free_r>
	...

0800a9f8 <_reclaim_reent>:
 800a9f8:	4b2c      	ldr	r3, [pc, #176]	; (800aaac <_reclaim_reent+0xb4>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4283      	cmp	r3, r0
 800a9fe:	b570      	push	{r4, r5, r6, lr}
 800aa00:	4604      	mov	r4, r0
 800aa02:	d051      	beq.n	800aaa8 <_reclaim_reent+0xb0>
 800aa04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aa06:	b143      	cbz	r3, 800aa1a <_reclaim_reent+0x22>
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d14a      	bne.n	800aaa4 <_reclaim_reent+0xac>
 800aa0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa10:	6819      	ldr	r1, [r3, #0]
 800aa12:	b111      	cbz	r1, 800aa1a <_reclaim_reent+0x22>
 800aa14:	4620      	mov	r0, r4
 800aa16:	f7ff f84b 	bl	8009ab0 <_free_r>
 800aa1a:	6961      	ldr	r1, [r4, #20]
 800aa1c:	b111      	cbz	r1, 800aa24 <_reclaim_reent+0x2c>
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f7ff f846 	bl	8009ab0 <_free_r>
 800aa24:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aa26:	b111      	cbz	r1, 800aa2e <_reclaim_reent+0x36>
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f7ff f841 	bl	8009ab0 <_free_r>
 800aa2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aa30:	b111      	cbz	r1, 800aa38 <_reclaim_reent+0x40>
 800aa32:	4620      	mov	r0, r4
 800aa34:	f7ff f83c 	bl	8009ab0 <_free_r>
 800aa38:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800aa3a:	b111      	cbz	r1, 800aa42 <_reclaim_reent+0x4a>
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f7ff f837 	bl	8009ab0 <_free_r>
 800aa42:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800aa44:	b111      	cbz	r1, 800aa4c <_reclaim_reent+0x54>
 800aa46:	4620      	mov	r0, r4
 800aa48:	f7ff f832 	bl	8009ab0 <_free_r>
 800aa4c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800aa4e:	b111      	cbz	r1, 800aa56 <_reclaim_reent+0x5e>
 800aa50:	4620      	mov	r0, r4
 800aa52:	f7ff f82d 	bl	8009ab0 <_free_r>
 800aa56:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800aa58:	b111      	cbz	r1, 800aa60 <_reclaim_reent+0x68>
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	f7ff f828 	bl	8009ab0 <_free_r>
 800aa60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa62:	b111      	cbz	r1, 800aa6a <_reclaim_reent+0x72>
 800aa64:	4620      	mov	r0, r4
 800aa66:	f7ff f823 	bl	8009ab0 <_free_r>
 800aa6a:	69a3      	ldr	r3, [r4, #24]
 800aa6c:	b1e3      	cbz	r3, 800aaa8 <_reclaim_reent+0xb0>
 800aa6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aa70:	4620      	mov	r0, r4
 800aa72:	4798      	blx	r3
 800aa74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aa76:	b1b9      	cbz	r1, 800aaa8 <_reclaim_reent+0xb0>
 800aa78:	4620      	mov	r0, r4
 800aa7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa7e:	f7ff bfad 	b.w	800a9dc <cleanup_glue>
 800aa82:	5949      	ldr	r1, [r1, r5]
 800aa84:	b941      	cbnz	r1, 800aa98 <_reclaim_reent+0xa0>
 800aa86:	3504      	adds	r5, #4
 800aa88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa8a:	2d80      	cmp	r5, #128	; 0x80
 800aa8c:	68d9      	ldr	r1, [r3, #12]
 800aa8e:	d1f8      	bne.n	800aa82 <_reclaim_reent+0x8a>
 800aa90:	4620      	mov	r0, r4
 800aa92:	f7ff f80d 	bl	8009ab0 <_free_r>
 800aa96:	e7ba      	b.n	800aa0e <_reclaim_reent+0x16>
 800aa98:	680e      	ldr	r6, [r1, #0]
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f7ff f808 	bl	8009ab0 <_free_r>
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	e7ef      	b.n	800aa84 <_reclaim_reent+0x8c>
 800aaa4:	2500      	movs	r5, #0
 800aaa6:	e7ef      	b.n	800aa88 <_reclaim_reent+0x90>
 800aaa8:	bd70      	pop	{r4, r5, r6, pc}
 800aaaa:	bf00      	nop
 800aaac:	20000070 	.word	0x20000070

0800aab0 <_sbrk_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	4d06      	ldr	r5, [pc, #24]	; (800aacc <_sbrk_r+0x1c>)
 800aab4:	2300      	movs	r3, #0
 800aab6:	4604      	mov	r4, r0
 800aab8:	4608      	mov	r0, r1
 800aaba:	602b      	str	r3, [r5, #0]
 800aabc:	f7f7 f988 	bl	8001dd0 <_sbrk>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d102      	bne.n	800aaca <_sbrk_r+0x1a>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	b103      	cbz	r3, 800aaca <_sbrk_r+0x1a>
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	20004ecc 	.word	0x20004ecc

0800aad0 <nanf>:
 800aad0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aad8 <nanf+0x8>
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop
 800aad8:	7fc00000 	.word	0x7fc00000

0800aadc <siprintf>:
 800aadc:	b40e      	push	{r1, r2, r3}
 800aade:	b500      	push	{lr}
 800aae0:	b09c      	sub	sp, #112	; 0x70
 800aae2:	ab1d      	add	r3, sp, #116	; 0x74
 800aae4:	9002      	str	r0, [sp, #8]
 800aae6:	9006      	str	r0, [sp, #24]
 800aae8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aaec:	4809      	ldr	r0, [pc, #36]	; (800ab14 <siprintf+0x38>)
 800aaee:	9107      	str	r1, [sp, #28]
 800aaf0:	9104      	str	r1, [sp, #16]
 800aaf2:	4909      	ldr	r1, [pc, #36]	; (800ab18 <siprintf+0x3c>)
 800aaf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaf8:	9105      	str	r1, [sp, #20]
 800aafa:	6800      	ldr	r0, [r0, #0]
 800aafc:	9301      	str	r3, [sp, #4]
 800aafe:	a902      	add	r1, sp, #8
 800ab00:	f002 ffac 	bl	800da5c <_svfiprintf_r>
 800ab04:	9b02      	ldr	r3, [sp, #8]
 800ab06:	2200      	movs	r2, #0
 800ab08:	701a      	strb	r2, [r3, #0]
 800ab0a:	b01c      	add	sp, #112	; 0x70
 800ab0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab10:	b003      	add	sp, #12
 800ab12:	4770      	bx	lr
 800ab14:	20000070 	.word	0x20000070
 800ab18:	ffff0208 	.word	0xffff0208

0800ab1c <__sread>:
 800ab1c:	b510      	push	{r4, lr}
 800ab1e:	460c      	mov	r4, r1
 800ab20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab24:	f003 fa3c 	bl	800dfa0 <_read_r>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	bfab      	itete	ge
 800ab2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab2e:	89a3      	ldrhlt	r3, [r4, #12]
 800ab30:	181b      	addge	r3, r3, r0
 800ab32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab36:	bfac      	ite	ge
 800ab38:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab3a:	81a3      	strhlt	r3, [r4, #12]
 800ab3c:	bd10      	pop	{r4, pc}

0800ab3e <__swrite>:
 800ab3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab42:	461f      	mov	r7, r3
 800ab44:	898b      	ldrh	r3, [r1, #12]
 800ab46:	05db      	lsls	r3, r3, #23
 800ab48:	4605      	mov	r5, r0
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	4616      	mov	r6, r2
 800ab4e:	d505      	bpl.n	800ab5c <__swrite+0x1e>
 800ab50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab54:	2302      	movs	r3, #2
 800ab56:	2200      	movs	r2, #0
 800ab58:	f002 f9c6 	bl	800cee8 <_lseek_r>
 800ab5c:	89a3      	ldrh	r3, [r4, #12]
 800ab5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab66:	81a3      	strh	r3, [r4, #12]
 800ab68:	4632      	mov	r2, r6
 800ab6a:	463b      	mov	r3, r7
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab72:	f000 bee5 	b.w	800b940 <_write_r>

0800ab76 <__sseek>:
 800ab76:	b510      	push	{r4, lr}
 800ab78:	460c      	mov	r4, r1
 800ab7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab7e:	f002 f9b3 	bl	800cee8 <_lseek_r>
 800ab82:	1c43      	adds	r3, r0, #1
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	bf15      	itete	ne
 800ab88:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab92:	81a3      	strheq	r3, [r4, #12]
 800ab94:	bf18      	it	ne
 800ab96:	81a3      	strhne	r3, [r4, #12]
 800ab98:	bd10      	pop	{r4, pc}

0800ab9a <__sclose>:
 800ab9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab9e:	f000 bf4f 	b.w	800ba40 <_close_r>

0800aba2 <sulp>:
 800aba2:	b570      	push	{r4, r5, r6, lr}
 800aba4:	4604      	mov	r4, r0
 800aba6:	460d      	mov	r5, r1
 800aba8:	4616      	mov	r6, r2
 800abaa:	ec45 4b10 	vmov	d0, r4, r5
 800abae:	f002 fd9b 	bl	800d6e8 <__ulp>
 800abb2:	b17e      	cbz	r6, 800abd4 <sulp+0x32>
 800abb4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800abb8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	dd09      	ble.n	800abd4 <sulp+0x32>
 800abc0:	051b      	lsls	r3, r3, #20
 800abc2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800abc6:	2000      	movs	r0, #0
 800abc8:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800abcc:	ec41 0b17 	vmov	d7, r0, r1
 800abd0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800abd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800abd8 <_strtod_l>:
 800abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	ed2d 8b0c 	vpush	{d8-d13}
 800abe0:	b09d      	sub	sp, #116	; 0x74
 800abe2:	461f      	mov	r7, r3
 800abe4:	2300      	movs	r3, #0
 800abe6:	9318      	str	r3, [sp, #96]	; 0x60
 800abe8:	4ba6      	ldr	r3, [pc, #664]	; (800ae84 <_strtod_l+0x2ac>)
 800abea:	9213      	str	r2, [sp, #76]	; 0x4c
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	9308      	str	r3, [sp, #32]
 800abf0:	4604      	mov	r4, r0
 800abf2:	4618      	mov	r0, r3
 800abf4:	468a      	mov	sl, r1
 800abf6:	f7f5 fb23 	bl	8000240 <strlen>
 800abfa:	f04f 0800 	mov.w	r8, #0
 800abfe:	4605      	mov	r5, r0
 800ac00:	f04f 0900 	mov.w	r9, #0
 800ac04:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800ac08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac0a:	781a      	ldrb	r2, [r3, #0]
 800ac0c:	2a2b      	cmp	r2, #43	; 0x2b
 800ac0e:	d04d      	beq.n	800acac <_strtod_l+0xd4>
 800ac10:	d83a      	bhi.n	800ac88 <_strtod_l+0xb0>
 800ac12:	2a0d      	cmp	r2, #13
 800ac14:	d833      	bhi.n	800ac7e <_strtod_l+0xa6>
 800ac16:	2a08      	cmp	r2, #8
 800ac18:	d833      	bhi.n	800ac82 <_strtod_l+0xaa>
 800ac1a:	2a00      	cmp	r2, #0
 800ac1c:	d03d      	beq.n	800ac9a <_strtod_l+0xc2>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac22:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ac24:	7833      	ldrb	r3, [r6, #0]
 800ac26:	2b30      	cmp	r3, #48	; 0x30
 800ac28:	f040 80b6 	bne.w	800ad98 <_strtod_l+0x1c0>
 800ac2c:	7873      	ldrb	r3, [r6, #1]
 800ac2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac32:	2b58      	cmp	r3, #88	; 0x58
 800ac34:	d16d      	bne.n	800ad12 <_strtod_l+0x13a>
 800ac36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac38:	9301      	str	r3, [sp, #4]
 800ac3a:	ab18      	add	r3, sp, #96	; 0x60
 800ac3c:	9702      	str	r7, [sp, #8]
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	4a91      	ldr	r2, [pc, #580]	; (800ae88 <_strtod_l+0x2b0>)
 800ac42:	ab19      	add	r3, sp, #100	; 0x64
 800ac44:	a917      	add	r1, sp, #92	; 0x5c
 800ac46:	4620      	mov	r0, r4
 800ac48:	f001 fe42 	bl	800c8d0 <__gethex>
 800ac4c:	f010 0507 	ands.w	r5, r0, #7
 800ac50:	4607      	mov	r7, r0
 800ac52:	d005      	beq.n	800ac60 <_strtod_l+0x88>
 800ac54:	2d06      	cmp	r5, #6
 800ac56:	d12b      	bne.n	800acb0 <_strtod_l+0xd8>
 800ac58:	3601      	adds	r6, #1
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	9617      	str	r6, [sp, #92]	; 0x5c
 800ac5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f040 856e 	bne.w	800b744 <_strtod_l+0xb6c>
 800ac68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac6a:	b1e3      	cbz	r3, 800aca6 <_strtod_l+0xce>
 800ac6c:	ec49 8b17 	vmov	d7, r8, r9
 800ac70:	eeb1 0b47 	vneg.f64	d0, d7
 800ac74:	b01d      	add	sp, #116	; 0x74
 800ac76:	ecbd 8b0c 	vpop	{d8-d13}
 800ac7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7e:	2a20      	cmp	r2, #32
 800ac80:	d1cd      	bne.n	800ac1e <_strtod_l+0x46>
 800ac82:	3301      	adds	r3, #1
 800ac84:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac86:	e7bf      	b.n	800ac08 <_strtod_l+0x30>
 800ac88:	2a2d      	cmp	r2, #45	; 0x2d
 800ac8a:	d1c8      	bne.n	800ac1e <_strtod_l+0x46>
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	920b      	str	r2, [sp, #44]	; 0x2c
 800ac90:	1c5a      	adds	r2, r3, #1
 800ac92:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac94:	785b      	ldrb	r3, [r3, #1]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1c3      	bne.n	800ac22 <_strtod_l+0x4a>
 800ac9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac9c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f040 854d 	bne.w	800b740 <_strtod_l+0xb68>
 800aca6:	ec49 8b10 	vmov	d0, r8, r9
 800acaa:	e7e3      	b.n	800ac74 <_strtod_l+0x9c>
 800acac:	2200      	movs	r2, #0
 800acae:	e7ee      	b.n	800ac8e <_strtod_l+0xb6>
 800acb0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800acb2:	b13a      	cbz	r2, 800acc4 <_strtod_l+0xec>
 800acb4:	2135      	movs	r1, #53	; 0x35
 800acb6:	a81a      	add	r0, sp, #104	; 0x68
 800acb8:	f002 fe22 	bl	800d900 <__copybits>
 800acbc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800acbe:	4620      	mov	r0, r4
 800acc0:	f002 f9e6 	bl	800d090 <_Bfree>
 800acc4:	3d01      	subs	r5, #1
 800acc6:	2d05      	cmp	r5, #5
 800acc8:	d807      	bhi.n	800acda <_strtod_l+0x102>
 800acca:	e8df f005 	tbb	[pc, r5]
 800acce:	0b0e      	.short	0x0b0e
 800acd0:	030e1d18 	.word	0x030e1d18
 800acd4:	f04f 0900 	mov.w	r9, #0
 800acd8:	46c8      	mov	r8, r9
 800acda:	073b      	lsls	r3, r7, #28
 800acdc:	d5c0      	bpl.n	800ac60 <_strtod_l+0x88>
 800acde:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800ace2:	e7bd      	b.n	800ac60 <_strtod_l+0x88>
 800ace4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 800ace8:	e7f7      	b.n	800acda <_strtod_l+0x102>
 800acea:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800acee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800acf0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800acf4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800acf8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800acfc:	e7ed      	b.n	800acda <_strtod_l+0x102>
 800acfe:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800ae8c <_strtod_l+0x2b4>
 800ad02:	f04f 0800 	mov.w	r8, #0
 800ad06:	e7e8      	b.n	800acda <_strtod_l+0x102>
 800ad08:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ad0c:	f04f 38ff 	mov.w	r8, #4294967295
 800ad10:	e7e3      	b.n	800acda <_strtod_l+0x102>
 800ad12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad14:	1c5a      	adds	r2, r3, #1
 800ad16:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad18:	785b      	ldrb	r3, [r3, #1]
 800ad1a:	2b30      	cmp	r3, #48	; 0x30
 800ad1c:	d0f9      	beq.n	800ad12 <_strtod_l+0x13a>
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d09e      	beq.n	800ac60 <_strtod_l+0x88>
 800ad22:	2301      	movs	r3, #1
 800ad24:	9306      	str	r3, [sp, #24]
 800ad26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad28:	930c      	str	r3, [sp, #48]	; 0x30
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	9304      	str	r3, [sp, #16]
 800ad2e:	930a      	str	r3, [sp, #40]	; 0x28
 800ad30:	461e      	mov	r6, r3
 800ad32:	220a      	movs	r2, #10
 800ad34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ad36:	f890 b000 	ldrb.w	fp, [r0]
 800ad3a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800ad3e:	b2d9      	uxtb	r1, r3
 800ad40:	2909      	cmp	r1, #9
 800ad42:	d92b      	bls.n	800ad9c <_strtod_l+0x1c4>
 800ad44:	9908      	ldr	r1, [sp, #32]
 800ad46:	462a      	mov	r2, r5
 800ad48:	f003 f946 	bl	800dfd8 <strncmp>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d035      	beq.n	800adbc <_strtod_l+0x1e4>
 800ad50:	2000      	movs	r0, #0
 800ad52:	465a      	mov	r2, fp
 800ad54:	4633      	mov	r3, r6
 800ad56:	4683      	mov	fp, r0
 800ad58:	4601      	mov	r1, r0
 800ad5a:	2a65      	cmp	r2, #101	; 0x65
 800ad5c:	d001      	beq.n	800ad62 <_strtod_l+0x18a>
 800ad5e:	2a45      	cmp	r2, #69	; 0x45
 800ad60:	d118      	bne.n	800ad94 <_strtod_l+0x1bc>
 800ad62:	b91b      	cbnz	r3, 800ad6c <_strtod_l+0x194>
 800ad64:	9b06      	ldr	r3, [sp, #24]
 800ad66:	4303      	orrs	r3, r0
 800ad68:	d097      	beq.n	800ac9a <_strtod_l+0xc2>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 800ad70:	f10a 0201 	add.w	r2, sl, #1
 800ad74:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad76:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800ad7a:	2a2b      	cmp	r2, #43	; 0x2b
 800ad7c:	d077      	beq.n	800ae6e <_strtod_l+0x296>
 800ad7e:	2a2d      	cmp	r2, #45	; 0x2d
 800ad80:	d07d      	beq.n	800ae7e <_strtod_l+0x2a6>
 800ad82:	f04f 0e00 	mov.w	lr, #0
 800ad86:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ad8a:	2d09      	cmp	r5, #9
 800ad8c:	f240 8084 	bls.w	800ae98 <_strtod_l+0x2c0>
 800ad90:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800ad94:	2500      	movs	r5, #0
 800ad96:	e09f      	b.n	800aed8 <_strtod_l+0x300>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	e7c3      	b.n	800ad24 <_strtod_l+0x14c>
 800ad9c:	2e08      	cmp	r6, #8
 800ad9e:	bfd5      	itete	le
 800ada0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800ada2:	9904      	ldrgt	r1, [sp, #16]
 800ada4:	fb02 3301 	mlale	r3, r2, r1, r3
 800ada8:	fb02 3301 	mlagt	r3, r2, r1, r3
 800adac:	f100 0001 	add.w	r0, r0, #1
 800adb0:	bfd4      	ite	le
 800adb2:	930a      	strle	r3, [sp, #40]	; 0x28
 800adb4:	9304      	strgt	r3, [sp, #16]
 800adb6:	3601      	adds	r6, #1
 800adb8:	9017      	str	r0, [sp, #92]	; 0x5c
 800adba:	e7bb      	b.n	800ad34 <_strtod_l+0x15c>
 800adbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adbe:	195a      	adds	r2, r3, r5
 800adc0:	9217      	str	r2, [sp, #92]	; 0x5c
 800adc2:	5d5a      	ldrb	r2, [r3, r5]
 800adc4:	b3ae      	cbz	r6, 800ae32 <_strtod_l+0x25a>
 800adc6:	4683      	mov	fp, r0
 800adc8:	4633      	mov	r3, r6
 800adca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800adce:	2909      	cmp	r1, #9
 800add0:	d912      	bls.n	800adf8 <_strtod_l+0x220>
 800add2:	2101      	movs	r1, #1
 800add4:	e7c1      	b.n	800ad5a <_strtod_l+0x182>
 800add6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800add8:	1c5a      	adds	r2, r3, #1
 800adda:	9217      	str	r2, [sp, #92]	; 0x5c
 800addc:	785a      	ldrb	r2, [r3, #1]
 800adde:	3001      	adds	r0, #1
 800ade0:	2a30      	cmp	r2, #48	; 0x30
 800ade2:	d0f8      	beq.n	800add6 <_strtod_l+0x1fe>
 800ade4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ade8:	2b08      	cmp	r3, #8
 800adea:	f200 84b0 	bhi.w	800b74e <_strtod_l+0xb76>
 800adee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adf0:	930c      	str	r3, [sp, #48]	; 0x30
 800adf2:	4683      	mov	fp, r0
 800adf4:	2000      	movs	r0, #0
 800adf6:	4603      	mov	r3, r0
 800adf8:	3a30      	subs	r2, #48	; 0x30
 800adfa:	f100 0101 	add.w	r1, r0, #1
 800adfe:	d012      	beq.n	800ae26 <_strtod_l+0x24e>
 800ae00:	448b      	add	fp, r1
 800ae02:	eb00 0c03 	add.w	ip, r0, r3
 800ae06:	4619      	mov	r1, r3
 800ae08:	250a      	movs	r5, #10
 800ae0a:	4561      	cmp	r1, ip
 800ae0c:	d113      	bne.n	800ae36 <_strtod_l+0x25e>
 800ae0e:	1819      	adds	r1, r3, r0
 800ae10:	2908      	cmp	r1, #8
 800ae12:	f103 0301 	add.w	r3, r3, #1
 800ae16:	4403      	add	r3, r0
 800ae18:	dc1d      	bgt.n	800ae56 <_strtod_l+0x27e>
 800ae1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae1c:	210a      	movs	r1, #10
 800ae1e:	fb01 2200 	mla	r2, r1, r0, r2
 800ae22:	920a      	str	r2, [sp, #40]	; 0x28
 800ae24:	2100      	movs	r1, #0
 800ae26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae28:	1c50      	adds	r0, r2, #1
 800ae2a:	9017      	str	r0, [sp, #92]	; 0x5c
 800ae2c:	7852      	ldrb	r2, [r2, #1]
 800ae2e:	4608      	mov	r0, r1
 800ae30:	e7cb      	b.n	800adca <_strtod_l+0x1f2>
 800ae32:	4630      	mov	r0, r6
 800ae34:	e7d4      	b.n	800ade0 <_strtod_l+0x208>
 800ae36:	2908      	cmp	r1, #8
 800ae38:	dc04      	bgt.n	800ae44 <_strtod_l+0x26c>
 800ae3a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ae3c:	436f      	muls	r7, r5
 800ae3e:	970a      	str	r7, [sp, #40]	; 0x28
 800ae40:	3101      	adds	r1, #1
 800ae42:	e7e2      	b.n	800ae0a <_strtod_l+0x232>
 800ae44:	f101 0e01 	add.w	lr, r1, #1
 800ae48:	f1be 0f10 	cmp.w	lr, #16
 800ae4c:	bfde      	ittt	le
 800ae4e:	9f04      	ldrle	r7, [sp, #16]
 800ae50:	436f      	mulle	r7, r5
 800ae52:	9704      	strle	r7, [sp, #16]
 800ae54:	e7f4      	b.n	800ae40 <_strtod_l+0x268>
 800ae56:	2b10      	cmp	r3, #16
 800ae58:	bfdf      	itttt	le
 800ae5a:	9804      	ldrle	r0, [sp, #16]
 800ae5c:	210a      	movle	r1, #10
 800ae5e:	fb01 2200 	mlale	r2, r1, r0, r2
 800ae62:	9204      	strle	r2, [sp, #16]
 800ae64:	e7de      	b.n	800ae24 <_strtod_l+0x24c>
 800ae66:	f04f 0b00 	mov.w	fp, #0
 800ae6a:	2101      	movs	r1, #1
 800ae6c:	e77a      	b.n	800ad64 <_strtod_l+0x18c>
 800ae6e:	f04f 0e00 	mov.w	lr, #0
 800ae72:	f10a 0202 	add.w	r2, sl, #2
 800ae76:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae78:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800ae7c:	e783      	b.n	800ad86 <_strtod_l+0x1ae>
 800ae7e:	f04f 0e01 	mov.w	lr, #1
 800ae82:	e7f6      	b.n	800ae72 <_strtod_l+0x29a>
 800ae84:	0800e7e8 	.word	0x0800e7e8
 800ae88:	0800e694 	.word	0x0800e694
 800ae8c:	7ff00000 	.word	0x7ff00000
 800ae90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae92:	1c55      	adds	r5, r2, #1
 800ae94:	9517      	str	r5, [sp, #92]	; 0x5c
 800ae96:	7852      	ldrb	r2, [r2, #1]
 800ae98:	2a30      	cmp	r2, #48	; 0x30
 800ae9a:	d0f9      	beq.n	800ae90 <_strtod_l+0x2b8>
 800ae9c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800aea0:	2d08      	cmp	r5, #8
 800aea2:	f63f af77 	bhi.w	800ad94 <_strtod_l+0x1bc>
 800aea6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800aeaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aeac:	9208      	str	r2, [sp, #32]
 800aeae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aeb0:	1c55      	adds	r5, r2, #1
 800aeb2:	9517      	str	r5, [sp, #92]	; 0x5c
 800aeb4:	7852      	ldrb	r2, [r2, #1]
 800aeb6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800aeba:	2f09      	cmp	r7, #9
 800aebc:	d937      	bls.n	800af2e <_strtod_l+0x356>
 800aebe:	9f08      	ldr	r7, [sp, #32]
 800aec0:	1bed      	subs	r5, r5, r7
 800aec2:	2d08      	cmp	r5, #8
 800aec4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800aec8:	dc02      	bgt.n	800aed0 <_strtod_l+0x2f8>
 800aeca:	4565      	cmp	r5, ip
 800aecc:	bfa8      	it	ge
 800aece:	4665      	movge	r5, ip
 800aed0:	f1be 0f00 	cmp.w	lr, #0
 800aed4:	d000      	beq.n	800aed8 <_strtod_l+0x300>
 800aed6:	426d      	negs	r5, r5
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d14f      	bne.n	800af7c <_strtod_l+0x3a4>
 800aedc:	9b06      	ldr	r3, [sp, #24]
 800aede:	4303      	orrs	r3, r0
 800aee0:	f47f aebe 	bne.w	800ac60 <_strtod_l+0x88>
 800aee4:	2900      	cmp	r1, #0
 800aee6:	f47f aed8 	bne.w	800ac9a <_strtod_l+0xc2>
 800aeea:	2a69      	cmp	r2, #105	; 0x69
 800aeec:	d027      	beq.n	800af3e <_strtod_l+0x366>
 800aeee:	dc24      	bgt.n	800af3a <_strtod_l+0x362>
 800aef0:	2a49      	cmp	r2, #73	; 0x49
 800aef2:	d024      	beq.n	800af3e <_strtod_l+0x366>
 800aef4:	2a4e      	cmp	r2, #78	; 0x4e
 800aef6:	f47f aed0 	bne.w	800ac9a <_strtod_l+0xc2>
 800aefa:	499b      	ldr	r1, [pc, #620]	; (800b168 <_strtod_l+0x590>)
 800aefc:	a817      	add	r0, sp, #92	; 0x5c
 800aefe:	f001 ff3f 	bl	800cd80 <__match>
 800af02:	2800      	cmp	r0, #0
 800af04:	f43f aec9 	beq.w	800ac9a <_strtod_l+0xc2>
 800af08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b28      	cmp	r3, #40	; 0x28
 800af0e:	d12d      	bne.n	800af6c <_strtod_l+0x394>
 800af10:	4996      	ldr	r1, [pc, #600]	; (800b16c <_strtod_l+0x594>)
 800af12:	aa1a      	add	r2, sp, #104	; 0x68
 800af14:	a817      	add	r0, sp, #92	; 0x5c
 800af16:	f001 ff47 	bl	800cda8 <__hexnan>
 800af1a:	2805      	cmp	r0, #5
 800af1c:	d126      	bne.n	800af6c <_strtod_l+0x394>
 800af1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af20:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800af24:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800af28:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800af2c:	e698      	b.n	800ac60 <_strtod_l+0x88>
 800af2e:	250a      	movs	r5, #10
 800af30:	fb05 250c 	mla	r5, r5, ip, r2
 800af34:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800af38:	e7b9      	b.n	800aeae <_strtod_l+0x2d6>
 800af3a:	2a6e      	cmp	r2, #110	; 0x6e
 800af3c:	e7db      	b.n	800aef6 <_strtod_l+0x31e>
 800af3e:	498c      	ldr	r1, [pc, #560]	; (800b170 <_strtod_l+0x598>)
 800af40:	a817      	add	r0, sp, #92	; 0x5c
 800af42:	f001 ff1d 	bl	800cd80 <__match>
 800af46:	2800      	cmp	r0, #0
 800af48:	f43f aea7 	beq.w	800ac9a <_strtod_l+0xc2>
 800af4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af4e:	4989      	ldr	r1, [pc, #548]	; (800b174 <_strtod_l+0x59c>)
 800af50:	3b01      	subs	r3, #1
 800af52:	a817      	add	r0, sp, #92	; 0x5c
 800af54:	9317      	str	r3, [sp, #92]	; 0x5c
 800af56:	f001 ff13 	bl	800cd80 <__match>
 800af5a:	b910      	cbnz	r0, 800af62 <_strtod_l+0x38a>
 800af5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af5e:	3301      	adds	r3, #1
 800af60:	9317      	str	r3, [sp, #92]	; 0x5c
 800af62:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800b188 <_strtod_l+0x5b0>
 800af66:	f04f 0800 	mov.w	r8, #0
 800af6a:	e679      	b.n	800ac60 <_strtod_l+0x88>
 800af6c:	4882      	ldr	r0, [pc, #520]	; (800b178 <_strtod_l+0x5a0>)
 800af6e:	f003 f82b 	bl	800dfc8 <nan>
 800af72:	ed8d 0b04 	vstr	d0, [sp, #16]
 800af76:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800af7a:	e671      	b.n	800ac60 <_strtod_l+0x88>
 800af7c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800af80:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800af84:	eba5 020b 	sub.w	r2, r5, fp
 800af88:	2e00      	cmp	r6, #0
 800af8a:	bf08      	it	eq
 800af8c:	461e      	moveq	r6, r3
 800af8e:	2b10      	cmp	r3, #16
 800af90:	ed8d 7b08 	vstr	d7, [sp, #32]
 800af94:	9206      	str	r2, [sp, #24]
 800af96:	461a      	mov	r2, r3
 800af98:	bfa8      	it	ge
 800af9a:	2210      	movge	r2, #16
 800af9c:	2b09      	cmp	r3, #9
 800af9e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800afa2:	dd0e      	ble.n	800afc2 <_strtod_l+0x3ea>
 800afa4:	4975      	ldr	r1, [pc, #468]	; (800b17c <_strtod_l+0x5a4>)
 800afa6:	eddd 7a04 	vldr	s15, [sp, #16]
 800afaa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800afae:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800afb2:	ed9d 5b08 	vldr	d5, [sp, #32]
 800afb6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800afba:	eea5 7b06 	vfma.f64	d7, d5, d6
 800afbe:	ec59 8b17 	vmov	r8, r9, d7
 800afc2:	2b0f      	cmp	r3, #15
 800afc4:	dc37      	bgt.n	800b036 <_strtod_l+0x45e>
 800afc6:	9906      	ldr	r1, [sp, #24]
 800afc8:	2900      	cmp	r1, #0
 800afca:	f43f ae49 	beq.w	800ac60 <_strtod_l+0x88>
 800afce:	dd23      	ble.n	800b018 <_strtod_l+0x440>
 800afd0:	2916      	cmp	r1, #22
 800afd2:	dc0b      	bgt.n	800afec <_strtod_l+0x414>
 800afd4:	4b69      	ldr	r3, [pc, #420]	; (800b17c <_strtod_l+0x5a4>)
 800afd6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800afda:	ed93 7b00 	vldr	d7, [r3]
 800afde:	ec49 8b16 	vmov	d6, r8, r9
 800afe2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800afe6:	ec59 8b17 	vmov	r8, r9, d7
 800afea:	e639      	b.n	800ac60 <_strtod_l+0x88>
 800afec:	9806      	ldr	r0, [sp, #24]
 800afee:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800aff2:	4281      	cmp	r1, r0
 800aff4:	db1f      	blt.n	800b036 <_strtod_l+0x45e>
 800aff6:	4a61      	ldr	r2, [pc, #388]	; (800b17c <_strtod_l+0x5a4>)
 800aff8:	f1c3 030f 	rsb	r3, r3, #15
 800affc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b000:	ed91 7b00 	vldr	d7, [r1]
 800b004:	ec49 8b16 	vmov	d6, r8, r9
 800b008:	1ac3      	subs	r3, r0, r3
 800b00a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b00e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b012:	ed92 6b00 	vldr	d6, [r2]
 800b016:	e7e4      	b.n	800afe2 <_strtod_l+0x40a>
 800b018:	9906      	ldr	r1, [sp, #24]
 800b01a:	3116      	adds	r1, #22
 800b01c:	db0b      	blt.n	800b036 <_strtod_l+0x45e>
 800b01e:	4b57      	ldr	r3, [pc, #348]	; (800b17c <_strtod_l+0x5a4>)
 800b020:	ebab 0505 	sub.w	r5, fp, r5
 800b024:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b028:	ed95 7b00 	vldr	d7, [r5]
 800b02c:	ec49 8b16 	vmov	d6, r8, r9
 800b030:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b034:	e7d7      	b.n	800afe6 <_strtod_l+0x40e>
 800b036:	9906      	ldr	r1, [sp, #24]
 800b038:	1a9a      	subs	r2, r3, r2
 800b03a:	440a      	add	r2, r1
 800b03c:	2a00      	cmp	r2, #0
 800b03e:	dd74      	ble.n	800b12a <_strtod_l+0x552>
 800b040:	f012 000f 	ands.w	r0, r2, #15
 800b044:	d00a      	beq.n	800b05c <_strtod_l+0x484>
 800b046:	494d      	ldr	r1, [pc, #308]	; (800b17c <_strtod_l+0x5a4>)
 800b048:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b04c:	ed91 7b00 	vldr	d7, [r1]
 800b050:	ec49 8b16 	vmov	d6, r8, r9
 800b054:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b058:	ec59 8b17 	vmov	r8, r9, d7
 800b05c:	f032 020f 	bics.w	r2, r2, #15
 800b060:	d04f      	beq.n	800b102 <_strtod_l+0x52a>
 800b062:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800b066:	dd22      	ble.n	800b0ae <_strtod_l+0x4d6>
 800b068:	2500      	movs	r5, #0
 800b06a:	462e      	mov	r6, r5
 800b06c:	950a      	str	r5, [sp, #40]	; 0x28
 800b06e:	462f      	mov	r7, r5
 800b070:	2322      	movs	r3, #34	; 0x22
 800b072:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800b188 <_strtod_l+0x5b0>
 800b076:	6023      	str	r3, [r4, #0]
 800b078:	f04f 0800 	mov.w	r8, #0
 800b07c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f43f adee 	beq.w	800ac60 <_strtod_l+0x88>
 800b084:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b086:	4620      	mov	r0, r4
 800b088:	f002 f802 	bl	800d090 <_Bfree>
 800b08c:	4639      	mov	r1, r7
 800b08e:	4620      	mov	r0, r4
 800b090:	f001 fffe 	bl	800d090 <_Bfree>
 800b094:	4631      	mov	r1, r6
 800b096:	4620      	mov	r0, r4
 800b098:	f001 fffa 	bl	800d090 <_Bfree>
 800b09c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f001 fff6 	bl	800d090 <_Bfree>
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f001 fff2 	bl	800d090 <_Bfree>
 800b0ac:	e5d8      	b.n	800ac60 <_strtod_l+0x88>
 800b0ae:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	4f32      	ldr	r7, [pc, #200]	; (800b180 <_strtod_l+0x5a8>)
 800b0b6:	1112      	asrs	r2, r2, #4
 800b0b8:	4601      	mov	r1, r0
 800b0ba:	2a01      	cmp	r2, #1
 800b0bc:	dc24      	bgt.n	800b108 <_strtod_l+0x530>
 800b0be:	b108      	cbz	r0, 800b0c4 <_strtod_l+0x4ec>
 800b0c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b0c4:	4a2e      	ldr	r2, [pc, #184]	; (800b180 <_strtod_l+0x5a8>)
 800b0c6:	482f      	ldr	r0, [pc, #188]	; (800b184 <_strtod_l+0x5ac>)
 800b0c8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800b0cc:	ed91 7b00 	vldr	d7, [r1]
 800b0d0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b0d4:	ec49 8b16 	vmov	d6, r8, r9
 800b0d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b0dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b0e0:	9905      	ldr	r1, [sp, #20]
 800b0e2:	4a29      	ldr	r2, [pc, #164]	; (800b188 <_strtod_l+0x5b0>)
 800b0e4:	400a      	ands	r2, r1
 800b0e6:	4282      	cmp	r2, r0
 800b0e8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b0ec:	d8bc      	bhi.n	800b068 <_strtod_l+0x490>
 800b0ee:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800b0f2:	4282      	cmp	r2, r0
 800b0f4:	bf86      	itte	hi
 800b0f6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800b18c <_strtod_l+0x5b4>
 800b0fa:	f04f 38ff 	movhi.w	r8, #4294967295
 800b0fe:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800b102:	2200      	movs	r2, #0
 800b104:	9204      	str	r2, [sp, #16]
 800b106:	e07f      	b.n	800b208 <_strtod_l+0x630>
 800b108:	f012 0f01 	tst.w	r2, #1
 800b10c:	d00a      	beq.n	800b124 <_strtod_l+0x54c>
 800b10e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 800b112:	ed90 7b00 	vldr	d7, [r0]
 800b116:	ed9d 6b04 	vldr	d6, [sp, #16]
 800b11a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b11e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b122:	2001      	movs	r0, #1
 800b124:	3101      	adds	r1, #1
 800b126:	1052      	asrs	r2, r2, #1
 800b128:	e7c7      	b.n	800b0ba <_strtod_l+0x4e2>
 800b12a:	d0ea      	beq.n	800b102 <_strtod_l+0x52a>
 800b12c:	4252      	negs	r2, r2
 800b12e:	f012 000f 	ands.w	r0, r2, #15
 800b132:	d00a      	beq.n	800b14a <_strtod_l+0x572>
 800b134:	4911      	ldr	r1, [pc, #68]	; (800b17c <_strtod_l+0x5a4>)
 800b136:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b13a:	ed91 7b00 	vldr	d7, [r1]
 800b13e:	ec49 8b16 	vmov	d6, r8, r9
 800b142:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b146:	ec59 8b17 	vmov	r8, r9, d7
 800b14a:	1112      	asrs	r2, r2, #4
 800b14c:	d0d9      	beq.n	800b102 <_strtod_l+0x52a>
 800b14e:	2a1f      	cmp	r2, #31
 800b150:	dd1e      	ble.n	800b190 <_strtod_l+0x5b8>
 800b152:	2500      	movs	r5, #0
 800b154:	462e      	mov	r6, r5
 800b156:	950a      	str	r5, [sp, #40]	; 0x28
 800b158:	462f      	mov	r7, r5
 800b15a:	2322      	movs	r3, #34	; 0x22
 800b15c:	f04f 0800 	mov.w	r8, #0
 800b160:	f04f 0900 	mov.w	r9, #0
 800b164:	6023      	str	r3, [r4, #0]
 800b166:	e789      	b.n	800b07c <_strtod_l+0x4a4>
 800b168:	0800e665 	.word	0x0800e665
 800b16c:	0800e6a8 	.word	0x0800e6a8
 800b170:	0800e65d 	.word	0x0800e65d
 800b174:	0800e6eb 	.word	0x0800e6eb
 800b178:	0800e9a8 	.word	0x0800e9a8
 800b17c:	0800e888 	.word	0x0800e888
 800b180:	0800e860 	.word	0x0800e860
 800b184:	7ca00000 	.word	0x7ca00000
 800b188:	7ff00000 	.word	0x7ff00000
 800b18c:	7fefffff 	.word	0x7fefffff
 800b190:	f012 0110 	ands.w	r1, r2, #16
 800b194:	bf18      	it	ne
 800b196:	216a      	movne	r1, #106	; 0x6a
 800b198:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800b19c:	9104      	str	r1, [sp, #16]
 800b19e:	49c0      	ldr	r1, [pc, #768]	; (800b4a0 <_strtod_l+0x8c8>)
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	07d7      	lsls	r7, r2, #31
 800b1a4:	d508      	bpl.n	800b1b8 <_strtod_l+0x5e0>
 800b1a6:	ed9d 6b08 	vldr	d6, [sp, #32]
 800b1aa:	ed91 7b00 	vldr	d7, [r1]
 800b1ae:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b1b2:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b1b6:	2001      	movs	r0, #1
 800b1b8:	1052      	asrs	r2, r2, #1
 800b1ba:	f101 0108 	add.w	r1, r1, #8
 800b1be:	d1f0      	bne.n	800b1a2 <_strtod_l+0x5ca>
 800b1c0:	b108      	cbz	r0, 800b1c6 <_strtod_l+0x5ee>
 800b1c2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800b1c6:	9a04      	ldr	r2, [sp, #16]
 800b1c8:	b1ba      	cbz	r2, 800b1fa <_strtod_l+0x622>
 800b1ca:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b1ce:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800b1d2:	2a00      	cmp	r2, #0
 800b1d4:	4649      	mov	r1, r9
 800b1d6:	dd10      	ble.n	800b1fa <_strtod_l+0x622>
 800b1d8:	2a1f      	cmp	r2, #31
 800b1da:	f340 8132 	ble.w	800b442 <_strtod_l+0x86a>
 800b1de:	2a34      	cmp	r2, #52	; 0x34
 800b1e0:	bfde      	ittt	le
 800b1e2:	3a20      	suble	r2, #32
 800b1e4:	f04f 30ff 	movle.w	r0, #4294967295
 800b1e8:	fa00 f202 	lslle.w	r2, r0, r2
 800b1ec:	f04f 0800 	mov.w	r8, #0
 800b1f0:	bfcc      	ite	gt
 800b1f2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b1f6:	ea02 0901 	andle.w	r9, r2, r1
 800b1fa:	ec49 8b17 	vmov	d7, r8, r9
 800b1fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b206:	d0a4      	beq.n	800b152 <_strtod_l+0x57a>
 800b208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b20a:	9200      	str	r2, [sp, #0]
 800b20c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b20e:	4632      	mov	r2, r6
 800b210:	4620      	mov	r0, r4
 800b212:	f001 ffa9 	bl	800d168 <__s2b>
 800b216:	900a      	str	r0, [sp, #40]	; 0x28
 800b218:	2800      	cmp	r0, #0
 800b21a:	f43f af25 	beq.w	800b068 <_strtod_l+0x490>
 800b21e:	9b06      	ldr	r3, [sp, #24]
 800b220:	ebab 0505 	sub.w	r5, fp, r5
 800b224:	2b00      	cmp	r3, #0
 800b226:	bfb4      	ite	lt
 800b228:	462b      	movlt	r3, r5
 800b22a:	2300      	movge	r3, #0
 800b22c:	930c      	str	r3, [sp, #48]	; 0x30
 800b22e:	9b06      	ldr	r3, [sp, #24]
 800b230:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800b488 <_strtod_l+0x8b0>
 800b234:	ed9f ab96 	vldr	d10, [pc, #600]	; 800b490 <_strtod_l+0x8b8>
 800b238:	ed9f bb97 	vldr	d11, [pc, #604]	; 800b498 <_strtod_l+0x8c0>
 800b23c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b240:	2500      	movs	r5, #0
 800b242:	9312      	str	r3, [sp, #72]	; 0x48
 800b244:	462e      	mov	r6, r5
 800b246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b248:	4620      	mov	r0, r4
 800b24a:	6859      	ldr	r1, [r3, #4]
 800b24c:	f001 fee0 	bl	800d010 <_Balloc>
 800b250:	4607      	mov	r7, r0
 800b252:	2800      	cmp	r0, #0
 800b254:	f43f af0c 	beq.w	800b070 <_strtod_l+0x498>
 800b258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b25a:	691a      	ldr	r2, [r3, #16]
 800b25c:	3202      	adds	r2, #2
 800b25e:	f103 010c 	add.w	r1, r3, #12
 800b262:	0092      	lsls	r2, r2, #2
 800b264:	300c      	adds	r0, #12
 800b266:	f7fe fc0d 	bl	8009a84 <memcpy>
 800b26a:	ec49 8b10 	vmov	d0, r8, r9
 800b26e:	aa1a      	add	r2, sp, #104	; 0x68
 800b270:	a919      	add	r1, sp, #100	; 0x64
 800b272:	4620      	mov	r0, r4
 800b274:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800b278:	f002 fab2 	bl	800d7e0 <__d2b>
 800b27c:	9018      	str	r0, [sp, #96]	; 0x60
 800b27e:	2800      	cmp	r0, #0
 800b280:	f43f aef6 	beq.w	800b070 <_strtod_l+0x498>
 800b284:	2101      	movs	r1, #1
 800b286:	4620      	mov	r0, r4
 800b288:	f002 f808 	bl	800d29c <__i2b>
 800b28c:	4606      	mov	r6, r0
 800b28e:	2800      	cmp	r0, #0
 800b290:	f43f aeee 	beq.w	800b070 <_strtod_l+0x498>
 800b294:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b296:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b298:	2b00      	cmp	r3, #0
 800b29a:	bfab      	itete	ge
 800b29c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b29e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b2a0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800b2a4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 800b2a8:	bfac      	ite	ge
 800b2aa:	eb03 0b02 	addge.w	fp, r3, r2
 800b2ae:	eba2 0a03 	sublt.w	sl, r2, r3
 800b2b2:	9a04      	ldr	r2, [sp, #16]
 800b2b4:	1a9b      	subs	r3, r3, r2
 800b2b6:	440b      	add	r3, r1
 800b2b8:	4a7a      	ldr	r2, [pc, #488]	; (800b4a4 <_strtod_l+0x8cc>)
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800b2c2:	f280 80d1 	bge.w	800b468 <_strtod_l+0x890>
 800b2c6:	1ad2      	subs	r2, r2, r3
 800b2c8:	2a1f      	cmp	r2, #31
 800b2ca:	eba1 0102 	sub.w	r1, r1, r2
 800b2ce:	f04f 0001 	mov.w	r0, #1
 800b2d2:	f300 80bd 	bgt.w	800b450 <_strtod_l+0x878>
 800b2d6:	fa00 f302 	lsl.w	r3, r0, r2
 800b2da:	930e      	str	r3, [sp, #56]	; 0x38
 800b2dc:	2300      	movs	r3, #0
 800b2de:	930d      	str	r3, [sp, #52]	; 0x34
 800b2e0:	eb0b 0301 	add.w	r3, fp, r1
 800b2e4:	9a04      	ldr	r2, [sp, #16]
 800b2e6:	459b      	cmp	fp, r3
 800b2e8:	448a      	add	sl, r1
 800b2ea:	4492      	add	sl, r2
 800b2ec:	465a      	mov	r2, fp
 800b2ee:	bfa8      	it	ge
 800b2f0:	461a      	movge	r2, r3
 800b2f2:	4552      	cmp	r2, sl
 800b2f4:	bfa8      	it	ge
 800b2f6:	4652      	movge	r2, sl
 800b2f8:	2a00      	cmp	r2, #0
 800b2fa:	bfc2      	ittt	gt
 800b2fc:	1a9b      	subgt	r3, r3, r2
 800b2fe:	ebaa 0a02 	subgt.w	sl, sl, r2
 800b302:	ebab 0b02 	subgt.w	fp, fp, r2
 800b306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b308:	2a00      	cmp	r2, #0
 800b30a:	dd18      	ble.n	800b33e <_strtod_l+0x766>
 800b30c:	4631      	mov	r1, r6
 800b30e:	4620      	mov	r0, r4
 800b310:	9315      	str	r3, [sp, #84]	; 0x54
 800b312:	f002 f87f 	bl	800d414 <__pow5mult>
 800b316:	4606      	mov	r6, r0
 800b318:	2800      	cmp	r0, #0
 800b31a:	f43f aea9 	beq.w	800b070 <_strtod_l+0x498>
 800b31e:	4601      	mov	r1, r0
 800b320:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b322:	4620      	mov	r0, r4
 800b324:	f001 ffd0 	bl	800d2c8 <__multiply>
 800b328:	9014      	str	r0, [sp, #80]	; 0x50
 800b32a:	2800      	cmp	r0, #0
 800b32c:	f43f aea0 	beq.w	800b070 <_strtod_l+0x498>
 800b330:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b332:	4620      	mov	r0, r4
 800b334:	f001 feac 	bl	800d090 <_Bfree>
 800b338:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b33a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b33c:	9218      	str	r2, [sp, #96]	; 0x60
 800b33e:	2b00      	cmp	r3, #0
 800b340:	f300 8097 	bgt.w	800b472 <_strtod_l+0x89a>
 800b344:	9b06      	ldr	r3, [sp, #24]
 800b346:	2b00      	cmp	r3, #0
 800b348:	dd08      	ble.n	800b35c <_strtod_l+0x784>
 800b34a:	4639      	mov	r1, r7
 800b34c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b34e:	4620      	mov	r0, r4
 800b350:	f002 f860 	bl	800d414 <__pow5mult>
 800b354:	4607      	mov	r7, r0
 800b356:	2800      	cmp	r0, #0
 800b358:	f43f ae8a 	beq.w	800b070 <_strtod_l+0x498>
 800b35c:	f1ba 0f00 	cmp.w	sl, #0
 800b360:	dd08      	ble.n	800b374 <_strtod_l+0x79c>
 800b362:	4639      	mov	r1, r7
 800b364:	4652      	mov	r2, sl
 800b366:	4620      	mov	r0, r4
 800b368:	f002 f8ae 	bl	800d4c8 <__lshift>
 800b36c:	4607      	mov	r7, r0
 800b36e:	2800      	cmp	r0, #0
 800b370:	f43f ae7e 	beq.w	800b070 <_strtod_l+0x498>
 800b374:	f1bb 0f00 	cmp.w	fp, #0
 800b378:	dd08      	ble.n	800b38c <_strtod_l+0x7b4>
 800b37a:	4631      	mov	r1, r6
 800b37c:	465a      	mov	r2, fp
 800b37e:	4620      	mov	r0, r4
 800b380:	f002 f8a2 	bl	800d4c8 <__lshift>
 800b384:	4606      	mov	r6, r0
 800b386:	2800      	cmp	r0, #0
 800b388:	f43f ae72 	beq.w	800b070 <_strtod_l+0x498>
 800b38c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b38e:	463a      	mov	r2, r7
 800b390:	4620      	mov	r0, r4
 800b392:	f002 f921 	bl	800d5d8 <__mdiff>
 800b396:	4605      	mov	r5, r0
 800b398:	2800      	cmp	r0, #0
 800b39a:	f43f ae69 	beq.w	800b070 <_strtod_l+0x498>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800b3a4:	60c3      	str	r3, [r0, #12]
 800b3a6:	4631      	mov	r1, r6
 800b3a8:	f002 f8fa 	bl	800d5a0 <__mcmp>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	da7f      	bge.n	800b4b0 <_strtod_l+0x8d8>
 800b3b0:	ea5a 0308 	orrs.w	r3, sl, r8
 800b3b4:	f040 80a5 	bne.w	800b502 <_strtod_l+0x92a>
 800b3b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f040 80a0 	bne.w	800b502 <_strtod_l+0x92a>
 800b3c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b3c6:	0d1b      	lsrs	r3, r3, #20
 800b3c8:	051b      	lsls	r3, r3, #20
 800b3ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b3ce:	f240 8098 	bls.w	800b502 <_strtod_l+0x92a>
 800b3d2:	696b      	ldr	r3, [r5, #20]
 800b3d4:	b91b      	cbnz	r3, 800b3de <_strtod_l+0x806>
 800b3d6:	692b      	ldr	r3, [r5, #16]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	f340 8092 	ble.w	800b502 <_strtod_l+0x92a>
 800b3de:	4629      	mov	r1, r5
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f002 f870 	bl	800d4c8 <__lshift>
 800b3e8:	4631      	mov	r1, r6
 800b3ea:	4605      	mov	r5, r0
 800b3ec:	f002 f8d8 	bl	800d5a0 <__mcmp>
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	f340 8086 	ble.w	800b502 <_strtod_l+0x92a>
 800b3f6:	9904      	ldr	r1, [sp, #16]
 800b3f8:	4a2b      	ldr	r2, [pc, #172]	; (800b4a8 <_strtod_l+0x8d0>)
 800b3fa:	464b      	mov	r3, r9
 800b3fc:	2900      	cmp	r1, #0
 800b3fe:	f000 80a1 	beq.w	800b544 <_strtod_l+0x96c>
 800b402:	ea02 0109 	and.w	r1, r2, r9
 800b406:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b40a:	f300 809b 	bgt.w	800b544 <_strtod_l+0x96c>
 800b40e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b412:	f77f aea2 	ble.w	800b15a <_strtod_l+0x582>
 800b416:	4a25      	ldr	r2, [pc, #148]	; (800b4ac <_strtod_l+0x8d4>)
 800b418:	2300      	movs	r3, #0
 800b41a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800b41e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800b422:	ec49 8b17 	vmov	d7, r8, r9
 800b426:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b42a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b42e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800b432:	4313      	orrs	r3, r2
 800b434:	bf08      	it	eq
 800b436:	2322      	moveq	r3, #34	; 0x22
 800b438:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b43c:	bf08      	it	eq
 800b43e:	6023      	streq	r3, [r4, #0]
 800b440:	e620      	b.n	800b084 <_strtod_l+0x4ac>
 800b442:	f04f 31ff 	mov.w	r1, #4294967295
 800b446:	fa01 f202 	lsl.w	r2, r1, r2
 800b44a:	ea02 0808 	and.w	r8, r2, r8
 800b44e:	e6d4      	b.n	800b1fa <_strtod_l+0x622>
 800b450:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800b454:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800b458:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800b45c:	33e2      	adds	r3, #226	; 0xe2
 800b45e:	fa00 f303 	lsl.w	r3, r0, r3
 800b462:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800b466:	e73b      	b.n	800b2e0 <_strtod_l+0x708>
 800b468:	2000      	movs	r0, #0
 800b46a:	2301      	movs	r3, #1
 800b46c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 800b470:	e736      	b.n	800b2e0 <_strtod_l+0x708>
 800b472:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b474:	461a      	mov	r2, r3
 800b476:	4620      	mov	r0, r4
 800b478:	f002 f826 	bl	800d4c8 <__lshift>
 800b47c:	9018      	str	r0, [sp, #96]	; 0x60
 800b47e:	2800      	cmp	r0, #0
 800b480:	f47f af60 	bne.w	800b344 <_strtod_l+0x76c>
 800b484:	e5f4      	b.n	800b070 <_strtod_l+0x498>
 800b486:	bf00      	nop
 800b488:	94a03595 	.word	0x94a03595
 800b48c:	3fcfffff 	.word	0x3fcfffff
 800b490:	94a03595 	.word	0x94a03595
 800b494:	3fdfffff 	.word	0x3fdfffff
 800b498:	35afe535 	.word	0x35afe535
 800b49c:	3fe00000 	.word	0x3fe00000
 800b4a0:	0800e6c0 	.word	0x0800e6c0
 800b4a4:	fffffc02 	.word	0xfffffc02
 800b4a8:	7ff00000 	.word	0x7ff00000
 800b4ac:	39500000 	.word	0x39500000
 800b4b0:	46cb      	mov	fp, r9
 800b4b2:	d165      	bne.n	800b580 <_strtod_l+0x9a8>
 800b4b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4b8:	f1ba 0f00 	cmp.w	sl, #0
 800b4bc:	d02a      	beq.n	800b514 <_strtod_l+0x93c>
 800b4be:	4aaa      	ldr	r2, [pc, #680]	; (800b768 <_strtod_l+0xb90>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d12b      	bne.n	800b51c <_strtod_l+0x944>
 800b4c4:	9b04      	ldr	r3, [sp, #16]
 800b4c6:	4641      	mov	r1, r8
 800b4c8:	b1fb      	cbz	r3, 800b50a <_strtod_l+0x932>
 800b4ca:	4aa8      	ldr	r2, [pc, #672]	; (800b76c <_strtod_l+0xb94>)
 800b4cc:	ea09 0202 	and.w	r2, r9, r2
 800b4d0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d8:	d81a      	bhi.n	800b510 <_strtod_l+0x938>
 800b4da:	0d12      	lsrs	r2, r2, #20
 800b4dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b4e0:	fa00 f303 	lsl.w	r3, r0, r3
 800b4e4:	4299      	cmp	r1, r3
 800b4e6:	d119      	bne.n	800b51c <_strtod_l+0x944>
 800b4e8:	4ba1      	ldr	r3, [pc, #644]	; (800b770 <_strtod_l+0xb98>)
 800b4ea:	459b      	cmp	fp, r3
 800b4ec:	d102      	bne.n	800b4f4 <_strtod_l+0x91c>
 800b4ee:	3101      	adds	r1, #1
 800b4f0:	f43f adbe 	beq.w	800b070 <_strtod_l+0x498>
 800b4f4:	4b9d      	ldr	r3, [pc, #628]	; (800b76c <_strtod_l+0xb94>)
 800b4f6:	ea0b 0303 	and.w	r3, fp, r3
 800b4fa:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b4fe:	f04f 0800 	mov.w	r8, #0
 800b502:	9b04      	ldr	r3, [sp, #16]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d186      	bne.n	800b416 <_strtod_l+0x83e>
 800b508:	e5bc      	b.n	800b084 <_strtod_l+0x4ac>
 800b50a:	f04f 33ff 	mov.w	r3, #4294967295
 800b50e:	e7e9      	b.n	800b4e4 <_strtod_l+0x90c>
 800b510:	4603      	mov	r3, r0
 800b512:	e7e7      	b.n	800b4e4 <_strtod_l+0x90c>
 800b514:	ea53 0308 	orrs.w	r3, r3, r8
 800b518:	f43f af6d 	beq.w	800b3f6 <_strtod_l+0x81e>
 800b51c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b51e:	b1db      	cbz	r3, 800b558 <_strtod_l+0x980>
 800b520:	ea13 0f0b 	tst.w	r3, fp
 800b524:	d0ed      	beq.n	800b502 <_strtod_l+0x92a>
 800b526:	9a04      	ldr	r2, [sp, #16]
 800b528:	4640      	mov	r0, r8
 800b52a:	4649      	mov	r1, r9
 800b52c:	f1ba 0f00 	cmp.w	sl, #0
 800b530:	d016      	beq.n	800b560 <_strtod_l+0x988>
 800b532:	f7ff fb36 	bl	800aba2 <sulp>
 800b536:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b53a:	ee37 7b00 	vadd.f64	d7, d7, d0
 800b53e:	ec59 8b17 	vmov	r8, r9, d7
 800b542:	e7de      	b.n	800b502 <_strtod_l+0x92a>
 800b544:	4013      	ands	r3, r2
 800b546:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b54a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b54e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b552:	f04f 38ff 	mov.w	r8, #4294967295
 800b556:	e7d4      	b.n	800b502 <_strtod_l+0x92a>
 800b558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b55a:	ea13 0f08 	tst.w	r3, r8
 800b55e:	e7e1      	b.n	800b524 <_strtod_l+0x94c>
 800b560:	f7ff fb1f 	bl	800aba2 <sulp>
 800b564:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b568:	ee37 7b40 	vsub.f64	d7, d7, d0
 800b56c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b570:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b578:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800b57c:	d1c1      	bne.n	800b502 <_strtod_l+0x92a>
 800b57e:	e5ec      	b.n	800b15a <_strtod_l+0x582>
 800b580:	4631      	mov	r1, r6
 800b582:	4628      	mov	r0, r5
 800b584:	f002 f988 	bl	800d898 <__ratio>
 800b588:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800b58c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b594:	d867      	bhi.n	800b666 <_strtod_l+0xa8e>
 800b596:	f1ba 0f00 	cmp.w	sl, #0
 800b59a:	d044      	beq.n	800b626 <_strtod_l+0xa4e>
 800b59c:	4b75      	ldr	r3, [pc, #468]	; (800b774 <_strtod_l+0xb9c>)
 800b59e:	2200      	movs	r2, #0
 800b5a0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800b5a4:	4971      	ldr	r1, [pc, #452]	; (800b76c <_strtod_l+0xb94>)
 800b5a6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800b780 <_strtod_l+0xba8>
 800b5aa:	ea0b 0001 	and.w	r0, fp, r1
 800b5ae:	4560      	cmp	r0, ip
 800b5b0:	900d      	str	r0, [sp, #52]	; 0x34
 800b5b2:	f040 808b 	bne.w	800b6cc <_strtod_l+0xaf4>
 800b5b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b5ba:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800b5be:	ec49 8b10 	vmov	d0, r8, r9
 800b5c2:	ec43 2b1c 	vmov	d12, r2, r3
 800b5c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b5ca:	f002 f88d 	bl	800d6e8 <__ulp>
 800b5ce:	ec49 8b1d 	vmov	d13, r8, r9
 800b5d2:	eeac db00 	vfma.f64	d13, d12, d0
 800b5d6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800b5da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5dc:	4963      	ldr	r1, [pc, #396]	; (800b76c <_strtod_l+0xb94>)
 800b5de:	4a66      	ldr	r2, [pc, #408]	; (800b778 <_strtod_l+0xba0>)
 800b5e0:	4019      	ands	r1, r3
 800b5e2:	4291      	cmp	r1, r2
 800b5e4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800b5e8:	d947      	bls.n	800b67a <_strtod_l+0xaa2>
 800b5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d103      	bne.n	800b5fc <_strtod_l+0xa24>
 800b5f4:	9b08      	ldr	r3, [sp, #32]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	f43f ad3a 	beq.w	800b070 <_strtod_l+0x498>
 800b5fc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800b770 <_strtod_l+0xb98>
 800b600:	f04f 38ff 	mov.w	r8, #4294967295
 800b604:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b606:	4620      	mov	r0, r4
 800b608:	f001 fd42 	bl	800d090 <_Bfree>
 800b60c:	4639      	mov	r1, r7
 800b60e:	4620      	mov	r0, r4
 800b610:	f001 fd3e 	bl	800d090 <_Bfree>
 800b614:	4631      	mov	r1, r6
 800b616:	4620      	mov	r0, r4
 800b618:	f001 fd3a 	bl	800d090 <_Bfree>
 800b61c:	4629      	mov	r1, r5
 800b61e:	4620      	mov	r0, r4
 800b620:	f001 fd36 	bl	800d090 <_Bfree>
 800b624:	e60f      	b.n	800b246 <_strtod_l+0x66e>
 800b626:	f1b8 0f00 	cmp.w	r8, #0
 800b62a:	d112      	bne.n	800b652 <_strtod_l+0xa7a>
 800b62c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b630:	b9b3      	cbnz	r3, 800b660 <_strtod_l+0xa88>
 800b632:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b636:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b63e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800b642:	d401      	bmi.n	800b648 <_strtod_l+0xa70>
 800b644:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b648:	eeb1 7b48 	vneg.f64	d7, d8
 800b64c:	ec53 2b17 	vmov	r2, r3, d7
 800b650:	e7a8      	b.n	800b5a4 <_strtod_l+0x9cc>
 800b652:	f1b8 0f01 	cmp.w	r8, #1
 800b656:	d103      	bne.n	800b660 <_strtod_l+0xa88>
 800b658:	f1b9 0f00 	cmp.w	r9, #0
 800b65c:	f43f ad7d 	beq.w	800b15a <_strtod_l+0x582>
 800b660:	4b46      	ldr	r3, [pc, #280]	; (800b77c <_strtod_l+0xba4>)
 800b662:	2200      	movs	r2, #0
 800b664:	e79c      	b.n	800b5a0 <_strtod_l+0x9c8>
 800b666:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800b66a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b66e:	f1ba 0f00 	cmp.w	sl, #0
 800b672:	d0e9      	beq.n	800b648 <_strtod_l+0xa70>
 800b674:	ec53 2b18 	vmov	r2, r3, d8
 800b678:	e794      	b.n	800b5a4 <_strtod_l+0x9cc>
 800b67a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b67e:	9b04      	ldr	r3, [sp, #16]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d1bf      	bne.n	800b604 <_strtod_l+0xa2c>
 800b684:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b688:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b68a:	0d1b      	lsrs	r3, r3, #20
 800b68c:	051b      	lsls	r3, r3, #20
 800b68e:	429a      	cmp	r2, r3
 800b690:	d1b8      	bne.n	800b604 <_strtod_l+0xa2c>
 800b692:	ec51 0b18 	vmov	r0, r1, d8
 800b696:	f7f4 ffff 	bl	8000698 <__aeabi_d2lz>
 800b69a:	f7f4 ffb7 	bl	800060c <__aeabi_l2d>
 800b69e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6a2:	ec41 0b17 	vmov	d7, r0, r1
 800b6a6:	ea43 0308 	orr.w	r3, r3, r8
 800b6aa:	ea53 030a 	orrs.w	r3, r3, sl
 800b6ae:	ee38 8b47 	vsub.f64	d8, d8, d7
 800b6b2:	d03e      	beq.n	800b732 <_strtod_l+0xb5a>
 800b6b4:	eeb4 8bca 	vcmpe.f64	d8, d10
 800b6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6bc:	f53f ace2 	bmi.w	800b084 <_strtod_l+0x4ac>
 800b6c0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800b6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6c8:	dd9c      	ble.n	800b604 <_strtod_l+0xa2c>
 800b6ca:	e4db      	b.n	800b084 <_strtod_l+0x4ac>
 800b6cc:	9904      	ldr	r1, [sp, #16]
 800b6ce:	b301      	cbz	r1, 800b712 <_strtod_l+0xb3a>
 800b6d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b6d2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800b6d6:	d81c      	bhi.n	800b712 <_strtod_l+0xb3a>
 800b6d8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800b760 <_strtod_l+0xb88>
 800b6dc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6e4:	d811      	bhi.n	800b70a <_strtod_l+0xb32>
 800b6e6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800b6ea:	ee18 3a10 	vmov	r3, s16
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	bf38      	it	cc
 800b6f2:	2301      	movcc	r3, #1
 800b6f4:	ee08 3a10 	vmov	s16, r3
 800b6f8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800b6fc:	f1ba 0f00 	cmp.w	sl, #0
 800b700:	d114      	bne.n	800b72c <_strtod_l+0xb54>
 800b702:	eeb1 7b48 	vneg.f64	d7, d8
 800b706:	ec53 2b17 	vmov	r2, r3, d7
 800b70a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b70c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800b710:	1a0b      	subs	r3, r1, r0
 800b712:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b716:	ec43 2b1c 	vmov	d12, r2, r3
 800b71a:	f001 ffe5 	bl	800d6e8 <__ulp>
 800b71e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b722:	eeac 7b00 	vfma.f64	d7, d12, d0
 800b726:	ec59 8b17 	vmov	r8, r9, d7
 800b72a:	e7a8      	b.n	800b67e <_strtod_l+0xaa6>
 800b72c:	ec53 2b18 	vmov	r2, r3, d8
 800b730:	e7eb      	b.n	800b70a <_strtod_l+0xb32>
 800b732:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800b736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b73a:	f57f af63 	bpl.w	800b604 <_strtod_l+0xa2c>
 800b73e:	e4a1      	b.n	800b084 <_strtod_l+0x4ac>
 800b740:	2300      	movs	r3, #0
 800b742:	930b      	str	r3, [sp, #44]	; 0x2c
 800b744:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b746:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b748:	6013      	str	r3, [r2, #0]
 800b74a:	f7ff ba8d 	b.w	800ac68 <_strtod_l+0x90>
 800b74e:	2a65      	cmp	r2, #101	; 0x65
 800b750:	f43f ab89 	beq.w	800ae66 <_strtod_l+0x28e>
 800b754:	2a45      	cmp	r2, #69	; 0x45
 800b756:	f43f ab86 	beq.w	800ae66 <_strtod_l+0x28e>
 800b75a:	2101      	movs	r1, #1
 800b75c:	f7ff bbbe 	b.w	800aedc <_strtod_l+0x304>
 800b760:	ffc00000 	.word	0xffc00000
 800b764:	41dfffff 	.word	0x41dfffff
 800b768:	000fffff 	.word	0x000fffff
 800b76c:	7ff00000 	.word	0x7ff00000
 800b770:	7fefffff 	.word	0x7fefffff
 800b774:	3ff00000 	.word	0x3ff00000
 800b778:	7c9fffff 	.word	0x7c9fffff
 800b77c:	bff00000 	.word	0xbff00000
 800b780:	7fe00000 	.word	0x7fe00000

0800b784 <_strtod_r>:
 800b784:	4b01      	ldr	r3, [pc, #4]	; (800b78c <_strtod_r+0x8>)
 800b786:	f7ff ba27 	b.w	800abd8 <_strtod_l>
 800b78a:	bf00      	nop
 800b78c:	200000d8 	.word	0x200000d8

0800b790 <_strtol_l.isra.0>:
 800b790:	2b01      	cmp	r3, #1
 800b792:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b796:	d001      	beq.n	800b79c <_strtol_l.isra.0+0xc>
 800b798:	2b24      	cmp	r3, #36	; 0x24
 800b79a:	d906      	bls.n	800b7aa <_strtol_l.isra.0+0x1a>
 800b79c:	f7fe f846 	bl	800982c <__errno>
 800b7a0:	2316      	movs	r3, #22
 800b7a2:	6003      	str	r3, [r0, #0]
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7aa:	4f3a      	ldr	r7, [pc, #232]	; (800b894 <_strtol_l.isra.0+0x104>)
 800b7ac:	468e      	mov	lr, r1
 800b7ae:	4676      	mov	r6, lr
 800b7b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b7b4:	5de5      	ldrb	r5, [r4, r7]
 800b7b6:	f015 0508 	ands.w	r5, r5, #8
 800b7ba:	d1f8      	bne.n	800b7ae <_strtol_l.isra.0+0x1e>
 800b7bc:	2c2d      	cmp	r4, #45	; 0x2d
 800b7be:	d134      	bne.n	800b82a <_strtol_l.isra.0+0x9a>
 800b7c0:	f89e 4000 	ldrb.w	r4, [lr]
 800b7c4:	f04f 0801 	mov.w	r8, #1
 800b7c8:	f106 0e02 	add.w	lr, r6, #2
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d05c      	beq.n	800b88a <_strtol_l.isra.0+0xfa>
 800b7d0:	2b10      	cmp	r3, #16
 800b7d2:	d10c      	bne.n	800b7ee <_strtol_l.isra.0+0x5e>
 800b7d4:	2c30      	cmp	r4, #48	; 0x30
 800b7d6:	d10a      	bne.n	800b7ee <_strtol_l.isra.0+0x5e>
 800b7d8:	f89e 4000 	ldrb.w	r4, [lr]
 800b7dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b7e0:	2c58      	cmp	r4, #88	; 0x58
 800b7e2:	d14d      	bne.n	800b880 <_strtol_l.isra.0+0xf0>
 800b7e4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b7e8:	2310      	movs	r3, #16
 800b7ea:	f10e 0e02 	add.w	lr, lr, #2
 800b7ee:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b7f2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b7f6:	2600      	movs	r6, #0
 800b7f8:	fbbc f9f3 	udiv	r9, ip, r3
 800b7fc:	4635      	mov	r5, r6
 800b7fe:	fb03 ca19 	mls	sl, r3, r9, ip
 800b802:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b806:	2f09      	cmp	r7, #9
 800b808:	d818      	bhi.n	800b83c <_strtol_l.isra.0+0xac>
 800b80a:	463c      	mov	r4, r7
 800b80c:	42a3      	cmp	r3, r4
 800b80e:	dd24      	ble.n	800b85a <_strtol_l.isra.0+0xca>
 800b810:	2e00      	cmp	r6, #0
 800b812:	db1f      	blt.n	800b854 <_strtol_l.isra.0+0xc4>
 800b814:	45a9      	cmp	r9, r5
 800b816:	d31d      	bcc.n	800b854 <_strtol_l.isra.0+0xc4>
 800b818:	d101      	bne.n	800b81e <_strtol_l.isra.0+0x8e>
 800b81a:	45a2      	cmp	sl, r4
 800b81c:	db1a      	blt.n	800b854 <_strtol_l.isra.0+0xc4>
 800b81e:	fb05 4503 	mla	r5, r5, r3, r4
 800b822:	2601      	movs	r6, #1
 800b824:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b828:	e7eb      	b.n	800b802 <_strtol_l.isra.0+0x72>
 800b82a:	2c2b      	cmp	r4, #43	; 0x2b
 800b82c:	bf08      	it	eq
 800b82e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b832:	46a8      	mov	r8, r5
 800b834:	bf08      	it	eq
 800b836:	f106 0e02 	addeq.w	lr, r6, #2
 800b83a:	e7c7      	b.n	800b7cc <_strtol_l.isra.0+0x3c>
 800b83c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b840:	2f19      	cmp	r7, #25
 800b842:	d801      	bhi.n	800b848 <_strtol_l.isra.0+0xb8>
 800b844:	3c37      	subs	r4, #55	; 0x37
 800b846:	e7e1      	b.n	800b80c <_strtol_l.isra.0+0x7c>
 800b848:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b84c:	2f19      	cmp	r7, #25
 800b84e:	d804      	bhi.n	800b85a <_strtol_l.isra.0+0xca>
 800b850:	3c57      	subs	r4, #87	; 0x57
 800b852:	e7db      	b.n	800b80c <_strtol_l.isra.0+0x7c>
 800b854:	f04f 36ff 	mov.w	r6, #4294967295
 800b858:	e7e4      	b.n	800b824 <_strtol_l.isra.0+0x94>
 800b85a:	2e00      	cmp	r6, #0
 800b85c:	da05      	bge.n	800b86a <_strtol_l.isra.0+0xda>
 800b85e:	2322      	movs	r3, #34	; 0x22
 800b860:	6003      	str	r3, [r0, #0]
 800b862:	4665      	mov	r5, ip
 800b864:	b942      	cbnz	r2, 800b878 <_strtol_l.isra.0+0xe8>
 800b866:	4628      	mov	r0, r5
 800b868:	e79d      	b.n	800b7a6 <_strtol_l.isra.0+0x16>
 800b86a:	f1b8 0f00 	cmp.w	r8, #0
 800b86e:	d000      	beq.n	800b872 <_strtol_l.isra.0+0xe2>
 800b870:	426d      	negs	r5, r5
 800b872:	2a00      	cmp	r2, #0
 800b874:	d0f7      	beq.n	800b866 <_strtol_l.isra.0+0xd6>
 800b876:	b10e      	cbz	r6, 800b87c <_strtol_l.isra.0+0xec>
 800b878:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b87c:	6011      	str	r1, [r2, #0]
 800b87e:	e7f2      	b.n	800b866 <_strtol_l.isra.0+0xd6>
 800b880:	2430      	movs	r4, #48	; 0x30
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1b3      	bne.n	800b7ee <_strtol_l.isra.0+0x5e>
 800b886:	2308      	movs	r3, #8
 800b888:	e7b1      	b.n	800b7ee <_strtol_l.isra.0+0x5e>
 800b88a:	2c30      	cmp	r4, #48	; 0x30
 800b88c:	d0a4      	beq.n	800b7d8 <_strtol_l.isra.0+0x48>
 800b88e:	230a      	movs	r3, #10
 800b890:	e7ad      	b.n	800b7ee <_strtol_l.isra.0+0x5e>
 800b892:	bf00      	nop
 800b894:	0800e4f1 	.word	0x0800e4f1

0800b898 <_strtol_r>:
 800b898:	f7ff bf7a 	b.w	800b790 <_strtol_l.isra.0>

0800b89c <__swbuf_r>:
 800b89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89e:	460e      	mov	r6, r1
 800b8a0:	4614      	mov	r4, r2
 800b8a2:	4605      	mov	r5, r0
 800b8a4:	b118      	cbz	r0, 800b8ae <__swbuf_r+0x12>
 800b8a6:	6983      	ldr	r3, [r0, #24]
 800b8a8:	b90b      	cbnz	r3, 800b8ae <__swbuf_r+0x12>
 800b8aa:	f7fe f81d 	bl	80098e8 <__sinit>
 800b8ae:	4b21      	ldr	r3, [pc, #132]	; (800b934 <__swbuf_r+0x98>)
 800b8b0:	429c      	cmp	r4, r3
 800b8b2:	d12b      	bne.n	800b90c <__swbuf_r+0x70>
 800b8b4:	686c      	ldr	r4, [r5, #4]
 800b8b6:	69a3      	ldr	r3, [r4, #24]
 800b8b8:	60a3      	str	r3, [r4, #8]
 800b8ba:	89a3      	ldrh	r3, [r4, #12]
 800b8bc:	071a      	lsls	r2, r3, #28
 800b8be:	d52f      	bpl.n	800b920 <__swbuf_r+0x84>
 800b8c0:	6923      	ldr	r3, [r4, #16]
 800b8c2:	b36b      	cbz	r3, 800b920 <__swbuf_r+0x84>
 800b8c4:	6923      	ldr	r3, [r4, #16]
 800b8c6:	6820      	ldr	r0, [r4, #0]
 800b8c8:	1ac0      	subs	r0, r0, r3
 800b8ca:	6963      	ldr	r3, [r4, #20]
 800b8cc:	b2f6      	uxtb	r6, r6
 800b8ce:	4283      	cmp	r3, r0
 800b8d0:	4637      	mov	r7, r6
 800b8d2:	dc04      	bgt.n	800b8de <__swbuf_r+0x42>
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	f000 ff56 	bl	800c788 <_fflush_r>
 800b8dc:	bb30      	cbnz	r0, 800b92c <__swbuf_r+0x90>
 800b8de:	68a3      	ldr	r3, [r4, #8]
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	60a3      	str	r3, [r4, #8]
 800b8e4:	6823      	ldr	r3, [r4, #0]
 800b8e6:	1c5a      	adds	r2, r3, #1
 800b8e8:	6022      	str	r2, [r4, #0]
 800b8ea:	701e      	strb	r6, [r3, #0]
 800b8ec:	6963      	ldr	r3, [r4, #20]
 800b8ee:	3001      	adds	r0, #1
 800b8f0:	4283      	cmp	r3, r0
 800b8f2:	d004      	beq.n	800b8fe <__swbuf_r+0x62>
 800b8f4:	89a3      	ldrh	r3, [r4, #12]
 800b8f6:	07db      	lsls	r3, r3, #31
 800b8f8:	d506      	bpl.n	800b908 <__swbuf_r+0x6c>
 800b8fa:	2e0a      	cmp	r6, #10
 800b8fc:	d104      	bne.n	800b908 <__swbuf_r+0x6c>
 800b8fe:	4621      	mov	r1, r4
 800b900:	4628      	mov	r0, r5
 800b902:	f000 ff41 	bl	800c788 <_fflush_r>
 800b906:	b988      	cbnz	r0, 800b92c <__swbuf_r+0x90>
 800b908:	4638      	mov	r0, r7
 800b90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b90c:	4b0a      	ldr	r3, [pc, #40]	; (800b938 <__swbuf_r+0x9c>)
 800b90e:	429c      	cmp	r4, r3
 800b910:	d101      	bne.n	800b916 <__swbuf_r+0x7a>
 800b912:	68ac      	ldr	r4, [r5, #8]
 800b914:	e7cf      	b.n	800b8b6 <__swbuf_r+0x1a>
 800b916:	4b09      	ldr	r3, [pc, #36]	; (800b93c <__swbuf_r+0xa0>)
 800b918:	429c      	cmp	r4, r3
 800b91a:	bf08      	it	eq
 800b91c:	68ec      	ldreq	r4, [r5, #12]
 800b91e:	e7ca      	b.n	800b8b6 <__swbuf_r+0x1a>
 800b920:	4621      	mov	r1, r4
 800b922:	4628      	mov	r0, r5
 800b924:	f000 f81e 	bl	800b964 <__swsetup_r>
 800b928:	2800      	cmp	r0, #0
 800b92a:	d0cb      	beq.n	800b8c4 <__swbuf_r+0x28>
 800b92c:	f04f 37ff 	mov.w	r7, #4294967295
 800b930:	e7ea      	b.n	800b908 <__swbuf_r+0x6c>
 800b932:	bf00      	nop
 800b934:	0800e614 	.word	0x0800e614
 800b938:	0800e634 	.word	0x0800e634
 800b93c:	0800e5f4 	.word	0x0800e5f4

0800b940 <_write_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	4d07      	ldr	r5, [pc, #28]	; (800b960 <_write_r+0x20>)
 800b944:	4604      	mov	r4, r0
 800b946:	4608      	mov	r0, r1
 800b948:	4611      	mov	r1, r2
 800b94a:	2200      	movs	r2, #0
 800b94c:	602a      	str	r2, [r5, #0]
 800b94e:	461a      	mov	r2, r3
 800b950:	f7f6 f9ed 	bl	8001d2e <_write>
 800b954:	1c43      	adds	r3, r0, #1
 800b956:	d102      	bne.n	800b95e <_write_r+0x1e>
 800b958:	682b      	ldr	r3, [r5, #0]
 800b95a:	b103      	cbz	r3, 800b95e <_write_r+0x1e>
 800b95c:	6023      	str	r3, [r4, #0]
 800b95e:	bd38      	pop	{r3, r4, r5, pc}
 800b960:	20004ecc 	.word	0x20004ecc

0800b964 <__swsetup_r>:
 800b964:	4b32      	ldr	r3, [pc, #200]	; (800ba30 <__swsetup_r+0xcc>)
 800b966:	b570      	push	{r4, r5, r6, lr}
 800b968:	681d      	ldr	r5, [r3, #0]
 800b96a:	4606      	mov	r6, r0
 800b96c:	460c      	mov	r4, r1
 800b96e:	b125      	cbz	r5, 800b97a <__swsetup_r+0x16>
 800b970:	69ab      	ldr	r3, [r5, #24]
 800b972:	b913      	cbnz	r3, 800b97a <__swsetup_r+0x16>
 800b974:	4628      	mov	r0, r5
 800b976:	f7fd ffb7 	bl	80098e8 <__sinit>
 800b97a:	4b2e      	ldr	r3, [pc, #184]	; (800ba34 <__swsetup_r+0xd0>)
 800b97c:	429c      	cmp	r4, r3
 800b97e:	d10f      	bne.n	800b9a0 <__swsetup_r+0x3c>
 800b980:	686c      	ldr	r4, [r5, #4]
 800b982:	89a3      	ldrh	r3, [r4, #12]
 800b984:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b988:	0719      	lsls	r1, r3, #28
 800b98a:	d42c      	bmi.n	800b9e6 <__swsetup_r+0x82>
 800b98c:	06dd      	lsls	r5, r3, #27
 800b98e:	d411      	bmi.n	800b9b4 <__swsetup_r+0x50>
 800b990:	2309      	movs	r3, #9
 800b992:	6033      	str	r3, [r6, #0]
 800b994:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b998:	81a3      	strh	r3, [r4, #12]
 800b99a:	f04f 30ff 	mov.w	r0, #4294967295
 800b99e:	e03e      	b.n	800ba1e <__swsetup_r+0xba>
 800b9a0:	4b25      	ldr	r3, [pc, #148]	; (800ba38 <__swsetup_r+0xd4>)
 800b9a2:	429c      	cmp	r4, r3
 800b9a4:	d101      	bne.n	800b9aa <__swsetup_r+0x46>
 800b9a6:	68ac      	ldr	r4, [r5, #8]
 800b9a8:	e7eb      	b.n	800b982 <__swsetup_r+0x1e>
 800b9aa:	4b24      	ldr	r3, [pc, #144]	; (800ba3c <__swsetup_r+0xd8>)
 800b9ac:	429c      	cmp	r4, r3
 800b9ae:	bf08      	it	eq
 800b9b0:	68ec      	ldreq	r4, [r5, #12]
 800b9b2:	e7e6      	b.n	800b982 <__swsetup_r+0x1e>
 800b9b4:	0758      	lsls	r0, r3, #29
 800b9b6:	d512      	bpl.n	800b9de <__swsetup_r+0x7a>
 800b9b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9ba:	b141      	cbz	r1, 800b9ce <__swsetup_r+0x6a>
 800b9bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9c0:	4299      	cmp	r1, r3
 800b9c2:	d002      	beq.n	800b9ca <__swsetup_r+0x66>
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	f7fe f873 	bl	8009ab0 <_free_r>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	6363      	str	r3, [r4, #52]	; 0x34
 800b9ce:	89a3      	ldrh	r3, [r4, #12]
 800b9d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b9d4:	81a3      	strh	r3, [r4, #12]
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	6063      	str	r3, [r4, #4]
 800b9da:	6923      	ldr	r3, [r4, #16]
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	89a3      	ldrh	r3, [r4, #12]
 800b9e0:	f043 0308 	orr.w	r3, r3, #8
 800b9e4:	81a3      	strh	r3, [r4, #12]
 800b9e6:	6923      	ldr	r3, [r4, #16]
 800b9e8:	b94b      	cbnz	r3, 800b9fe <__swsetup_r+0x9a>
 800b9ea:	89a3      	ldrh	r3, [r4, #12]
 800b9ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b9f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9f4:	d003      	beq.n	800b9fe <__swsetup_r+0x9a>
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	f001 faab 	bl	800cf54 <__smakebuf_r>
 800b9fe:	89a0      	ldrh	r0, [r4, #12]
 800ba00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba04:	f010 0301 	ands.w	r3, r0, #1
 800ba08:	d00a      	beq.n	800ba20 <__swsetup_r+0xbc>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	60a3      	str	r3, [r4, #8]
 800ba0e:	6963      	ldr	r3, [r4, #20]
 800ba10:	425b      	negs	r3, r3
 800ba12:	61a3      	str	r3, [r4, #24]
 800ba14:	6923      	ldr	r3, [r4, #16]
 800ba16:	b943      	cbnz	r3, 800ba2a <__swsetup_r+0xc6>
 800ba18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba1c:	d1ba      	bne.n	800b994 <__swsetup_r+0x30>
 800ba1e:	bd70      	pop	{r4, r5, r6, pc}
 800ba20:	0781      	lsls	r1, r0, #30
 800ba22:	bf58      	it	pl
 800ba24:	6963      	ldrpl	r3, [r4, #20]
 800ba26:	60a3      	str	r3, [r4, #8]
 800ba28:	e7f4      	b.n	800ba14 <__swsetup_r+0xb0>
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	e7f7      	b.n	800ba1e <__swsetup_r+0xba>
 800ba2e:	bf00      	nop
 800ba30:	20000070 	.word	0x20000070
 800ba34:	0800e614 	.word	0x0800e614
 800ba38:	0800e634 	.word	0x0800e634
 800ba3c:	0800e5f4 	.word	0x0800e5f4

0800ba40 <_close_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4d06      	ldr	r5, [pc, #24]	; (800ba5c <_close_r+0x1c>)
 800ba44:	2300      	movs	r3, #0
 800ba46:	4604      	mov	r4, r0
 800ba48:	4608      	mov	r0, r1
 800ba4a:	602b      	str	r3, [r5, #0]
 800ba4c:	f7f6 f98b 	bl	8001d66 <_close>
 800ba50:	1c43      	adds	r3, r0, #1
 800ba52:	d102      	bne.n	800ba5a <_close_r+0x1a>
 800ba54:	682b      	ldr	r3, [r5, #0]
 800ba56:	b103      	cbz	r3, 800ba5a <_close_r+0x1a>
 800ba58:	6023      	str	r3, [r4, #0]
 800ba5a:	bd38      	pop	{r3, r4, r5, pc}
 800ba5c:	20004ecc 	.word	0x20004ecc

0800ba60 <quorem>:
 800ba60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba64:	6903      	ldr	r3, [r0, #16]
 800ba66:	690c      	ldr	r4, [r1, #16]
 800ba68:	42a3      	cmp	r3, r4
 800ba6a:	4607      	mov	r7, r0
 800ba6c:	f2c0 8081 	blt.w	800bb72 <quorem+0x112>
 800ba70:	3c01      	subs	r4, #1
 800ba72:	f101 0814 	add.w	r8, r1, #20
 800ba76:	f100 0514 	add.w	r5, r0, #20
 800ba7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba7e:	9301      	str	r3, [sp, #4]
 800ba80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ba90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba94:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba98:	d331      	bcc.n	800bafe <quorem+0x9e>
 800ba9a:	f04f 0e00 	mov.w	lr, #0
 800ba9e:	4640      	mov	r0, r8
 800baa0:	46ac      	mov	ip, r5
 800baa2:	46f2      	mov	sl, lr
 800baa4:	f850 2b04 	ldr.w	r2, [r0], #4
 800baa8:	b293      	uxth	r3, r2
 800baaa:	fb06 e303 	mla	r3, r6, r3, lr
 800baae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	ebaa 0303 	sub.w	r3, sl, r3
 800bab8:	0c12      	lsrs	r2, r2, #16
 800baba:	f8dc a000 	ldr.w	sl, [ip]
 800babe:	fb06 e202 	mla	r2, r6, r2, lr
 800bac2:	fa13 f38a 	uxtah	r3, r3, sl
 800bac6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800baca:	fa1f fa82 	uxth.w	sl, r2
 800bace:	f8dc 2000 	ldr.w	r2, [ip]
 800bad2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bad6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bada:	b29b      	uxth	r3, r3
 800badc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bae0:	4581      	cmp	r9, r0
 800bae2:	f84c 3b04 	str.w	r3, [ip], #4
 800bae6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800baea:	d2db      	bcs.n	800baa4 <quorem+0x44>
 800baec:	f855 300b 	ldr.w	r3, [r5, fp]
 800baf0:	b92b      	cbnz	r3, 800bafe <quorem+0x9e>
 800baf2:	9b01      	ldr	r3, [sp, #4]
 800baf4:	3b04      	subs	r3, #4
 800baf6:	429d      	cmp	r5, r3
 800baf8:	461a      	mov	r2, r3
 800bafa:	d32e      	bcc.n	800bb5a <quorem+0xfa>
 800bafc:	613c      	str	r4, [r7, #16]
 800bafe:	4638      	mov	r0, r7
 800bb00:	f001 fd4e 	bl	800d5a0 <__mcmp>
 800bb04:	2800      	cmp	r0, #0
 800bb06:	db24      	blt.n	800bb52 <quorem+0xf2>
 800bb08:	3601      	adds	r6, #1
 800bb0a:	4628      	mov	r0, r5
 800bb0c:	f04f 0c00 	mov.w	ip, #0
 800bb10:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb14:	f8d0 e000 	ldr.w	lr, [r0]
 800bb18:	b293      	uxth	r3, r2
 800bb1a:	ebac 0303 	sub.w	r3, ip, r3
 800bb1e:	0c12      	lsrs	r2, r2, #16
 800bb20:	fa13 f38e 	uxtah	r3, r3, lr
 800bb24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bb28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb32:	45c1      	cmp	r9, r8
 800bb34:	f840 3b04 	str.w	r3, [r0], #4
 800bb38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bb3c:	d2e8      	bcs.n	800bb10 <quorem+0xb0>
 800bb3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb46:	b922      	cbnz	r2, 800bb52 <quorem+0xf2>
 800bb48:	3b04      	subs	r3, #4
 800bb4a:	429d      	cmp	r5, r3
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	d30a      	bcc.n	800bb66 <quorem+0x106>
 800bb50:	613c      	str	r4, [r7, #16]
 800bb52:	4630      	mov	r0, r6
 800bb54:	b003      	add	sp, #12
 800bb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb5a:	6812      	ldr	r2, [r2, #0]
 800bb5c:	3b04      	subs	r3, #4
 800bb5e:	2a00      	cmp	r2, #0
 800bb60:	d1cc      	bne.n	800bafc <quorem+0x9c>
 800bb62:	3c01      	subs	r4, #1
 800bb64:	e7c7      	b.n	800baf6 <quorem+0x96>
 800bb66:	6812      	ldr	r2, [r2, #0]
 800bb68:	3b04      	subs	r3, #4
 800bb6a:	2a00      	cmp	r2, #0
 800bb6c:	d1f0      	bne.n	800bb50 <quorem+0xf0>
 800bb6e:	3c01      	subs	r4, #1
 800bb70:	e7eb      	b.n	800bb4a <quorem+0xea>
 800bb72:	2000      	movs	r0, #0
 800bb74:	e7ee      	b.n	800bb54 <quorem+0xf4>
	...

0800bb78 <_dtoa_r>:
 800bb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7c:	ec59 8b10 	vmov	r8, r9, d0
 800bb80:	b095      	sub	sp, #84	; 0x54
 800bb82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bb84:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800bb86:	9107      	str	r1, [sp, #28]
 800bb88:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800bb8c:	4606      	mov	r6, r0
 800bb8e:	9209      	str	r2, [sp, #36]	; 0x24
 800bb90:	9310      	str	r3, [sp, #64]	; 0x40
 800bb92:	b975      	cbnz	r5, 800bbb2 <_dtoa_r+0x3a>
 800bb94:	2010      	movs	r0, #16
 800bb96:	f7fd ff6d 	bl	8009a74 <malloc>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	6270      	str	r0, [r6, #36]	; 0x24
 800bb9e:	b920      	cbnz	r0, 800bbaa <_dtoa_r+0x32>
 800bba0:	4bab      	ldr	r3, [pc, #684]	; (800be50 <_dtoa_r+0x2d8>)
 800bba2:	21ea      	movs	r1, #234	; 0xea
 800bba4:	48ab      	ldr	r0, [pc, #684]	; (800be54 <_dtoa_r+0x2dc>)
 800bba6:	f002 fa37 	bl	800e018 <__assert_func>
 800bbaa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bbae:	6005      	str	r5, [r0, #0]
 800bbb0:	60c5      	str	r5, [r0, #12]
 800bbb2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bbb4:	6819      	ldr	r1, [r3, #0]
 800bbb6:	b151      	cbz	r1, 800bbce <_dtoa_r+0x56>
 800bbb8:	685a      	ldr	r2, [r3, #4]
 800bbba:	604a      	str	r2, [r1, #4]
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	4093      	lsls	r3, r2
 800bbc0:	608b      	str	r3, [r1, #8]
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	f001 fa64 	bl	800d090 <_Bfree>
 800bbc8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bbca:	2200      	movs	r2, #0
 800bbcc:	601a      	str	r2, [r3, #0]
 800bbce:	f1b9 0300 	subs.w	r3, r9, #0
 800bbd2:	bfbb      	ittet	lt
 800bbd4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bbd8:	9303      	strlt	r3, [sp, #12]
 800bbda:	2300      	movge	r3, #0
 800bbdc:	2201      	movlt	r2, #1
 800bbde:	bfac      	ite	ge
 800bbe0:	6023      	strge	r3, [r4, #0]
 800bbe2:	6022      	strlt	r2, [r4, #0]
 800bbe4:	4b9c      	ldr	r3, [pc, #624]	; (800be58 <_dtoa_r+0x2e0>)
 800bbe6:	9c03      	ldr	r4, [sp, #12]
 800bbe8:	43a3      	bics	r3, r4
 800bbea:	d11a      	bne.n	800bc22 <_dtoa_r+0xaa>
 800bbec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bbee:	f242 730f 	movw	r3, #9999	; 0x270f
 800bbf2:	6013      	str	r3, [r2, #0]
 800bbf4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800bbf8:	ea53 0308 	orrs.w	r3, r3, r8
 800bbfc:	f000 8512 	beq.w	800c624 <_dtoa_r+0xaac>
 800bc00:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bc02:	b953      	cbnz	r3, 800bc1a <_dtoa_r+0xa2>
 800bc04:	4b95      	ldr	r3, [pc, #596]	; (800be5c <_dtoa_r+0x2e4>)
 800bc06:	e01f      	b.n	800bc48 <_dtoa_r+0xd0>
 800bc08:	4b95      	ldr	r3, [pc, #596]	; (800be60 <_dtoa_r+0x2e8>)
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	3308      	adds	r3, #8
 800bc0e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bc10:	6013      	str	r3, [r2, #0]
 800bc12:	9800      	ldr	r0, [sp, #0]
 800bc14:	b015      	add	sp, #84	; 0x54
 800bc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1a:	4b90      	ldr	r3, [pc, #576]	; (800be5c <_dtoa_r+0x2e4>)
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	3303      	adds	r3, #3
 800bc20:	e7f5      	b.n	800bc0e <_dtoa_r+0x96>
 800bc22:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc2e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bc32:	d10b      	bne.n	800bc4c <_dtoa_r+0xd4>
 800bc34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc36:	2301      	movs	r3, #1
 800bc38:	6013      	str	r3, [r2, #0]
 800bc3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 84ee 	beq.w	800c61e <_dtoa_r+0xaa6>
 800bc42:	4888      	ldr	r0, [pc, #544]	; (800be64 <_dtoa_r+0x2ec>)
 800bc44:	6018      	str	r0, [r3, #0]
 800bc46:	1e43      	subs	r3, r0, #1
 800bc48:	9300      	str	r3, [sp, #0]
 800bc4a:	e7e2      	b.n	800bc12 <_dtoa_r+0x9a>
 800bc4c:	a913      	add	r1, sp, #76	; 0x4c
 800bc4e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bc52:	aa12      	add	r2, sp, #72	; 0x48
 800bc54:	4630      	mov	r0, r6
 800bc56:	f001 fdc3 	bl	800d7e0 <__d2b>
 800bc5a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800bc5e:	4605      	mov	r5, r0
 800bc60:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bc62:	2900      	cmp	r1, #0
 800bc64:	d047      	beq.n	800bcf6 <_dtoa_r+0x17e>
 800bc66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bc68:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bc6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bc70:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800bc74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bc78:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bc7c:	2400      	movs	r4, #0
 800bc7e:	ec43 2b16 	vmov	d6, r2, r3
 800bc82:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800bc86:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800be38 <_dtoa_r+0x2c0>
 800bc8a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bc8e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800be40 <_dtoa_r+0x2c8>
 800bc92:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bc96:	eeb0 7b46 	vmov.f64	d7, d6
 800bc9a:	ee06 1a90 	vmov	s13, r1
 800bc9e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800bca2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800be48 <_dtoa_r+0x2d0>
 800bca6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bcaa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bcae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bcb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcb6:	ee16 ba90 	vmov	fp, s13
 800bcba:	9411      	str	r4, [sp, #68]	; 0x44
 800bcbc:	d508      	bpl.n	800bcd0 <_dtoa_r+0x158>
 800bcbe:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bcc2:	eeb4 6b47 	vcmp.f64	d6, d7
 800bcc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcca:	bf18      	it	ne
 800bccc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800bcd0:	f1bb 0f16 	cmp.w	fp, #22
 800bcd4:	d832      	bhi.n	800bd3c <_dtoa_r+0x1c4>
 800bcd6:	4b64      	ldr	r3, [pc, #400]	; (800be68 <_dtoa_r+0x2f0>)
 800bcd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bcdc:	ed93 7b00 	vldr	d7, [r3]
 800bce0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800bce4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcec:	d501      	bpl.n	800bcf2 <_dtoa_r+0x17a>
 800bcee:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	e023      	b.n	800bd3e <_dtoa_r+0x1c6>
 800bcf6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bcf8:	4401      	add	r1, r0
 800bcfa:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800bcfe:	2b20      	cmp	r3, #32
 800bd00:	bfc3      	ittte	gt
 800bd02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bd06:	fa04 f303 	lslgt.w	r3, r4, r3
 800bd0a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800bd0e:	f1c3 0320 	rsble	r3, r3, #32
 800bd12:	bfc6      	itte	gt
 800bd14:	fa28 f804 	lsrgt.w	r8, r8, r4
 800bd18:	ea43 0308 	orrgt.w	r3, r3, r8
 800bd1c:	fa08 f303 	lslle.w	r3, r8, r3
 800bd20:	ee07 3a90 	vmov	s15, r3
 800bd24:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bd28:	3901      	subs	r1, #1
 800bd2a:	ed8d 7b00 	vstr	d7, [sp]
 800bd2e:	9c01      	ldr	r4, [sp, #4]
 800bd30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd34:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800bd38:	2401      	movs	r4, #1
 800bd3a:	e7a0      	b.n	800bc7e <_dtoa_r+0x106>
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd40:	1a43      	subs	r3, r0, r1
 800bd42:	1e5a      	subs	r2, r3, #1
 800bd44:	bf45      	ittet	mi
 800bd46:	f1c3 0301 	rsbmi	r3, r3, #1
 800bd4a:	9305      	strmi	r3, [sp, #20]
 800bd4c:	2300      	movpl	r3, #0
 800bd4e:	2300      	movmi	r3, #0
 800bd50:	9206      	str	r2, [sp, #24]
 800bd52:	bf54      	ite	pl
 800bd54:	9305      	strpl	r3, [sp, #20]
 800bd56:	9306      	strmi	r3, [sp, #24]
 800bd58:	f1bb 0f00 	cmp.w	fp, #0
 800bd5c:	db18      	blt.n	800bd90 <_dtoa_r+0x218>
 800bd5e:	9b06      	ldr	r3, [sp, #24]
 800bd60:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800bd64:	445b      	add	r3, fp
 800bd66:	9306      	str	r3, [sp, #24]
 800bd68:	2300      	movs	r3, #0
 800bd6a:	9a07      	ldr	r2, [sp, #28]
 800bd6c:	2a09      	cmp	r2, #9
 800bd6e:	d849      	bhi.n	800be04 <_dtoa_r+0x28c>
 800bd70:	2a05      	cmp	r2, #5
 800bd72:	bfc4      	itt	gt
 800bd74:	3a04      	subgt	r2, #4
 800bd76:	9207      	strgt	r2, [sp, #28]
 800bd78:	9a07      	ldr	r2, [sp, #28]
 800bd7a:	f1a2 0202 	sub.w	r2, r2, #2
 800bd7e:	bfcc      	ite	gt
 800bd80:	2400      	movgt	r4, #0
 800bd82:	2401      	movle	r4, #1
 800bd84:	2a03      	cmp	r2, #3
 800bd86:	d848      	bhi.n	800be1a <_dtoa_r+0x2a2>
 800bd88:	e8df f002 	tbb	[pc, r2]
 800bd8c:	3a2c2e0b 	.word	0x3a2c2e0b
 800bd90:	9b05      	ldr	r3, [sp, #20]
 800bd92:	2200      	movs	r2, #0
 800bd94:	eba3 030b 	sub.w	r3, r3, fp
 800bd98:	9305      	str	r3, [sp, #20]
 800bd9a:	920e      	str	r2, [sp, #56]	; 0x38
 800bd9c:	f1cb 0300 	rsb	r3, fp, #0
 800bda0:	e7e3      	b.n	800bd6a <_dtoa_r+0x1f2>
 800bda2:	2200      	movs	r2, #0
 800bda4:	9208      	str	r2, [sp, #32]
 800bda6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bda8:	2a00      	cmp	r2, #0
 800bdaa:	dc39      	bgt.n	800be20 <_dtoa_r+0x2a8>
 800bdac:	f04f 0a01 	mov.w	sl, #1
 800bdb0:	46d1      	mov	r9, sl
 800bdb2:	4652      	mov	r2, sl
 800bdb4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bdb8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800bdba:	2100      	movs	r1, #0
 800bdbc:	6079      	str	r1, [r7, #4]
 800bdbe:	2004      	movs	r0, #4
 800bdc0:	f100 0c14 	add.w	ip, r0, #20
 800bdc4:	4594      	cmp	ip, r2
 800bdc6:	6879      	ldr	r1, [r7, #4]
 800bdc8:	d92f      	bls.n	800be2a <_dtoa_r+0x2b2>
 800bdca:	4630      	mov	r0, r6
 800bdcc:	930c      	str	r3, [sp, #48]	; 0x30
 800bdce:	f001 f91f 	bl	800d010 <_Balloc>
 800bdd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdd4:	9000      	str	r0, [sp, #0]
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d149      	bne.n	800be70 <_dtoa_r+0x2f8>
 800bddc:	4b23      	ldr	r3, [pc, #140]	; (800be6c <_dtoa_r+0x2f4>)
 800bdde:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bde2:	e6df      	b.n	800bba4 <_dtoa_r+0x2c>
 800bde4:	2201      	movs	r2, #1
 800bde6:	e7dd      	b.n	800bda4 <_dtoa_r+0x22c>
 800bde8:	2200      	movs	r2, #0
 800bdea:	9208      	str	r2, [sp, #32]
 800bdec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdee:	eb0b 0a02 	add.w	sl, fp, r2
 800bdf2:	f10a 0901 	add.w	r9, sl, #1
 800bdf6:	464a      	mov	r2, r9
 800bdf8:	2a01      	cmp	r2, #1
 800bdfa:	bfb8      	it	lt
 800bdfc:	2201      	movlt	r2, #1
 800bdfe:	e7db      	b.n	800bdb8 <_dtoa_r+0x240>
 800be00:	2201      	movs	r2, #1
 800be02:	e7f2      	b.n	800bdea <_dtoa_r+0x272>
 800be04:	2401      	movs	r4, #1
 800be06:	2200      	movs	r2, #0
 800be08:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800be0c:	f04f 3aff 	mov.w	sl, #4294967295
 800be10:	2100      	movs	r1, #0
 800be12:	46d1      	mov	r9, sl
 800be14:	2212      	movs	r2, #18
 800be16:	9109      	str	r1, [sp, #36]	; 0x24
 800be18:	e7ce      	b.n	800bdb8 <_dtoa_r+0x240>
 800be1a:	2201      	movs	r2, #1
 800be1c:	9208      	str	r2, [sp, #32]
 800be1e:	e7f5      	b.n	800be0c <_dtoa_r+0x294>
 800be20:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800be24:	46d1      	mov	r9, sl
 800be26:	4652      	mov	r2, sl
 800be28:	e7c6      	b.n	800bdb8 <_dtoa_r+0x240>
 800be2a:	3101      	adds	r1, #1
 800be2c:	6079      	str	r1, [r7, #4]
 800be2e:	0040      	lsls	r0, r0, #1
 800be30:	e7c6      	b.n	800bdc0 <_dtoa_r+0x248>
 800be32:	bf00      	nop
 800be34:	f3af 8000 	nop.w
 800be38:	636f4361 	.word	0x636f4361
 800be3c:	3fd287a7 	.word	0x3fd287a7
 800be40:	8b60c8b3 	.word	0x8b60c8b3
 800be44:	3fc68a28 	.word	0x3fc68a28
 800be48:	509f79fb 	.word	0x509f79fb
 800be4c:	3fd34413 	.word	0x3fd34413
 800be50:	0800e6f5 	.word	0x0800e6f5
 800be54:	0800e70c 	.word	0x0800e70c
 800be58:	7ff00000 	.word	0x7ff00000
 800be5c:	0800e6f1 	.word	0x0800e6f1
 800be60:	0800e6e8 	.word	0x0800e6e8
 800be64:	0800e669 	.word	0x0800e669
 800be68:	0800e888 	.word	0x0800e888
 800be6c:	0800e76b 	.word	0x0800e76b
 800be70:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800be72:	9900      	ldr	r1, [sp, #0]
 800be74:	6011      	str	r1, [r2, #0]
 800be76:	f1b9 0f0e 	cmp.w	r9, #14
 800be7a:	d872      	bhi.n	800bf62 <_dtoa_r+0x3ea>
 800be7c:	2c00      	cmp	r4, #0
 800be7e:	d070      	beq.n	800bf62 <_dtoa_r+0x3ea>
 800be80:	f1bb 0f00 	cmp.w	fp, #0
 800be84:	f340 80a6 	ble.w	800bfd4 <_dtoa_r+0x45c>
 800be88:	49ca      	ldr	r1, [pc, #808]	; (800c1b4 <_dtoa_r+0x63c>)
 800be8a:	f00b 020f 	and.w	r2, fp, #15
 800be8e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800be92:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800be96:	ed92 7b00 	vldr	d7, [r2]
 800be9a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800be9e:	f000 808d 	beq.w	800bfbc <_dtoa_r+0x444>
 800bea2:	4ac5      	ldr	r2, [pc, #788]	; (800c1b8 <_dtoa_r+0x640>)
 800bea4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800bea8:	ed92 6b08 	vldr	d6, [r2, #32]
 800beac:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800beb0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800beb4:	f001 010f 	and.w	r1, r1, #15
 800beb8:	2203      	movs	r2, #3
 800beba:	48bf      	ldr	r0, [pc, #764]	; (800c1b8 <_dtoa_r+0x640>)
 800bebc:	2900      	cmp	r1, #0
 800bebe:	d17f      	bne.n	800bfc0 <_dtoa_r+0x448>
 800bec0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bec4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bec8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800becc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bece:	2900      	cmp	r1, #0
 800bed0:	f000 80b2 	beq.w	800c038 <_dtoa_r+0x4c0>
 800bed4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bed8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bedc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee4:	f140 80a8 	bpl.w	800c038 <_dtoa_r+0x4c0>
 800bee8:	f1b9 0f00 	cmp.w	r9, #0
 800beec:	f000 80a4 	beq.w	800c038 <_dtoa_r+0x4c0>
 800bef0:	f1ba 0f00 	cmp.w	sl, #0
 800bef4:	dd31      	ble.n	800bf5a <_dtoa_r+0x3e2>
 800bef6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800befa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800befe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf02:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bf06:	3201      	adds	r2, #1
 800bf08:	4650      	mov	r0, sl
 800bf0a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bf0e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800bf12:	ee07 2a90 	vmov	s15, r2
 800bf16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bf1a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bf1e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800bf22:	9c03      	ldr	r4, [sp, #12]
 800bf24:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bf28:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	f040 8086 	bne.w	800c03e <_dtoa_r+0x4c6>
 800bf32:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bf36:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bf3a:	ec42 1b17 	vmov	d7, r1, r2
 800bf3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bf42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf46:	f300 8272 	bgt.w	800c42e <_dtoa_r+0x8b6>
 800bf4a:	eeb1 7b47 	vneg.f64	d7, d7
 800bf4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bf52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf56:	f100 8267 	bmi.w	800c428 <_dtoa_r+0x8b0>
 800bf5a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800bf5e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bf62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf64:	2a00      	cmp	r2, #0
 800bf66:	f2c0 8129 	blt.w	800c1bc <_dtoa_r+0x644>
 800bf6a:	f1bb 0f0e 	cmp.w	fp, #14
 800bf6e:	f300 8125 	bgt.w	800c1bc <_dtoa_r+0x644>
 800bf72:	4b90      	ldr	r3, [pc, #576]	; (800c1b4 <_dtoa_r+0x63c>)
 800bf74:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bf78:	ed93 6b00 	vldr	d6, [r3]
 800bf7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	f280 80c3 	bge.w	800c10a <_dtoa_r+0x592>
 800bf84:	f1b9 0f00 	cmp.w	r9, #0
 800bf88:	f300 80bf 	bgt.w	800c10a <_dtoa_r+0x592>
 800bf8c:	f040 824c 	bne.w	800c428 <_dtoa_r+0x8b0>
 800bf90:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bf94:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bf98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bfa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa4:	464c      	mov	r4, r9
 800bfa6:	464f      	mov	r7, r9
 800bfa8:	f280 8222 	bge.w	800c3f0 <_dtoa_r+0x878>
 800bfac:	f8dd 8000 	ldr.w	r8, [sp]
 800bfb0:	2331      	movs	r3, #49	; 0x31
 800bfb2:	f808 3b01 	strb.w	r3, [r8], #1
 800bfb6:	f10b 0b01 	add.w	fp, fp, #1
 800bfba:	e21e      	b.n	800c3fa <_dtoa_r+0x882>
 800bfbc:	2202      	movs	r2, #2
 800bfbe:	e77c      	b.n	800beba <_dtoa_r+0x342>
 800bfc0:	07cc      	lsls	r4, r1, #31
 800bfc2:	d504      	bpl.n	800bfce <_dtoa_r+0x456>
 800bfc4:	ed90 6b00 	vldr	d6, [r0]
 800bfc8:	3201      	adds	r2, #1
 800bfca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bfce:	1049      	asrs	r1, r1, #1
 800bfd0:	3008      	adds	r0, #8
 800bfd2:	e773      	b.n	800bebc <_dtoa_r+0x344>
 800bfd4:	d02e      	beq.n	800c034 <_dtoa_r+0x4bc>
 800bfd6:	f1cb 0100 	rsb	r1, fp, #0
 800bfda:	4a76      	ldr	r2, [pc, #472]	; (800c1b4 <_dtoa_r+0x63c>)
 800bfdc:	f001 000f 	and.w	r0, r1, #15
 800bfe0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bfe4:	ed92 7b00 	vldr	d7, [r2]
 800bfe8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800bfec:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bff0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800bff4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800bff8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800bffc:	486e      	ldr	r0, [pc, #440]	; (800c1b8 <_dtoa_r+0x640>)
 800bffe:	1109      	asrs	r1, r1, #4
 800c000:	2400      	movs	r4, #0
 800c002:	2202      	movs	r2, #2
 800c004:	b939      	cbnz	r1, 800c016 <_dtoa_r+0x49e>
 800c006:	2c00      	cmp	r4, #0
 800c008:	f43f af60 	beq.w	800becc <_dtoa_r+0x354>
 800c00c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c014:	e75a      	b.n	800becc <_dtoa_r+0x354>
 800c016:	07cf      	lsls	r7, r1, #31
 800c018:	d509      	bpl.n	800c02e <_dtoa_r+0x4b6>
 800c01a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800c01e:	ed90 7b00 	vldr	d7, [r0]
 800c022:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c026:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c02a:	3201      	adds	r2, #1
 800c02c:	2401      	movs	r4, #1
 800c02e:	1049      	asrs	r1, r1, #1
 800c030:	3008      	adds	r0, #8
 800c032:	e7e7      	b.n	800c004 <_dtoa_r+0x48c>
 800c034:	2202      	movs	r2, #2
 800c036:	e749      	b.n	800becc <_dtoa_r+0x354>
 800c038:	465f      	mov	r7, fp
 800c03a:	4648      	mov	r0, r9
 800c03c:	e765      	b.n	800bf0a <_dtoa_r+0x392>
 800c03e:	ec42 1b17 	vmov	d7, r1, r2
 800c042:	4a5c      	ldr	r2, [pc, #368]	; (800c1b4 <_dtoa_r+0x63c>)
 800c044:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c048:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c04c:	9a00      	ldr	r2, [sp, #0]
 800c04e:	1814      	adds	r4, r2, r0
 800c050:	9a08      	ldr	r2, [sp, #32]
 800c052:	b352      	cbz	r2, 800c0aa <_dtoa_r+0x532>
 800c054:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c058:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c05c:	f8dd 8000 	ldr.w	r8, [sp]
 800c060:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c064:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c068:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c06c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c070:	ee14 2a90 	vmov	r2, s9
 800c074:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c078:	3230      	adds	r2, #48	; 0x30
 800c07a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c07e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c086:	f808 2b01 	strb.w	r2, [r8], #1
 800c08a:	d439      	bmi.n	800c100 <_dtoa_r+0x588>
 800c08c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c090:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c098:	d472      	bmi.n	800c180 <_dtoa_r+0x608>
 800c09a:	45a0      	cmp	r8, r4
 800c09c:	f43f af5d 	beq.w	800bf5a <_dtoa_r+0x3e2>
 800c0a0:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c0a4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c0a8:	e7e0      	b.n	800c06c <_dtoa_r+0x4f4>
 800c0aa:	f8dd 8000 	ldr.w	r8, [sp]
 800c0ae:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c0b2:	4621      	mov	r1, r4
 800c0b4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c0b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c0bc:	ee14 2a90 	vmov	r2, s9
 800c0c0:	3230      	adds	r2, #48	; 0x30
 800c0c2:	f808 2b01 	strb.w	r2, [r8], #1
 800c0c6:	45a0      	cmp	r8, r4
 800c0c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c0cc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c0d0:	d118      	bne.n	800c104 <_dtoa_r+0x58c>
 800c0d2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c0d6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c0da:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0e2:	dc4d      	bgt.n	800c180 <_dtoa_r+0x608>
 800c0e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c0e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0f0:	f57f af33 	bpl.w	800bf5a <_dtoa_r+0x3e2>
 800c0f4:	4688      	mov	r8, r1
 800c0f6:	3901      	subs	r1, #1
 800c0f8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c0fc:	2b30      	cmp	r3, #48	; 0x30
 800c0fe:	d0f9      	beq.n	800c0f4 <_dtoa_r+0x57c>
 800c100:	46bb      	mov	fp, r7
 800c102:	e02a      	b.n	800c15a <_dtoa_r+0x5e2>
 800c104:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c108:	e7d6      	b.n	800c0b8 <_dtoa_r+0x540>
 800c10a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c10e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c112:	f8dd 8000 	ldr.w	r8, [sp]
 800c116:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c11a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c11e:	ee15 3a10 	vmov	r3, s10
 800c122:	3330      	adds	r3, #48	; 0x30
 800c124:	f808 3b01 	strb.w	r3, [r8], #1
 800c128:	9b00      	ldr	r3, [sp, #0]
 800c12a:	eba8 0303 	sub.w	r3, r8, r3
 800c12e:	4599      	cmp	r9, r3
 800c130:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c134:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c138:	d133      	bne.n	800c1a2 <_dtoa_r+0x62a>
 800c13a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c13e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c146:	dc1a      	bgt.n	800c17e <_dtoa_r+0x606>
 800c148:	eeb4 7b46 	vcmp.f64	d7, d6
 800c14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c150:	d103      	bne.n	800c15a <_dtoa_r+0x5e2>
 800c152:	ee15 3a10 	vmov	r3, s10
 800c156:	07d9      	lsls	r1, r3, #31
 800c158:	d411      	bmi.n	800c17e <_dtoa_r+0x606>
 800c15a:	4629      	mov	r1, r5
 800c15c:	4630      	mov	r0, r6
 800c15e:	f000 ff97 	bl	800d090 <_Bfree>
 800c162:	2300      	movs	r3, #0
 800c164:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c166:	f888 3000 	strb.w	r3, [r8]
 800c16a:	f10b 0301 	add.w	r3, fp, #1
 800c16e:	6013      	str	r3, [r2, #0]
 800c170:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c172:	2b00      	cmp	r3, #0
 800c174:	f43f ad4d 	beq.w	800bc12 <_dtoa_r+0x9a>
 800c178:	f8c3 8000 	str.w	r8, [r3]
 800c17c:	e549      	b.n	800bc12 <_dtoa_r+0x9a>
 800c17e:	465f      	mov	r7, fp
 800c180:	4643      	mov	r3, r8
 800c182:	4698      	mov	r8, r3
 800c184:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c188:	2a39      	cmp	r2, #57	; 0x39
 800c18a:	d106      	bne.n	800c19a <_dtoa_r+0x622>
 800c18c:	9a00      	ldr	r2, [sp, #0]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d1f7      	bne.n	800c182 <_dtoa_r+0x60a>
 800c192:	9900      	ldr	r1, [sp, #0]
 800c194:	2230      	movs	r2, #48	; 0x30
 800c196:	3701      	adds	r7, #1
 800c198:	700a      	strb	r2, [r1, #0]
 800c19a:	781a      	ldrb	r2, [r3, #0]
 800c19c:	3201      	adds	r2, #1
 800c19e:	701a      	strb	r2, [r3, #0]
 800c1a0:	e7ae      	b.n	800c100 <_dtoa_r+0x588>
 800c1a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c1a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ae:	d1b2      	bne.n	800c116 <_dtoa_r+0x59e>
 800c1b0:	e7d3      	b.n	800c15a <_dtoa_r+0x5e2>
 800c1b2:	bf00      	nop
 800c1b4:	0800e888 	.word	0x0800e888
 800c1b8:	0800e860 	.word	0x0800e860
 800c1bc:	9908      	ldr	r1, [sp, #32]
 800c1be:	2900      	cmp	r1, #0
 800c1c0:	f000 80d1 	beq.w	800c366 <_dtoa_r+0x7ee>
 800c1c4:	9907      	ldr	r1, [sp, #28]
 800c1c6:	2901      	cmp	r1, #1
 800c1c8:	f300 80b4 	bgt.w	800c334 <_dtoa_r+0x7bc>
 800c1cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c1ce:	2900      	cmp	r1, #0
 800c1d0:	f000 80ac 	beq.w	800c32c <_dtoa_r+0x7b4>
 800c1d4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c1d8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c1dc:	461c      	mov	r4, r3
 800c1de:	930a      	str	r3, [sp, #40]	; 0x28
 800c1e0:	9b05      	ldr	r3, [sp, #20]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	9305      	str	r3, [sp, #20]
 800c1e6:	9b06      	ldr	r3, [sp, #24]
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	4413      	add	r3, r2
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	9306      	str	r3, [sp, #24]
 800c1f0:	f001 f854 	bl	800d29c <__i2b>
 800c1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1f6:	4607      	mov	r7, r0
 800c1f8:	f1b8 0f00 	cmp.w	r8, #0
 800c1fc:	dd0d      	ble.n	800c21a <_dtoa_r+0x6a2>
 800c1fe:	9a06      	ldr	r2, [sp, #24]
 800c200:	2a00      	cmp	r2, #0
 800c202:	dd0a      	ble.n	800c21a <_dtoa_r+0x6a2>
 800c204:	4542      	cmp	r2, r8
 800c206:	9905      	ldr	r1, [sp, #20]
 800c208:	bfa8      	it	ge
 800c20a:	4642      	movge	r2, r8
 800c20c:	1a89      	subs	r1, r1, r2
 800c20e:	9105      	str	r1, [sp, #20]
 800c210:	9906      	ldr	r1, [sp, #24]
 800c212:	eba8 0802 	sub.w	r8, r8, r2
 800c216:	1a8a      	subs	r2, r1, r2
 800c218:	9206      	str	r2, [sp, #24]
 800c21a:	b303      	cbz	r3, 800c25e <_dtoa_r+0x6e6>
 800c21c:	9a08      	ldr	r2, [sp, #32]
 800c21e:	2a00      	cmp	r2, #0
 800c220:	f000 80a6 	beq.w	800c370 <_dtoa_r+0x7f8>
 800c224:	2c00      	cmp	r4, #0
 800c226:	dd13      	ble.n	800c250 <_dtoa_r+0x6d8>
 800c228:	4639      	mov	r1, r7
 800c22a:	4622      	mov	r2, r4
 800c22c:	4630      	mov	r0, r6
 800c22e:	930c      	str	r3, [sp, #48]	; 0x30
 800c230:	f001 f8f0 	bl	800d414 <__pow5mult>
 800c234:	462a      	mov	r2, r5
 800c236:	4601      	mov	r1, r0
 800c238:	4607      	mov	r7, r0
 800c23a:	4630      	mov	r0, r6
 800c23c:	f001 f844 	bl	800d2c8 <__multiply>
 800c240:	4629      	mov	r1, r5
 800c242:	900a      	str	r0, [sp, #40]	; 0x28
 800c244:	4630      	mov	r0, r6
 800c246:	f000 ff23 	bl	800d090 <_Bfree>
 800c24a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c24c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c24e:	4615      	mov	r5, r2
 800c250:	1b1a      	subs	r2, r3, r4
 800c252:	d004      	beq.n	800c25e <_dtoa_r+0x6e6>
 800c254:	4629      	mov	r1, r5
 800c256:	4630      	mov	r0, r6
 800c258:	f001 f8dc 	bl	800d414 <__pow5mult>
 800c25c:	4605      	mov	r5, r0
 800c25e:	2101      	movs	r1, #1
 800c260:	4630      	mov	r0, r6
 800c262:	f001 f81b 	bl	800d29c <__i2b>
 800c266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c268:	2b00      	cmp	r3, #0
 800c26a:	4604      	mov	r4, r0
 800c26c:	f340 8082 	ble.w	800c374 <_dtoa_r+0x7fc>
 800c270:	461a      	mov	r2, r3
 800c272:	4601      	mov	r1, r0
 800c274:	4630      	mov	r0, r6
 800c276:	f001 f8cd 	bl	800d414 <__pow5mult>
 800c27a:	9b07      	ldr	r3, [sp, #28]
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	4604      	mov	r4, r0
 800c280:	dd7b      	ble.n	800c37a <_dtoa_r+0x802>
 800c282:	2300      	movs	r3, #0
 800c284:	930a      	str	r3, [sp, #40]	; 0x28
 800c286:	6922      	ldr	r2, [r4, #16]
 800c288:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c28c:	6910      	ldr	r0, [r2, #16]
 800c28e:	f000 ffb5 	bl	800d1fc <__hi0bits>
 800c292:	f1c0 0020 	rsb	r0, r0, #32
 800c296:	9b06      	ldr	r3, [sp, #24]
 800c298:	4418      	add	r0, r3
 800c29a:	f010 001f 	ands.w	r0, r0, #31
 800c29e:	f000 808d 	beq.w	800c3bc <_dtoa_r+0x844>
 800c2a2:	f1c0 0220 	rsb	r2, r0, #32
 800c2a6:	2a04      	cmp	r2, #4
 800c2a8:	f340 8086 	ble.w	800c3b8 <_dtoa_r+0x840>
 800c2ac:	f1c0 001c 	rsb	r0, r0, #28
 800c2b0:	9b05      	ldr	r3, [sp, #20]
 800c2b2:	4403      	add	r3, r0
 800c2b4:	9305      	str	r3, [sp, #20]
 800c2b6:	9b06      	ldr	r3, [sp, #24]
 800c2b8:	4403      	add	r3, r0
 800c2ba:	4480      	add	r8, r0
 800c2bc:	9306      	str	r3, [sp, #24]
 800c2be:	9b05      	ldr	r3, [sp, #20]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	dd05      	ble.n	800c2d0 <_dtoa_r+0x758>
 800c2c4:	4629      	mov	r1, r5
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	4630      	mov	r0, r6
 800c2ca:	f001 f8fd 	bl	800d4c8 <__lshift>
 800c2ce:	4605      	mov	r5, r0
 800c2d0:	9b06      	ldr	r3, [sp, #24]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	dd05      	ble.n	800c2e2 <_dtoa_r+0x76a>
 800c2d6:	4621      	mov	r1, r4
 800c2d8:	461a      	mov	r2, r3
 800c2da:	4630      	mov	r0, r6
 800c2dc:	f001 f8f4 	bl	800d4c8 <__lshift>
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d06b      	beq.n	800c3c0 <_dtoa_r+0x848>
 800c2e8:	4621      	mov	r1, r4
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	f001 f958 	bl	800d5a0 <__mcmp>
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	da65      	bge.n	800c3c0 <_dtoa_r+0x848>
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	4629      	mov	r1, r5
 800c2f8:	220a      	movs	r2, #10
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	f000 feea 	bl	800d0d4 <__multadd>
 800c300:	9b08      	ldr	r3, [sp, #32]
 800c302:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c306:	4605      	mov	r5, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	f000 8192 	beq.w	800c632 <_dtoa_r+0xaba>
 800c30e:	4639      	mov	r1, r7
 800c310:	2300      	movs	r3, #0
 800c312:	220a      	movs	r2, #10
 800c314:	4630      	mov	r0, r6
 800c316:	f000 fedd 	bl	800d0d4 <__multadd>
 800c31a:	f1ba 0f00 	cmp.w	sl, #0
 800c31e:	4607      	mov	r7, r0
 800c320:	f300 808e 	bgt.w	800c440 <_dtoa_r+0x8c8>
 800c324:	9b07      	ldr	r3, [sp, #28]
 800c326:	2b02      	cmp	r3, #2
 800c328:	dc51      	bgt.n	800c3ce <_dtoa_r+0x856>
 800c32a:	e089      	b.n	800c440 <_dtoa_r+0x8c8>
 800c32c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c32e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c332:	e751      	b.n	800c1d8 <_dtoa_r+0x660>
 800c334:	f109 34ff 	add.w	r4, r9, #4294967295
 800c338:	42a3      	cmp	r3, r4
 800c33a:	bfbf      	itttt	lt
 800c33c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800c33e:	1ae3      	sublt	r3, r4, r3
 800c340:	18d2      	addlt	r2, r2, r3
 800c342:	4613      	movlt	r3, r2
 800c344:	bfb7      	itett	lt
 800c346:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c348:	1b1c      	subge	r4, r3, r4
 800c34a:	4623      	movlt	r3, r4
 800c34c:	2400      	movlt	r4, #0
 800c34e:	f1b9 0f00 	cmp.w	r9, #0
 800c352:	bfb5      	itete	lt
 800c354:	9a05      	ldrlt	r2, [sp, #20]
 800c356:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800c35a:	eba2 0809 	sublt.w	r8, r2, r9
 800c35e:	464a      	movge	r2, r9
 800c360:	bfb8      	it	lt
 800c362:	2200      	movlt	r2, #0
 800c364:	e73b      	b.n	800c1de <_dtoa_r+0x666>
 800c366:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c36a:	9f08      	ldr	r7, [sp, #32]
 800c36c:	461c      	mov	r4, r3
 800c36e:	e743      	b.n	800c1f8 <_dtoa_r+0x680>
 800c370:	461a      	mov	r2, r3
 800c372:	e76f      	b.n	800c254 <_dtoa_r+0x6dc>
 800c374:	9b07      	ldr	r3, [sp, #28]
 800c376:	2b01      	cmp	r3, #1
 800c378:	dc18      	bgt.n	800c3ac <_dtoa_r+0x834>
 800c37a:	9b02      	ldr	r3, [sp, #8]
 800c37c:	b9b3      	cbnz	r3, 800c3ac <_dtoa_r+0x834>
 800c37e:	9b03      	ldr	r3, [sp, #12]
 800c380:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c384:	b9a2      	cbnz	r2, 800c3b0 <_dtoa_r+0x838>
 800c386:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c38a:	0d12      	lsrs	r2, r2, #20
 800c38c:	0512      	lsls	r2, r2, #20
 800c38e:	b18a      	cbz	r2, 800c3b4 <_dtoa_r+0x83c>
 800c390:	9b05      	ldr	r3, [sp, #20]
 800c392:	3301      	adds	r3, #1
 800c394:	9305      	str	r3, [sp, #20]
 800c396:	9b06      	ldr	r3, [sp, #24]
 800c398:	3301      	adds	r3, #1
 800c39a:	9306      	str	r3, [sp, #24]
 800c39c:	2301      	movs	r3, #1
 800c39e:	930a      	str	r3, [sp, #40]	; 0x28
 800c3a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f47f af6f 	bne.w	800c286 <_dtoa_r+0x70e>
 800c3a8:	2001      	movs	r0, #1
 800c3aa:	e774      	b.n	800c296 <_dtoa_r+0x71e>
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	e7f6      	b.n	800c39e <_dtoa_r+0x826>
 800c3b0:	9b02      	ldr	r3, [sp, #8]
 800c3b2:	e7f4      	b.n	800c39e <_dtoa_r+0x826>
 800c3b4:	920a      	str	r2, [sp, #40]	; 0x28
 800c3b6:	e7f3      	b.n	800c3a0 <_dtoa_r+0x828>
 800c3b8:	d081      	beq.n	800c2be <_dtoa_r+0x746>
 800c3ba:	4610      	mov	r0, r2
 800c3bc:	301c      	adds	r0, #28
 800c3be:	e777      	b.n	800c2b0 <_dtoa_r+0x738>
 800c3c0:	f1b9 0f00 	cmp.w	r9, #0
 800c3c4:	dc37      	bgt.n	800c436 <_dtoa_r+0x8be>
 800c3c6:	9b07      	ldr	r3, [sp, #28]
 800c3c8:	2b02      	cmp	r3, #2
 800c3ca:	dd34      	ble.n	800c436 <_dtoa_r+0x8be>
 800c3cc:	46ca      	mov	sl, r9
 800c3ce:	f1ba 0f00 	cmp.w	sl, #0
 800c3d2:	d10d      	bne.n	800c3f0 <_dtoa_r+0x878>
 800c3d4:	4621      	mov	r1, r4
 800c3d6:	4653      	mov	r3, sl
 800c3d8:	2205      	movs	r2, #5
 800c3da:	4630      	mov	r0, r6
 800c3dc:	f000 fe7a 	bl	800d0d4 <__multadd>
 800c3e0:	4601      	mov	r1, r0
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	f001 f8db 	bl	800d5a0 <__mcmp>
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	f73f adde 	bgt.w	800bfac <_dtoa_r+0x434>
 800c3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3f2:	f8dd 8000 	ldr.w	r8, [sp]
 800c3f6:	ea6f 0b03 	mvn.w	fp, r3
 800c3fa:	f04f 0900 	mov.w	r9, #0
 800c3fe:	4621      	mov	r1, r4
 800c400:	4630      	mov	r0, r6
 800c402:	f000 fe45 	bl	800d090 <_Bfree>
 800c406:	2f00      	cmp	r7, #0
 800c408:	f43f aea7 	beq.w	800c15a <_dtoa_r+0x5e2>
 800c40c:	f1b9 0f00 	cmp.w	r9, #0
 800c410:	d005      	beq.n	800c41e <_dtoa_r+0x8a6>
 800c412:	45b9      	cmp	r9, r7
 800c414:	d003      	beq.n	800c41e <_dtoa_r+0x8a6>
 800c416:	4649      	mov	r1, r9
 800c418:	4630      	mov	r0, r6
 800c41a:	f000 fe39 	bl	800d090 <_Bfree>
 800c41e:	4639      	mov	r1, r7
 800c420:	4630      	mov	r0, r6
 800c422:	f000 fe35 	bl	800d090 <_Bfree>
 800c426:	e698      	b.n	800c15a <_dtoa_r+0x5e2>
 800c428:	2400      	movs	r4, #0
 800c42a:	4627      	mov	r7, r4
 800c42c:	e7e0      	b.n	800c3f0 <_dtoa_r+0x878>
 800c42e:	46bb      	mov	fp, r7
 800c430:	4604      	mov	r4, r0
 800c432:	4607      	mov	r7, r0
 800c434:	e5ba      	b.n	800bfac <_dtoa_r+0x434>
 800c436:	9b08      	ldr	r3, [sp, #32]
 800c438:	46ca      	mov	sl, r9
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	f000 8100 	beq.w	800c640 <_dtoa_r+0xac8>
 800c440:	f1b8 0f00 	cmp.w	r8, #0
 800c444:	dd05      	ble.n	800c452 <_dtoa_r+0x8da>
 800c446:	4639      	mov	r1, r7
 800c448:	4642      	mov	r2, r8
 800c44a:	4630      	mov	r0, r6
 800c44c:	f001 f83c 	bl	800d4c8 <__lshift>
 800c450:	4607      	mov	r7, r0
 800c452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c454:	2b00      	cmp	r3, #0
 800c456:	d05d      	beq.n	800c514 <_dtoa_r+0x99c>
 800c458:	6879      	ldr	r1, [r7, #4]
 800c45a:	4630      	mov	r0, r6
 800c45c:	f000 fdd8 	bl	800d010 <_Balloc>
 800c460:	4680      	mov	r8, r0
 800c462:	b928      	cbnz	r0, 800c470 <_dtoa_r+0x8f8>
 800c464:	4b82      	ldr	r3, [pc, #520]	; (800c670 <_dtoa_r+0xaf8>)
 800c466:	4602      	mov	r2, r0
 800c468:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c46c:	f7ff bb9a 	b.w	800bba4 <_dtoa_r+0x2c>
 800c470:	693a      	ldr	r2, [r7, #16]
 800c472:	3202      	adds	r2, #2
 800c474:	0092      	lsls	r2, r2, #2
 800c476:	f107 010c 	add.w	r1, r7, #12
 800c47a:	300c      	adds	r0, #12
 800c47c:	f7fd fb02 	bl	8009a84 <memcpy>
 800c480:	2201      	movs	r2, #1
 800c482:	4641      	mov	r1, r8
 800c484:	4630      	mov	r0, r6
 800c486:	f001 f81f 	bl	800d4c8 <__lshift>
 800c48a:	9b00      	ldr	r3, [sp, #0]
 800c48c:	3301      	adds	r3, #1
 800c48e:	9305      	str	r3, [sp, #20]
 800c490:	9b00      	ldr	r3, [sp, #0]
 800c492:	4453      	add	r3, sl
 800c494:	9309      	str	r3, [sp, #36]	; 0x24
 800c496:	9b02      	ldr	r3, [sp, #8]
 800c498:	f003 0301 	and.w	r3, r3, #1
 800c49c:	46b9      	mov	r9, r7
 800c49e:	9308      	str	r3, [sp, #32]
 800c4a0:	4607      	mov	r7, r0
 800c4a2:	9b05      	ldr	r3, [sp, #20]
 800c4a4:	4621      	mov	r1, r4
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	9302      	str	r3, [sp, #8]
 800c4ac:	f7ff fad8 	bl	800ba60 <quorem>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	3330      	adds	r3, #48	; 0x30
 800c4b4:	9006      	str	r0, [sp, #24]
 800c4b6:	4649      	mov	r1, r9
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	930a      	str	r3, [sp, #40]	; 0x28
 800c4bc:	f001 f870 	bl	800d5a0 <__mcmp>
 800c4c0:	463a      	mov	r2, r7
 800c4c2:	4682      	mov	sl, r0
 800c4c4:	4621      	mov	r1, r4
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	f001 f886 	bl	800d5d8 <__mdiff>
 800c4cc:	68c2      	ldr	r2, [r0, #12]
 800c4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4d0:	4680      	mov	r8, r0
 800c4d2:	bb0a      	cbnz	r2, 800c518 <_dtoa_r+0x9a0>
 800c4d4:	4601      	mov	r1, r0
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	f001 f862 	bl	800d5a0 <__mcmp>
 800c4dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4de:	4602      	mov	r2, r0
 800c4e0:	4641      	mov	r1, r8
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	920e      	str	r2, [sp, #56]	; 0x38
 800c4e6:	930a      	str	r3, [sp, #40]	; 0x28
 800c4e8:	f000 fdd2 	bl	800d090 <_Bfree>
 800c4ec:	9b07      	ldr	r3, [sp, #28]
 800c4ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c4f4:	ea43 0102 	orr.w	r1, r3, r2
 800c4f8:	9b08      	ldr	r3, [sp, #32]
 800c4fa:	430b      	orrs	r3, r1
 800c4fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4fe:	d10d      	bne.n	800c51c <_dtoa_r+0x9a4>
 800c500:	2b39      	cmp	r3, #57	; 0x39
 800c502:	d029      	beq.n	800c558 <_dtoa_r+0x9e0>
 800c504:	f1ba 0f00 	cmp.w	sl, #0
 800c508:	dd01      	ble.n	800c50e <_dtoa_r+0x996>
 800c50a:	9b06      	ldr	r3, [sp, #24]
 800c50c:	3331      	adds	r3, #49	; 0x31
 800c50e:	9a02      	ldr	r2, [sp, #8]
 800c510:	7013      	strb	r3, [r2, #0]
 800c512:	e774      	b.n	800c3fe <_dtoa_r+0x886>
 800c514:	4638      	mov	r0, r7
 800c516:	e7b8      	b.n	800c48a <_dtoa_r+0x912>
 800c518:	2201      	movs	r2, #1
 800c51a:	e7e1      	b.n	800c4e0 <_dtoa_r+0x968>
 800c51c:	f1ba 0f00 	cmp.w	sl, #0
 800c520:	db06      	blt.n	800c530 <_dtoa_r+0x9b8>
 800c522:	9907      	ldr	r1, [sp, #28]
 800c524:	ea41 0a0a 	orr.w	sl, r1, sl
 800c528:	9908      	ldr	r1, [sp, #32]
 800c52a:	ea5a 0101 	orrs.w	r1, sl, r1
 800c52e:	d120      	bne.n	800c572 <_dtoa_r+0x9fa>
 800c530:	2a00      	cmp	r2, #0
 800c532:	ddec      	ble.n	800c50e <_dtoa_r+0x996>
 800c534:	4629      	mov	r1, r5
 800c536:	2201      	movs	r2, #1
 800c538:	4630      	mov	r0, r6
 800c53a:	9305      	str	r3, [sp, #20]
 800c53c:	f000 ffc4 	bl	800d4c8 <__lshift>
 800c540:	4621      	mov	r1, r4
 800c542:	4605      	mov	r5, r0
 800c544:	f001 f82c 	bl	800d5a0 <__mcmp>
 800c548:	2800      	cmp	r0, #0
 800c54a:	9b05      	ldr	r3, [sp, #20]
 800c54c:	dc02      	bgt.n	800c554 <_dtoa_r+0x9dc>
 800c54e:	d1de      	bne.n	800c50e <_dtoa_r+0x996>
 800c550:	07da      	lsls	r2, r3, #31
 800c552:	d5dc      	bpl.n	800c50e <_dtoa_r+0x996>
 800c554:	2b39      	cmp	r3, #57	; 0x39
 800c556:	d1d8      	bne.n	800c50a <_dtoa_r+0x992>
 800c558:	9a02      	ldr	r2, [sp, #8]
 800c55a:	2339      	movs	r3, #57	; 0x39
 800c55c:	7013      	strb	r3, [r2, #0]
 800c55e:	4643      	mov	r3, r8
 800c560:	4698      	mov	r8, r3
 800c562:	3b01      	subs	r3, #1
 800c564:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c568:	2a39      	cmp	r2, #57	; 0x39
 800c56a:	d051      	beq.n	800c610 <_dtoa_r+0xa98>
 800c56c:	3201      	adds	r2, #1
 800c56e:	701a      	strb	r2, [r3, #0]
 800c570:	e745      	b.n	800c3fe <_dtoa_r+0x886>
 800c572:	2a00      	cmp	r2, #0
 800c574:	dd03      	ble.n	800c57e <_dtoa_r+0xa06>
 800c576:	2b39      	cmp	r3, #57	; 0x39
 800c578:	d0ee      	beq.n	800c558 <_dtoa_r+0x9e0>
 800c57a:	3301      	adds	r3, #1
 800c57c:	e7c7      	b.n	800c50e <_dtoa_r+0x996>
 800c57e:	9a05      	ldr	r2, [sp, #20]
 800c580:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c582:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c586:	428a      	cmp	r2, r1
 800c588:	d02b      	beq.n	800c5e2 <_dtoa_r+0xa6a>
 800c58a:	4629      	mov	r1, r5
 800c58c:	2300      	movs	r3, #0
 800c58e:	220a      	movs	r2, #10
 800c590:	4630      	mov	r0, r6
 800c592:	f000 fd9f 	bl	800d0d4 <__multadd>
 800c596:	45b9      	cmp	r9, r7
 800c598:	4605      	mov	r5, r0
 800c59a:	f04f 0300 	mov.w	r3, #0
 800c59e:	f04f 020a 	mov.w	r2, #10
 800c5a2:	4649      	mov	r1, r9
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	d107      	bne.n	800c5b8 <_dtoa_r+0xa40>
 800c5a8:	f000 fd94 	bl	800d0d4 <__multadd>
 800c5ac:	4681      	mov	r9, r0
 800c5ae:	4607      	mov	r7, r0
 800c5b0:	9b05      	ldr	r3, [sp, #20]
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	9305      	str	r3, [sp, #20]
 800c5b6:	e774      	b.n	800c4a2 <_dtoa_r+0x92a>
 800c5b8:	f000 fd8c 	bl	800d0d4 <__multadd>
 800c5bc:	4639      	mov	r1, r7
 800c5be:	4681      	mov	r9, r0
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	220a      	movs	r2, #10
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f000 fd85 	bl	800d0d4 <__multadd>
 800c5ca:	4607      	mov	r7, r0
 800c5cc:	e7f0      	b.n	800c5b0 <_dtoa_r+0xa38>
 800c5ce:	f1ba 0f00 	cmp.w	sl, #0
 800c5d2:	9a00      	ldr	r2, [sp, #0]
 800c5d4:	bfcc      	ite	gt
 800c5d6:	46d0      	movgt	r8, sl
 800c5d8:	f04f 0801 	movle.w	r8, #1
 800c5dc:	4490      	add	r8, r2
 800c5de:	f04f 0900 	mov.w	r9, #0
 800c5e2:	4629      	mov	r1, r5
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	9302      	str	r3, [sp, #8]
 800c5ea:	f000 ff6d 	bl	800d4c8 <__lshift>
 800c5ee:	4621      	mov	r1, r4
 800c5f0:	4605      	mov	r5, r0
 800c5f2:	f000 ffd5 	bl	800d5a0 <__mcmp>
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	dcb1      	bgt.n	800c55e <_dtoa_r+0x9e6>
 800c5fa:	d102      	bne.n	800c602 <_dtoa_r+0xa8a>
 800c5fc:	9b02      	ldr	r3, [sp, #8]
 800c5fe:	07db      	lsls	r3, r3, #31
 800c600:	d4ad      	bmi.n	800c55e <_dtoa_r+0x9e6>
 800c602:	4643      	mov	r3, r8
 800c604:	4698      	mov	r8, r3
 800c606:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c60a:	2a30      	cmp	r2, #48	; 0x30
 800c60c:	d0fa      	beq.n	800c604 <_dtoa_r+0xa8c>
 800c60e:	e6f6      	b.n	800c3fe <_dtoa_r+0x886>
 800c610:	9a00      	ldr	r2, [sp, #0]
 800c612:	429a      	cmp	r2, r3
 800c614:	d1a4      	bne.n	800c560 <_dtoa_r+0x9e8>
 800c616:	f10b 0b01 	add.w	fp, fp, #1
 800c61a:	2331      	movs	r3, #49	; 0x31
 800c61c:	e778      	b.n	800c510 <_dtoa_r+0x998>
 800c61e:	4b15      	ldr	r3, [pc, #84]	; (800c674 <_dtoa_r+0xafc>)
 800c620:	f7ff bb12 	b.w	800bc48 <_dtoa_r+0xd0>
 800c624:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c626:	2b00      	cmp	r3, #0
 800c628:	f47f aaee 	bne.w	800bc08 <_dtoa_r+0x90>
 800c62c:	4b12      	ldr	r3, [pc, #72]	; (800c678 <_dtoa_r+0xb00>)
 800c62e:	f7ff bb0b 	b.w	800bc48 <_dtoa_r+0xd0>
 800c632:	f1ba 0f00 	cmp.w	sl, #0
 800c636:	dc03      	bgt.n	800c640 <_dtoa_r+0xac8>
 800c638:	9b07      	ldr	r3, [sp, #28]
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	f73f aec7 	bgt.w	800c3ce <_dtoa_r+0x856>
 800c640:	f8dd 8000 	ldr.w	r8, [sp]
 800c644:	4621      	mov	r1, r4
 800c646:	4628      	mov	r0, r5
 800c648:	f7ff fa0a 	bl	800ba60 <quorem>
 800c64c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c650:	f808 3b01 	strb.w	r3, [r8], #1
 800c654:	9a00      	ldr	r2, [sp, #0]
 800c656:	eba8 0202 	sub.w	r2, r8, r2
 800c65a:	4592      	cmp	sl, r2
 800c65c:	ddb7      	ble.n	800c5ce <_dtoa_r+0xa56>
 800c65e:	4629      	mov	r1, r5
 800c660:	2300      	movs	r3, #0
 800c662:	220a      	movs	r2, #10
 800c664:	4630      	mov	r0, r6
 800c666:	f000 fd35 	bl	800d0d4 <__multadd>
 800c66a:	4605      	mov	r5, r0
 800c66c:	e7ea      	b.n	800c644 <_dtoa_r+0xacc>
 800c66e:	bf00      	nop
 800c670:	0800e76b 	.word	0x0800e76b
 800c674:	0800e668 	.word	0x0800e668
 800c678:	0800e6e8 	.word	0x0800e6e8

0800c67c <__sflush_r>:
 800c67c:	898a      	ldrh	r2, [r1, #12]
 800c67e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c682:	4605      	mov	r5, r0
 800c684:	0710      	lsls	r0, r2, #28
 800c686:	460c      	mov	r4, r1
 800c688:	d458      	bmi.n	800c73c <__sflush_r+0xc0>
 800c68a:	684b      	ldr	r3, [r1, #4]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	dc05      	bgt.n	800c69c <__sflush_r+0x20>
 800c690:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c692:	2b00      	cmp	r3, #0
 800c694:	dc02      	bgt.n	800c69c <__sflush_r+0x20>
 800c696:	2000      	movs	r0, #0
 800c698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c69c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c69e:	2e00      	cmp	r6, #0
 800c6a0:	d0f9      	beq.n	800c696 <__sflush_r+0x1a>
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c6a8:	682f      	ldr	r7, [r5, #0]
 800c6aa:	602b      	str	r3, [r5, #0]
 800c6ac:	d032      	beq.n	800c714 <__sflush_r+0x98>
 800c6ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c6b0:	89a3      	ldrh	r3, [r4, #12]
 800c6b2:	075a      	lsls	r2, r3, #29
 800c6b4:	d505      	bpl.n	800c6c2 <__sflush_r+0x46>
 800c6b6:	6863      	ldr	r3, [r4, #4]
 800c6b8:	1ac0      	subs	r0, r0, r3
 800c6ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6bc:	b10b      	cbz	r3, 800c6c2 <__sflush_r+0x46>
 800c6be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6c0:	1ac0      	subs	r0, r0, r3
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6c8:	6a21      	ldr	r1, [r4, #32]
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	47b0      	blx	r6
 800c6ce:	1c43      	adds	r3, r0, #1
 800c6d0:	89a3      	ldrh	r3, [r4, #12]
 800c6d2:	d106      	bne.n	800c6e2 <__sflush_r+0x66>
 800c6d4:	6829      	ldr	r1, [r5, #0]
 800c6d6:	291d      	cmp	r1, #29
 800c6d8:	d82c      	bhi.n	800c734 <__sflush_r+0xb8>
 800c6da:	4a2a      	ldr	r2, [pc, #168]	; (800c784 <__sflush_r+0x108>)
 800c6dc:	40ca      	lsrs	r2, r1
 800c6de:	07d6      	lsls	r6, r2, #31
 800c6e0:	d528      	bpl.n	800c734 <__sflush_r+0xb8>
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	6062      	str	r2, [r4, #4]
 800c6e6:	04d9      	lsls	r1, r3, #19
 800c6e8:	6922      	ldr	r2, [r4, #16]
 800c6ea:	6022      	str	r2, [r4, #0]
 800c6ec:	d504      	bpl.n	800c6f8 <__sflush_r+0x7c>
 800c6ee:	1c42      	adds	r2, r0, #1
 800c6f0:	d101      	bne.n	800c6f6 <__sflush_r+0x7a>
 800c6f2:	682b      	ldr	r3, [r5, #0]
 800c6f4:	b903      	cbnz	r3, 800c6f8 <__sflush_r+0x7c>
 800c6f6:	6560      	str	r0, [r4, #84]	; 0x54
 800c6f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6fa:	602f      	str	r7, [r5, #0]
 800c6fc:	2900      	cmp	r1, #0
 800c6fe:	d0ca      	beq.n	800c696 <__sflush_r+0x1a>
 800c700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c704:	4299      	cmp	r1, r3
 800c706:	d002      	beq.n	800c70e <__sflush_r+0x92>
 800c708:	4628      	mov	r0, r5
 800c70a:	f7fd f9d1 	bl	8009ab0 <_free_r>
 800c70e:	2000      	movs	r0, #0
 800c710:	6360      	str	r0, [r4, #52]	; 0x34
 800c712:	e7c1      	b.n	800c698 <__sflush_r+0x1c>
 800c714:	6a21      	ldr	r1, [r4, #32]
 800c716:	2301      	movs	r3, #1
 800c718:	4628      	mov	r0, r5
 800c71a:	47b0      	blx	r6
 800c71c:	1c41      	adds	r1, r0, #1
 800c71e:	d1c7      	bne.n	800c6b0 <__sflush_r+0x34>
 800c720:	682b      	ldr	r3, [r5, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d0c4      	beq.n	800c6b0 <__sflush_r+0x34>
 800c726:	2b1d      	cmp	r3, #29
 800c728:	d001      	beq.n	800c72e <__sflush_r+0xb2>
 800c72a:	2b16      	cmp	r3, #22
 800c72c:	d101      	bne.n	800c732 <__sflush_r+0xb6>
 800c72e:	602f      	str	r7, [r5, #0]
 800c730:	e7b1      	b.n	800c696 <__sflush_r+0x1a>
 800c732:	89a3      	ldrh	r3, [r4, #12]
 800c734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c738:	81a3      	strh	r3, [r4, #12]
 800c73a:	e7ad      	b.n	800c698 <__sflush_r+0x1c>
 800c73c:	690f      	ldr	r7, [r1, #16]
 800c73e:	2f00      	cmp	r7, #0
 800c740:	d0a9      	beq.n	800c696 <__sflush_r+0x1a>
 800c742:	0793      	lsls	r3, r2, #30
 800c744:	680e      	ldr	r6, [r1, #0]
 800c746:	bf08      	it	eq
 800c748:	694b      	ldreq	r3, [r1, #20]
 800c74a:	600f      	str	r7, [r1, #0]
 800c74c:	bf18      	it	ne
 800c74e:	2300      	movne	r3, #0
 800c750:	eba6 0807 	sub.w	r8, r6, r7
 800c754:	608b      	str	r3, [r1, #8]
 800c756:	f1b8 0f00 	cmp.w	r8, #0
 800c75a:	dd9c      	ble.n	800c696 <__sflush_r+0x1a>
 800c75c:	6a21      	ldr	r1, [r4, #32]
 800c75e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c760:	4643      	mov	r3, r8
 800c762:	463a      	mov	r2, r7
 800c764:	4628      	mov	r0, r5
 800c766:	47b0      	blx	r6
 800c768:	2800      	cmp	r0, #0
 800c76a:	dc06      	bgt.n	800c77a <__sflush_r+0xfe>
 800c76c:	89a3      	ldrh	r3, [r4, #12]
 800c76e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c772:	81a3      	strh	r3, [r4, #12]
 800c774:	f04f 30ff 	mov.w	r0, #4294967295
 800c778:	e78e      	b.n	800c698 <__sflush_r+0x1c>
 800c77a:	4407      	add	r7, r0
 800c77c:	eba8 0800 	sub.w	r8, r8, r0
 800c780:	e7e9      	b.n	800c756 <__sflush_r+0xda>
 800c782:	bf00      	nop
 800c784:	20400001 	.word	0x20400001

0800c788 <_fflush_r>:
 800c788:	b538      	push	{r3, r4, r5, lr}
 800c78a:	690b      	ldr	r3, [r1, #16]
 800c78c:	4605      	mov	r5, r0
 800c78e:	460c      	mov	r4, r1
 800c790:	b913      	cbnz	r3, 800c798 <_fflush_r+0x10>
 800c792:	2500      	movs	r5, #0
 800c794:	4628      	mov	r0, r5
 800c796:	bd38      	pop	{r3, r4, r5, pc}
 800c798:	b118      	cbz	r0, 800c7a2 <_fflush_r+0x1a>
 800c79a:	6983      	ldr	r3, [r0, #24]
 800c79c:	b90b      	cbnz	r3, 800c7a2 <_fflush_r+0x1a>
 800c79e:	f7fd f8a3 	bl	80098e8 <__sinit>
 800c7a2:	4b14      	ldr	r3, [pc, #80]	; (800c7f4 <_fflush_r+0x6c>)
 800c7a4:	429c      	cmp	r4, r3
 800c7a6:	d11b      	bne.n	800c7e0 <_fflush_r+0x58>
 800c7a8:	686c      	ldr	r4, [r5, #4]
 800c7aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d0ef      	beq.n	800c792 <_fflush_r+0xa>
 800c7b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c7b4:	07d0      	lsls	r0, r2, #31
 800c7b6:	d404      	bmi.n	800c7c2 <_fflush_r+0x3a>
 800c7b8:	0599      	lsls	r1, r3, #22
 800c7ba:	d402      	bmi.n	800c7c2 <_fflush_r+0x3a>
 800c7bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7be:	f7fd f956 	bl	8009a6e <__retarget_lock_acquire_recursive>
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	4621      	mov	r1, r4
 800c7c6:	f7ff ff59 	bl	800c67c <__sflush_r>
 800c7ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7cc:	07da      	lsls	r2, r3, #31
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	d4e0      	bmi.n	800c794 <_fflush_r+0xc>
 800c7d2:	89a3      	ldrh	r3, [r4, #12]
 800c7d4:	059b      	lsls	r3, r3, #22
 800c7d6:	d4dd      	bmi.n	800c794 <_fflush_r+0xc>
 800c7d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7da:	f7fd f949 	bl	8009a70 <__retarget_lock_release_recursive>
 800c7de:	e7d9      	b.n	800c794 <_fflush_r+0xc>
 800c7e0:	4b05      	ldr	r3, [pc, #20]	; (800c7f8 <_fflush_r+0x70>)
 800c7e2:	429c      	cmp	r4, r3
 800c7e4:	d101      	bne.n	800c7ea <_fflush_r+0x62>
 800c7e6:	68ac      	ldr	r4, [r5, #8]
 800c7e8:	e7df      	b.n	800c7aa <_fflush_r+0x22>
 800c7ea:	4b04      	ldr	r3, [pc, #16]	; (800c7fc <_fflush_r+0x74>)
 800c7ec:	429c      	cmp	r4, r3
 800c7ee:	bf08      	it	eq
 800c7f0:	68ec      	ldreq	r4, [r5, #12]
 800c7f2:	e7da      	b.n	800c7aa <_fflush_r+0x22>
 800c7f4:	0800e614 	.word	0x0800e614
 800c7f8:	0800e634 	.word	0x0800e634
 800c7fc:	0800e5f4 	.word	0x0800e5f4

0800c800 <rshift>:
 800c800:	6903      	ldr	r3, [r0, #16]
 800c802:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c806:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c80a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c80e:	f100 0414 	add.w	r4, r0, #20
 800c812:	dd45      	ble.n	800c8a0 <rshift+0xa0>
 800c814:	f011 011f 	ands.w	r1, r1, #31
 800c818:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c81c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c820:	d10c      	bne.n	800c83c <rshift+0x3c>
 800c822:	f100 0710 	add.w	r7, r0, #16
 800c826:	4629      	mov	r1, r5
 800c828:	42b1      	cmp	r1, r6
 800c82a:	d334      	bcc.n	800c896 <rshift+0x96>
 800c82c:	1a9b      	subs	r3, r3, r2
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	1eea      	subs	r2, r5, #3
 800c832:	4296      	cmp	r6, r2
 800c834:	bf38      	it	cc
 800c836:	2300      	movcc	r3, #0
 800c838:	4423      	add	r3, r4
 800c83a:	e015      	b.n	800c868 <rshift+0x68>
 800c83c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c840:	f1c1 0820 	rsb	r8, r1, #32
 800c844:	40cf      	lsrs	r7, r1
 800c846:	f105 0e04 	add.w	lr, r5, #4
 800c84a:	46a1      	mov	r9, r4
 800c84c:	4576      	cmp	r6, lr
 800c84e:	46f4      	mov	ip, lr
 800c850:	d815      	bhi.n	800c87e <rshift+0x7e>
 800c852:	1a9b      	subs	r3, r3, r2
 800c854:	009a      	lsls	r2, r3, #2
 800c856:	3a04      	subs	r2, #4
 800c858:	3501      	adds	r5, #1
 800c85a:	42ae      	cmp	r6, r5
 800c85c:	bf38      	it	cc
 800c85e:	2200      	movcc	r2, #0
 800c860:	18a3      	adds	r3, r4, r2
 800c862:	50a7      	str	r7, [r4, r2]
 800c864:	b107      	cbz	r7, 800c868 <rshift+0x68>
 800c866:	3304      	adds	r3, #4
 800c868:	1b1a      	subs	r2, r3, r4
 800c86a:	42a3      	cmp	r3, r4
 800c86c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c870:	bf08      	it	eq
 800c872:	2300      	moveq	r3, #0
 800c874:	6102      	str	r2, [r0, #16]
 800c876:	bf08      	it	eq
 800c878:	6143      	streq	r3, [r0, #20]
 800c87a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c87e:	f8dc c000 	ldr.w	ip, [ip]
 800c882:	fa0c fc08 	lsl.w	ip, ip, r8
 800c886:	ea4c 0707 	orr.w	r7, ip, r7
 800c88a:	f849 7b04 	str.w	r7, [r9], #4
 800c88e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c892:	40cf      	lsrs	r7, r1
 800c894:	e7da      	b.n	800c84c <rshift+0x4c>
 800c896:	f851 cb04 	ldr.w	ip, [r1], #4
 800c89a:	f847 cf04 	str.w	ip, [r7, #4]!
 800c89e:	e7c3      	b.n	800c828 <rshift+0x28>
 800c8a0:	4623      	mov	r3, r4
 800c8a2:	e7e1      	b.n	800c868 <rshift+0x68>

0800c8a4 <__hexdig_fun>:
 800c8a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c8a8:	2b09      	cmp	r3, #9
 800c8aa:	d802      	bhi.n	800c8b2 <__hexdig_fun+0xe>
 800c8ac:	3820      	subs	r0, #32
 800c8ae:	b2c0      	uxtb	r0, r0
 800c8b0:	4770      	bx	lr
 800c8b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c8b6:	2b05      	cmp	r3, #5
 800c8b8:	d801      	bhi.n	800c8be <__hexdig_fun+0x1a>
 800c8ba:	3847      	subs	r0, #71	; 0x47
 800c8bc:	e7f7      	b.n	800c8ae <__hexdig_fun+0xa>
 800c8be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c8c2:	2b05      	cmp	r3, #5
 800c8c4:	d801      	bhi.n	800c8ca <__hexdig_fun+0x26>
 800c8c6:	3827      	subs	r0, #39	; 0x27
 800c8c8:	e7f1      	b.n	800c8ae <__hexdig_fun+0xa>
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	4770      	bx	lr
	...

0800c8d0 <__gethex>:
 800c8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d4:	ed2d 8b02 	vpush	{d8}
 800c8d8:	b089      	sub	sp, #36	; 0x24
 800c8da:	ee08 0a10 	vmov	s16, r0
 800c8de:	9304      	str	r3, [sp, #16]
 800c8e0:	4bbc      	ldr	r3, [pc, #752]	; (800cbd4 <__gethex+0x304>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	9301      	str	r3, [sp, #4]
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	468b      	mov	fp, r1
 800c8ea:	4690      	mov	r8, r2
 800c8ec:	f7f3 fca8 	bl	8000240 <strlen>
 800c8f0:	9b01      	ldr	r3, [sp, #4]
 800c8f2:	f8db 2000 	ldr.w	r2, [fp]
 800c8f6:	4403      	add	r3, r0
 800c8f8:	4682      	mov	sl, r0
 800c8fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c8fe:	9305      	str	r3, [sp, #20]
 800c900:	1c93      	adds	r3, r2, #2
 800c902:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c906:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c90a:	32fe      	adds	r2, #254	; 0xfe
 800c90c:	18d1      	adds	r1, r2, r3
 800c90e:	461f      	mov	r7, r3
 800c910:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c914:	9100      	str	r1, [sp, #0]
 800c916:	2830      	cmp	r0, #48	; 0x30
 800c918:	d0f8      	beq.n	800c90c <__gethex+0x3c>
 800c91a:	f7ff ffc3 	bl	800c8a4 <__hexdig_fun>
 800c91e:	4604      	mov	r4, r0
 800c920:	2800      	cmp	r0, #0
 800c922:	d13a      	bne.n	800c99a <__gethex+0xca>
 800c924:	9901      	ldr	r1, [sp, #4]
 800c926:	4652      	mov	r2, sl
 800c928:	4638      	mov	r0, r7
 800c92a:	f001 fb55 	bl	800dfd8 <strncmp>
 800c92e:	4605      	mov	r5, r0
 800c930:	2800      	cmp	r0, #0
 800c932:	d168      	bne.n	800ca06 <__gethex+0x136>
 800c934:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c938:	eb07 060a 	add.w	r6, r7, sl
 800c93c:	f7ff ffb2 	bl	800c8a4 <__hexdig_fun>
 800c940:	2800      	cmp	r0, #0
 800c942:	d062      	beq.n	800ca0a <__gethex+0x13a>
 800c944:	4633      	mov	r3, r6
 800c946:	7818      	ldrb	r0, [r3, #0]
 800c948:	2830      	cmp	r0, #48	; 0x30
 800c94a:	461f      	mov	r7, r3
 800c94c:	f103 0301 	add.w	r3, r3, #1
 800c950:	d0f9      	beq.n	800c946 <__gethex+0x76>
 800c952:	f7ff ffa7 	bl	800c8a4 <__hexdig_fun>
 800c956:	2301      	movs	r3, #1
 800c958:	fab0 f480 	clz	r4, r0
 800c95c:	0964      	lsrs	r4, r4, #5
 800c95e:	4635      	mov	r5, r6
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	463a      	mov	r2, r7
 800c964:	4616      	mov	r6, r2
 800c966:	3201      	adds	r2, #1
 800c968:	7830      	ldrb	r0, [r6, #0]
 800c96a:	f7ff ff9b 	bl	800c8a4 <__hexdig_fun>
 800c96e:	2800      	cmp	r0, #0
 800c970:	d1f8      	bne.n	800c964 <__gethex+0x94>
 800c972:	9901      	ldr	r1, [sp, #4]
 800c974:	4652      	mov	r2, sl
 800c976:	4630      	mov	r0, r6
 800c978:	f001 fb2e 	bl	800dfd8 <strncmp>
 800c97c:	b980      	cbnz	r0, 800c9a0 <__gethex+0xd0>
 800c97e:	b94d      	cbnz	r5, 800c994 <__gethex+0xc4>
 800c980:	eb06 050a 	add.w	r5, r6, sl
 800c984:	462a      	mov	r2, r5
 800c986:	4616      	mov	r6, r2
 800c988:	3201      	adds	r2, #1
 800c98a:	7830      	ldrb	r0, [r6, #0]
 800c98c:	f7ff ff8a 	bl	800c8a4 <__hexdig_fun>
 800c990:	2800      	cmp	r0, #0
 800c992:	d1f8      	bne.n	800c986 <__gethex+0xb6>
 800c994:	1bad      	subs	r5, r5, r6
 800c996:	00ad      	lsls	r5, r5, #2
 800c998:	e004      	b.n	800c9a4 <__gethex+0xd4>
 800c99a:	2400      	movs	r4, #0
 800c99c:	4625      	mov	r5, r4
 800c99e:	e7e0      	b.n	800c962 <__gethex+0x92>
 800c9a0:	2d00      	cmp	r5, #0
 800c9a2:	d1f7      	bne.n	800c994 <__gethex+0xc4>
 800c9a4:	7833      	ldrb	r3, [r6, #0]
 800c9a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c9aa:	2b50      	cmp	r3, #80	; 0x50
 800c9ac:	d13b      	bne.n	800ca26 <__gethex+0x156>
 800c9ae:	7873      	ldrb	r3, [r6, #1]
 800c9b0:	2b2b      	cmp	r3, #43	; 0x2b
 800c9b2:	d02c      	beq.n	800ca0e <__gethex+0x13e>
 800c9b4:	2b2d      	cmp	r3, #45	; 0x2d
 800c9b6:	d02e      	beq.n	800ca16 <__gethex+0x146>
 800c9b8:	1c71      	adds	r1, r6, #1
 800c9ba:	f04f 0900 	mov.w	r9, #0
 800c9be:	7808      	ldrb	r0, [r1, #0]
 800c9c0:	f7ff ff70 	bl	800c8a4 <__hexdig_fun>
 800c9c4:	1e43      	subs	r3, r0, #1
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	2b18      	cmp	r3, #24
 800c9ca:	d82c      	bhi.n	800ca26 <__gethex+0x156>
 800c9cc:	f1a0 0210 	sub.w	r2, r0, #16
 800c9d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c9d4:	f7ff ff66 	bl	800c8a4 <__hexdig_fun>
 800c9d8:	1e43      	subs	r3, r0, #1
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	2b18      	cmp	r3, #24
 800c9de:	d91d      	bls.n	800ca1c <__gethex+0x14c>
 800c9e0:	f1b9 0f00 	cmp.w	r9, #0
 800c9e4:	d000      	beq.n	800c9e8 <__gethex+0x118>
 800c9e6:	4252      	negs	r2, r2
 800c9e8:	4415      	add	r5, r2
 800c9ea:	f8cb 1000 	str.w	r1, [fp]
 800c9ee:	b1e4      	cbz	r4, 800ca2a <__gethex+0x15a>
 800c9f0:	9b00      	ldr	r3, [sp, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	bf14      	ite	ne
 800c9f6:	2700      	movne	r7, #0
 800c9f8:	2706      	moveq	r7, #6
 800c9fa:	4638      	mov	r0, r7
 800c9fc:	b009      	add	sp, #36	; 0x24
 800c9fe:	ecbd 8b02 	vpop	{d8}
 800ca02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca06:	463e      	mov	r6, r7
 800ca08:	4625      	mov	r5, r4
 800ca0a:	2401      	movs	r4, #1
 800ca0c:	e7ca      	b.n	800c9a4 <__gethex+0xd4>
 800ca0e:	f04f 0900 	mov.w	r9, #0
 800ca12:	1cb1      	adds	r1, r6, #2
 800ca14:	e7d3      	b.n	800c9be <__gethex+0xee>
 800ca16:	f04f 0901 	mov.w	r9, #1
 800ca1a:	e7fa      	b.n	800ca12 <__gethex+0x142>
 800ca1c:	230a      	movs	r3, #10
 800ca1e:	fb03 0202 	mla	r2, r3, r2, r0
 800ca22:	3a10      	subs	r2, #16
 800ca24:	e7d4      	b.n	800c9d0 <__gethex+0x100>
 800ca26:	4631      	mov	r1, r6
 800ca28:	e7df      	b.n	800c9ea <__gethex+0x11a>
 800ca2a:	1bf3      	subs	r3, r6, r7
 800ca2c:	3b01      	subs	r3, #1
 800ca2e:	4621      	mov	r1, r4
 800ca30:	2b07      	cmp	r3, #7
 800ca32:	dc0b      	bgt.n	800ca4c <__gethex+0x17c>
 800ca34:	ee18 0a10 	vmov	r0, s16
 800ca38:	f000 faea 	bl	800d010 <_Balloc>
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	b940      	cbnz	r0, 800ca52 <__gethex+0x182>
 800ca40:	4b65      	ldr	r3, [pc, #404]	; (800cbd8 <__gethex+0x308>)
 800ca42:	4602      	mov	r2, r0
 800ca44:	21de      	movs	r1, #222	; 0xde
 800ca46:	4865      	ldr	r0, [pc, #404]	; (800cbdc <__gethex+0x30c>)
 800ca48:	f001 fae6 	bl	800e018 <__assert_func>
 800ca4c:	3101      	adds	r1, #1
 800ca4e:	105b      	asrs	r3, r3, #1
 800ca50:	e7ee      	b.n	800ca30 <__gethex+0x160>
 800ca52:	f100 0914 	add.w	r9, r0, #20
 800ca56:	f04f 0b00 	mov.w	fp, #0
 800ca5a:	f1ca 0301 	rsb	r3, sl, #1
 800ca5e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ca62:	f8cd b000 	str.w	fp, [sp]
 800ca66:	9306      	str	r3, [sp, #24]
 800ca68:	42b7      	cmp	r7, r6
 800ca6a:	d340      	bcc.n	800caee <__gethex+0x21e>
 800ca6c:	9802      	ldr	r0, [sp, #8]
 800ca6e:	9b00      	ldr	r3, [sp, #0]
 800ca70:	f840 3b04 	str.w	r3, [r0], #4
 800ca74:	eba0 0009 	sub.w	r0, r0, r9
 800ca78:	1080      	asrs	r0, r0, #2
 800ca7a:	0146      	lsls	r6, r0, #5
 800ca7c:	6120      	str	r0, [r4, #16]
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f000 fbbc 	bl	800d1fc <__hi0bits>
 800ca84:	1a30      	subs	r0, r6, r0
 800ca86:	f8d8 6000 	ldr.w	r6, [r8]
 800ca8a:	42b0      	cmp	r0, r6
 800ca8c:	dd63      	ble.n	800cb56 <__gethex+0x286>
 800ca8e:	1b87      	subs	r7, r0, r6
 800ca90:	4639      	mov	r1, r7
 800ca92:	4620      	mov	r0, r4
 800ca94:	f000 ff57 	bl	800d946 <__any_on>
 800ca98:	4682      	mov	sl, r0
 800ca9a:	b1a8      	cbz	r0, 800cac8 <__gethex+0x1f8>
 800ca9c:	1e7b      	subs	r3, r7, #1
 800ca9e:	1159      	asrs	r1, r3, #5
 800caa0:	f003 021f 	and.w	r2, r3, #31
 800caa4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800caa8:	f04f 0a01 	mov.w	sl, #1
 800caac:	fa0a f202 	lsl.w	r2, sl, r2
 800cab0:	420a      	tst	r2, r1
 800cab2:	d009      	beq.n	800cac8 <__gethex+0x1f8>
 800cab4:	4553      	cmp	r3, sl
 800cab6:	dd05      	ble.n	800cac4 <__gethex+0x1f4>
 800cab8:	1eb9      	subs	r1, r7, #2
 800caba:	4620      	mov	r0, r4
 800cabc:	f000 ff43 	bl	800d946 <__any_on>
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d145      	bne.n	800cb50 <__gethex+0x280>
 800cac4:	f04f 0a02 	mov.w	sl, #2
 800cac8:	4639      	mov	r1, r7
 800caca:	4620      	mov	r0, r4
 800cacc:	f7ff fe98 	bl	800c800 <rshift>
 800cad0:	443d      	add	r5, r7
 800cad2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cad6:	42ab      	cmp	r3, r5
 800cad8:	da4c      	bge.n	800cb74 <__gethex+0x2a4>
 800cada:	ee18 0a10 	vmov	r0, s16
 800cade:	4621      	mov	r1, r4
 800cae0:	f000 fad6 	bl	800d090 <_Bfree>
 800cae4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cae6:	2300      	movs	r3, #0
 800cae8:	6013      	str	r3, [r2, #0]
 800caea:	27a3      	movs	r7, #163	; 0xa3
 800caec:	e785      	b.n	800c9fa <__gethex+0x12a>
 800caee:	1e73      	subs	r3, r6, #1
 800caf0:	9a05      	ldr	r2, [sp, #20]
 800caf2:	9303      	str	r3, [sp, #12]
 800caf4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d019      	beq.n	800cb30 <__gethex+0x260>
 800cafc:	f1bb 0f20 	cmp.w	fp, #32
 800cb00:	d107      	bne.n	800cb12 <__gethex+0x242>
 800cb02:	9b02      	ldr	r3, [sp, #8]
 800cb04:	9a00      	ldr	r2, [sp, #0]
 800cb06:	f843 2b04 	str.w	r2, [r3], #4
 800cb0a:	9302      	str	r3, [sp, #8]
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	9300      	str	r3, [sp, #0]
 800cb10:	469b      	mov	fp, r3
 800cb12:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cb16:	f7ff fec5 	bl	800c8a4 <__hexdig_fun>
 800cb1a:	9b00      	ldr	r3, [sp, #0]
 800cb1c:	f000 000f 	and.w	r0, r0, #15
 800cb20:	fa00 f00b 	lsl.w	r0, r0, fp
 800cb24:	4303      	orrs	r3, r0
 800cb26:	9300      	str	r3, [sp, #0]
 800cb28:	f10b 0b04 	add.w	fp, fp, #4
 800cb2c:	9b03      	ldr	r3, [sp, #12]
 800cb2e:	e00d      	b.n	800cb4c <__gethex+0x27c>
 800cb30:	9b03      	ldr	r3, [sp, #12]
 800cb32:	9a06      	ldr	r2, [sp, #24]
 800cb34:	4413      	add	r3, r2
 800cb36:	42bb      	cmp	r3, r7
 800cb38:	d3e0      	bcc.n	800cafc <__gethex+0x22c>
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	9901      	ldr	r1, [sp, #4]
 800cb3e:	9307      	str	r3, [sp, #28]
 800cb40:	4652      	mov	r2, sl
 800cb42:	f001 fa49 	bl	800dfd8 <strncmp>
 800cb46:	9b07      	ldr	r3, [sp, #28]
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	d1d7      	bne.n	800cafc <__gethex+0x22c>
 800cb4c:	461e      	mov	r6, r3
 800cb4e:	e78b      	b.n	800ca68 <__gethex+0x198>
 800cb50:	f04f 0a03 	mov.w	sl, #3
 800cb54:	e7b8      	b.n	800cac8 <__gethex+0x1f8>
 800cb56:	da0a      	bge.n	800cb6e <__gethex+0x29e>
 800cb58:	1a37      	subs	r7, r6, r0
 800cb5a:	4621      	mov	r1, r4
 800cb5c:	ee18 0a10 	vmov	r0, s16
 800cb60:	463a      	mov	r2, r7
 800cb62:	f000 fcb1 	bl	800d4c8 <__lshift>
 800cb66:	1bed      	subs	r5, r5, r7
 800cb68:	4604      	mov	r4, r0
 800cb6a:	f100 0914 	add.w	r9, r0, #20
 800cb6e:	f04f 0a00 	mov.w	sl, #0
 800cb72:	e7ae      	b.n	800cad2 <__gethex+0x202>
 800cb74:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cb78:	42a8      	cmp	r0, r5
 800cb7a:	dd72      	ble.n	800cc62 <__gethex+0x392>
 800cb7c:	1b45      	subs	r5, r0, r5
 800cb7e:	42ae      	cmp	r6, r5
 800cb80:	dc36      	bgt.n	800cbf0 <__gethex+0x320>
 800cb82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb86:	2b02      	cmp	r3, #2
 800cb88:	d02a      	beq.n	800cbe0 <__gethex+0x310>
 800cb8a:	2b03      	cmp	r3, #3
 800cb8c:	d02c      	beq.n	800cbe8 <__gethex+0x318>
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d115      	bne.n	800cbbe <__gethex+0x2ee>
 800cb92:	42ae      	cmp	r6, r5
 800cb94:	d113      	bne.n	800cbbe <__gethex+0x2ee>
 800cb96:	2e01      	cmp	r6, #1
 800cb98:	d10b      	bne.n	800cbb2 <__gethex+0x2e2>
 800cb9a:	9a04      	ldr	r2, [sp, #16]
 800cb9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cba0:	6013      	str	r3, [r2, #0]
 800cba2:	2301      	movs	r3, #1
 800cba4:	6123      	str	r3, [r4, #16]
 800cba6:	f8c9 3000 	str.w	r3, [r9]
 800cbaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cbac:	2762      	movs	r7, #98	; 0x62
 800cbae:	601c      	str	r4, [r3, #0]
 800cbb0:	e723      	b.n	800c9fa <__gethex+0x12a>
 800cbb2:	1e71      	subs	r1, r6, #1
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f000 fec6 	bl	800d946 <__any_on>
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	d1ed      	bne.n	800cb9a <__gethex+0x2ca>
 800cbbe:	ee18 0a10 	vmov	r0, s16
 800cbc2:	4621      	mov	r1, r4
 800cbc4:	f000 fa64 	bl	800d090 <_Bfree>
 800cbc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cbca:	2300      	movs	r3, #0
 800cbcc:	6013      	str	r3, [r2, #0]
 800cbce:	2750      	movs	r7, #80	; 0x50
 800cbd0:	e713      	b.n	800c9fa <__gethex+0x12a>
 800cbd2:	bf00      	nop
 800cbd4:	0800e7e8 	.word	0x0800e7e8
 800cbd8:	0800e76b 	.word	0x0800e76b
 800cbdc:	0800e77c 	.word	0x0800e77c
 800cbe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d1eb      	bne.n	800cbbe <__gethex+0x2ee>
 800cbe6:	e7d8      	b.n	800cb9a <__gethex+0x2ca>
 800cbe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d1d5      	bne.n	800cb9a <__gethex+0x2ca>
 800cbee:	e7e6      	b.n	800cbbe <__gethex+0x2ee>
 800cbf0:	1e6f      	subs	r7, r5, #1
 800cbf2:	f1ba 0f00 	cmp.w	sl, #0
 800cbf6:	d131      	bne.n	800cc5c <__gethex+0x38c>
 800cbf8:	b127      	cbz	r7, 800cc04 <__gethex+0x334>
 800cbfa:	4639      	mov	r1, r7
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	f000 fea2 	bl	800d946 <__any_on>
 800cc02:	4682      	mov	sl, r0
 800cc04:	117b      	asrs	r3, r7, #5
 800cc06:	2101      	movs	r1, #1
 800cc08:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cc0c:	f007 071f 	and.w	r7, r7, #31
 800cc10:	fa01 f707 	lsl.w	r7, r1, r7
 800cc14:	421f      	tst	r7, r3
 800cc16:	4629      	mov	r1, r5
 800cc18:	4620      	mov	r0, r4
 800cc1a:	bf18      	it	ne
 800cc1c:	f04a 0a02 	orrne.w	sl, sl, #2
 800cc20:	1b76      	subs	r6, r6, r5
 800cc22:	f7ff fded 	bl	800c800 <rshift>
 800cc26:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cc2a:	2702      	movs	r7, #2
 800cc2c:	f1ba 0f00 	cmp.w	sl, #0
 800cc30:	d048      	beq.n	800ccc4 <__gethex+0x3f4>
 800cc32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc36:	2b02      	cmp	r3, #2
 800cc38:	d015      	beq.n	800cc66 <__gethex+0x396>
 800cc3a:	2b03      	cmp	r3, #3
 800cc3c:	d017      	beq.n	800cc6e <__gethex+0x39e>
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d109      	bne.n	800cc56 <__gethex+0x386>
 800cc42:	f01a 0f02 	tst.w	sl, #2
 800cc46:	d006      	beq.n	800cc56 <__gethex+0x386>
 800cc48:	f8d9 0000 	ldr.w	r0, [r9]
 800cc4c:	ea4a 0a00 	orr.w	sl, sl, r0
 800cc50:	f01a 0f01 	tst.w	sl, #1
 800cc54:	d10e      	bne.n	800cc74 <__gethex+0x3a4>
 800cc56:	f047 0710 	orr.w	r7, r7, #16
 800cc5a:	e033      	b.n	800ccc4 <__gethex+0x3f4>
 800cc5c:	f04f 0a01 	mov.w	sl, #1
 800cc60:	e7d0      	b.n	800cc04 <__gethex+0x334>
 800cc62:	2701      	movs	r7, #1
 800cc64:	e7e2      	b.n	800cc2c <__gethex+0x35c>
 800cc66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc68:	f1c3 0301 	rsb	r3, r3, #1
 800cc6c:	9315      	str	r3, [sp, #84]	; 0x54
 800cc6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d0f0      	beq.n	800cc56 <__gethex+0x386>
 800cc74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc78:	f104 0314 	add.w	r3, r4, #20
 800cc7c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cc80:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cc84:	f04f 0c00 	mov.w	ip, #0
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc8e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cc92:	d01c      	beq.n	800ccce <__gethex+0x3fe>
 800cc94:	3201      	adds	r2, #1
 800cc96:	6002      	str	r2, [r0, #0]
 800cc98:	2f02      	cmp	r7, #2
 800cc9a:	f104 0314 	add.w	r3, r4, #20
 800cc9e:	d13f      	bne.n	800cd20 <__gethex+0x450>
 800cca0:	f8d8 2000 	ldr.w	r2, [r8]
 800cca4:	3a01      	subs	r2, #1
 800cca6:	42b2      	cmp	r2, r6
 800cca8:	d10a      	bne.n	800ccc0 <__gethex+0x3f0>
 800ccaa:	1171      	asrs	r1, r6, #5
 800ccac:	2201      	movs	r2, #1
 800ccae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ccb2:	f006 061f 	and.w	r6, r6, #31
 800ccb6:	fa02 f606 	lsl.w	r6, r2, r6
 800ccba:	421e      	tst	r6, r3
 800ccbc:	bf18      	it	ne
 800ccbe:	4617      	movne	r7, r2
 800ccc0:	f047 0720 	orr.w	r7, r7, #32
 800ccc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ccc6:	601c      	str	r4, [r3, #0]
 800ccc8:	9b04      	ldr	r3, [sp, #16]
 800ccca:	601d      	str	r5, [r3, #0]
 800cccc:	e695      	b.n	800c9fa <__gethex+0x12a>
 800ccce:	4299      	cmp	r1, r3
 800ccd0:	f843 cc04 	str.w	ip, [r3, #-4]
 800ccd4:	d8d8      	bhi.n	800cc88 <__gethex+0x3b8>
 800ccd6:	68a3      	ldr	r3, [r4, #8]
 800ccd8:	459b      	cmp	fp, r3
 800ccda:	db19      	blt.n	800cd10 <__gethex+0x440>
 800ccdc:	6861      	ldr	r1, [r4, #4]
 800ccde:	ee18 0a10 	vmov	r0, s16
 800cce2:	3101      	adds	r1, #1
 800cce4:	f000 f994 	bl	800d010 <_Balloc>
 800cce8:	4681      	mov	r9, r0
 800ccea:	b918      	cbnz	r0, 800ccf4 <__gethex+0x424>
 800ccec:	4b1a      	ldr	r3, [pc, #104]	; (800cd58 <__gethex+0x488>)
 800ccee:	4602      	mov	r2, r0
 800ccf0:	2184      	movs	r1, #132	; 0x84
 800ccf2:	e6a8      	b.n	800ca46 <__gethex+0x176>
 800ccf4:	6922      	ldr	r2, [r4, #16]
 800ccf6:	3202      	adds	r2, #2
 800ccf8:	f104 010c 	add.w	r1, r4, #12
 800ccfc:	0092      	lsls	r2, r2, #2
 800ccfe:	300c      	adds	r0, #12
 800cd00:	f7fc fec0 	bl	8009a84 <memcpy>
 800cd04:	4621      	mov	r1, r4
 800cd06:	ee18 0a10 	vmov	r0, s16
 800cd0a:	f000 f9c1 	bl	800d090 <_Bfree>
 800cd0e:	464c      	mov	r4, r9
 800cd10:	6923      	ldr	r3, [r4, #16]
 800cd12:	1c5a      	adds	r2, r3, #1
 800cd14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd18:	6122      	str	r2, [r4, #16]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	615a      	str	r2, [r3, #20]
 800cd1e:	e7bb      	b.n	800cc98 <__gethex+0x3c8>
 800cd20:	6922      	ldr	r2, [r4, #16]
 800cd22:	455a      	cmp	r2, fp
 800cd24:	dd0b      	ble.n	800cd3e <__gethex+0x46e>
 800cd26:	2101      	movs	r1, #1
 800cd28:	4620      	mov	r0, r4
 800cd2a:	f7ff fd69 	bl	800c800 <rshift>
 800cd2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd32:	3501      	adds	r5, #1
 800cd34:	42ab      	cmp	r3, r5
 800cd36:	f6ff aed0 	blt.w	800cada <__gethex+0x20a>
 800cd3a:	2701      	movs	r7, #1
 800cd3c:	e7c0      	b.n	800ccc0 <__gethex+0x3f0>
 800cd3e:	f016 061f 	ands.w	r6, r6, #31
 800cd42:	d0fa      	beq.n	800cd3a <__gethex+0x46a>
 800cd44:	449a      	add	sl, r3
 800cd46:	f1c6 0620 	rsb	r6, r6, #32
 800cd4a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cd4e:	f000 fa55 	bl	800d1fc <__hi0bits>
 800cd52:	42b0      	cmp	r0, r6
 800cd54:	dbe7      	blt.n	800cd26 <__gethex+0x456>
 800cd56:	e7f0      	b.n	800cd3a <__gethex+0x46a>
 800cd58:	0800e76b 	.word	0x0800e76b

0800cd5c <L_shift>:
 800cd5c:	f1c2 0208 	rsb	r2, r2, #8
 800cd60:	0092      	lsls	r2, r2, #2
 800cd62:	b570      	push	{r4, r5, r6, lr}
 800cd64:	f1c2 0620 	rsb	r6, r2, #32
 800cd68:	6843      	ldr	r3, [r0, #4]
 800cd6a:	6804      	ldr	r4, [r0, #0]
 800cd6c:	fa03 f506 	lsl.w	r5, r3, r6
 800cd70:	432c      	orrs	r4, r5
 800cd72:	40d3      	lsrs	r3, r2
 800cd74:	6004      	str	r4, [r0, #0]
 800cd76:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd7a:	4288      	cmp	r0, r1
 800cd7c:	d3f4      	bcc.n	800cd68 <L_shift+0xc>
 800cd7e:	bd70      	pop	{r4, r5, r6, pc}

0800cd80 <__match>:
 800cd80:	b530      	push	{r4, r5, lr}
 800cd82:	6803      	ldr	r3, [r0, #0]
 800cd84:	3301      	adds	r3, #1
 800cd86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd8a:	b914      	cbnz	r4, 800cd92 <__match+0x12>
 800cd8c:	6003      	str	r3, [r0, #0]
 800cd8e:	2001      	movs	r0, #1
 800cd90:	bd30      	pop	{r4, r5, pc}
 800cd92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cd9a:	2d19      	cmp	r5, #25
 800cd9c:	bf98      	it	ls
 800cd9e:	3220      	addls	r2, #32
 800cda0:	42a2      	cmp	r2, r4
 800cda2:	d0f0      	beq.n	800cd86 <__match+0x6>
 800cda4:	2000      	movs	r0, #0
 800cda6:	e7f3      	b.n	800cd90 <__match+0x10>

0800cda8 <__hexnan>:
 800cda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdac:	680b      	ldr	r3, [r1, #0]
 800cdae:	6801      	ldr	r1, [r0, #0]
 800cdb0:	115e      	asrs	r6, r3, #5
 800cdb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cdb6:	f013 031f 	ands.w	r3, r3, #31
 800cdba:	b087      	sub	sp, #28
 800cdbc:	bf18      	it	ne
 800cdbe:	3604      	addne	r6, #4
 800cdc0:	2500      	movs	r5, #0
 800cdc2:	1f37      	subs	r7, r6, #4
 800cdc4:	4682      	mov	sl, r0
 800cdc6:	4690      	mov	r8, r2
 800cdc8:	9301      	str	r3, [sp, #4]
 800cdca:	f846 5c04 	str.w	r5, [r6, #-4]
 800cdce:	46b9      	mov	r9, r7
 800cdd0:	463c      	mov	r4, r7
 800cdd2:	9502      	str	r5, [sp, #8]
 800cdd4:	46ab      	mov	fp, r5
 800cdd6:	784a      	ldrb	r2, [r1, #1]
 800cdd8:	1c4b      	adds	r3, r1, #1
 800cdda:	9303      	str	r3, [sp, #12]
 800cddc:	b342      	cbz	r2, 800ce30 <__hexnan+0x88>
 800cdde:	4610      	mov	r0, r2
 800cde0:	9105      	str	r1, [sp, #20]
 800cde2:	9204      	str	r2, [sp, #16]
 800cde4:	f7ff fd5e 	bl	800c8a4 <__hexdig_fun>
 800cde8:	2800      	cmp	r0, #0
 800cdea:	d14f      	bne.n	800ce8c <__hexnan+0xe4>
 800cdec:	9a04      	ldr	r2, [sp, #16]
 800cdee:	9905      	ldr	r1, [sp, #20]
 800cdf0:	2a20      	cmp	r2, #32
 800cdf2:	d818      	bhi.n	800ce26 <__hexnan+0x7e>
 800cdf4:	9b02      	ldr	r3, [sp, #8]
 800cdf6:	459b      	cmp	fp, r3
 800cdf8:	dd13      	ble.n	800ce22 <__hexnan+0x7a>
 800cdfa:	454c      	cmp	r4, r9
 800cdfc:	d206      	bcs.n	800ce0c <__hexnan+0x64>
 800cdfe:	2d07      	cmp	r5, #7
 800ce00:	dc04      	bgt.n	800ce0c <__hexnan+0x64>
 800ce02:	462a      	mov	r2, r5
 800ce04:	4649      	mov	r1, r9
 800ce06:	4620      	mov	r0, r4
 800ce08:	f7ff ffa8 	bl	800cd5c <L_shift>
 800ce0c:	4544      	cmp	r4, r8
 800ce0e:	d950      	bls.n	800ceb2 <__hexnan+0x10a>
 800ce10:	2300      	movs	r3, #0
 800ce12:	f1a4 0904 	sub.w	r9, r4, #4
 800ce16:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce1a:	f8cd b008 	str.w	fp, [sp, #8]
 800ce1e:	464c      	mov	r4, r9
 800ce20:	461d      	mov	r5, r3
 800ce22:	9903      	ldr	r1, [sp, #12]
 800ce24:	e7d7      	b.n	800cdd6 <__hexnan+0x2e>
 800ce26:	2a29      	cmp	r2, #41	; 0x29
 800ce28:	d156      	bne.n	800ced8 <__hexnan+0x130>
 800ce2a:	3102      	adds	r1, #2
 800ce2c:	f8ca 1000 	str.w	r1, [sl]
 800ce30:	f1bb 0f00 	cmp.w	fp, #0
 800ce34:	d050      	beq.n	800ced8 <__hexnan+0x130>
 800ce36:	454c      	cmp	r4, r9
 800ce38:	d206      	bcs.n	800ce48 <__hexnan+0xa0>
 800ce3a:	2d07      	cmp	r5, #7
 800ce3c:	dc04      	bgt.n	800ce48 <__hexnan+0xa0>
 800ce3e:	462a      	mov	r2, r5
 800ce40:	4649      	mov	r1, r9
 800ce42:	4620      	mov	r0, r4
 800ce44:	f7ff ff8a 	bl	800cd5c <L_shift>
 800ce48:	4544      	cmp	r4, r8
 800ce4a:	d934      	bls.n	800ceb6 <__hexnan+0x10e>
 800ce4c:	f1a8 0204 	sub.w	r2, r8, #4
 800ce50:	4623      	mov	r3, r4
 800ce52:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce56:	f842 1f04 	str.w	r1, [r2, #4]!
 800ce5a:	429f      	cmp	r7, r3
 800ce5c:	d2f9      	bcs.n	800ce52 <__hexnan+0xaa>
 800ce5e:	1b3b      	subs	r3, r7, r4
 800ce60:	f023 0303 	bic.w	r3, r3, #3
 800ce64:	3304      	adds	r3, #4
 800ce66:	3401      	adds	r4, #1
 800ce68:	3e03      	subs	r6, #3
 800ce6a:	42b4      	cmp	r4, r6
 800ce6c:	bf88      	it	hi
 800ce6e:	2304      	movhi	r3, #4
 800ce70:	4443      	add	r3, r8
 800ce72:	2200      	movs	r2, #0
 800ce74:	f843 2b04 	str.w	r2, [r3], #4
 800ce78:	429f      	cmp	r7, r3
 800ce7a:	d2fb      	bcs.n	800ce74 <__hexnan+0xcc>
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	b91b      	cbnz	r3, 800ce88 <__hexnan+0xe0>
 800ce80:	4547      	cmp	r7, r8
 800ce82:	d127      	bne.n	800ced4 <__hexnan+0x12c>
 800ce84:	2301      	movs	r3, #1
 800ce86:	603b      	str	r3, [r7, #0]
 800ce88:	2005      	movs	r0, #5
 800ce8a:	e026      	b.n	800ceda <__hexnan+0x132>
 800ce8c:	3501      	adds	r5, #1
 800ce8e:	2d08      	cmp	r5, #8
 800ce90:	f10b 0b01 	add.w	fp, fp, #1
 800ce94:	dd06      	ble.n	800cea4 <__hexnan+0xfc>
 800ce96:	4544      	cmp	r4, r8
 800ce98:	d9c3      	bls.n	800ce22 <__hexnan+0x7a>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	f844 3c04 	str.w	r3, [r4, #-4]
 800cea0:	2501      	movs	r5, #1
 800cea2:	3c04      	subs	r4, #4
 800cea4:	6822      	ldr	r2, [r4, #0]
 800cea6:	f000 000f 	and.w	r0, r0, #15
 800ceaa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ceae:	6022      	str	r2, [r4, #0]
 800ceb0:	e7b7      	b.n	800ce22 <__hexnan+0x7a>
 800ceb2:	2508      	movs	r5, #8
 800ceb4:	e7b5      	b.n	800ce22 <__hexnan+0x7a>
 800ceb6:	9b01      	ldr	r3, [sp, #4]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d0df      	beq.n	800ce7c <__hexnan+0xd4>
 800cebc:	f04f 32ff 	mov.w	r2, #4294967295
 800cec0:	f1c3 0320 	rsb	r3, r3, #32
 800cec4:	fa22 f303 	lsr.w	r3, r2, r3
 800cec8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cecc:	401a      	ands	r2, r3
 800cece:	f846 2c04 	str.w	r2, [r6, #-4]
 800ced2:	e7d3      	b.n	800ce7c <__hexnan+0xd4>
 800ced4:	3f04      	subs	r7, #4
 800ced6:	e7d1      	b.n	800ce7c <__hexnan+0xd4>
 800ced8:	2004      	movs	r0, #4
 800ceda:	b007      	add	sp, #28
 800cedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cee0 <_localeconv_r>:
 800cee0:	4800      	ldr	r0, [pc, #0]	; (800cee4 <_localeconv_r+0x4>)
 800cee2:	4770      	bx	lr
 800cee4:	200001c8 	.word	0x200001c8

0800cee8 <_lseek_r>:
 800cee8:	b538      	push	{r3, r4, r5, lr}
 800ceea:	4d07      	ldr	r5, [pc, #28]	; (800cf08 <_lseek_r+0x20>)
 800ceec:	4604      	mov	r4, r0
 800ceee:	4608      	mov	r0, r1
 800cef0:	4611      	mov	r1, r2
 800cef2:	2200      	movs	r2, #0
 800cef4:	602a      	str	r2, [r5, #0]
 800cef6:	461a      	mov	r2, r3
 800cef8:	f7f4 ff5c 	bl	8001db4 <_lseek>
 800cefc:	1c43      	adds	r3, r0, #1
 800cefe:	d102      	bne.n	800cf06 <_lseek_r+0x1e>
 800cf00:	682b      	ldr	r3, [r5, #0]
 800cf02:	b103      	cbz	r3, 800cf06 <_lseek_r+0x1e>
 800cf04:	6023      	str	r3, [r4, #0]
 800cf06:	bd38      	pop	{r3, r4, r5, pc}
 800cf08:	20004ecc 	.word	0x20004ecc

0800cf0c <__swhatbuf_r>:
 800cf0c:	b570      	push	{r4, r5, r6, lr}
 800cf0e:	460e      	mov	r6, r1
 800cf10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf14:	2900      	cmp	r1, #0
 800cf16:	b096      	sub	sp, #88	; 0x58
 800cf18:	4614      	mov	r4, r2
 800cf1a:	461d      	mov	r5, r3
 800cf1c:	da07      	bge.n	800cf2e <__swhatbuf_r+0x22>
 800cf1e:	2300      	movs	r3, #0
 800cf20:	602b      	str	r3, [r5, #0]
 800cf22:	89b3      	ldrh	r3, [r6, #12]
 800cf24:	061a      	lsls	r2, r3, #24
 800cf26:	d410      	bmi.n	800cf4a <__swhatbuf_r+0x3e>
 800cf28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf2c:	e00e      	b.n	800cf4c <__swhatbuf_r+0x40>
 800cf2e:	466a      	mov	r2, sp
 800cf30:	f001 f8a2 	bl	800e078 <_fstat_r>
 800cf34:	2800      	cmp	r0, #0
 800cf36:	dbf2      	blt.n	800cf1e <__swhatbuf_r+0x12>
 800cf38:	9a01      	ldr	r2, [sp, #4]
 800cf3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf42:	425a      	negs	r2, r3
 800cf44:	415a      	adcs	r2, r3
 800cf46:	602a      	str	r2, [r5, #0]
 800cf48:	e7ee      	b.n	800cf28 <__swhatbuf_r+0x1c>
 800cf4a:	2340      	movs	r3, #64	; 0x40
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	6023      	str	r3, [r4, #0]
 800cf50:	b016      	add	sp, #88	; 0x58
 800cf52:	bd70      	pop	{r4, r5, r6, pc}

0800cf54 <__smakebuf_r>:
 800cf54:	898b      	ldrh	r3, [r1, #12]
 800cf56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf58:	079d      	lsls	r5, r3, #30
 800cf5a:	4606      	mov	r6, r0
 800cf5c:	460c      	mov	r4, r1
 800cf5e:	d507      	bpl.n	800cf70 <__smakebuf_r+0x1c>
 800cf60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf64:	6023      	str	r3, [r4, #0]
 800cf66:	6123      	str	r3, [r4, #16]
 800cf68:	2301      	movs	r3, #1
 800cf6a:	6163      	str	r3, [r4, #20]
 800cf6c:	b002      	add	sp, #8
 800cf6e:	bd70      	pop	{r4, r5, r6, pc}
 800cf70:	ab01      	add	r3, sp, #4
 800cf72:	466a      	mov	r2, sp
 800cf74:	f7ff ffca 	bl	800cf0c <__swhatbuf_r>
 800cf78:	9900      	ldr	r1, [sp, #0]
 800cf7a:	4605      	mov	r5, r0
 800cf7c:	4630      	mov	r0, r6
 800cf7e:	f7fc fde7 	bl	8009b50 <_malloc_r>
 800cf82:	b948      	cbnz	r0, 800cf98 <__smakebuf_r+0x44>
 800cf84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf88:	059a      	lsls	r2, r3, #22
 800cf8a:	d4ef      	bmi.n	800cf6c <__smakebuf_r+0x18>
 800cf8c:	f023 0303 	bic.w	r3, r3, #3
 800cf90:	f043 0302 	orr.w	r3, r3, #2
 800cf94:	81a3      	strh	r3, [r4, #12]
 800cf96:	e7e3      	b.n	800cf60 <__smakebuf_r+0xc>
 800cf98:	4b0d      	ldr	r3, [pc, #52]	; (800cfd0 <__smakebuf_r+0x7c>)
 800cf9a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf9c:	89a3      	ldrh	r3, [r4, #12]
 800cf9e:	6020      	str	r0, [r4, #0]
 800cfa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfa4:	81a3      	strh	r3, [r4, #12]
 800cfa6:	9b00      	ldr	r3, [sp, #0]
 800cfa8:	6163      	str	r3, [r4, #20]
 800cfaa:	9b01      	ldr	r3, [sp, #4]
 800cfac:	6120      	str	r0, [r4, #16]
 800cfae:	b15b      	cbz	r3, 800cfc8 <__smakebuf_r+0x74>
 800cfb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	f001 f871 	bl	800e09c <_isatty_r>
 800cfba:	b128      	cbz	r0, 800cfc8 <__smakebuf_r+0x74>
 800cfbc:	89a3      	ldrh	r3, [r4, #12]
 800cfbe:	f023 0303 	bic.w	r3, r3, #3
 800cfc2:	f043 0301 	orr.w	r3, r3, #1
 800cfc6:	81a3      	strh	r3, [r4, #12]
 800cfc8:	89a0      	ldrh	r0, [r4, #12]
 800cfca:	4305      	orrs	r5, r0
 800cfcc:	81a5      	strh	r5, [r4, #12]
 800cfce:	e7cd      	b.n	800cf6c <__smakebuf_r+0x18>
 800cfd0:	08009881 	.word	0x08009881

0800cfd4 <__ascii_mbtowc>:
 800cfd4:	b082      	sub	sp, #8
 800cfd6:	b901      	cbnz	r1, 800cfda <__ascii_mbtowc+0x6>
 800cfd8:	a901      	add	r1, sp, #4
 800cfda:	b142      	cbz	r2, 800cfee <__ascii_mbtowc+0x1a>
 800cfdc:	b14b      	cbz	r3, 800cff2 <__ascii_mbtowc+0x1e>
 800cfde:	7813      	ldrb	r3, [r2, #0]
 800cfe0:	600b      	str	r3, [r1, #0]
 800cfe2:	7812      	ldrb	r2, [r2, #0]
 800cfe4:	1e10      	subs	r0, r2, #0
 800cfe6:	bf18      	it	ne
 800cfe8:	2001      	movne	r0, #1
 800cfea:	b002      	add	sp, #8
 800cfec:	4770      	bx	lr
 800cfee:	4610      	mov	r0, r2
 800cff0:	e7fb      	b.n	800cfea <__ascii_mbtowc+0x16>
 800cff2:	f06f 0001 	mvn.w	r0, #1
 800cff6:	e7f8      	b.n	800cfea <__ascii_mbtowc+0x16>

0800cff8 <__malloc_lock>:
 800cff8:	4801      	ldr	r0, [pc, #4]	; (800d000 <__malloc_lock+0x8>)
 800cffa:	f7fc bd38 	b.w	8009a6e <__retarget_lock_acquire_recursive>
 800cffe:	bf00      	nop
 800d000:	20004ec4 	.word	0x20004ec4

0800d004 <__malloc_unlock>:
 800d004:	4801      	ldr	r0, [pc, #4]	; (800d00c <__malloc_unlock+0x8>)
 800d006:	f7fc bd33 	b.w	8009a70 <__retarget_lock_release_recursive>
 800d00a:	bf00      	nop
 800d00c:	20004ec4 	.word	0x20004ec4

0800d010 <_Balloc>:
 800d010:	b570      	push	{r4, r5, r6, lr}
 800d012:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d014:	4604      	mov	r4, r0
 800d016:	460d      	mov	r5, r1
 800d018:	b976      	cbnz	r6, 800d038 <_Balloc+0x28>
 800d01a:	2010      	movs	r0, #16
 800d01c:	f7fc fd2a 	bl	8009a74 <malloc>
 800d020:	4602      	mov	r2, r0
 800d022:	6260      	str	r0, [r4, #36]	; 0x24
 800d024:	b920      	cbnz	r0, 800d030 <_Balloc+0x20>
 800d026:	4b18      	ldr	r3, [pc, #96]	; (800d088 <_Balloc+0x78>)
 800d028:	4818      	ldr	r0, [pc, #96]	; (800d08c <_Balloc+0x7c>)
 800d02a:	2166      	movs	r1, #102	; 0x66
 800d02c:	f000 fff4 	bl	800e018 <__assert_func>
 800d030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d034:	6006      	str	r6, [r0, #0]
 800d036:	60c6      	str	r6, [r0, #12]
 800d038:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d03a:	68f3      	ldr	r3, [r6, #12]
 800d03c:	b183      	cbz	r3, 800d060 <_Balloc+0x50>
 800d03e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d040:	68db      	ldr	r3, [r3, #12]
 800d042:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d046:	b9b8      	cbnz	r0, 800d078 <_Balloc+0x68>
 800d048:	2101      	movs	r1, #1
 800d04a:	fa01 f605 	lsl.w	r6, r1, r5
 800d04e:	1d72      	adds	r2, r6, #5
 800d050:	0092      	lsls	r2, r2, #2
 800d052:	4620      	mov	r0, r4
 800d054:	f000 fc98 	bl	800d988 <_calloc_r>
 800d058:	b160      	cbz	r0, 800d074 <_Balloc+0x64>
 800d05a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d05e:	e00e      	b.n	800d07e <_Balloc+0x6e>
 800d060:	2221      	movs	r2, #33	; 0x21
 800d062:	2104      	movs	r1, #4
 800d064:	4620      	mov	r0, r4
 800d066:	f000 fc8f 	bl	800d988 <_calloc_r>
 800d06a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d06c:	60f0      	str	r0, [r6, #12]
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d1e4      	bne.n	800d03e <_Balloc+0x2e>
 800d074:	2000      	movs	r0, #0
 800d076:	bd70      	pop	{r4, r5, r6, pc}
 800d078:	6802      	ldr	r2, [r0, #0]
 800d07a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d07e:	2300      	movs	r3, #0
 800d080:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d084:	e7f7      	b.n	800d076 <_Balloc+0x66>
 800d086:	bf00      	nop
 800d088:	0800e6f5 	.word	0x0800e6f5
 800d08c:	0800e7fc 	.word	0x0800e7fc

0800d090 <_Bfree>:
 800d090:	b570      	push	{r4, r5, r6, lr}
 800d092:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d094:	4605      	mov	r5, r0
 800d096:	460c      	mov	r4, r1
 800d098:	b976      	cbnz	r6, 800d0b8 <_Bfree+0x28>
 800d09a:	2010      	movs	r0, #16
 800d09c:	f7fc fcea 	bl	8009a74 <malloc>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	6268      	str	r0, [r5, #36]	; 0x24
 800d0a4:	b920      	cbnz	r0, 800d0b0 <_Bfree+0x20>
 800d0a6:	4b09      	ldr	r3, [pc, #36]	; (800d0cc <_Bfree+0x3c>)
 800d0a8:	4809      	ldr	r0, [pc, #36]	; (800d0d0 <_Bfree+0x40>)
 800d0aa:	218a      	movs	r1, #138	; 0x8a
 800d0ac:	f000 ffb4 	bl	800e018 <__assert_func>
 800d0b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0b4:	6006      	str	r6, [r0, #0]
 800d0b6:	60c6      	str	r6, [r0, #12]
 800d0b8:	b13c      	cbz	r4, 800d0ca <_Bfree+0x3a>
 800d0ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d0bc:	6862      	ldr	r2, [r4, #4]
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0c4:	6021      	str	r1, [r4, #0]
 800d0c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0ca:	bd70      	pop	{r4, r5, r6, pc}
 800d0cc:	0800e6f5 	.word	0x0800e6f5
 800d0d0:	0800e7fc 	.word	0x0800e7fc

0800d0d4 <__multadd>:
 800d0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0d8:	690e      	ldr	r6, [r1, #16]
 800d0da:	4607      	mov	r7, r0
 800d0dc:	4698      	mov	r8, r3
 800d0de:	460c      	mov	r4, r1
 800d0e0:	f101 0014 	add.w	r0, r1, #20
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	6805      	ldr	r5, [r0, #0]
 800d0e8:	b2a9      	uxth	r1, r5
 800d0ea:	fb02 8101 	mla	r1, r2, r1, r8
 800d0ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d0f2:	0c2d      	lsrs	r5, r5, #16
 800d0f4:	fb02 c505 	mla	r5, r2, r5, ip
 800d0f8:	b289      	uxth	r1, r1
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d100:	429e      	cmp	r6, r3
 800d102:	f840 1b04 	str.w	r1, [r0], #4
 800d106:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d10a:	dcec      	bgt.n	800d0e6 <__multadd+0x12>
 800d10c:	f1b8 0f00 	cmp.w	r8, #0
 800d110:	d022      	beq.n	800d158 <__multadd+0x84>
 800d112:	68a3      	ldr	r3, [r4, #8]
 800d114:	42b3      	cmp	r3, r6
 800d116:	dc19      	bgt.n	800d14c <__multadd+0x78>
 800d118:	6861      	ldr	r1, [r4, #4]
 800d11a:	4638      	mov	r0, r7
 800d11c:	3101      	adds	r1, #1
 800d11e:	f7ff ff77 	bl	800d010 <_Balloc>
 800d122:	4605      	mov	r5, r0
 800d124:	b928      	cbnz	r0, 800d132 <__multadd+0x5e>
 800d126:	4602      	mov	r2, r0
 800d128:	4b0d      	ldr	r3, [pc, #52]	; (800d160 <__multadd+0x8c>)
 800d12a:	480e      	ldr	r0, [pc, #56]	; (800d164 <__multadd+0x90>)
 800d12c:	21b5      	movs	r1, #181	; 0xb5
 800d12e:	f000 ff73 	bl	800e018 <__assert_func>
 800d132:	6922      	ldr	r2, [r4, #16]
 800d134:	3202      	adds	r2, #2
 800d136:	f104 010c 	add.w	r1, r4, #12
 800d13a:	0092      	lsls	r2, r2, #2
 800d13c:	300c      	adds	r0, #12
 800d13e:	f7fc fca1 	bl	8009a84 <memcpy>
 800d142:	4621      	mov	r1, r4
 800d144:	4638      	mov	r0, r7
 800d146:	f7ff ffa3 	bl	800d090 <_Bfree>
 800d14a:	462c      	mov	r4, r5
 800d14c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d150:	3601      	adds	r6, #1
 800d152:	f8c3 8014 	str.w	r8, [r3, #20]
 800d156:	6126      	str	r6, [r4, #16]
 800d158:	4620      	mov	r0, r4
 800d15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d15e:	bf00      	nop
 800d160:	0800e76b 	.word	0x0800e76b
 800d164:	0800e7fc 	.word	0x0800e7fc

0800d168 <__s2b>:
 800d168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d16c:	460c      	mov	r4, r1
 800d16e:	4615      	mov	r5, r2
 800d170:	461f      	mov	r7, r3
 800d172:	2209      	movs	r2, #9
 800d174:	3308      	adds	r3, #8
 800d176:	4606      	mov	r6, r0
 800d178:	fb93 f3f2 	sdiv	r3, r3, r2
 800d17c:	2100      	movs	r1, #0
 800d17e:	2201      	movs	r2, #1
 800d180:	429a      	cmp	r2, r3
 800d182:	db09      	blt.n	800d198 <__s2b+0x30>
 800d184:	4630      	mov	r0, r6
 800d186:	f7ff ff43 	bl	800d010 <_Balloc>
 800d18a:	b940      	cbnz	r0, 800d19e <__s2b+0x36>
 800d18c:	4602      	mov	r2, r0
 800d18e:	4b19      	ldr	r3, [pc, #100]	; (800d1f4 <__s2b+0x8c>)
 800d190:	4819      	ldr	r0, [pc, #100]	; (800d1f8 <__s2b+0x90>)
 800d192:	21ce      	movs	r1, #206	; 0xce
 800d194:	f000 ff40 	bl	800e018 <__assert_func>
 800d198:	0052      	lsls	r2, r2, #1
 800d19a:	3101      	adds	r1, #1
 800d19c:	e7f0      	b.n	800d180 <__s2b+0x18>
 800d19e:	9b08      	ldr	r3, [sp, #32]
 800d1a0:	6143      	str	r3, [r0, #20]
 800d1a2:	2d09      	cmp	r5, #9
 800d1a4:	f04f 0301 	mov.w	r3, #1
 800d1a8:	6103      	str	r3, [r0, #16]
 800d1aa:	dd16      	ble.n	800d1da <__s2b+0x72>
 800d1ac:	f104 0909 	add.w	r9, r4, #9
 800d1b0:	46c8      	mov	r8, r9
 800d1b2:	442c      	add	r4, r5
 800d1b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d1b8:	4601      	mov	r1, r0
 800d1ba:	3b30      	subs	r3, #48	; 0x30
 800d1bc:	220a      	movs	r2, #10
 800d1be:	4630      	mov	r0, r6
 800d1c0:	f7ff ff88 	bl	800d0d4 <__multadd>
 800d1c4:	45a0      	cmp	r8, r4
 800d1c6:	d1f5      	bne.n	800d1b4 <__s2b+0x4c>
 800d1c8:	f1a5 0408 	sub.w	r4, r5, #8
 800d1cc:	444c      	add	r4, r9
 800d1ce:	1b2d      	subs	r5, r5, r4
 800d1d0:	1963      	adds	r3, r4, r5
 800d1d2:	42bb      	cmp	r3, r7
 800d1d4:	db04      	blt.n	800d1e0 <__s2b+0x78>
 800d1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1da:	340a      	adds	r4, #10
 800d1dc:	2509      	movs	r5, #9
 800d1de:	e7f6      	b.n	800d1ce <__s2b+0x66>
 800d1e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d1e4:	4601      	mov	r1, r0
 800d1e6:	3b30      	subs	r3, #48	; 0x30
 800d1e8:	220a      	movs	r2, #10
 800d1ea:	4630      	mov	r0, r6
 800d1ec:	f7ff ff72 	bl	800d0d4 <__multadd>
 800d1f0:	e7ee      	b.n	800d1d0 <__s2b+0x68>
 800d1f2:	bf00      	nop
 800d1f4:	0800e76b 	.word	0x0800e76b
 800d1f8:	0800e7fc 	.word	0x0800e7fc

0800d1fc <__hi0bits>:
 800d1fc:	0c03      	lsrs	r3, r0, #16
 800d1fe:	041b      	lsls	r3, r3, #16
 800d200:	b9d3      	cbnz	r3, 800d238 <__hi0bits+0x3c>
 800d202:	0400      	lsls	r0, r0, #16
 800d204:	2310      	movs	r3, #16
 800d206:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d20a:	bf04      	itt	eq
 800d20c:	0200      	lsleq	r0, r0, #8
 800d20e:	3308      	addeq	r3, #8
 800d210:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d214:	bf04      	itt	eq
 800d216:	0100      	lsleq	r0, r0, #4
 800d218:	3304      	addeq	r3, #4
 800d21a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d21e:	bf04      	itt	eq
 800d220:	0080      	lsleq	r0, r0, #2
 800d222:	3302      	addeq	r3, #2
 800d224:	2800      	cmp	r0, #0
 800d226:	db05      	blt.n	800d234 <__hi0bits+0x38>
 800d228:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d22c:	f103 0301 	add.w	r3, r3, #1
 800d230:	bf08      	it	eq
 800d232:	2320      	moveq	r3, #32
 800d234:	4618      	mov	r0, r3
 800d236:	4770      	bx	lr
 800d238:	2300      	movs	r3, #0
 800d23a:	e7e4      	b.n	800d206 <__hi0bits+0xa>

0800d23c <__lo0bits>:
 800d23c:	6803      	ldr	r3, [r0, #0]
 800d23e:	f013 0207 	ands.w	r2, r3, #7
 800d242:	4601      	mov	r1, r0
 800d244:	d00b      	beq.n	800d25e <__lo0bits+0x22>
 800d246:	07da      	lsls	r2, r3, #31
 800d248:	d424      	bmi.n	800d294 <__lo0bits+0x58>
 800d24a:	0798      	lsls	r0, r3, #30
 800d24c:	bf49      	itett	mi
 800d24e:	085b      	lsrmi	r3, r3, #1
 800d250:	089b      	lsrpl	r3, r3, #2
 800d252:	2001      	movmi	r0, #1
 800d254:	600b      	strmi	r3, [r1, #0]
 800d256:	bf5c      	itt	pl
 800d258:	600b      	strpl	r3, [r1, #0]
 800d25a:	2002      	movpl	r0, #2
 800d25c:	4770      	bx	lr
 800d25e:	b298      	uxth	r0, r3
 800d260:	b9b0      	cbnz	r0, 800d290 <__lo0bits+0x54>
 800d262:	0c1b      	lsrs	r3, r3, #16
 800d264:	2010      	movs	r0, #16
 800d266:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d26a:	bf04      	itt	eq
 800d26c:	0a1b      	lsreq	r3, r3, #8
 800d26e:	3008      	addeq	r0, #8
 800d270:	071a      	lsls	r2, r3, #28
 800d272:	bf04      	itt	eq
 800d274:	091b      	lsreq	r3, r3, #4
 800d276:	3004      	addeq	r0, #4
 800d278:	079a      	lsls	r2, r3, #30
 800d27a:	bf04      	itt	eq
 800d27c:	089b      	lsreq	r3, r3, #2
 800d27e:	3002      	addeq	r0, #2
 800d280:	07da      	lsls	r2, r3, #31
 800d282:	d403      	bmi.n	800d28c <__lo0bits+0x50>
 800d284:	085b      	lsrs	r3, r3, #1
 800d286:	f100 0001 	add.w	r0, r0, #1
 800d28a:	d005      	beq.n	800d298 <__lo0bits+0x5c>
 800d28c:	600b      	str	r3, [r1, #0]
 800d28e:	4770      	bx	lr
 800d290:	4610      	mov	r0, r2
 800d292:	e7e8      	b.n	800d266 <__lo0bits+0x2a>
 800d294:	2000      	movs	r0, #0
 800d296:	4770      	bx	lr
 800d298:	2020      	movs	r0, #32
 800d29a:	4770      	bx	lr

0800d29c <__i2b>:
 800d29c:	b510      	push	{r4, lr}
 800d29e:	460c      	mov	r4, r1
 800d2a0:	2101      	movs	r1, #1
 800d2a2:	f7ff feb5 	bl	800d010 <_Balloc>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	b928      	cbnz	r0, 800d2b6 <__i2b+0x1a>
 800d2aa:	4b05      	ldr	r3, [pc, #20]	; (800d2c0 <__i2b+0x24>)
 800d2ac:	4805      	ldr	r0, [pc, #20]	; (800d2c4 <__i2b+0x28>)
 800d2ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d2b2:	f000 feb1 	bl	800e018 <__assert_func>
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	6144      	str	r4, [r0, #20]
 800d2ba:	6103      	str	r3, [r0, #16]
 800d2bc:	bd10      	pop	{r4, pc}
 800d2be:	bf00      	nop
 800d2c0:	0800e76b 	.word	0x0800e76b
 800d2c4:	0800e7fc 	.word	0x0800e7fc

0800d2c8 <__multiply>:
 800d2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2cc:	4614      	mov	r4, r2
 800d2ce:	690a      	ldr	r2, [r1, #16]
 800d2d0:	6923      	ldr	r3, [r4, #16]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	bfb8      	it	lt
 800d2d6:	460b      	movlt	r3, r1
 800d2d8:	460d      	mov	r5, r1
 800d2da:	bfbc      	itt	lt
 800d2dc:	4625      	movlt	r5, r4
 800d2de:	461c      	movlt	r4, r3
 800d2e0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d2e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d2e8:	68ab      	ldr	r3, [r5, #8]
 800d2ea:	6869      	ldr	r1, [r5, #4]
 800d2ec:	eb0a 0709 	add.w	r7, sl, r9
 800d2f0:	42bb      	cmp	r3, r7
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	bfb8      	it	lt
 800d2f6:	3101      	addlt	r1, #1
 800d2f8:	f7ff fe8a 	bl	800d010 <_Balloc>
 800d2fc:	b930      	cbnz	r0, 800d30c <__multiply+0x44>
 800d2fe:	4602      	mov	r2, r0
 800d300:	4b42      	ldr	r3, [pc, #264]	; (800d40c <__multiply+0x144>)
 800d302:	4843      	ldr	r0, [pc, #268]	; (800d410 <__multiply+0x148>)
 800d304:	f240 115d 	movw	r1, #349	; 0x15d
 800d308:	f000 fe86 	bl	800e018 <__assert_func>
 800d30c:	f100 0614 	add.w	r6, r0, #20
 800d310:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d314:	4633      	mov	r3, r6
 800d316:	2200      	movs	r2, #0
 800d318:	4543      	cmp	r3, r8
 800d31a:	d31e      	bcc.n	800d35a <__multiply+0x92>
 800d31c:	f105 0c14 	add.w	ip, r5, #20
 800d320:	f104 0314 	add.w	r3, r4, #20
 800d324:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d328:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d32c:	9202      	str	r2, [sp, #8]
 800d32e:	ebac 0205 	sub.w	r2, ip, r5
 800d332:	3a15      	subs	r2, #21
 800d334:	f022 0203 	bic.w	r2, r2, #3
 800d338:	3204      	adds	r2, #4
 800d33a:	f105 0115 	add.w	r1, r5, #21
 800d33e:	458c      	cmp	ip, r1
 800d340:	bf38      	it	cc
 800d342:	2204      	movcc	r2, #4
 800d344:	9201      	str	r2, [sp, #4]
 800d346:	9a02      	ldr	r2, [sp, #8]
 800d348:	9303      	str	r3, [sp, #12]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d808      	bhi.n	800d360 <__multiply+0x98>
 800d34e:	2f00      	cmp	r7, #0
 800d350:	dc55      	bgt.n	800d3fe <__multiply+0x136>
 800d352:	6107      	str	r7, [r0, #16]
 800d354:	b005      	add	sp, #20
 800d356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d35a:	f843 2b04 	str.w	r2, [r3], #4
 800d35e:	e7db      	b.n	800d318 <__multiply+0x50>
 800d360:	f8b3 a000 	ldrh.w	sl, [r3]
 800d364:	f1ba 0f00 	cmp.w	sl, #0
 800d368:	d020      	beq.n	800d3ac <__multiply+0xe4>
 800d36a:	f105 0e14 	add.w	lr, r5, #20
 800d36e:	46b1      	mov	r9, r6
 800d370:	2200      	movs	r2, #0
 800d372:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d376:	f8d9 b000 	ldr.w	fp, [r9]
 800d37a:	b2a1      	uxth	r1, r4
 800d37c:	fa1f fb8b 	uxth.w	fp, fp
 800d380:	fb0a b101 	mla	r1, sl, r1, fp
 800d384:	4411      	add	r1, r2
 800d386:	f8d9 2000 	ldr.w	r2, [r9]
 800d38a:	0c24      	lsrs	r4, r4, #16
 800d38c:	0c12      	lsrs	r2, r2, #16
 800d38e:	fb0a 2404 	mla	r4, sl, r4, r2
 800d392:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d396:	b289      	uxth	r1, r1
 800d398:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d39c:	45f4      	cmp	ip, lr
 800d39e:	f849 1b04 	str.w	r1, [r9], #4
 800d3a2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d3a6:	d8e4      	bhi.n	800d372 <__multiply+0xaa>
 800d3a8:	9901      	ldr	r1, [sp, #4]
 800d3aa:	5072      	str	r2, [r6, r1]
 800d3ac:	9a03      	ldr	r2, [sp, #12]
 800d3ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d3b2:	3304      	adds	r3, #4
 800d3b4:	f1b9 0f00 	cmp.w	r9, #0
 800d3b8:	d01f      	beq.n	800d3fa <__multiply+0x132>
 800d3ba:	6834      	ldr	r4, [r6, #0]
 800d3bc:	f105 0114 	add.w	r1, r5, #20
 800d3c0:	46b6      	mov	lr, r6
 800d3c2:	f04f 0a00 	mov.w	sl, #0
 800d3c6:	880a      	ldrh	r2, [r1, #0]
 800d3c8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d3cc:	fb09 b202 	mla	r2, r9, r2, fp
 800d3d0:	4492      	add	sl, r2
 800d3d2:	b2a4      	uxth	r4, r4
 800d3d4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d3d8:	f84e 4b04 	str.w	r4, [lr], #4
 800d3dc:	f851 4b04 	ldr.w	r4, [r1], #4
 800d3e0:	f8be 2000 	ldrh.w	r2, [lr]
 800d3e4:	0c24      	lsrs	r4, r4, #16
 800d3e6:	fb09 2404 	mla	r4, r9, r4, r2
 800d3ea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d3ee:	458c      	cmp	ip, r1
 800d3f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d3f4:	d8e7      	bhi.n	800d3c6 <__multiply+0xfe>
 800d3f6:	9a01      	ldr	r2, [sp, #4]
 800d3f8:	50b4      	str	r4, [r6, r2]
 800d3fa:	3604      	adds	r6, #4
 800d3fc:	e7a3      	b.n	800d346 <__multiply+0x7e>
 800d3fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1a5      	bne.n	800d352 <__multiply+0x8a>
 800d406:	3f01      	subs	r7, #1
 800d408:	e7a1      	b.n	800d34e <__multiply+0x86>
 800d40a:	bf00      	nop
 800d40c:	0800e76b 	.word	0x0800e76b
 800d410:	0800e7fc 	.word	0x0800e7fc

0800d414 <__pow5mult>:
 800d414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d418:	4615      	mov	r5, r2
 800d41a:	f012 0203 	ands.w	r2, r2, #3
 800d41e:	4606      	mov	r6, r0
 800d420:	460f      	mov	r7, r1
 800d422:	d007      	beq.n	800d434 <__pow5mult+0x20>
 800d424:	4c25      	ldr	r4, [pc, #148]	; (800d4bc <__pow5mult+0xa8>)
 800d426:	3a01      	subs	r2, #1
 800d428:	2300      	movs	r3, #0
 800d42a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d42e:	f7ff fe51 	bl	800d0d4 <__multadd>
 800d432:	4607      	mov	r7, r0
 800d434:	10ad      	asrs	r5, r5, #2
 800d436:	d03d      	beq.n	800d4b4 <__pow5mult+0xa0>
 800d438:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d43a:	b97c      	cbnz	r4, 800d45c <__pow5mult+0x48>
 800d43c:	2010      	movs	r0, #16
 800d43e:	f7fc fb19 	bl	8009a74 <malloc>
 800d442:	4602      	mov	r2, r0
 800d444:	6270      	str	r0, [r6, #36]	; 0x24
 800d446:	b928      	cbnz	r0, 800d454 <__pow5mult+0x40>
 800d448:	4b1d      	ldr	r3, [pc, #116]	; (800d4c0 <__pow5mult+0xac>)
 800d44a:	481e      	ldr	r0, [pc, #120]	; (800d4c4 <__pow5mult+0xb0>)
 800d44c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d450:	f000 fde2 	bl	800e018 <__assert_func>
 800d454:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d458:	6004      	str	r4, [r0, #0]
 800d45a:	60c4      	str	r4, [r0, #12]
 800d45c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d460:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d464:	b94c      	cbnz	r4, 800d47a <__pow5mult+0x66>
 800d466:	f240 2171 	movw	r1, #625	; 0x271
 800d46a:	4630      	mov	r0, r6
 800d46c:	f7ff ff16 	bl	800d29c <__i2b>
 800d470:	2300      	movs	r3, #0
 800d472:	f8c8 0008 	str.w	r0, [r8, #8]
 800d476:	4604      	mov	r4, r0
 800d478:	6003      	str	r3, [r0, #0]
 800d47a:	f04f 0900 	mov.w	r9, #0
 800d47e:	07eb      	lsls	r3, r5, #31
 800d480:	d50a      	bpl.n	800d498 <__pow5mult+0x84>
 800d482:	4639      	mov	r1, r7
 800d484:	4622      	mov	r2, r4
 800d486:	4630      	mov	r0, r6
 800d488:	f7ff ff1e 	bl	800d2c8 <__multiply>
 800d48c:	4639      	mov	r1, r7
 800d48e:	4680      	mov	r8, r0
 800d490:	4630      	mov	r0, r6
 800d492:	f7ff fdfd 	bl	800d090 <_Bfree>
 800d496:	4647      	mov	r7, r8
 800d498:	106d      	asrs	r5, r5, #1
 800d49a:	d00b      	beq.n	800d4b4 <__pow5mult+0xa0>
 800d49c:	6820      	ldr	r0, [r4, #0]
 800d49e:	b938      	cbnz	r0, 800d4b0 <__pow5mult+0x9c>
 800d4a0:	4622      	mov	r2, r4
 800d4a2:	4621      	mov	r1, r4
 800d4a4:	4630      	mov	r0, r6
 800d4a6:	f7ff ff0f 	bl	800d2c8 <__multiply>
 800d4aa:	6020      	str	r0, [r4, #0]
 800d4ac:	f8c0 9000 	str.w	r9, [r0]
 800d4b0:	4604      	mov	r4, r0
 800d4b2:	e7e4      	b.n	800d47e <__pow5mult+0x6a>
 800d4b4:	4638      	mov	r0, r7
 800d4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4ba:	bf00      	nop
 800d4bc:	0800e950 	.word	0x0800e950
 800d4c0:	0800e6f5 	.word	0x0800e6f5
 800d4c4:	0800e7fc 	.word	0x0800e7fc

0800d4c8 <__lshift>:
 800d4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4cc:	460c      	mov	r4, r1
 800d4ce:	6849      	ldr	r1, [r1, #4]
 800d4d0:	6923      	ldr	r3, [r4, #16]
 800d4d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d4d6:	68a3      	ldr	r3, [r4, #8]
 800d4d8:	4607      	mov	r7, r0
 800d4da:	4691      	mov	r9, r2
 800d4dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d4e0:	f108 0601 	add.w	r6, r8, #1
 800d4e4:	42b3      	cmp	r3, r6
 800d4e6:	db0b      	blt.n	800d500 <__lshift+0x38>
 800d4e8:	4638      	mov	r0, r7
 800d4ea:	f7ff fd91 	bl	800d010 <_Balloc>
 800d4ee:	4605      	mov	r5, r0
 800d4f0:	b948      	cbnz	r0, 800d506 <__lshift+0x3e>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	4b28      	ldr	r3, [pc, #160]	; (800d598 <__lshift+0xd0>)
 800d4f6:	4829      	ldr	r0, [pc, #164]	; (800d59c <__lshift+0xd4>)
 800d4f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d4fc:	f000 fd8c 	bl	800e018 <__assert_func>
 800d500:	3101      	adds	r1, #1
 800d502:	005b      	lsls	r3, r3, #1
 800d504:	e7ee      	b.n	800d4e4 <__lshift+0x1c>
 800d506:	2300      	movs	r3, #0
 800d508:	f100 0114 	add.w	r1, r0, #20
 800d50c:	f100 0210 	add.w	r2, r0, #16
 800d510:	4618      	mov	r0, r3
 800d512:	4553      	cmp	r3, sl
 800d514:	db33      	blt.n	800d57e <__lshift+0xb6>
 800d516:	6920      	ldr	r0, [r4, #16]
 800d518:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d51c:	f104 0314 	add.w	r3, r4, #20
 800d520:	f019 091f 	ands.w	r9, r9, #31
 800d524:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d528:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d52c:	d02b      	beq.n	800d586 <__lshift+0xbe>
 800d52e:	f1c9 0e20 	rsb	lr, r9, #32
 800d532:	468a      	mov	sl, r1
 800d534:	2200      	movs	r2, #0
 800d536:	6818      	ldr	r0, [r3, #0]
 800d538:	fa00 f009 	lsl.w	r0, r0, r9
 800d53c:	4302      	orrs	r2, r0
 800d53e:	f84a 2b04 	str.w	r2, [sl], #4
 800d542:	f853 2b04 	ldr.w	r2, [r3], #4
 800d546:	459c      	cmp	ip, r3
 800d548:	fa22 f20e 	lsr.w	r2, r2, lr
 800d54c:	d8f3      	bhi.n	800d536 <__lshift+0x6e>
 800d54e:	ebac 0304 	sub.w	r3, ip, r4
 800d552:	3b15      	subs	r3, #21
 800d554:	f023 0303 	bic.w	r3, r3, #3
 800d558:	3304      	adds	r3, #4
 800d55a:	f104 0015 	add.w	r0, r4, #21
 800d55e:	4584      	cmp	ip, r0
 800d560:	bf38      	it	cc
 800d562:	2304      	movcc	r3, #4
 800d564:	50ca      	str	r2, [r1, r3]
 800d566:	b10a      	cbz	r2, 800d56c <__lshift+0xa4>
 800d568:	f108 0602 	add.w	r6, r8, #2
 800d56c:	3e01      	subs	r6, #1
 800d56e:	4638      	mov	r0, r7
 800d570:	612e      	str	r6, [r5, #16]
 800d572:	4621      	mov	r1, r4
 800d574:	f7ff fd8c 	bl	800d090 <_Bfree>
 800d578:	4628      	mov	r0, r5
 800d57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d57e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d582:	3301      	adds	r3, #1
 800d584:	e7c5      	b.n	800d512 <__lshift+0x4a>
 800d586:	3904      	subs	r1, #4
 800d588:	f853 2b04 	ldr.w	r2, [r3], #4
 800d58c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d590:	459c      	cmp	ip, r3
 800d592:	d8f9      	bhi.n	800d588 <__lshift+0xc0>
 800d594:	e7ea      	b.n	800d56c <__lshift+0xa4>
 800d596:	bf00      	nop
 800d598:	0800e76b 	.word	0x0800e76b
 800d59c:	0800e7fc 	.word	0x0800e7fc

0800d5a0 <__mcmp>:
 800d5a0:	b530      	push	{r4, r5, lr}
 800d5a2:	6902      	ldr	r2, [r0, #16]
 800d5a4:	690c      	ldr	r4, [r1, #16]
 800d5a6:	1b12      	subs	r2, r2, r4
 800d5a8:	d10e      	bne.n	800d5c8 <__mcmp+0x28>
 800d5aa:	f100 0314 	add.w	r3, r0, #20
 800d5ae:	3114      	adds	r1, #20
 800d5b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d5b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d5b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d5bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d5c0:	42a5      	cmp	r5, r4
 800d5c2:	d003      	beq.n	800d5cc <__mcmp+0x2c>
 800d5c4:	d305      	bcc.n	800d5d2 <__mcmp+0x32>
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	4610      	mov	r0, r2
 800d5ca:	bd30      	pop	{r4, r5, pc}
 800d5cc:	4283      	cmp	r3, r0
 800d5ce:	d3f3      	bcc.n	800d5b8 <__mcmp+0x18>
 800d5d0:	e7fa      	b.n	800d5c8 <__mcmp+0x28>
 800d5d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d5d6:	e7f7      	b.n	800d5c8 <__mcmp+0x28>

0800d5d8 <__mdiff>:
 800d5d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5dc:	460c      	mov	r4, r1
 800d5de:	4606      	mov	r6, r0
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	4617      	mov	r7, r2
 800d5e6:	f7ff ffdb 	bl	800d5a0 <__mcmp>
 800d5ea:	1e05      	subs	r5, r0, #0
 800d5ec:	d110      	bne.n	800d610 <__mdiff+0x38>
 800d5ee:	4629      	mov	r1, r5
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	f7ff fd0d 	bl	800d010 <_Balloc>
 800d5f6:	b930      	cbnz	r0, 800d606 <__mdiff+0x2e>
 800d5f8:	4b39      	ldr	r3, [pc, #228]	; (800d6e0 <__mdiff+0x108>)
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	f240 2132 	movw	r1, #562	; 0x232
 800d600:	4838      	ldr	r0, [pc, #224]	; (800d6e4 <__mdiff+0x10c>)
 800d602:	f000 fd09 	bl	800e018 <__assert_func>
 800d606:	2301      	movs	r3, #1
 800d608:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d60c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d610:	bfa4      	itt	ge
 800d612:	463b      	movge	r3, r7
 800d614:	4627      	movge	r7, r4
 800d616:	4630      	mov	r0, r6
 800d618:	6879      	ldr	r1, [r7, #4]
 800d61a:	bfa6      	itte	ge
 800d61c:	461c      	movge	r4, r3
 800d61e:	2500      	movge	r5, #0
 800d620:	2501      	movlt	r5, #1
 800d622:	f7ff fcf5 	bl	800d010 <_Balloc>
 800d626:	b920      	cbnz	r0, 800d632 <__mdiff+0x5a>
 800d628:	4b2d      	ldr	r3, [pc, #180]	; (800d6e0 <__mdiff+0x108>)
 800d62a:	4602      	mov	r2, r0
 800d62c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d630:	e7e6      	b.n	800d600 <__mdiff+0x28>
 800d632:	693e      	ldr	r6, [r7, #16]
 800d634:	60c5      	str	r5, [r0, #12]
 800d636:	6925      	ldr	r5, [r4, #16]
 800d638:	f107 0114 	add.w	r1, r7, #20
 800d63c:	f104 0914 	add.w	r9, r4, #20
 800d640:	f100 0e14 	add.w	lr, r0, #20
 800d644:	f107 0210 	add.w	r2, r7, #16
 800d648:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d64c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d650:	46f2      	mov	sl, lr
 800d652:	2700      	movs	r7, #0
 800d654:	f859 3b04 	ldr.w	r3, [r9], #4
 800d658:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d65c:	fa1f f883 	uxth.w	r8, r3
 800d660:	fa17 f78b 	uxtah	r7, r7, fp
 800d664:	0c1b      	lsrs	r3, r3, #16
 800d666:	eba7 0808 	sub.w	r8, r7, r8
 800d66a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d66e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d672:	fa1f f888 	uxth.w	r8, r8
 800d676:	141f      	asrs	r7, r3, #16
 800d678:	454d      	cmp	r5, r9
 800d67a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d67e:	f84a 3b04 	str.w	r3, [sl], #4
 800d682:	d8e7      	bhi.n	800d654 <__mdiff+0x7c>
 800d684:	1b2b      	subs	r3, r5, r4
 800d686:	3b15      	subs	r3, #21
 800d688:	f023 0303 	bic.w	r3, r3, #3
 800d68c:	3304      	adds	r3, #4
 800d68e:	3415      	adds	r4, #21
 800d690:	42a5      	cmp	r5, r4
 800d692:	bf38      	it	cc
 800d694:	2304      	movcc	r3, #4
 800d696:	4419      	add	r1, r3
 800d698:	4473      	add	r3, lr
 800d69a:	469e      	mov	lr, r3
 800d69c:	460d      	mov	r5, r1
 800d69e:	4565      	cmp	r5, ip
 800d6a0:	d30e      	bcc.n	800d6c0 <__mdiff+0xe8>
 800d6a2:	f10c 0203 	add.w	r2, ip, #3
 800d6a6:	1a52      	subs	r2, r2, r1
 800d6a8:	f022 0203 	bic.w	r2, r2, #3
 800d6ac:	3903      	subs	r1, #3
 800d6ae:	458c      	cmp	ip, r1
 800d6b0:	bf38      	it	cc
 800d6b2:	2200      	movcc	r2, #0
 800d6b4:	441a      	add	r2, r3
 800d6b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d6ba:	b17b      	cbz	r3, 800d6dc <__mdiff+0x104>
 800d6bc:	6106      	str	r6, [r0, #16]
 800d6be:	e7a5      	b.n	800d60c <__mdiff+0x34>
 800d6c0:	f855 8b04 	ldr.w	r8, [r5], #4
 800d6c4:	fa17 f488 	uxtah	r4, r7, r8
 800d6c8:	1422      	asrs	r2, r4, #16
 800d6ca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d6ce:	b2a4      	uxth	r4, r4
 800d6d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d6d4:	f84e 4b04 	str.w	r4, [lr], #4
 800d6d8:	1417      	asrs	r7, r2, #16
 800d6da:	e7e0      	b.n	800d69e <__mdiff+0xc6>
 800d6dc:	3e01      	subs	r6, #1
 800d6de:	e7ea      	b.n	800d6b6 <__mdiff+0xde>
 800d6e0:	0800e76b 	.word	0x0800e76b
 800d6e4:	0800e7fc 	.word	0x0800e7fc

0800d6e8 <__ulp>:
 800d6e8:	b082      	sub	sp, #8
 800d6ea:	ed8d 0b00 	vstr	d0, [sp]
 800d6ee:	9b01      	ldr	r3, [sp, #4]
 800d6f0:	4912      	ldr	r1, [pc, #72]	; (800d73c <__ulp+0x54>)
 800d6f2:	4019      	ands	r1, r3
 800d6f4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d6f8:	2900      	cmp	r1, #0
 800d6fa:	dd05      	ble.n	800d708 <__ulp+0x20>
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	460b      	mov	r3, r1
 800d700:	ec43 2b10 	vmov	d0, r2, r3
 800d704:	b002      	add	sp, #8
 800d706:	4770      	bx	lr
 800d708:	4249      	negs	r1, r1
 800d70a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d70e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d712:	f04f 0200 	mov.w	r2, #0
 800d716:	f04f 0300 	mov.w	r3, #0
 800d71a:	da04      	bge.n	800d726 <__ulp+0x3e>
 800d71c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d720:	fa41 f300 	asr.w	r3, r1, r0
 800d724:	e7ec      	b.n	800d700 <__ulp+0x18>
 800d726:	f1a0 0114 	sub.w	r1, r0, #20
 800d72a:	291e      	cmp	r1, #30
 800d72c:	bfda      	itte	le
 800d72e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d732:	fa20 f101 	lsrle.w	r1, r0, r1
 800d736:	2101      	movgt	r1, #1
 800d738:	460a      	mov	r2, r1
 800d73a:	e7e1      	b.n	800d700 <__ulp+0x18>
 800d73c:	7ff00000 	.word	0x7ff00000

0800d740 <__b2d>:
 800d740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d742:	6905      	ldr	r5, [r0, #16]
 800d744:	f100 0714 	add.w	r7, r0, #20
 800d748:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d74c:	1f2e      	subs	r6, r5, #4
 800d74e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d752:	4620      	mov	r0, r4
 800d754:	f7ff fd52 	bl	800d1fc <__hi0bits>
 800d758:	f1c0 0320 	rsb	r3, r0, #32
 800d75c:	280a      	cmp	r0, #10
 800d75e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d7dc <__b2d+0x9c>
 800d762:	600b      	str	r3, [r1, #0]
 800d764:	dc14      	bgt.n	800d790 <__b2d+0x50>
 800d766:	f1c0 0e0b 	rsb	lr, r0, #11
 800d76a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d76e:	42b7      	cmp	r7, r6
 800d770:	ea41 030c 	orr.w	r3, r1, ip
 800d774:	bf34      	ite	cc
 800d776:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d77a:	2100      	movcs	r1, #0
 800d77c:	3015      	adds	r0, #21
 800d77e:	fa04 f000 	lsl.w	r0, r4, r0
 800d782:	fa21 f10e 	lsr.w	r1, r1, lr
 800d786:	ea40 0201 	orr.w	r2, r0, r1
 800d78a:	ec43 2b10 	vmov	d0, r2, r3
 800d78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d790:	42b7      	cmp	r7, r6
 800d792:	bf3a      	itte	cc
 800d794:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d798:	f1a5 0608 	subcc.w	r6, r5, #8
 800d79c:	2100      	movcs	r1, #0
 800d79e:	380b      	subs	r0, #11
 800d7a0:	d017      	beq.n	800d7d2 <__b2d+0x92>
 800d7a2:	f1c0 0c20 	rsb	ip, r0, #32
 800d7a6:	fa04 f500 	lsl.w	r5, r4, r0
 800d7aa:	42be      	cmp	r6, r7
 800d7ac:	fa21 f40c 	lsr.w	r4, r1, ip
 800d7b0:	ea45 0504 	orr.w	r5, r5, r4
 800d7b4:	bf8c      	ite	hi
 800d7b6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d7ba:	2400      	movls	r4, #0
 800d7bc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d7c0:	fa01 f000 	lsl.w	r0, r1, r0
 800d7c4:	fa24 f40c 	lsr.w	r4, r4, ip
 800d7c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d7cc:	ea40 0204 	orr.w	r2, r0, r4
 800d7d0:	e7db      	b.n	800d78a <__b2d+0x4a>
 800d7d2:	ea44 030c 	orr.w	r3, r4, ip
 800d7d6:	460a      	mov	r2, r1
 800d7d8:	e7d7      	b.n	800d78a <__b2d+0x4a>
 800d7da:	bf00      	nop
 800d7dc:	3ff00000 	.word	0x3ff00000

0800d7e0 <__d2b>:
 800d7e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d7e4:	4689      	mov	r9, r1
 800d7e6:	2101      	movs	r1, #1
 800d7e8:	ec57 6b10 	vmov	r6, r7, d0
 800d7ec:	4690      	mov	r8, r2
 800d7ee:	f7ff fc0f 	bl	800d010 <_Balloc>
 800d7f2:	4604      	mov	r4, r0
 800d7f4:	b930      	cbnz	r0, 800d804 <__d2b+0x24>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	4b25      	ldr	r3, [pc, #148]	; (800d890 <__d2b+0xb0>)
 800d7fa:	4826      	ldr	r0, [pc, #152]	; (800d894 <__d2b+0xb4>)
 800d7fc:	f240 310a 	movw	r1, #778	; 0x30a
 800d800:	f000 fc0a 	bl	800e018 <__assert_func>
 800d804:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d808:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d80c:	bb35      	cbnz	r5, 800d85c <__d2b+0x7c>
 800d80e:	2e00      	cmp	r6, #0
 800d810:	9301      	str	r3, [sp, #4]
 800d812:	d028      	beq.n	800d866 <__d2b+0x86>
 800d814:	4668      	mov	r0, sp
 800d816:	9600      	str	r6, [sp, #0]
 800d818:	f7ff fd10 	bl	800d23c <__lo0bits>
 800d81c:	9900      	ldr	r1, [sp, #0]
 800d81e:	b300      	cbz	r0, 800d862 <__d2b+0x82>
 800d820:	9a01      	ldr	r2, [sp, #4]
 800d822:	f1c0 0320 	rsb	r3, r0, #32
 800d826:	fa02 f303 	lsl.w	r3, r2, r3
 800d82a:	430b      	orrs	r3, r1
 800d82c:	40c2      	lsrs	r2, r0
 800d82e:	6163      	str	r3, [r4, #20]
 800d830:	9201      	str	r2, [sp, #4]
 800d832:	9b01      	ldr	r3, [sp, #4]
 800d834:	61a3      	str	r3, [r4, #24]
 800d836:	2b00      	cmp	r3, #0
 800d838:	bf14      	ite	ne
 800d83a:	2202      	movne	r2, #2
 800d83c:	2201      	moveq	r2, #1
 800d83e:	6122      	str	r2, [r4, #16]
 800d840:	b1d5      	cbz	r5, 800d878 <__d2b+0x98>
 800d842:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d846:	4405      	add	r5, r0
 800d848:	f8c9 5000 	str.w	r5, [r9]
 800d84c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d850:	f8c8 0000 	str.w	r0, [r8]
 800d854:	4620      	mov	r0, r4
 800d856:	b003      	add	sp, #12
 800d858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d85c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d860:	e7d5      	b.n	800d80e <__d2b+0x2e>
 800d862:	6161      	str	r1, [r4, #20]
 800d864:	e7e5      	b.n	800d832 <__d2b+0x52>
 800d866:	a801      	add	r0, sp, #4
 800d868:	f7ff fce8 	bl	800d23c <__lo0bits>
 800d86c:	9b01      	ldr	r3, [sp, #4]
 800d86e:	6163      	str	r3, [r4, #20]
 800d870:	2201      	movs	r2, #1
 800d872:	6122      	str	r2, [r4, #16]
 800d874:	3020      	adds	r0, #32
 800d876:	e7e3      	b.n	800d840 <__d2b+0x60>
 800d878:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d87c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d880:	f8c9 0000 	str.w	r0, [r9]
 800d884:	6918      	ldr	r0, [r3, #16]
 800d886:	f7ff fcb9 	bl	800d1fc <__hi0bits>
 800d88a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d88e:	e7df      	b.n	800d850 <__d2b+0x70>
 800d890:	0800e76b 	.word	0x0800e76b
 800d894:	0800e7fc 	.word	0x0800e7fc

0800d898 <__ratio>:
 800d898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d89c:	468a      	mov	sl, r1
 800d89e:	4669      	mov	r1, sp
 800d8a0:	4683      	mov	fp, r0
 800d8a2:	f7ff ff4d 	bl	800d740 <__b2d>
 800d8a6:	a901      	add	r1, sp, #4
 800d8a8:	4650      	mov	r0, sl
 800d8aa:	ec59 8b10 	vmov	r8, r9, d0
 800d8ae:	ee10 6a10 	vmov	r6, s0
 800d8b2:	f7ff ff45 	bl	800d740 <__b2d>
 800d8b6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d8ba:	f8da 2010 	ldr.w	r2, [sl, #16]
 800d8be:	eba3 0c02 	sub.w	ip, r3, r2
 800d8c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d8c6:	1a9b      	subs	r3, r3, r2
 800d8c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d8cc:	ec55 4b10 	vmov	r4, r5, d0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	ee10 0a10 	vmov	r0, s0
 800d8d6:	bfce      	itee	gt
 800d8d8:	464a      	movgt	r2, r9
 800d8da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d8de:	462a      	movle	r2, r5
 800d8e0:	464f      	mov	r7, r9
 800d8e2:	4629      	mov	r1, r5
 800d8e4:	bfcc      	ite	gt
 800d8e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d8ea:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d8ee:	ec47 6b17 	vmov	d7, r6, r7
 800d8f2:	ec41 0b16 	vmov	d6, r0, r1
 800d8f6:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800d8fa:	b003      	add	sp, #12
 800d8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d900 <__copybits>:
 800d900:	3901      	subs	r1, #1
 800d902:	b570      	push	{r4, r5, r6, lr}
 800d904:	1149      	asrs	r1, r1, #5
 800d906:	6914      	ldr	r4, [r2, #16]
 800d908:	3101      	adds	r1, #1
 800d90a:	f102 0314 	add.w	r3, r2, #20
 800d90e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d912:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d916:	1f05      	subs	r5, r0, #4
 800d918:	42a3      	cmp	r3, r4
 800d91a:	d30c      	bcc.n	800d936 <__copybits+0x36>
 800d91c:	1aa3      	subs	r3, r4, r2
 800d91e:	3b11      	subs	r3, #17
 800d920:	f023 0303 	bic.w	r3, r3, #3
 800d924:	3211      	adds	r2, #17
 800d926:	42a2      	cmp	r2, r4
 800d928:	bf88      	it	hi
 800d92a:	2300      	movhi	r3, #0
 800d92c:	4418      	add	r0, r3
 800d92e:	2300      	movs	r3, #0
 800d930:	4288      	cmp	r0, r1
 800d932:	d305      	bcc.n	800d940 <__copybits+0x40>
 800d934:	bd70      	pop	{r4, r5, r6, pc}
 800d936:	f853 6b04 	ldr.w	r6, [r3], #4
 800d93a:	f845 6f04 	str.w	r6, [r5, #4]!
 800d93e:	e7eb      	b.n	800d918 <__copybits+0x18>
 800d940:	f840 3b04 	str.w	r3, [r0], #4
 800d944:	e7f4      	b.n	800d930 <__copybits+0x30>

0800d946 <__any_on>:
 800d946:	f100 0214 	add.w	r2, r0, #20
 800d94a:	6900      	ldr	r0, [r0, #16]
 800d94c:	114b      	asrs	r3, r1, #5
 800d94e:	4298      	cmp	r0, r3
 800d950:	b510      	push	{r4, lr}
 800d952:	db11      	blt.n	800d978 <__any_on+0x32>
 800d954:	dd0a      	ble.n	800d96c <__any_on+0x26>
 800d956:	f011 011f 	ands.w	r1, r1, #31
 800d95a:	d007      	beq.n	800d96c <__any_on+0x26>
 800d95c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d960:	fa24 f001 	lsr.w	r0, r4, r1
 800d964:	fa00 f101 	lsl.w	r1, r0, r1
 800d968:	428c      	cmp	r4, r1
 800d96a:	d10b      	bne.n	800d984 <__any_on+0x3e>
 800d96c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d970:	4293      	cmp	r3, r2
 800d972:	d803      	bhi.n	800d97c <__any_on+0x36>
 800d974:	2000      	movs	r0, #0
 800d976:	bd10      	pop	{r4, pc}
 800d978:	4603      	mov	r3, r0
 800d97a:	e7f7      	b.n	800d96c <__any_on+0x26>
 800d97c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d980:	2900      	cmp	r1, #0
 800d982:	d0f5      	beq.n	800d970 <__any_on+0x2a>
 800d984:	2001      	movs	r0, #1
 800d986:	e7f6      	b.n	800d976 <__any_on+0x30>

0800d988 <_calloc_r>:
 800d988:	b513      	push	{r0, r1, r4, lr}
 800d98a:	434a      	muls	r2, r1
 800d98c:	4611      	mov	r1, r2
 800d98e:	9201      	str	r2, [sp, #4]
 800d990:	f7fc f8de 	bl	8009b50 <_malloc_r>
 800d994:	4604      	mov	r4, r0
 800d996:	b118      	cbz	r0, 800d9a0 <_calloc_r+0x18>
 800d998:	9a01      	ldr	r2, [sp, #4]
 800d99a:	2100      	movs	r1, #0
 800d99c:	f7fc f880 	bl	8009aa0 <memset>
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	b002      	add	sp, #8
 800d9a4:	bd10      	pop	{r4, pc}

0800d9a6 <__ssputs_r>:
 800d9a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9aa:	688e      	ldr	r6, [r1, #8]
 800d9ac:	429e      	cmp	r6, r3
 800d9ae:	4682      	mov	sl, r0
 800d9b0:	460c      	mov	r4, r1
 800d9b2:	4690      	mov	r8, r2
 800d9b4:	461f      	mov	r7, r3
 800d9b6:	d838      	bhi.n	800da2a <__ssputs_r+0x84>
 800d9b8:	898a      	ldrh	r2, [r1, #12]
 800d9ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d9be:	d032      	beq.n	800da26 <__ssputs_r+0x80>
 800d9c0:	6825      	ldr	r5, [r4, #0]
 800d9c2:	6909      	ldr	r1, [r1, #16]
 800d9c4:	eba5 0901 	sub.w	r9, r5, r1
 800d9c8:	6965      	ldr	r5, [r4, #20]
 800d9ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	444b      	add	r3, r9
 800d9d6:	106d      	asrs	r5, r5, #1
 800d9d8:	429d      	cmp	r5, r3
 800d9da:	bf38      	it	cc
 800d9dc:	461d      	movcc	r5, r3
 800d9de:	0553      	lsls	r3, r2, #21
 800d9e0:	d531      	bpl.n	800da46 <__ssputs_r+0xa0>
 800d9e2:	4629      	mov	r1, r5
 800d9e4:	f7fc f8b4 	bl	8009b50 <_malloc_r>
 800d9e8:	4606      	mov	r6, r0
 800d9ea:	b950      	cbnz	r0, 800da02 <__ssputs_r+0x5c>
 800d9ec:	230c      	movs	r3, #12
 800d9ee:	f8ca 3000 	str.w	r3, [sl]
 800d9f2:	89a3      	ldrh	r3, [r4, #12]
 800d9f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9f8:	81a3      	strh	r3, [r4, #12]
 800d9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da02:	6921      	ldr	r1, [r4, #16]
 800da04:	464a      	mov	r2, r9
 800da06:	f7fc f83d 	bl	8009a84 <memcpy>
 800da0a:	89a3      	ldrh	r3, [r4, #12]
 800da0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da14:	81a3      	strh	r3, [r4, #12]
 800da16:	6126      	str	r6, [r4, #16]
 800da18:	6165      	str	r5, [r4, #20]
 800da1a:	444e      	add	r6, r9
 800da1c:	eba5 0509 	sub.w	r5, r5, r9
 800da20:	6026      	str	r6, [r4, #0]
 800da22:	60a5      	str	r5, [r4, #8]
 800da24:	463e      	mov	r6, r7
 800da26:	42be      	cmp	r6, r7
 800da28:	d900      	bls.n	800da2c <__ssputs_r+0x86>
 800da2a:	463e      	mov	r6, r7
 800da2c:	4632      	mov	r2, r6
 800da2e:	6820      	ldr	r0, [r4, #0]
 800da30:	4641      	mov	r1, r8
 800da32:	f000 fb43 	bl	800e0bc <memmove>
 800da36:	68a3      	ldr	r3, [r4, #8]
 800da38:	6822      	ldr	r2, [r4, #0]
 800da3a:	1b9b      	subs	r3, r3, r6
 800da3c:	4432      	add	r2, r6
 800da3e:	60a3      	str	r3, [r4, #8]
 800da40:	6022      	str	r2, [r4, #0]
 800da42:	2000      	movs	r0, #0
 800da44:	e7db      	b.n	800d9fe <__ssputs_r+0x58>
 800da46:	462a      	mov	r2, r5
 800da48:	f000 fb52 	bl	800e0f0 <_realloc_r>
 800da4c:	4606      	mov	r6, r0
 800da4e:	2800      	cmp	r0, #0
 800da50:	d1e1      	bne.n	800da16 <__ssputs_r+0x70>
 800da52:	6921      	ldr	r1, [r4, #16]
 800da54:	4650      	mov	r0, sl
 800da56:	f7fc f82b 	bl	8009ab0 <_free_r>
 800da5a:	e7c7      	b.n	800d9ec <__ssputs_r+0x46>

0800da5c <_svfiprintf_r>:
 800da5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da60:	4698      	mov	r8, r3
 800da62:	898b      	ldrh	r3, [r1, #12]
 800da64:	061b      	lsls	r3, r3, #24
 800da66:	b09d      	sub	sp, #116	; 0x74
 800da68:	4607      	mov	r7, r0
 800da6a:	460d      	mov	r5, r1
 800da6c:	4614      	mov	r4, r2
 800da6e:	d50e      	bpl.n	800da8e <_svfiprintf_r+0x32>
 800da70:	690b      	ldr	r3, [r1, #16]
 800da72:	b963      	cbnz	r3, 800da8e <_svfiprintf_r+0x32>
 800da74:	2140      	movs	r1, #64	; 0x40
 800da76:	f7fc f86b 	bl	8009b50 <_malloc_r>
 800da7a:	6028      	str	r0, [r5, #0]
 800da7c:	6128      	str	r0, [r5, #16]
 800da7e:	b920      	cbnz	r0, 800da8a <_svfiprintf_r+0x2e>
 800da80:	230c      	movs	r3, #12
 800da82:	603b      	str	r3, [r7, #0]
 800da84:	f04f 30ff 	mov.w	r0, #4294967295
 800da88:	e0d1      	b.n	800dc2e <_svfiprintf_r+0x1d2>
 800da8a:	2340      	movs	r3, #64	; 0x40
 800da8c:	616b      	str	r3, [r5, #20]
 800da8e:	2300      	movs	r3, #0
 800da90:	9309      	str	r3, [sp, #36]	; 0x24
 800da92:	2320      	movs	r3, #32
 800da94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da98:	f8cd 800c 	str.w	r8, [sp, #12]
 800da9c:	2330      	movs	r3, #48	; 0x30
 800da9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dc48 <_svfiprintf_r+0x1ec>
 800daa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800daa6:	f04f 0901 	mov.w	r9, #1
 800daaa:	4623      	mov	r3, r4
 800daac:	469a      	mov	sl, r3
 800daae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dab2:	b10a      	cbz	r2, 800dab8 <_svfiprintf_r+0x5c>
 800dab4:	2a25      	cmp	r2, #37	; 0x25
 800dab6:	d1f9      	bne.n	800daac <_svfiprintf_r+0x50>
 800dab8:	ebba 0b04 	subs.w	fp, sl, r4
 800dabc:	d00b      	beq.n	800dad6 <_svfiprintf_r+0x7a>
 800dabe:	465b      	mov	r3, fp
 800dac0:	4622      	mov	r2, r4
 800dac2:	4629      	mov	r1, r5
 800dac4:	4638      	mov	r0, r7
 800dac6:	f7ff ff6e 	bl	800d9a6 <__ssputs_r>
 800daca:	3001      	adds	r0, #1
 800dacc:	f000 80aa 	beq.w	800dc24 <_svfiprintf_r+0x1c8>
 800dad0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dad2:	445a      	add	r2, fp
 800dad4:	9209      	str	r2, [sp, #36]	; 0x24
 800dad6:	f89a 3000 	ldrb.w	r3, [sl]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	f000 80a2 	beq.w	800dc24 <_svfiprintf_r+0x1c8>
 800dae0:	2300      	movs	r3, #0
 800dae2:	f04f 32ff 	mov.w	r2, #4294967295
 800dae6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daea:	f10a 0a01 	add.w	sl, sl, #1
 800daee:	9304      	str	r3, [sp, #16]
 800daf0:	9307      	str	r3, [sp, #28]
 800daf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800daf6:	931a      	str	r3, [sp, #104]	; 0x68
 800daf8:	4654      	mov	r4, sl
 800dafa:	2205      	movs	r2, #5
 800dafc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db00:	4851      	ldr	r0, [pc, #324]	; (800dc48 <_svfiprintf_r+0x1ec>)
 800db02:	f7f2 fba5 	bl	8000250 <memchr>
 800db06:	9a04      	ldr	r2, [sp, #16]
 800db08:	b9d8      	cbnz	r0, 800db42 <_svfiprintf_r+0xe6>
 800db0a:	06d0      	lsls	r0, r2, #27
 800db0c:	bf44      	itt	mi
 800db0e:	2320      	movmi	r3, #32
 800db10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db14:	0711      	lsls	r1, r2, #28
 800db16:	bf44      	itt	mi
 800db18:	232b      	movmi	r3, #43	; 0x2b
 800db1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db1e:	f89a 3000 	ldrb.w	r3, [sl]
 800db22:	2b2a      	cmp	r3, #42	; 0x2a
 800db24:	d015      	beq.n	800db52 <_svfiprintf_r+0xf6>
 800db26:	9a07      	ldr	r2, [sp, #28]
 800db28:	4654      	mov	r4, sl
 800db2a:	2000      	movs	r0, #0
 800db2c:	f04f 0c0a 	mov.w	ip, #10
 800db30:	4621      	mov	r1, r4
 800db32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db36:	3b30      	subs	r3, #48	; 0x30
 800db38:	2b09      	cmp	r3, #9
 800db3a:	d94e      	bls.n	800dbda <_svfiprintf_r+0x17e>
 800db3c:	b1b0      	cbz	r0, 800db6c <_svfiprintf_r+0x110>
 800db3e:	9207      	str	r2, [sp, #28]
 800db40:	e014      	b.n	800db6c <_svfiprintf_r+0x110>
 800db42:	eba0 0308 	sub.w	r3, r0, r8
 800db46:	fa09 f303 	lsl.w	r3, r9, r3
 800db4a:	4313      	orrs	r3, r2
 800db4c:	9304      	str	r3, [sp, #16]
 800db4e:	46a2      	mov	sl, r4
 800db50:	e7d2      	b.n	800daf8 <_svfiprintf_r+0x9c>
 800db52:	9b03      	ldr	r3, [sp, #12]
 800db54:	1d19      	adds	r1, r3, #4
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	9103      	str	r1, [sp, #12]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	bfbb      	ittet	lt
 800db5e:	425b      	neglt	r3, r3
 800db60:	f042 0202 	orrlt.w	r2, r2, #2
 800db64:	9307      	strge	r3, [sp, #28]
 800db66:	9307      	strlt	r3, [sp, #28]
 800db68:	bfb8      	it	lt
 800db6a:	9204      	strlt	r2, [sp, #16]
 800db6c:	7823      	ldrb	r3, [r4, #0]
 800db6e:	2b2e      	cmp	r3, #46	; 0x2e
 800db70:	d10c      	bne.n	800db8c <_svfiprintf_r+0x130>
 800db72:	7863      	ldrb	r3, [r4, #1]
 800db74:	2b2a      	cmp	r3, #42	; 0x2a
 800db76:	d135      	bne.n	800dbe4 <_svfiprintf_r+0x188>
 800db78:	9b03      	ldr	r3, [sp, #12]
 800db7a:	1d1a      	adds	r2, r3, #4
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	9203      	str	r2, [sp, #12]
 800db80:	2b00      	cmp	r3, #0
 800db82:	bfb8      	it	lt
 800db84:	f04f 33ff 	movlt.w	r3, #4294967295
 800db88:	3402      	adds	r4, #2
 800db8a:	9305      	str	r3, [sp, #20]
 800db8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dc58 <_svfiprintf_r+0x1fc>
 800db90:	7821      	ldrb	r1, [r4, #0]
 800db92:	2203      	movs	r2, #3
 800db94:	4650      	mov	r0, sl
 800db96:	f7f2 fb5b 	bl	8000250 <memchr>
 800db9a:	b140      	cbz	r0, 800dbae <_svfiprintf_r+0x152>
 800db9c:	2340      	movs	r3, #64	; 0x40
 800db9e:	eba0 000a 	sub.w	r0, r0, sl
 800dba2:	fa03 f000 	lsl.w	r0, r3, r0
 800dba6:	9b04      	ldr	r3, [sp, #16]
 800dba8:	4303      	orrs	r3, r0
 800dbaa:	3401      	adds	r4, #1
 800dbac:	9304      	str	r3, [sp, #16]
 800dbae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbb2:	4826      	ldr	r0, [pc, #152]	; (800dc4c <_svfiprintf_r+0x1f0>)
 800dbb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbb8:	2206      	movs	r2, #6
 800dbba:	f7f2 fb49 	bl	8000250 <memchr>
 800dbbe:	2800      	cmp	r0, #0
 800dbc0:	d038      	beq.n	800dc34 <_svfiprintf_r+0x1d8>
 800dbc2:	4b23      	ldr	r3, [pc, #140]	; (800dc50 <_svfiprintf_r+0x1f4>)
 800dbc4:	bb1b      	cbnz	r3, 800dc0e <_svfiprintf_r+0x1b2>
 800dbc6:	9b03      	ldr	r3, [sp, #12]
 800dbc8:	3307      	adds	r3, #7
 800dbca:	f023 0307 	bic.w	r3, r3, #7
 800dbce:	3308      	adds	r3, #8
 800dbd0:	9303      	str	r3, [sp, #12]
 800dbd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbd4:	4433      	add	r3, r6
 800dbd6:	9309      	str	r3, [sp, #36]	; 0x24
 800dbd8:	e767      	b.n	800daaa <_svfiprintf_r+0x4e>
 800dbda:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbde:	460c      	mov	r4, r1
 800dbe0:	2001      	movs	r0, #1
 800dbe2:	e7a5      	b.n	800db30 <_svfiprintf_r+0xd4>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	3401      	adds	r4, #1
 800dbe8:	9305      	str	r3, [sp, #20]
 800dbea:	4619      	mov	r1, r3
 800dbec:	f04f 0c0a 	mov.w	ip, #10
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbf6:	3a30      	subs	r2, #48	; 0x30
 800dbf8:	2a09      	cmp	r2, #9
 800dbfa:	d903      	bls.n	800dc04 <_svfiprintf_r+0x1a8>
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d0c5      	beq.n	800db8c <_svfiprintf_r+0x130>
 800dc00:	9105      	str	r1, [sp, #20]
 800dc02:	e7c3      	b.n	800db8c <_svfiprintf_r+0x130>
 800dc04:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc08:	4604      	mov	r4, r0
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	e7f0      	b.n	800dbf0 <_svfiprintf_r+0x194>
 800dc0e:	ab03      	add	r3, sp, #12
 800dc10:	9300      	str	r3, [sp, #0]
 800dc12:	462a      	mov	r2, r5
 800dc14:	4b0f      	ldr	r3, [pc, #60]	; (800dc54 <_svfiprintf_r+0x1f8>)
 800dc16:	a904      	add	r1, sp, #16
 800dc18:	4638      	mov	r0, r7
 800dc1a:	f7fc f885 	bl	8009d28 <_printf_float>
 800dc1e:	1c42      	adds	r2, r0, #1
 800dc20:	4606      	mov	r6, r0
 800dc22:	d1d6      	bne.n	800dbd2 <_svfiprintf_r+0x176>
 800dc24:	89ab      	ldrh	r3, [r5, #12]
 800dc26:	065b      	lsls	r3, r3, #25
 800dc28:	f53f af2c 	bmi.w	800da84 <_svfiprintf_r+0x28>
 800dc2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc2e:	b01d      	add	sp, #116	; 0x74
 800dc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc34:	ab03      	add	r3, sp, #12
 800dc36:	9300      	str	r3, [sp, #0]
 800dc38:	462a      	mov	r2, r5
 800dc3a:	4b06      	ldr	r3, [pc, #24]	; (800dc54 <_svfiprintf_r+0x1f8>)
 800dc3c:	a904      	add	r1, sp, #16
 800dc3e:	4638      	mov	r0, r7
 800dc40:	f7fc fafe 	bl	800a240 <_printf_i>
 800dc44:	e7eb      	b.n	800dc1e <_svfiprintf_r+0x1c2>
 800dc46:	bf00      	nop
 800dc48:	0800e95c 	.word	0x0800e95c
 800dc4c:	0800e966 	.word	0x0800e966
 800dc50:	08009d29 	.word	0x08009d29
 800dc54:	0800d9a7 	.word	0x0800d9a7
 800dc58:	0800e962 	.word	0x0800e962

0800dc5c <__sfputc_r>:
 800dc5c:	6893      	ldr	r3, [r2, #8]
 800dc5e:	3b01      	subs	r3, #1
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	b410      	push	{r4}
 800dc64:	6093      	str	r3, [r2, #8]
 800dc66:	da08      	bge.n	800dc7a <__sfputc_r+0x1e>
 800dc68:	6994      	ldr	r4, [r2, #24]
 800dc6a:	42a3      	cmp	r3, r4
 800dc6c:	db01      	blt.n	800dc72 <__sfputc_r+0x16>
 800dc6e:	290a      	cmp	r1, #10
 800dc70:	d103      	bne.n	800dc7a <__sfputc_r+0x1e>
 800dc72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc76:	f7fd be11 	b.w	800b89c <__swbuf_r>
 800dc7a:	6813      	ldr	r3, [r2, #0]
 800dc7c:	1c58      	adds	r0, r3, #1
 800dc7e:	6010      	str	r0, [r2, #0]
 800dc80:	7019      	strb	r1, [r3, #0]
 800dc82:	4608      	mov	r0, r1
 800dc84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc88:	4770      	bx	lr

0800dc8a <__sfputs_r>:
 800dc8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc8c:	4606      	mov	r6, r0
 800dc8e:	460f      	mov	r7, r1
 800dc90:	4614      	mov	r4, r2
 800dc92:	18d5      	adds	r5, r2, r3
 800dc94:	42ac      	cmp	r4, r5
 800dc96:	d101      	bne.n	800dc9c <__sfputs_r+0x12>
 800dc98:	2000      	movs	r0, #0
 800dc9a:	e007      	b.n	800dcac <__sfputs_r+0x22>
 800dc9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dca0:	463a      	mov	r2, r7
 800dca2:	4630      	mov	r0, r6
 800dca4:	f7ff ffda 	bl	800dc5c <__sfputc_r>
 800dca8:	1c43      	adds	r3, r0, #1
 800dcaa:	d1f3      	bne.n	800dc94 <__sfputs_r+0xa>
 800dcac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dcb0 <_vfiprintf_r>:
 800dcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb4:	460d      	mov	r5, r1
 800dcb6:	b09d      	sub	sp, #116	; 0x74
 800dcb8:	4614      	mov	r4, r2
 800dcba:	4698      	mov	r8, r3
 800dcbc:	4606      	mov	r6, r0
 800dcbe:	b118      	cbz	r0, 800dcc8 <_vfiprintf_r+0x18>
 800dcc0:	6983      	ldr	r3, [r0, #24]
 800dcc2:	b90b      	cbnz	r3, 800dcc8 <_vfiprintf_r+0x18>
 800dcc4:	f7fb fe10 	bl	80098e8 <__sinit>
 800dcc8:	4b89      	ldr	r3, [pc, #548]	; (800def0 <_vfiprintf_r+0x240>)
 800dcca:	429d      	cmp	r5, r3
 800dccc:	d11b      	bne.n	800dd06 <_vfiprintf_r+0x56>
 800dcce:	6875      	ldr	r5, [r6, #4]
 800dcd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcd2:	07d9      	lsls	r1, r3, #31
 800dcd4:	d405      	bmi.n	800dce2 <_vfiprintf_r+0x32>
 800dcd6:	89ab      	ldrh	r3, [r5, #12]
 800dcd8:	059a      	lsls	r2, r3, #22
 800dcda:	d402      	bmi.n	800dce2 <_vfiprintf_r+0x32>
 800dcdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcde:	f7fb fec6 	bl	8009a6e <__retarget_lock_acquire_recursive>
 800dce2:	89ab      	ldrh	r3, [r5, #12]
 800dce4:	071b      	lsls	r3, r3, #28
 800dce6:	d501      	bpl.n	800dcec <_vfiprintf_r+0x3c>
 800dce8:	692b      	ldr	r3, [r5, #16]
 800dcea:	b9eb      	cbnz	r3, 800dd28 <_vfiprintf_r+0x78>
 800dcec:	4629      	mov	r1, r5
 800dcee:	4630      	mov	r0, r6
 800dcf0:	f7fd fe38 	bl	800b964 <__swsetup_r>
 800dcf4:	b1c0      	cbz	r0, 800dd28 <_vfiprintf_r+0x78>
 800dcf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcf8:	07dc      	lsls	r4, r3, #31
 800dcfa:	d50e      	bpl.n	800dd1a <_vfiprintf_r+0x6a>
 800dcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800dd00:	b01d      	add	sp, #116	; 0x74
 800dd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd06:	4b7b      	ldr	r3, [pc, #492]	; (800def4 <_vfiprintf_r+0x244>)
 800dd08:	429d      	cmp	r5, r3
 800dd0a:	d101      	bne.n	800dd10 <_vfiprintf_r+0x60>
 800dd0c:	68b5      	ldr	r5, [r6, #8]
 800dd0e:	e7df      	b.n	800dcd0 <_vfiprintf_r+0x20>
 800dd10:	4b79      	ldr	r3, [pc, #484]	; (800def8 <_vfiprintf_r+0x248>)
 800dd12:	429d      	cmp	r5, r3
 800dd14:	bf08      	it	eq
 800dd16:	68f5      	ldreq	r5, [r6, #12]
 800dd18:	e7da      	b.n	800dcd0 <_vfiprintf_r+0x20>
 800dd1a:	89ab      	ldrh	r3, [r5, #12]
 800dd1c:	0598      	lsls	r0, r3, #22
 800dd1e:	d4ed      	bmi.n	800dcfc <_vfiprintf_r+0x4c>
 800dd20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd22:	f7fb fea5 	bl	8009a70 <__retarget_lock_release_recursive>
 800dd26:	e7e9      	b.n	800dcfc <_vfiprintf_r+0x4c>
 800dd28:	2300      	movs	r3, #0
 800dd2a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd2c:	2320      	movs	r3, #32
 800dd2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd32:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd36:	2330      	movs	r3, #48	; 0x30
 800dd38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800defc <_vfiprintf_r+0x24c>
 800dd3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd40:	f04f 0901 	mov.w	r9, #1
 800dd44:	4623      	mov	r3, r4
 800dd46:	469a      	mov	sl, r3
 800dd48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd4c:	b10a      	cbz	r2, 800dd52 <_vfiprintf_r+0xa2>
 800dd4e:	2a25      	cmp	r2, #37	; 0x25
 800dd50:	d1f9      	bne.n	800dd46 <_vfiprintf_r+0x96>
 800dd52:	ebba 0b04 	subs.w	fp, sl, r4
 800dd56:	d00b      	beq.n	800dd70 <_vfiprintf_r+0xc0>
 800dd58:	465b      	mov	r3, fp
 800dd5a:	4622      	mov	r2, r4
 800dd5c:	4629      	mov	r1, r5
 800dd5e:	4630      	mov	r0, r6
 800dd60:	f7ff ff93 	bl	800dc8a <__sfputs_r>
 800dd64:	3001      	adds	r0, #1
 800dd66:	f000 80aa 	beq.w	800debe <_vfiprintf_r+0x20e>
 800dd6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd6c:	445a      	add	r2, fp
 800dd6e:	9209      	str	r2, [sp, #36]	; 0x24
 800dd70:	f89a 3000 	ldrb.w	r3, [sl]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	f000 80a2 	beq.w	800debe <_vfiprintf_r+0x20e>
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd84:	f10a 0a01 	add.w	sl, sl, #1
 800dd88:	9304      	str	r3, [sp, #16]
 800dd8a:	9307      	str	r3, [sp, #28]
 800dd8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd90:	931a      	str	r3, [sp, #104]	; 0x68
 800dd92:	4654      	mov	r4, sl
 800dd94:	2205      	movs	r2, #5
 800dd96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd9a:	4858      	ldr	r0, [pc, #352]	; (800defc <_vfiprintf_r+0x24c>)
 800dd9c:	f7f2 fa58 	bl	8000250 <memchr>
 800dda0:	9a04      	ldr	r2, [sp, #16]
 800dda2:	b9d8      	cbnz	r0, 800dddc <_vfiprintf_r+0x12c>
 800dda4:	06d1      	lsls	r1, r2, #27
 800dda6:	bf44      	itt	mi
 800dda8:	2320      	movmi	r3, #32
 800ddaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddae:	0713      	lsls	r3, r2, #28
 800ddb0:	bf44      	itt	mi
 800ddb2:	232b      	movmi	r3, #43	; 0x2b
 800ddb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddb8:	f89a 3000 	ldrb.w	r3, [sl]
 800ddbc:	2b2a      	cmp	r3, #42	; 0x2a
 800ddbe:	d015      	beq.n	800ddec <_vfiprintf_r+0x13c>
 800ddc0:	9a07      	ldr	r2, [sp, #28]
 800ddc2:	4654      	mov	r4, sl
 800ddc4:	2000      	movs	r0, #0
 800ddc6:	f04f 0c0a 	mov.w	ip, #10
 800ddca:	4621      	mov	r1, r4
 800ddcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddd0:	3b30      	subs	r3, #48	; 0x30
 800ddd2:	2b09      	cmp	r3, #9
 800ddd4:	d94e      	bls.n	800de74 <_vfiprintf_r+0x1c4>
 800ddd6:	b1b0      	cbz	r0, 800de06 <_vfiprintf_r+0x156>
 800ddd8:	9207      	str	r2, [sp, #28]
 800ddda:	e014      	b.n	800de06 <_vfiprintf_r+0x156>
 800dddc:	eba0 0308 	sub.w	r3, r0, r8
 800dde0:	fa09 f303 	lsl.w	r3, r9, r3
 800dde4:	4313      	orrs	r3, r2
 800dde6:	9304      	str	r3, [sp, #16]
 800dde8:	46a2      	mov	sl, r4
 800ddea:	e7d2      	b.n	800dd92 <_vfiprintf_r+0xe2>
 800ddec:	9b03      	ldr	r3, [sp, #12]
 800ddee:	1d19      	adds	r1, r3, #4
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	9103      	str	r1, [sp, #12]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	bfbb      	ittet	lt
 800ddf8:	425b      	neglt	r3, r3
 800ddfa:	f042 0202 	orrlt.w	r2, r2, #2
 800ddfe:	9307      	strge	r3, [sp, #28]
 800de00:	9307      	strlt	r3, [sp, #28]
 800de02:	bfb8      	it	lt
 800de04:	9204      	strlt	r2, [sp, #16]
 800de06:	7823      	ldrb	r3, [r4, #0]
 800de08:	2b2e      	cmp	r3, #46	; 0x2e
 800de0a:	d10c      	bne.n	800de26 <_vfiprintf_r+0x176>
 800de0c:	7863      	ldrb	r3, [r4, #1]
 800de0e:	2b2a      	cmp	r3, #42	; 0x2a
 800de10:	d135      	bne.n	800de7e <_vfiprintf_r+0x1ce>
 800de12:	9b03      	ldr	r3, [sp, #12]
 800de14:	1d1a      	adds	r2, r3, #4
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	9203      	str	r2, [sp, #12]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	bfb8      	it	lt
 800de1e:	f04f 33ff 	movlt.w	r3, #4294967295
 800de22:	3402      	adds	r4, #2
 800de24:	9305      	str	r3, [sp, #20]
 800de26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df0c <_vfiprintf_r+0x25c>
 800de2a:	7821      	ldrb	r1, [r4, #0]
 800de2c:	2203      	movs	r2, #3
 800de2e:	4650      	mov	r0, sl
 800de30:	f7f2 fa0e 	bl	8000250 <memchr>
 800de34:	b140      	cbz	r0, 800de48 <_vfiprintf_r+0x198>
 800de36:	2340      	movs	r3, #64	; 0x40
 800de38:	eba0 000a 	sub.w	r0, r0, sl
 800de3c:	fa03 f000 	lsl.w	r0, r3, r0
 800de40:	9b04      	ldr	r3, [sp, #16]
 800de42:	4303      	orrs	r3, r0
 800de44:	3401      	adds	r4, #1
 800de46:	9304      	str	r3, [sp, #16]
 800de48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de4c:	482c      	ldr	r0, [pc, #176]	; (800df00 <_vfiprintf_r+0x250>)
 800de4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de52:	2206      	movs	r2, #6
 800de54:	f7f2 f9fc 	bl	8000250 <memchr>
 800de58:	2800      	cmp	r0, #0
 800de5a:	d03f      	beq.n	800dedc <_vfiprintf_r+0x22c>
 800de5c:	4b29      	ldr	r3, [pc, #164]	; (800df04 <_vfiprintf_r+0x254>)
 800de5e:	bb1b      	cbnz	r3, 800dea8 <_vfiprintf_r+0x1f8>
 800de60:	9b03      	ldr	r3, [sp, #12]
 800de62:	3307      	adds	r3, #7
 800de64:	f023 0307 	bic.w	r3, r3, #7
 800de68:	3308      	adds	r3, #8
 800de6a:	9303      	str	r3, [sp, #12]
 800de6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de6e:	443b      	add	r3, r7
 800de70:	9309      	str	r3, [sp, #36]	; 0x24
 800de72:	e767      	b.n	800dd44 <_vfiprintf_r+0x94>
 800de74:	fb0c 3202 	mla	r2, ip, r2, r3
 800de78:	460c      	mov	r4, r1
 800de7a:	2001      	movs	r0, #1
 800de7c:	e7a5      	b.n	800ddca <_vfiprintf_r+0x11a>
 800de7e:	2300      	movs	r3, #0
 800de80:	3401      	adds	r4, #1
 800de82:	9305      	str	r3, [sp, #20]
 800de84:	4619      	mov	r1, r3
 800de86:	f04f 0c0a 	mov.w	ip, #10
 800de8a:	4620      	mov	r0, r4
 800de8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de90:	3a30      	subs	r2, #48	; 0x30
 800de92:	2a09      	cmp	r2, #9
 800de94:	d903      	bls.n	800de9e <_vfiprintf_r+0x1ee>
 800de96:	2b00      	cmp	r3, #0
 800de98:	d0c5      	beq.n	800de26 <_vfiprintf_r+0x176>
 800de9a:	9105      	str	r1, [sp, #20]
 800de9c:	e7c3      	b.n	800de26 <_vfiprintf_r+0x176>
 800de9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800dea2:	4604      	mov	r4, r0
 800dea4:	2301      	movs	r3, #1
 800dea6:	e7f0      	b.n	800de8a <_vfiprintf_r+0x1da>
 800dea8:	ab03      	add	r3, sp, #12
 800deaa:	9300      	str	r3, [sp, #0]
 800deac:	462a      	mov	r2, r5
 800deae:	4b16      	ldr	r3, [pc, #88]	; (800df08 <_vfiprintf_r+0x258>)
 800deb0:	a904      	add	r1, sp, #16
 800deb2:	4630      	mov	r0, r6
 800deb4:	f7fb ff38 	bl	8009d28 <_printf_float>
 800deb8:	4607      	mov	r7, r0
 800deba:	1c78      	adds	r0, r7, #1
 800debc:	d1d6      	bne.n	800de6c <_vfiprintf_r+0x1bc>
 800debe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dec0:	07d9      	lsls	r1, r3, #31
 800dec2:	d405      	bmi.n	800ded0 <_vfiprintf_r+0x220>
 800dec4:	89ab      	ldrh	r3, [r5, #12]
 800dec6:	059a      	lsls	r2, r3, #22
 800dec8:	d402      	bmi.n	800ded0 <_vfiprintf_r+0x220>
 800deca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800decc:	f7fb fdd0 	bl	8009a70 <__retarget_lock_release_recursive>
 800ded0:	89ab      	ldrh	r3, [r5, #12]
 800ded2:	065b      	lsls	r3, r3, #25
 800ded4:	f53f af12 	bmi.w	800dcfc <_vfiprintf_r+0x4c>
 800ded8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deda:	e711      	b.n	800dd00 <_vfiprintf_r+0x50>
 800dedc:	ab03      	add	r3, sp, #12
 800dede:	9300      	str	r3, [sp, #0]
 800dee0:	462a      	mov	r2, r5
 800dee2:	4b09      	ldr	r3, [pc, #36]	; (800df08 <_vfiprintf_r+0x258>)
 800dee4:	a904      	add	r1, sp, #16
 800dee6:	4630      	mov	r0, r6
 800dee8:	f7fc f9aa 	bl	800a240 <_printf_i>
 800deec:	e7e4      	b.n	800deb8 <_vfiprintf_r+0x208>
 800deee:	bf00      	nop
 800def0:	0800e614 	.word	0x0800e614
 800def4:	0800e634 	.word	0x0800e634
 800def8:	0800e5f4 	.word	0x0800e5f4
 800defc:	0800e95c 	.word	0x0800e95c
 800df00:	0800e966 	.word	0x0800e966
 800df04:	08009d29 	.word	0x08009d29
 800df08:	0800dc8b 	.word	0x0800dc8b
 800df0c:	0800e962 	.word	0x0800e962

0800df10 <_putc_r>:
 800df10:	b570      	push	{r4, r5, r6, lr}
 800df12:	460d      	mov	r5, r1
 800df14:	4614      	mov	r4, r2
 800df16:	4606      	mov	r6, r0
 800df18:	b118      	cbz	r0, 800df22 <_putc_r+0x12>
 800df1a:	6983      	ldr	r3, [r0, #24]
 800df1c:	b90b      	cbnz	r3, 800df22 <_putc_r+0x12>
 800df1e:	f7fb fce3 	bl	80098e8 <__sinit>
 800df22:	4b1c      	ldr	r3, [pc, #112]	; (800df94 <_putc_r+0x84>)
 800df24:	429c      	cmp	r4, r3
 800df26:	d124      	bne.n	800df72 <_putc_r+0x62>
 800df28:	6874      	ldr	r4, [r6, #4]
 800df2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df2c:	07d8      	lsls	r0, r3, #31
 800df2e:	d405      	bmi.n	800df3c <_putc_r+0x2c>
 800df30:	89a3      	ldrh	r3, [r4, #12]
 800df32:	0599      	lsls	r1, r3, #22
 800df34:	d402      	bmi.n	800df3c <_putc_r+0x2c>
 800df36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df38:	f7fb fd99 	bl	8009a6e <__retarget_lock_acquire_recursive>
 800df3c:	68a3      	ldr	r3, [r4, #8]
 800df3e:	3b01      	subs	r3, #1
 800df40:	2b00      	cmp	r3, #0
 800df42:	60a3      	str	r3, [r4, #8]
 800df44:	da05      	bge.n	800df52 <_putc_r+0x42>
 800df46:	69a2      	ldr	r2, [r4, #24]
 800df48:	4293      	cmp	r3, r2
 800df4a:	db1c      	blt.n	800df86 <_putc_r+0x76>
 800df4c:	b2eb      	uxtb	r3, r5
 800df4e:	2b0a      	cmp	r3, #10
 800df50:	d019      	beq.n	800df86 <_putc_r+0x76>
 800df52:	6823      	ldr	r3, [r4, #0]
 800df54:	1c5a      	adds	r2, r3, #1
 800df56:	6022      	str	r2, [r4, #0]
 800df58:	701d      	strb	r5, [r3, #0]
 800df5a:	b2ed      	uxtb	r5, r5
 800df5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df5e:	07da      	lsls	r2, r3, #31
 800df60:	d405      	bmi.n	800df6e <_putc_r+0x5e>
 800df62:	89a3      	ldrh	r3, [r4, #12]
 800df64:	059b      	lsls	r3, r3, #22
 800df66:	d402      	bmi.n	800df6e <_putc_r+0x5e>
 800df68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df6a:	f7fb fd81 	bl	8009a70 <__retarget_lock_release_recursive>
 800df6e:	4628      	mov	r0, r5
 800df70:	bd70      	pop	{r4, r5, r6, pc}
 800df72:	4b09      	ldr	r3, [pc, #36]	; (800df98 <_putc_r+0x88>)
 800df74:	429c      	cmp	r4, r3
 800df76:	d101      	bne.n	800df7c <_putc_r+0x6c>
 800df78:	68b4      	ldr	r4, [r6, #8]
 800df7a:	e7d6      	b.n	800df2a <_putc_r+0x1a>
 800df7c:	4b07      	ldr	r3, [pc, #28]	; (800df9c <_putc_r+0x8c>)
 800df7e:	429c      	cmp	r4, r3
 800df80:	bf08      	it	eq
 800df82:	68f4      	ldreq	r4, [r6, #12]
 800df84:	e7d1      	b.n	800df2a <_putc_r+0x1a>
 800df86:	4629      	mov	r1, r5
 800df88:	4622      	mov	r2, r4
 800df8a:	4630      	mov	r0, r6
 800df8c:	f7fd fc86 	bl	800b89c <__swbuf_r>
 800df90:	4605      	mov	r5, r0
 800df92:	e7e3      	b.n	800df5c <_putc_r+0x4c>
 800df94:	0800e614 	.word	0x0800e614
 800df98:	0800e634 	.word	0x0800e634
 800df9c:	0800e5f4 	.word	0x0800e5f4

0800dfa0 <_read_r>:
 800dfa0:	b538      	push	{r3, r4, r5, lr}
 800dfa2:	4d07      	ldr	r5, [pc, #28]	; (800dfc0 <_read_r+0x20>)
 800dfa4:	4604      	mov	r4, r0
 800dfa6:	4608      	mov	r0, r1
 800dfa8:	4611      	mov	r1, r2
 800dfaa:	2200      	movs	r2, #0
 800dfac:	602a      	str	r2, [r5, #0]
 800dfae:	461a      	mov	r2, r3
 800dfb0:	f7f3 fea0 	bl	8001cf4 <_read>
 800dfb4:	1c43      	adds	r3, r0, #1
 800dfb6:	d102      	bne.n	800dfbe <_read_r+0x1e>
 800dfb8:	682b      	ldr	r3, [r5, #0]
 800dfba:	b103      	cbz	r3, 800dfbe <_read_r+0x1e>
 800dfbc:	6023      	str	r3, [r4, #0]
 800dfbe:	bd38      	pop	{r3, r4, r5, pc}
 800dfc0:	20004ecc 	.word	0x20004ecc
 800dfc4:	00000000 	.word	0x00000000

0800dfc8 <nan>:
 800dfc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dfd0 <nan+0x8>
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop
 800dfd0:	00000000 	.word	0x00000000
 800dfd4:	7ff80000 	.word	0x7ff80000

0800dfd8 <strncmp>:
 800dfd8:	b510      	push	{r4, lr}
 800dfda:	b16a      	cbz	r2, 800dff8 <strncmp+0x20>
 800dfdc:	3901      	subs	r1, #1
 800dfde:	1884      	adds	r4, r0, r2
 800dfe0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dfe4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d103      	bne.n	800dff4 <strncmp+0x1c>
 800dfec:	42a0      	cmp	r0, r4
 800dfee:	d001      	beq.n	800dff4 <strncmp+0x1c>
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d1f5      	bne.n	800dfe0 <strncmp+0x8>
 800dff4:	1a98      	subs	r0, r3, r2
 800dff6:	bd10      	pop	{r4, pc}
 800dff8:	4610      	mov	r0, r2
 800dffa:	e7fc      	b.n	800dff6 <strncmp+0x1e>

0800dffc <__ascii_wctomb>:
 800dffc:	b149      	cbz	r1, 800e012 <__ascii_wctomb+0x16>
 800dffe:	2aff      	cmp	r2, #255	; 0xff
 800e000:	bf85      	ittet	hi
 800e002:	238a      	movhi	r3, #138	; 0x8a
 800e004:	6003      	strhi	r3, [r0, #0]
 800e006:	700a      	strbls	r2, [r1, #0]
 800e008:	f04f 30ff 	movhi.w	r0, #4294967295
 800e00c:	bf98      	it	ls
 800e00e:	2001      	movls	r0, #1
 800e010:	4770      	bx	lr
 800e012:	4608      	mov	r0, r1
 800e014:	4770      	bx	lr
	...

0800e018 <__assert_func>:
 800e018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e01a:	4614      	mov	r4, r2
 800e01c:	461a      	mov	r2, r3
 800e01e:	4b09      	ldr	r3, [pc, #36]	; (800e044 <__assert_func+0x2c>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	4605      	mov	r5, r0
 800e024:	68d8      	ldr	r0, [r3, #12]
 800e026:	b14c      	cbz	r4, 800e03c <__assert_func+0x24>
 800e028:	4b07      	ldr	r3, [pc, #28]	; (800e048 <__assert_func+0x30>)
 800e02a:	9100      	str	r1, [sp, #0]
 800e02c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e030:	4906      	ldr	r1, [pc, #24]	; (800e04c <__assert_func+0x34>)
 800e032:	462b      	mov	r3, r5
 800e034:	f000 f80e 	bl	800e054 <fiprintf>
 800e038:	f000 f880 	bl	800e13c <abort>
 800e03c:	4b04      	ldr	r3, [pc, #16]	; (800e050 <__assert_func+0x38>)
 800e03e:	461c      	mov	r4, r3
 800e040:	e7f3      	b.n	800e02a <__assert_func+0x12>
 800e042:	bf00      	nop
 800e044:	20000070 	.word	0x20000070
 800e048:	0800e96d 	.word	0x0800e96d
 800e04c:	0800e97a 	.word	0x0800e97a
 800e050:	0800e9a8 	.word	0x0800e9a8

0800e054 <fiprintf>:
 800e054:	b40e      	push	{r1, r2, r3}
 800e056:	b503      	push	{r0, r1, lr}
 800e058:	4601      	mov	r1, r0
 800e05a:	ab03      	add	r3, sp, #12
 800e05c:	4805      	ldr	r0, [pc, #20]	; (800e074 <fiprintf+0x20>)
 800e05e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e062:	6800      	ldr	r0, [r0, #0]
 800e064:	9301      	str	r3, [sp, #4]
 800e066:	f7ff fe23 	bl	800dcb0 <_vfiprintf_r>
 800e06a:	b002      	add	sp, #8
 800e06c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e070:	b003      	add	sp, #12
 800e072:	4770      	bx	lr
 800e074:	20000070 	.word	0x20000070

0800e078 <_fstat_r>:
 800e078:	b538      	push	{r3, r4, r5, lr}
 800e07a:	4d07      	ldr	r5, [pc, #28]	; (800e098 <_fstat_r+0x20>)
 800e07c:	2300      	movs	r3, #0
 800e07e:	4604      	mov	r4, r0
 800e080:	4608      	mov	r0, r1
 800e082:	4611      	mov	r1, r2
 800e084:	602b      	str	r3, [r5, #0]
 800e086:	f7f3 fe7a 	bl	8001d7e <_fstat>
 800e08a:	1c43      	adds	r3, r0, #1
 800e08c:	d102      	bne.n	800e094 <_fstat_r+0x1c>
 800e08e:	682b      	ldr	r3, [r5, #0]
 800e090:	b103      	cbz	r3, 800e094 <_fstat_r+0x1c>
 800e092:	6023      	str	r3, [r4, #0]
 800e094:	bd38      	pop	{r3, r4, r5, pc}
 800e096:	bf00      	nop
 800e098:	20004ecc 	.word	0x20004ecc

0800e09c <_isatty_r>:
 800e09c:	b538      	push	{r3, r4, r5, lr}
 800e09e:	4d06      	ldr	r5, [pc, #24]	; (800e0b8 <_isatty_r+0x1c>)
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	4604      	mov	r4, r0
 800e0a4:	4608      	mov	r0, r1
 800e0a6:	602b      	str	r3, [r5, #0]
 800e0a8:	f7f3 fe79 	bl	8001d9e <_isatty>
 800e0ac:	1c43      	adds	r3, r0, #1
 800e0ae:	d102      	bne.n	800e0b6 <_isatty_r+0x1a>
 800e0b0:	682b      	ldr	r3, [r5, #0]
 800e0b2:	b103      	cbz	r3, 800e0b6 <_isatty_r+0x1a>
 800e0b4:	6023      	str	r3, [r4, #0]
 800e0b6:	bd38      	pop	{r3, r4, r5, pc}
 800e0b8:	20004ecc 	.word	0x20004ecc

0800e0bc <memmove>:
 800e0bc:	4288      	cmp	r0, r1
 800e0be:	b510      	push	{r4, lr}
 800e0c0:	eb01 0402 	add.w	r4, r1, r2
 800e0c4:	d902      	bls.n	800e0cc <memmove+0x10>
 800e0c6:	4284      	cmp	r4, r0
 800e0c8:	4623      	mov	r3, r4
 800e0ca:	d807      	bhi.n	800e0dc <memmove+0x20>
 800e0cc:	1e43      	subs	r3, r0, #1
 800e0ce:	42a1      	cmp	r1, r4
 800e0d0:	d008      	beq.n	800e0e4 <memmove+0x28>
 800e0d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0da:	e7f8      	b.n	800e0ce <memmove+0x12>
 800e0dc:	4402      	add	r2, r0
 800e0de:	4601      	mov	r1, r0
 800e0e0:	428a      	cmp	r2, r1
 800e0e2:	d100      	bne.n	800e0e6 <memmove+0x2a>
 800e0e4:	bd10      	pop	{r4, pc}
 800e0e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0ee:	e7f7      	b.n	800e0e0 <memmove+0x24>

0800e0f0 <_realloc_r>:
 800e0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0f2:	4607      	mov	r7, r0
 800e0f4:	4614      	mov	r4, r2
 800e0f6:	460e      	mov	r6, r1
 800e0f8:	b921      	cbnz	r1, 800e104 <_realloc_r+0x14>
 800e0fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e0fe:	4611      	mov	r1, r2
 800e100:	f7fb bd26 	b.w	8009b50 <_malloc_r>
 800e104:	b922      	cbnz	r2, 800e110 <_realloc_r+0x20>
 800e106:	f7fb fcd3 	bl	8009ab0 <_free_r>
 800e10a:	4625      	mov	r5, r4
 800e10c:	4628      	mov	r0, r5
 800e10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e110:	f000 f81b 	bl	800e14a <_malloc_usable_size_r>
 800e114:	42a0      	cmp	r0, r4
 800e116:	d20f      	bcs.n	800e138 <_realloc_r+0x48>
 800e118:	4621      	mov	r1, r4
 800e11a:	4638      	mov	r0, r7
 800e11c:	f7fb fd18 	bl	8009b50 <_malloc_r>
 800e120:	4605      	mov	r5, r0
 800e122:	2800      	cmp	r0, #0
 800e124:	d0f2      	beq.n	800e10c <_realloc_r+0x1c>
 800e126:	4631      	mov	r1, r6
 800e128:	4622      	mov	r2, r4
 800e12a:	f7fb fcab 	bl	8009a84 <memcpy>
 800e12e:	4631      	mov	r1, r6
 800e130:	4638      	mov	r0, r7
 800e132:	f7fb fcbd 	bl	8009ab0 <_free_r>
 800e136:	e7e9      	b.n	800e10c <_realloc_r+0x1c>
 800e138:	4635      	mov	r5, r6
 800e13a:	e7e7      	b.n	800e10c <_realloc_r+0x1c>

0800e13c <abort>:
 800e13c:	b508      	push	{r3, lr}
 800e13e:	2006      	movs	r0, #6
 800e140:	f000 f834 	bl	800e1ac <raise>
 800e144:	2001      	movs	r0, #1
 800e146:	f7f3 fdcb 	bl	8001ce0 <_exit>

0800e14a <_malloc_usable_size_r>:
 800e14a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e14e:	1f18      	subs	r0, r3, #4
 800e150:	2b00      	cmp	r3, #0
 800e152:	bfbc      	itt	lt
 800e154:	580b      	ldrlt	r3, [r1, r0]
 800e156:	18c0      	addlt	r0, r0, r3
 800e158:	4770      	bx	lr

0800e15a <_raise_r>:
 800e15a:	291f      	cmp	r1, #31
 800e15c:	b538      	push	{r3, r4, r5, lr}
 800e15e:	4604      	mov	r4, r0
 800e160:	460d      	mov	r5, r1
 800e162:	d904      	bls.n	800e16e <_raise_r+0x14>
 800e164:	2316      	movs	r3, #22
 800e166:	6003      	str	r3, [r0, #0]
 800e168:	f04f 30ff 	mov.w	r0, #4294967295
 800e16c:	bd38      	pop	{r3, r4, r5, pc}
 800e16e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e170:	b112      	cbz	r2, 800e178 <_raise_r+0x1e>
 800e172:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e176:	b94b      	cbnz	r3, 800e18c <_raise_r+0x32>
 800e178:	4620      	mov	r0, r4
 800e17a:	f000 f831 	bl	800e1e0 <_getpid_r>
 800e17e:	462a      	mov	r2, r5
 800e180:	4601      	mov	r1, r0
 800e182:	4620      	mov	r0, r4
 800e184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e188:	f000 b818 	b.w	800e1bc <_kill_r>
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d00a      	beq.n	800e1a6 <_raise_r+0x4c>
 800e190:	1c59      	adds	r1, r3, #1
 800e192:	d103      	bne.n	800e19c <_raise_r+0x42>
 800e194:	2316      	movs	r3, #22
 800e196:	6003      	str	r3, [r0, #0]
 800e198:	2001      	movs	r0, #1
 800e19a:	e7e7      	b.n	800e16c <_raise_r+0x12>
 800e19c:	2400      	movs	r4, #0
 800e19e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	4798      	blx	r3
 800e1a6:	2000      	movs	r0, #0
 800e1a8:	e7e0      	b.n	800e16c <_raise_r+0x12>
	...

0800e1ac <raise>:
 800e1ac:	4b02      	ldr	r3, [pc, #8]	; (800e1b8 <raise+0xc>)
 800e1ae:	4601      	mov	r1, r0
 800e1b0:	6818      	ldr	r0, [r3, #0]
 800e1b2:	f7ff bfd2 	b.w	800e15a <_raise_r>
 800e1b6:	bf00      	nop
 800e1b8:	20000070 	.word	0x20000070

0800e1bc <_kill_r>:
 800e1bc:	b538      	push	{r3, r4, r5, lr}
 800e1be:	4d07      	ldr	r5, [pc, #28]	; (800e1dc <_kill_r+0x20>)
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	4604      	mov	r4, r0
 800e1c4:	4608      	mov	r0, r1
 800e1c6:	4611      	mov	r1, r2
 800e1c8:	602b      	str	r3, [r5, #0]
 800e1ca:	f7f3 fd79 	bl	8001cc0 <_kill>
 800e1ce:	1c43      	adds	r3, r0, #1
 800e1d0:	d102      	bne.n	800e1d8 <_kill_r+0x1c>
 800e1d2:	682b      	ldr	r3, [r5, #0]
 800e1d4:	b103      	cbz	r3, 800e1d8 <_kill_r+0x1c>
 800e1d6:	6023      	str	r3, [r4, #0]
 800e1d8:	bd38      	pop	{r3, r4, r5, pc}
 800e1da:	bf00      	nop
 800e1dc:	20004ecc 	.word	0x20004ecc

0800e1e0 <_getpid_r>:
 800e1e0:	f7f3 bd66 	b.w	8001cb0 <_getpid>

0800e1e4 <round>:
 800e1e4:	ee10 1a90 	vmov	r1, s1
 800e1e8:	f3c1 500a 	ubfx	r0, r1, #20, #11
 800e1ec:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 800e1f0:	2a13      	cmp	r2, #19
 800e1f2:	b510      	push	{r4, lr}
 800e1f4:	ee10 3a10 	vmov	r3, s0
 800e1f8:	dc19      	bgt.n	800e22e <round+0x4a>
 800e1fa:	2a00      	cmp	r2, #0
 800e1fc:	da09      	bge.n	800e212 <round+0x2e>
 800e1fe:	3201      	adds	r2, #1
 800e200:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e204:	d103      	bne.n	800e20e <round+0x2a>
 800e206:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800e20a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e20e:	2000      	movs	r0, #0
 800e210:	e027      	b.n	800e262 <round+0x7e>
 800e212:	4816      	ldr	r0, [pc, #88]	; (800e26c <round+0x88>)
 800e214:	4110      	asrs	r0, r2
 800e216:	ea01 0400 	and.w	r4, r1, r0
 800e21a:	4323      	orrs	r3, r4
 800e21c:	d00e      	beq.n	800e23c <round+0x58>
 800e21e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e222:	fa43 f202 	asr.w	r2, r3, r2
 800e226:	4411      	add	r1, r2
 800e228:	ea21 0100 	bic.w	r1, r1, r0
 800e22c:	e7ef      	b.n	800e20e <round+0x2a>
 800e22e:	2a33      	cmp	r2, #51	; 0x33
 800e230:	dd05      	ble.n	800e23e <round+0x5a>
 800e232:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e236:	d101      	bne.n	800e23c <round+0x58>
 800e238:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e23c:	bd10      	pop	{r4, pc}
 800e23e:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 800e242:	f04f 30ff 	mov.w	r0, #4294967295
 800e246:	fa20 f404 	lsr.w	r4, r0, r4
 800e24a:	4223      	tst	r3, r4
 800e24c:	d0f6      	beq.n	800e23c <round+0x58>
 800e24e:	2001      	movs	r0, #1
 800e250:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800e254:	fa00 f202 	lsl.w	r2, r0, r2
 800e258:	189b      	adds	r3, r3, r2
 800e25a:	bf28      	it	cs
 800e25c:	1809      	addcs	r1, r1, r0
 800e25e:	ea23 0004 	bic.w	r0, r3, r4
 800e262:	460b      	mov	r3, r1
 800e264:	4602      	mov	r2, r0
 800e266:	ec43 2b10 	vmov	d0, r2, r3
 800e26a:	e7e7      	b.n	800e23c <round+0x58>
 800e26c:	000fffff 	.word	0x000fffff

0800e270 <_init>:
 800e270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e272:	bf00      	nop
 800e274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e276:	bc08      	pop	{r3}
 800e278:	469e      	mov	lr, r3
 800e27a:	4770      	bx	lr

0800e27c <_fini>:
 800e27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e27e:	bf00      	nop
 800e280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e282:	bc08      	pop	{r3}
 800e284:	469e      	mov	lr, r3
 800e286:	4770      	bx	lr
