
prueba_librerias.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f558  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f4  0800f758  0800f758  0001f758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff4c  0800ff4c  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff4c  0800ff4c  0001ff4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff54  0800ff54  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff54  0800ff54  0001ff54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff58  0800ff58  0001ff58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800ff5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e1c  20000244  080101a0  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005060  080101a0  00025060  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002500d  00000000  00000000  00020272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000448d  00000000  00000000  0004527f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  00049710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c8  00000000  00000000  0004ae60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ea6  00000000  00000000  0004c428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c938  00000000  00000000  000512ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108e79  00000000  00000000  0006dc06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176a7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007618  00000000  00000000  00176ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000244 	.word	0x20000244
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f740 	.word	0x0800f740

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000248 	.word	0x20000248
 800023c:	0800f740 	.word	0x0800f740

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <r9ds_getChannels>:
.zero_channels=ZERO_CHANNELS,.threshold=THRESHOLD};



r9ds_status_t r9ds_getChannels(r9ds_t *device)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
;
for(int i=0;i<10;i++) device->channels[i]=0;
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	e008      	b.n	80009f0 <r9ds_getChannels+0x20>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	3210      	adds	r2, #16
 80009e4:	2100      	movs	r1, #0
 80009e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	3301      	adds	r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2b09      	cmp	r3, #9
 80009f4:	ddf3      	ble.n	80009de <r9ds_getChannels+0xe>
	if (r9ds_readData(device))
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f000 f92c 	bl	8000c54 <r9ds_readData>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 8107 	beq.w	8000c12 <r9ds_getChannels+0x242>
	{
	    for(int i=0;i<26;i++){
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	e00e      	b.n	8000a28 <r9ds_getChannels+0x58>
		    device->buffer[i]=device->buffer_rf[i+1];
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	330c      	adds	r3, #12
 8000a1e:	460a      	mov	r2, r1
 8000a20:	701a      	strb	r2, [r3, #0]
	    for(int i=0;i<26;i++){
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	3301      	adds	r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	2b19      	cmp	r3, #25
 8000a2c:	dded      	ble.n	8000a0a <r9ds_getChannels+0x3a>
	    }
		if (device->buffer[0] == R12DS_STARTBYTE && device->buffer[24] == R12DS_FOOTERBYTE)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	7b1b      	ldrb	r3, [r3, #12]
 8000a32:	2b0f      	cmp	r3, #15
 8000a34:	f040 80ca 	bne.w	8000bcc <r9ds_getChannels+0x1fc>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 80c4 	bne.w	8000bcc <r9ds_getChannels+0x1fc>
		{

			device->channels[0] = ((device->buffer[1] | device->buffer[2] << 8) & 0x07FF);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	7b5b      	ldrb	r3, [r3, #13]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	7b9b      	ldrb	r3, [r3, #14]
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	4313      	orrs	r3, r2
 8000a52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	641a      	str	r2, [r3, #64]	; 0x40
			device->channels[1] = ((device->buffer[2] >> 3 | device->buffer[3] << 5) & 0x07FF);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	7b9b      	ldrb	r3, [r3, #14]
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	461a      	mov	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7bdb      	ldrb	r3, [r3, #15]
 8000a68:	015b      	lsls	r3, r3, #5
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	645a      	str	r2, [r3, #68]	; 0x44
			device->channels[2] = ((device->buffer[3] >> 6 | device->buffer[4] << 2 | device->buffer[5] << 10) & 0x07FF);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	7bdb      	ldrb	r3, [r3, #15]
 8000a78:	099b      	lsrs	r3, r3, #6
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	7c1b      	ldrb	r3, [r3, #16]
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	431a      	orrs	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	7c5b      	ldrb	r3, [r3, #17]
 8000a8a:	029b      	lsls	r3, r3, #10
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	649a      	str	r2, [r3, #72]	; 0x48
			device->channels[3] = ((device->buffer[5] >> 1 | device->buffer[6] << 7) & 0x07FF);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	7c5b      	ldrb	r3, [r3, #17]
 8000a9a:	085b      	lsrs	r3, r3, #1
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	7c9b      	ldrb	r3, [r3, #18]
 8000aa4:	01db      	lsls	r3, r3, #7
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	64da      	str	r2, [r3, #76]	; 0x4c
			device->channels[4] = ((device->buffer[6] >> 4 | device->buffer[7] << 4) & 0x07FF);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7c9b      	ldrb	r3, [r3, #18]
 8000ab4:	091b      	lsrs	r3, r3, #4
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7cdb      	ldrb	r3, [r3, #19]
 8000abe:	011b      	lsls	r3, r3, #4
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	651a      	str	r2, [r3, #80]	; 0x50
			device->channels[5] = ((device->buffer[7] >> 7 | device->buffer[8] << 1 |device-> buffer[9] << 9) & 0x07FF);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	7cdb      	ldrb	r3, [r3, #19]
 8000ace:	09db      	lsrs	r3, r3, #7
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	7d1b      	ldrb	r3, [r3, #20]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	431a      	orrs	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7d5b      	ldrb	r3, [r3, #21]
 8000ae0:	025b      	lsls	r3, r3, #9
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	655a      	str	r2, [r3, #84]	; 0x54
			device->channels[6] = ((device->buffer[9] >> 2 | device->buffer[10] << 6) & 0x07FF);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	7d5b      	ldrb	r3, [r3, #21]
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	461a      	mov	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7d9b      	ldrb	r3, [r3, #22]
 8000afa:	019b      	lsls	r3, r3, #6
 8000afc:	4313      	orrs	r3, r2
 8000afe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	659a      	str	r2, [r3, #88]	; 0x58
			device->channels[7] = ((device->buffer[10] >> 5 | device->buffer[11] << 3) & 0x07FF);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7d9b      	ldrb	r3, [r3, #22]
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	461a      	mov	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	7ddb      	ldrb	r3, [r3, #23]
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	4313      	orrs	r3, r2
 8000b18:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	65da      	str	r2, [r3, #92]	; 0x5c
			device->channels[8] = ((device->buffer[12] | device->buffer[13] << 8) & 0x07FF);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	7e1b      	ldrb	r3, [r3, #24]
 8000b24:	461a      	mov	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7e5b      	ldrb	r3, [r3, #25]
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	661a      	str	r2, [r3, #96]	; 0x60
			device->channels[9] = ((device->buffer[13] >> 3 | device->buffer[14] << 5) & 0x07FF);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	7e5b      	ldrb	r3, [r3, #25]
 8000b3a:	08db      	lsrs	r3, r3, #3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7e9b      	ldrb	r3, [r3, #26]
 8000b44:	015b      	lsls	r3, r3, #5
 8000b46:	4313      	orrs	r3, r2
 8000b48:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	665a      	str	r2, [r3, #100]	; 0x64

			printf("canal 1 %d\n",device->channels[0]);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	4619      	mov	r1, r3
 8000b56:	4834      	ldr	r0, [pc, #208]	; (8000c28 <r9ds_getChannels+0x258>)
 8000b58:	f00b f904 	bl	800bd64 <iprintf>
			printf("canal 2 %d\n",device->channels[1]);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b60:	4619      	mov	r1, r3
 8000b62:	4832      	ldr	r0, [pc, #200]	; (8000c2c <r9ds_getChannels+0x25c>)
 8000b64:	f00b f8fe 	bl	800bd64 <iprintf>
			printf("canal 3 %d\n",device->channels[2]);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4830      	ldr	r0, [pc, #192]	; (8000c30 <r9ds_getChannels+0x260>)
 8000b70:	f00b f8f8 	bl	800bd64 <iprintf>
			printf("canal 4 %d\n",device->channels[3]);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b78:	4619      	mov	r1, r3
 8000b7a:	482e      	ldr	r0, [pc, #184]	; (8000c34 <r9ds_getChannels+0x264>)
 8000b7c:	f00b f8f2 	bl	800bd64 <iprintf>
			printf("canal 5 %d\n",device->channels[4]);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b84:	4619      	mov	r1, r3
 8000b86:	482c      	ldr	r0, [pc, #176]	; (8000c38 <r9ds_getChannels+0x268>)
 8000b88:	f00b f8ec 	bl	800bd64 <iprintf>
			printf("canal 6 %d\n",device->channels[5]);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b90:	4619      	mov	r1, r3
 8000b92:	482a      	ldr	r0, [pc, #168]	; (8000c3c <r9ds_getChannels+0x26c>)
 8000b94:	f00b f8e6 	bl	800bd64 <iprintf>
			printf("canal 7 %d\n",device->channels[6]);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4828      	ldr	r0, [pc, #160]	; (8000c40 <r9ds_getChannels+0x270>)
 8000ba0:	f00b f8e0 	bl	800bd64 <iprintf>
			printf("canal 8 %d\n",device->channels[7]);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4826      	ldr	r0, [pc, #152]	; (8000c44 <r9ds_getChannels+0x274>)
 8000bac:	f00b f8da 	bl	800bd64 <iprintf>
			printf("canal 9 %d\n",device->channels[8]);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4824      	ldr	r0, [pc, #144]	; (8000c48 <r9ds_getChannels+0x278>)
 8000bb8:	f00b f8d4 	bl	800bd64 <iprintf>
			printf("canal 10 %d\n",device->channels[9]);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4822      	ldr	r0, [pc, #136]	; (8000c4c <r9ds_getChannels+0x27c>)
 8000bc4:	f00b f8ce 	bl	800bd64 <iprintf>

            //HAL_Delay(1000);

			return R12DS_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e028      	b.n	8000c1e <r9ds_getChannels+0x24e>

		}
		else
		{
			if (device->buffer[0] != R12DS_STARTBYTE)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	7b1b      	ldrb	r3, [r3, #12]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d001      	beq.n	8000bd8 <r9ds_getChannels+0x208>
			{
#if R12DS_DEBUG
				//printf("bad header \n");
#endif
				return R12DS_BAD_HEADER;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e022      	b.n	8000c1e <r9ds_getChannels+0x24e>
			}
			if (device->buffer[24] != R12DS_FOOTERBYTE)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <r9ds_getChannels+0x216>
			{
#if R12DS_DEBUG
				//printf("bad footer \n");
#endif
				return R12DS_BAD_FOOTER;
 8000be2:	2302      	movs	r3, #2
 8000be4:	e01b      	b.n	8000c1e <r9ds_getChannels+0x24e>
			}
			if (((device->buffer[23] >> 3) & 1))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000bec:	08db      	lsrs	r3, r3, #3
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <r9ds_getChannels+0x22c>
			{
#if R12DS_DEBUG
				//printf("FAILSAFE \n");
#endif
				return R12DS_FAILSAFE_ACTIVATED;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	e010      	b.n	8000c1e <r9ds_getChannels+0x24e>
			}
			if (((device->buffer[23] >> 2) & 1))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d006      	beq.n	8000c1c <r9ds_getChannels+0x24c>
			{
#if R12DS_DEBUG
				//printf("frame lost \n");
#endif
				return R12DS_FRAME_LOST;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	e005      	b.n	8000c1e <r9ds_getChannels+0x24e>
		}
	}
	else
	{
#if R12DS_DEBUG
		printf("timeout \n");
 8000c12:	480f      	ldr	r0, [pc, #60]	; (8000c50 <r9ds_getChannels+0x280>)
 8000c14:	f00b f942 	bl	800be9c <puts>
#endif
		return R12DS_RX_TIMEOUT;
 8000c18:	2305      	movs	r3, #5
 8000c1a:	e000      	b.n	8000c1e <r9ds_getChannels+0x24e>
	}
	return R12DS_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	0800f758 	.word	0x0800f758
 8000c2c:	0800f764 	.word	0x0800f764
 8000c30:	0800f770 	.word	0x0800f770
 8000c34:	0800f77c 	.word	0x0800f77c
 8000c38:	0800f788 	.word	0x0800f788
 8000c3c:	0800f794 	.word	0x0800f794
 8000c40:	0800f7a0 	.word	0x0800f7a0
 8000c44:	0800f7ac 	.word	0x0800f7ac
 8000c48:	0800f7b8 	.word	0x0800f7b8
 8000c4c:	0800f7c4 	.word	0x0800f7c4
 8000c50:	0800f7d4 	.word	0x0800f7d4

08000c54 <r9ds_readData>:




bool r9ds_readData(r9ds_t *device)//
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	//block the use of the uart 

	memset(device->buffer_rf, 0, 26);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3325      	adds	r3, #37	; 0x25
 8000c60:	221a      	movs	r2, #26
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f00a f983 	bl	800af70 <memset>
	osMutexAcquire(*device->mutex_uart_rx, osWaitForever);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	4618      	mov	r0, r3
 8000c76:	f006 fc9f 	bl	80075b8 <osMutexAcquire>
	//block the semaphore until the actual block of sbus data is received, 
	//the idle interruption of uart will free the semaphore for the nextacquisition.
	osSemaphoreAcquire(*device->semaphore_uartIdle, (TickType_t)30* portTICK_PERIOD_MS);// 30->10
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	211e      	movs	r1, #30
 8000c82:	4618      	mov	r0, r3
 8000c84:	f006 fde2 	bl	800784c <osSemaphoreAcquire>
	bool status;
	//blocks the semaphore until the process of reading is the full sbus is completed
	//if can acquire it means that something happen to the connection 
	if (osSemaphoreAcquire(*device->semaphore_uartIdle, (TickType_t)30* portTICK_PERIOD_MS) == osOK)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	211e      	movs	r1, #30
 8000c90:	4618      	mov	r0, r3
 8000c92:	f006 fddb 	bl	800784c <osSemaphoreAcquire>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d12a      	bne.n	8000cf2 <r9ds_readData+0x9e>
	{
		
		status = HAL_UART_Receive_DMA(device->huart_r9ds,device->buffer_rf, 26) == HAL_OK ? 1 : 0;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6818      	ldr	r0, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3325      	adds	r3, #37	; 0x25
 8000ca4:	221a      	movs	r2, #26
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f004 ffba 	bl	8005c20 <HAL_UART_Receive_DMA>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	bf0c      	ite	eq
 8000cb2:	2301      	moveq	r3, #1
 8000cb4:	2300      	movne	r3, #0
 8000cb6:	73fb      	strb	r3, [r7, #15]

		//checks that the semaphore really was release by the idle interruption
		if (osSemaphoreAcquire(*device->semaphore_uartIdle, (TickType_t)30* portTICK_PERIOD_MS) != osOK || status == false)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	211e      	movs	r1, #30
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f006 fdc3 	bl	800784c <osSemaphoreAcquire>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d105      	bne.n	8000cd8 <r9ds_readData+0x84>
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	f083 0301 	eor.w	r3, r3, #1
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <r9ds_readData+0x88>
		{
			status = false;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]
		}
		HAL_UART_DMAStop(device->huart_r9ds);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f004 ffeb 	bl	8005cbc <HAL_UART_DMAStop>
#if R12DS_DEBUG
		printf("R: %s \n",device->buffer_rf);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3325      	adds	r3, #37	; 0x25
 8000cea:	4619      	mov	r1, r3
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <r9ds_readData+0xc0>)
 8000cee:	f00b f839 	bl	800bd64 <iprintf>
#endif
	}
	//release the semaphore for the next acquisition
	osSemaphoreRelease(*device->semaphore_uartIdle);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f006 fe0d 	bl	8007918 <osSemaphoreRelease>
	//release the uart interface
	osMutexRelease(*device->mutex_uart_rx);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f006 fcb5 	bl	8007674 <osMutexRelease>
	return status;
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	0800f7e0 	.word	0x0800f7e0

08000d18 <updateCallback>:


void updateCallback(r9ds_t* device)
    {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b096      	sub	sp, #88	; 0x58
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
        data_rec.brake.change = (data_.brake.value != data_rec.brake.value) ? 1 : 0;

        data_rec.elecValOnOff.value = convertSwitch(device->channels[CH_ELECVAL_ONOFF]);
        data_rec.elecValOnOff.change=  (data_.elecValOnOff.value != data_rec.elecValOnOff.value) ? 1 : 0;
        */
        data_rec.brushesOnOff.value = convertSwitch(device->channels[CH_BRU_ONOFF]);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f905 	bl	8000f34 <convertSwitch>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a7c      	ldr	r2, [pc, #496]	; (8000f20 <updateCallback+0x208>)
 8000d2e:	61d3      	str	r3, [r2, #28]
        data_rec.brushesOnOff.change = (data_.brushesOnOff.value != data_rec.brushesOnOff.value) ? 1 : 0;
 8000d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d32:	4b7b      	ldr	r3, [pc, #492]	; (8000f20 <updateCallback+0x208>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	bf14      	ite	ne
 8000d3a:	2301      	movne	r3, #1
 8000d3c:	2300      	moveq	r3, #0
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	4b77      	ldr	r3, [pc, #476]	; (8000f20 <updateCallback+0x208>)
 8000d42:	761a      	strb	r2, [r3, #24]

        device->BRU_ONOFF= data_rec.brushesOnOff.value;
 8000d44:	4b76      	ldr	r3, [pc, #472]	; (8000f20 <updateCallback+0x208>)
 8000d46:	69da      	ldr	r2, [r3, #28]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	671a      	str	r2, [r3, #112]	; 0x70


        data_rec.vel_orugas.value =  convert3Switch(device->channels[ CH_VEL_ORUGAS]); //data_rec.elecValOnOff.value ? convert3Switch(device->channels[CH_ELECVAL]) : 0;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f921 	bl	8000f98 <convert3Switch>
 8000d56:	4603      	mov	r3, r0
 8000d58:	4a71      	ldr	r2, [pc, #452]	; (8000f20 <updateCallback+0x208>)
 8000d5a:	6253      	str	r3, [r2, #36]	; 0x24
        data_rec.vel_orugas.change = (data_.vel_orugas.value != data_rec.vel_orugas.value) ? 1 : 0;
 8000d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d5e:	4b70      	ldr	r3, [pc, #448]	; (8000f20 <updateCallback+0x208>)
 8000d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d62:	429a      	cmp	r2, r3
 8000d64:	bf14      	ite	ne
 8000d66:	2301      	movne	r3, #1
 8000d68:	2300      	moveq	r3, #0
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b6c      	ldr	r3, [pc, #432]	; (8000f20 <updateCallback+0x208>)
 8000d6e:	f883 2020 	strb.w	r2, [r3, #32]
        device->vel_orugas=data_rec.vel_orugas.value;
 8000d72:	4b6b      	ldr	r3, [pc, #428]	; (8000f20 <updateCallback+0x208>)
 8000d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	679a      	str	r2, [r3, #120]	; 0x78
        printf("vel_orugas %d\n", device->vel_orugas);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4868      	ldr	r0, [pc, #416]	; (8000f24 <updateCallback+0x20c>)
 8000d82:	f00a ffef 	bl	800bd64 <iprintf>

        device->brushes = convert3Switch(device->channels[CH_BRU_1_2_ONOFF]);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f904 	bl	8000f98 <convert3Switch>
 8000d90:	4602      	mov	r2, r0
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	675a      	str	r2, [r3, #116]	; 0x74

        data_rec.brush.value=device->brushes;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d9a:	4a61      	ldr	r2, [pc, #388]	; (8000f20 <updateCallback+0x208>)
 8000d9c:	62d3      	str	r3, [r2, #44]	; 0x2c
        data_rec.brush.value= (data_.brush.value != data_rec.brush.value) ? 1 : 0;
 8000d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000da0:	4b5f      	ldr	r3, [pc, #380]	; (8000f20 <updateCallback+0x208>)
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	429a      	cmp	r2, r3
 8000da6:	bf14      	ite	ne
 8000da8:	2301      	movne	r3, #1
 8000daa:	2300      	moveq	r3, #0
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b5b      	ldr	r3, [pc, #364]	; (8000f20 <updateCallback+0x208>)
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
        data_rec.frontBrushSpeed.value = ((device->brushes == 1 || device->brushes == 2) && data_rec.brushesOnOff.value)
                                       ? convertKnob(device->channels[CH_BRU0_VEL],
                                                     rf_.max_speed_brush, rf_.min_speed_brush)
                                       : 0.0;
        */
        data_rec.frontBrushSpeed.change = (data_.frontBrushSpeed.value != data_rec.frontBrushSpeed.value) ? 1 : 0;
 8000db4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000db6:	4b5a      	ldr	r3, [pc, #360]	; (8000f20 <updateCallback+0x208>)
 8000db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	bf14      	ite	ne
 8000dbe:	2301      	movne	r3, #1
 8000dc0:	2300      	moveq	r3, #0
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b56      	ldr	r3, [pc, #344]	; (8000f20 <updateCallback+0x208>)
 8000dc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        data_rec.backBrushSpeed.value = ((device->brushes == 3 ||device->brushes == 2) && data_rec.brushesOnOff.value)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d003      	beq.n	8000dda <updateCallback+0xc2>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d119      	bne.n	8000e0e <updateCallback+0xf6>
 8000dda:	4b51      	ldr	r3, [pc, #324]	; (8000f20 <updateCallback+0x208>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d015      	beq.n	8000e0e <updateCallback+0xf6>
                                      ? convertKnob(device->channels[CH_BRU1_VEL], rf_.max_speed_brush, rf_.min_speed_brush)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de6:	4a50      	ldr	r2, [pc, #320]	; (8000f28 <updateCallback+0x210>)
 8000de8:	edd2 7a04 	vldr	s15, [r2, #16]
 8000dec:	4a4e      	ldr	r2, [pc, #312]	; (8000f28 <updateCallback+0x210>)
 8000dee:	ed92 7a05 	vldr	s14, [r2, #20]
 8000df2:	eef0 0a47 	vmov.f32	s1, s14
 8000df6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f910 	bl	8001020 <convertKnob>
 8000e00:	eef0 7a40 	vmov.f32	s15, s0
        data_rec.backBrushSpeed.value = ((device->brushes == 3 ||device->brushes == 2) && data_rec.brushesOnOff.value)
 8000e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e08:	ee17 2a90 	vmov	r2, s15
 8000e0c:	e000      	b.n	8000e10 <updateCallback+0xf8>
 8000e0e:	2200      	movs	r2, #0
 8000e10:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <updateCallback+0x208>)
 8000e12:	63da      	str	r2, [r3, #60]	; 0x3c
                                      : 0.0;
        data_rec.backBrushSpeed.change = (data_.backBrushSpeed.value != data_rec.backBrushSpeed.value) ? 1 : 0;
 8000e14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000e16:	4b42      	ldr	r3, [pc, #264]	; (8000f20 <updateCallback+0x208>)
 8000e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	bf14      	ite	ne
 8000e1e:	2301      	movne	r3, #1
 8000e20:	2300      	moveq	r3, #0
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b3e      	ldr	r3, [pc, #248]	; (8000f20 <updateCallback+0x208>)
 8000e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        data_rec.robotLinearVelocity.value = convertKnob(device->channels[CH_LIN_VEL], rf_.min_speed_linear, rf_.max_speed_linear);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a3e      	ldr	r2, [pc, #248]	; (8000f28 <updateCallback+0x210>)
 8000e30:	edd2 7a01 	vldr	s15, [r2, #4]
 8000e34:	4a3c      	ldr	r2, [pc, #240]	; (8000f28 <updateCallback+0x210>)
 8000e36:	ed92 7a00 	vldr	s14, [r2]
 8000e3a:	eef0 0a47 	vmov.f32	s1, s14
 8000e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f8ec 	bl	8001020 <convertKnob>
 8000e48:	eef0 7a40 	vmov.f32	s15, s0
 8000e4c:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <updateCallback+0x208>)
 8000e4e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
        data_rec.robotLinearVelocity.change = (data_.robotLinearVelocity.value != data_rec.robotLinearVelocity.value) ? 1 : 0;
 8000e52:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000e56:	4b32      	ldr	r3, [pc, #200]	; (8000f20 <updateCallback+0x208>)
 8000e58:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000e5c:	eeb4 7a67 	vcmp.f32	s14, s15
 8000e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e64:	bf14      	ite	ne
 8000e66:	2301      	movne	r3, #1
 8000e68:	2300      	moveq	r3, #0
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <updateCallback+0x208>)
 8000e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        if ( data_rec.robotLinearVelocity.value > 1 ){
 8000e72:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <updateCallback+0x208>)
 8000e74:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e84:	dd03      	ble.n	8000e8e <updateCallback+0x176>
        	data_rec.robotLinearVelocity.value=1;
 8000e86:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <updateCallback+0x208>)
 8000e88:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e8c:	645a      	str	r2, [r3, #68]	; 0x44
        }
        device->control= data_rec.robotLinearVelocity.value ;
 8000e8e:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <updateCallback+0x208>)
 8000e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	669a      	str	r2, [r3, #104]	; 0x68
        printf(" value_lineal: %f\n",device->control);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8000e9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ea0:	ec53 2b17 	vmov	r2, r3, d7
 8000ea4:	4821      	ldr	r0, [pc, #132]	; (8000f2c <updateCallback+0x214>)
 8000ea6:	f00a ff5d 	bl	800bd64 <iprintf>

        data_rec.robotAngularVelocity.value = convertKnob(device->channels[CH_ANG_VEL],rf_.min_speed_angular, rf_.max_speed_angular);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	4a1e      	ldr	r2, [pc, #120]	; (8000f28 <updateCallback+0x210>)
 8000eb0:	edd2 7a03 	vldr	s15, [r2, #12]
 8000eb4:	4a1c      	ldr	r2, [pc, #112]	; (8000f28 <updateCallback+0x210>)
 8000eb6:	ed92 7a02 	vldr	s14, [r2, #8]
 8000eba:	eef0 0a47 	vmov.f32	s1, s14
 8000ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f8ac 	bl	8001020 <convertKnob>
 8000ec8:	eef0 7a40 	vmov.f32	s15, s0
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <updateCallback+0x208>)
 8000ece:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
        data_rec.robotAngularVelocity.change = (data_.robotAngularVelocity.value != data_rec.robotAngularVelocity.value) ? 1 : 0;
 8000ed2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <updateCallback+0x208>)
 8000ed8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000edc:	eeb4 7a67 	vcmp.f32	s14, s15
 8000ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee4:	bf14      	ite	ne
 8000ee6:	2301      	movne	r3, #1
 8000ee8:	2300      	moveq	r3, #0
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <updateCallback+0x208>)
 8000eee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        device->control_w= - data_rec.robotAngularVelocity.value ;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <updateCallback+0x208>)
 8000ef4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000ef8:	eef1 7a67 	vneg.f32	s15, s15
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
        printf(" value_angular: %f\n",device->control_w);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8000f08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f0c:	ec53 2b17 	vmov	r2, r3, d7
 8000f10:	4807      	ldr	r0, [pc, #28]	; (8000f30 <updateCallback+0x218>)
 8000f12:	f00a ff27 	bl	800bd64 <iprintf>
        //data_ = data_rec;

        //callback_rf_();
        return data_rec;
 8000f16:	bf00      	nop
    }
 8000f18:	3758      	adds	r7, #88	; 0x58
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20004c34 	.word	0x20004c34
 8000f24:	0800f7e8 	.word	0x0800f7e8
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	0800f7f8 	.word	0x0800f7f8
 8000f30:	0800f80c 	.word	0x0800f80c

08000f34 <convertSwitch>:

int convertSwitch(int value)
    {   
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
        //
		if (value < rf_.upper_limit_channels + rf_.threshold && value > rf_.upper_limit_channels - rf_.threshold)
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <convertSwitch+0x60>)
 8000f3e:	699a      	ldr	r2, [r3, #24]
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <convertSwitch+0x60>)
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	4413      	add	r3, r2
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	da09      	bge.n	8000f60 <convertSwitch+0x2c>
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <convertSwitch+0x60>)
 8000f4e:	699a      	ldr	r2, [r3, #24]
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <convertSwitch+0x60>)
 8000f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	dd01      	ble.n	8000f60 <convertSwitch+0x2c>
            return 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e013      	b.n	8000f88 <convertSwitch+0x54>
        if (value < rf_.lower_limit_channels + rf_.threshold && value > rf_.lower_limit_channels - rf_.threshold)
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <convertSwitch+0x60>)
 8000f62:	69da      	ldr	r2, [r3, #28]
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <convertSwitch+0x60>)
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	4413      	add	r3, r2
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	da09      	bge.n	8000f84 <convertSwitch+0x50>
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <convertSwitch+0x60>)
 8000f72:	69da      	ldr	r2, [r3, #28]
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <convertSwitch+0x60>)
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dd01      	ble.n	8000f84 <convertSwitch+0x50>
            return 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	e001      	b.n	8000f88 <convertSwitch+0x54>
        return -1;
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
    }
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	20000000 	.word	0x20000000

08000f98 <convert3Switch>:
int convert3Switch(int value)
    {
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
        if (value < rf_.zero_channels + rf_.threshold && value > rf_.zero_channels - rf_.threshold)
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <convert3Switch+0x84>)
 8000fa2:	6a1a      	ldr	r2, [r3, #32]
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <convert3Switch+0x84>)
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	4413      	add	r3, r2
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	da09      	bge.n	8000fc4 <convert3Switch+0x2c>
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <convert3Switch+0x84>)
 8000fb2:	6a1a      	ldr	r2, [r3, #32]
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <convert3Switch+0x84>)
 8000fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	dd01      	ble.n	8000fc4 <convert3Switch+0x2c>

            return 2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	e025      	b.n	8001010 <convert3Switch+0x78>

        if (value < rf_.upper_limit_channels + rf_.threshold && value > rf_.upper_limit_channels - rf_.threshold)
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <convert3Switch+0x84>)
 8000fc6:	699a      	ldr	r2, [r3, #24]
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <convert3Switch+0x84>)
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	4413      	add	r3, r2
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	da09      	bge.n	8000fe8 <convert3Switch+0x50>
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <convert3Switch+0x84>)
 8000fd6:	699a      	ldr	r2, [r3, #24]
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <convert3Switch+0x84>)
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dd01      	ble.n	8000fe8 <convert3Switch+0x50>

            return 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e013      	b.n	8001010 <convert3Switch+0x78>

        if (value < rf_.lower_limit_channels + rf_.threshold && value > rf_.lower_limit_channels - rf_.threshold)
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <convert3Switch+0x84>)
 8000fea:	69da      	ldr	r2, [r3, #28]
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <convert3Switch+0x84>)
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	4413      	add	r3, r2
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	da09      	bge.n	800100c <convert3Switch+0x74>
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <convert3Switch+0x84>)
 8000ffa:	69da      	ldr	r2, [r3, #28]
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <convert3Switch+0x84>)
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dd01      	ble.n	800100c <convert3Switch+0x74>

            return 3;
 8001008:	2303      	movs	r3, #3
 800100a:	e001      	b.n	8001010 <convert3Switch+0x78>
        return -1;
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
    }
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	20000000 	.word	0x20000000

08001020 <convertKnob>:

float convertKnob(int value, float upper_lim, float lower_lim)
    {
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	ed87 0a02 	vstr	s0, [r7, #8]
 800102c:	edc7 0a01 	vstr	s1, [r7, #4]
        if (value < rf_.zero_channels + 20 && value > rf_.zero_channels - 20)
 8001030:	4b26      	ldr	r3, [pc, #152]	; (80010cc <convertKnob+0xac>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	3313      	adds	r3, #19
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	429a      	cmp	r2, r3
 800103a:	dc08      	bgt.n	800104e <convertKnob+0x2e>
 800103c:	4b23      	ldr	r3, [pc, #140]	; (80010cc <convertKnob+0xac>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	3b13      	subs	r3, #19
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	db02      	blt.n	800104e <convertKnob+0x2e>
            return 0;
 8001048:	f04f 0300 	mov.w	r3, #0
 800104c:	e034      	b.n	80010b8 <convertKnob+0x98>


        else if (value > rf_.lower_limit_channels - 50 && value < rf_.upper_limit_channels + 50)
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <convertKnob+0xac>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	3b31      	subs	r3, #49	; 0x31
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	429a      	cmp	r2, r3
 8001058:	db2c      	blt.n	80010b4 <convertKnob+0x94>
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <convertKnob+0xac>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	3331      	adds	r3, #49	; 0x31
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	429a      	cmp	r2, r3
 8001064:	dc26      	bgt.n	80010b4 <convertKnob+0x94>
        {
            float m = (float)(upper_lim-lower_lim) / (float)(rf_.upper_limit_channels - rf_.lower_limit_channels);
 8001066:	ed97 7a02 	vldr	s14, [r7, #8]
 800106a:	edd7 7a01 	vldr	s15, [r7, #4]
 800106e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <convertKnob+0xac>)
 8001074:	699a      	ldr	r2, [r3, #24]
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <convertKnob+0xac>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001088:	edc7 7a05 	vstr	s15, [r7, #20]
            float ca=m*(float)(value - rf_.lower_limit_channels) + lower_lim;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <convertKnob+0xac>)
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800109c:	edd7 7a05 	vldr	s15, [r7, #20]
 80010a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80010a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ac:	edc7 7a04 	vstr	s15, [r7, #16]
            //printf("valor = %f\n",ca);
            return ca;
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	e001      	b.n	80010b8 <convertKnob+0x98>
        }
        return 0;
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	ee07 3a90 	vmov	s15, r3
    }
 80010bc:	eeb0 0a67 	vmov.f32	s0, s15
 80010c0:	371c      	adds	r7, #28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000000 	.word	0x20000000

080010d0 <set_speed>:
    }
}


keya_status_t set_speed(keya_t *device, int *velocity_wheels)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]

    sprintf(da, "!M %d %d", velocity_wheels[0], velocity_wheels[1]);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3304      	adds	r3, #4
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4906      	ldr	r1, [pc, #24]	; (8001100 <set_speed+0x30>)
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <set_speed+0x34>)
 80010e8:	f00a ff60 	bl	800bfac <siprintf>
    write_keya(device, da, 15);
 80010ec:	220f      	movs	r2, #15
 80010ee:	4905      	ldr	r1, [pc, #20]	; (8001104 <set_speed+0x34>)
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 f809 	bl	8001108 <write_keya>

    //osDelay(1000);
    //return send_command_reading(device,SET_MOTOR_SPEED, velocity);// command -> + reading
}
 80010f6:	bf00      	nop
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	0800f8a4 	.word	0x0800f8a4
 8001104:	20004c84 	.word	0x20004c84

08001108 <write_keya>:
    }      
    return keya_driver_ok ;  
}

void write_keya(keya_t *device,uint8_t *data, int len)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]

	osMutexAcquire(*device->uartTXsem,osWaitForever);// try to acquire mutex
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f04f 31ff 	mov.w	r1, #4294967295
 800111e:	4618      	mov	r0, r3
 8001120:	f006 fa4a 	bl	80075b8 <osMutexAcquire>
	HAL_UART_Transmit_IT(device->huart, data, len);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	b292      	uxth	r2, r2
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	4618      	mov	r0, r3
 8001130:	f004 fd08 	bl	8005b44 <HAL_UART_Transmit_IT>
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <cmddriver>:
limits_t lim = { .min_driver = DRIVER_MINIMO, .max_driver = DRIVER_MAXIMO,
		.max_vel = MAX_VEL_LINEAL, .min_wheel = MIN_WHEEL, .max_wheel =
				MAX_WHEEL, .min_speed = LINEAR_MIN_VELOCITY, .max_speed =
				LINEAR_MAX_VELOCITY };

void cmddriver(cal_variable_t *device, double* cmd) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]

	device->driver[0] = 0;
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	e9c1 2300 	strd	r2, r3, [r1]
	device->driver[1] = 0;
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	if (cmd[0] != 0 && cmd[1] != 0) {
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	ed93 7b00 	vldr	d7, [r3]
 8001168:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800116c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001170:	d048      	beq.n	8001204 <cmddriver+0xc8>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	3308      	adds	r3, #8
 8001176:	ed93 7b00 	vldr	d7, [r3]
 800117a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800117e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001182:	d03f      	beq.n	8001204 <cmddriver+0xc8>
		for (size_t i = 0; i < 2; i++) {
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	e039      	b.n	80011fe <cmddriver+0xc2>
			device->driver[i] = round(
					(lim.max_driver / lim.max_vel) * (fabs(cmd[i])));
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <cmddriver+0xd0>)
 800118c:	ed93 5b02 	vldr	d5, [r3, #8]
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <cmddriver+0xd0>)
 8001192:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001196:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	4413      	add	r3, r2
 80011a2:	ed93 7b00 	vldr	d7, [r3]
 80011a6:	eeb0 7bc7 	vabs.f64	d7, d7
			device->driver[i] = round(
 80011aa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80011ae:	eeb0 0b47 	vmov.f64	d0, d7
 80011b2:	f00e fa7f 	bl	800f6b4 <round>
 80011b6:	eeb0 7b40 	vmov.f64	d7, d0
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4413      	add	r3, r2
 80011c2:	ed83 7b00 	vstr	d7, [r3]
			if (cmd[i] < 0) {
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	ed93 7b00 	vldr	d7, [r3]
 80011d2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	d50d      	bpl.n	80011f8 <cmddriver+0xbc>
				device->driver[i] = -device->driver[i];
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4413      	add	r3, r2
 80011e4:	ed93 7b00 	vldr	d7, [r3]
 80011e8:	eeb1 7b47 	vneg.f64	d7, d7
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4413      	add	r3, r2
 80011f4:	ed83 7b00 	vstr	d7, [r3]
		for (size_t i = 0; i < 2; i++) {
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d9c2      	bls.n	800118a <cmddriver+0x4e>
		}
	}
#if DEBUG_KIN
	printf("comandos = %f  %f\n", device->driver[0], device->driver[1]);
#endif
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000028 	.word	0x20000028

08001210 <controlvel>:
}

void controlvel(cal_variable_t *device, float velocidad_lineal,
		float velocidad_angular)

{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	ed87 0a02 	vstr	s0, [r7, #8]
 800121c:	edc7 0a01 	vstr	s1, [r7, #4]
	// vt=vr+vl /2 promedio velocidad total
	// si vr>vl gira en el sentido del menor vl
	// si Wr = -Wl sin avance;
	//W= (Vr - Vl )/l   l = SEPARATION;
	//velocidad_lineal=velocidad_lineal*lim.max_speed;
	double Vrl[2] = {0.0, 0.0};
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	e9c7 2306 	strd	r2, r3, [r7, #24]
	Vrl[0] =-(velocidad_lineal - ((velocidad_angular * SEPARATION) / 2));
 8001238:	edd7 7a02 	vldr	s15, [r7, #8]
 800123c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001240:	edd7 7a01 	vldr	s15, [r7, #4]
 8001244:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001248:	ed9f 5b15 	vldr	d5, [pc, #84]	; 80012a0 <controlvel+0x90>
 800124c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001250:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8001254:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001258:	ee36 7b47 	vsub.f64	d7, d6, d7
 800125c:	eeb1 7b47 	vneg.f64	d7, d7
 8001260:	ed87 7b04 	vstr	d7, [r7, #16]
	Vrl[1] = velocidad_lineal + ((velocidad_angular * SEPARATION) / 2);
 8001264:	edd7 7a02 	vldr	s15, [r7, #8]
 8001268:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800126c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001270:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001274:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80012a0 <controlvel+0x90>
 8001278:	ee27 5b05 	vmul.f64	d5, d7, d5
 800127c:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8001280:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001284:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001288:	ed87 7b06 	vstr	d7, [r7, #24]
#if DEBUG_KIN
	printf("velocidad %f %f\n",device->Vrl[0],device->Vrl[1]);
#endif
	cmddriver(device, &Vrl[0]);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f7ff ff52 	bl	800113c <cmddriver>
}
 8001298:	bf00      	nop
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	8d4fdf3b 	.word	0x8d4fdf3b
 80012a4:	3fca6e97 	.word	0x3fca6e97

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ac:	f001 f997 	bl	80025de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b0:	f000 f8a6 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b4:	f000 fbba 	bl	8001a2c <MX_GPIO_Init>
  MX_DMA_Init();
 80012b8:	f000 fb86 	bl	80019c8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80012bc:	f000 fb1c 	bl	80018f8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80012c0:	f000 fb52 	bl	8001968 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80012c4:	f000 f90a 	bl	80014dc <MX_TIM1_Init>
  MX_TIM2_Init();
 80012c8:	f000 f9b4 	bl	8001634 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012cc:	f000 fa28 	bl	8001720 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012d0:	f000 fa9c 	bl	800180c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 80012d4:	4b31      	ldr	r3, [pc, #196]	; (800139c <main+0xf4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <main+0xf4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0210 	orr.w	r2, r2, #16
 80012e2:	601a      	str	r2, [r3, #0]
  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 80012e4:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <main+0xf8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <main+0xf8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0210 	orr.w	r2, r2, #16
 80012f2:	601a      	str	r2, [r3, #0]
  //__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012f4:	f005 ffb6 	bl	8007264 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uartTXmutex */
  uartTXmutexHandle = osMutexNew(&uartTXmutex_attributes);
 80012f8:	482a      	ldr	r0, [pc, #168]	; (80013a4 <main+0xfc>)
 80012fa:	f006 f8c3 	bl	8007484 <osMutexNew>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a29      	ldr	r2, [pc, #164]	; (80013a8 <main+0x100>)
 8001302:	6013      	str	r3, [r2, #0]

  /* creation of uartRXmutex */
  uartRXmutexHandle = osMutexNew(&uartRXmutex_attributes);
 8001304:	4829      	ldr	r0, [pc, #164]	; (80013ac <main+0x104>)
 8001306:	f006 f8bd 	bl	8007484 <osMutexNew>
 800130a:	4603      	mov	r3, r0
 800130c:	4a28      	ldr	r2, [pc, #160]	; (80013b0 <main+0x108>)
 800130e:	6013      	str	r3, [r2, #0]

  /* creation of buff_TXmutex */
  buff_TXmutexHandle = osMutexNew(&buff_TXmutex_attributes);
 8001310:	4828      	ldr	r0, [pc, #160]	; (80013b4 <main+0x10c>)
 8001312:	f006 f8b7 	bl	8007484 <osMutexNew>
 8001316:	4603      	mov	r3, r0
 8001318:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <main+0x110>)
 800131a:	6013      	str	r3, [r2, #0]

  /* creation of buff_RXmutex */
  buff_RXmutexHandle = osMutexNew(&buff_RXmutex_attributes);
 800131c:	4827      	ldr	r0, [pc, #156]	; (80013bc <main+0x114>)
 800131e:	f006 f8b1 	bl	8007484 <osMutexNew>
 8001322:	4603      	mov	r3, r0
 8001324:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <main+0x118>)
 8001326:	6013      	str	r3, [r2, #0]

  /* creation of rf_mutex_uart_rx */
  rf_mutex_uart_rxHandle = osMutexNew(&rf_mutex_uart_rx_attributes);
 8001328:	4826      	ldr	r0, [pc, #152]	; (80013c4 <main+0x11c>)
 800132a:	f006 f8ab 	bl	8007484 <osMutexNew>
 800132e:	4603      	mov	r3, r0
 8001330:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <main+0x120>)
 8001332:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartTXsemIT */
  uartTXsemITHandle = osSemaphoreNew(1, 1, &uartTXsemIT_attributes);
 8001334:	4a25      	ldr	r2, [pc, #148]	; (80013cc <main+0x124>)
 8001336:	2101      	movs	r1, #1
 8001338:	2001      	movs	r0, #1
 800133a:	f006 f9eb 	bl	8007714 <osSemaphoreNew>
 800133e:	4603      	mov	r3, r0
 8001340:	4a23      	ldr	r2, [pc, #140]	; (80013d0 <main+0x128>)
 8001342:	6013      	str	r3, [r2, #0]

  /* creation of uartRXsemIT */
  uartRXsemITHandle = osSemaphoreNew(1, 1, &uartRXsemIT_attributes);
 8001344:	4a23      	ldr	r2, [pc, #140]	; (80013d4 <main+0x12c>)
 8001346:	2101      	movs	r1, #1
 8001348:	2001      	movs	r0, #1
 800134a:	f006 f9e3 	bl	8007714 <osSemaphoreNew>
 800134e:	4603      	mov	r3, r0
 8001350:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <main+0x130>)
 8001352:	6013      	str	r3, [r2, #0]

  /* creation of buff_TXsemIT */
  buff_TXsemITHandle = osSemaphoreNew(1, 1, &buff_TXsemIT_attributes);
 8001354:	4a21      	ldr	r2, [pc, #132]	; (80013dc <main+0x134>)
 8001356:	2101      	movs	r1, #1
 8001358:	2001      	movs	r0, #1
 800135a:	f006 f9db 	bl	8007714 <osSemaphoreNew>
 800135e:	4603      	mov	r3, r0
 8001360:	4a1f      	ldr	r2, [pc, #124]	; (80013e0 <main+0x138>)
 8001362:	6013      	str	r3, [r2, #0]

  /* creation of buff_RXsemIT */
  buff_RXsemITHandle = osSemaphoreNew(1, 1, &buff_RXsemIT_attributes);
 8001364:	4a1f      	ldr	r2, [pc, #124]	; (80013e4 <main+0x13c>)
 8001366:	2101      	movs	r1, #1
 8001368:	2001      	movs	r0, #1
 800136a:	f006 f9d3 	bl	8007714 <osSemaphoreNew>
 800136e:	4603      	mov	r3, r0
 8001370:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <main+0x140>)
 8001372:	6013      	str	r3, [r2, #0]

  /* creation of RF_RXsemIT */
  RF_RXsemITHandle = osSemaphoreNew(1, 1, &RF_RXsemIT_attributes);
 8001374:	4a1d      	ldr	r2, [pc, #116]	; (80013ec <main+0x144>)
 8001376:	2101      	movs	r1, #1
 8001378:	2001      	movs	r0, #1
 800137a:	f006 f9cb 	bl	8007714 <osSemaphoreNew>
 800137e:	4603      	mov	r3, r0
 8001380:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <main+0x148>)
 8001382:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001384:	4a1b      	ldr	r2, [pc, #108]	; (80013f4 <main+0x14c>)
 8001386:	2100      	movs	r1, #0
 8001388:	481b      	ldr	r0, [pc, #108]	; (80013f8 <main+0x150>)
 800138a:	f005 ffd5 	bl	8007338 <osThreadNew>
 800138e:	4603      	mov	r3, r0
 8001390:	4a1a      	ldr	r2, [pc, #104]	; (80013fc <main+0x154>)
 8001392:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001394:	f005 ff9a 	bl	80072cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001398:	e7fe      	b.n	8001398 <main+0xf0>
 800139a:	bf00      	nop
 800139c:	20004ed4 	.word	0x20004ed4
 80013a0:	20004da8 	.word	0x20004da8
 80013a4:	0800f9d4 	.word	0x0800f9d4
 80013a8:	20004fb4 	.word	0x20004fb4
 80013ac:	0800f9e4 	.word	0x0800f9e4
 80013b0:	20004e84 	.word	0x20004e84
 80013b4:	0800f9f4 	.word	0x0800f9f4
 80013b8:	20004fb8 	.word	0x20004fb8
 80013bc:	0800fa04 	.word	0x0800fa04
 80013c0:	20004f58 	.word	0x20004f58
 80013c4:	0800fa14 	.word	0x0800fa14
 80013c8:	20004fb0 	.word	0x20004fb0
 80013cc:	0800fa24 	.word	0x0800fa24
 80013d0:	20004e80 	.word	0x20004e80
 80013d4:	0800fa34 	.word	0x0800fa34
 80013d8:	20004fbc 	.word	0x20004fbc
 80013dc:	0800fa44 	.word	0x0800fa44
 80013e0:	20004e2c 	.word	0x20004e2c
 80013e4:	0800fa54 	.word	0x0800fa54
 80013e8:	20004c94 	.word	0x20004c94
 80013ec:	0800fa64 	.word	0x0800fa64
 80013f0:	20004e7c 	.word	0x20004e7c
 80013f4:	0800f9b0 	.word	0x0800f9b0
 80013f8:	08001b81 	.word	0x08001b81
 80013fc:	20004c98 	.word	0x20004c98

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b094      	sub	sp, #80	; 0x50
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	2234      	movs	r2, #52	; 0x34
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f009 fdae 	bl	800af70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001424:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <SystemClock_Config+0xd4>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	4a2a      	ldr	r2, [pc, #168]	; (80014d4 <SystemClock_Config+0xd4>)
 800142a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142e:	6413      	str	r3, [r2, #64]	; 0x40
 8001430:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <SystemClock_Config+0xd4>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800143c:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <SystemClock_Config+0xd8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a25      	ldr	r2, [pc, #148]	; (80014d8 <SystemClock_Config+0xd8>)
 8001442:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <SystemClock_Config+0xd8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001454:	2301      	movs	r3, #1
 8001456:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145e:	2302      	movs	r3, #2
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001462:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001466:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001468:	2304      	movs	r3, #4
 800146a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800146c:	23d8      	movs	r3, #216	; 0xd8
 800146e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001470:	2302      	movs	r3, #2
 8001472:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001474:	2302      	movs	r3, #2
 8001476:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001478:	2302      	movs	r3, #2
 800147a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4618      	mov	r0, r3
 8001482:	f001 ffcd 	bl	8003420 <HAL_RCC_OscConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800148c:	f000 fcba 	bl	8001e04 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001490:	f001 ff76 	bl	8003380 <HAL_PWREx_EnableOverDrive>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800149a:	f000 fcb3 	bl	8001e04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149e:	230f      	movs	r3, #15
 80014a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a2:	2302      	movs	r3, #2
 80014a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80014b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80014b6:	f107 0308 	add.w	r3, r7, #8
 80014ba:	2107      	movs	r1, #7
 80014bc:	4618      	mov	r0, r3
 80014be:	f002 fa5d 	bl	800397c <HAL_RCC_ClockConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80014c8:	f000 fc9c 	bl	8001e04 <Error_Handler>
  }
}
 80014cc:	bf00      	nop
 80014ce:	3750      	adds	r7, #80	; 0x50
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40007000 	.word	0x40007000

080014dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b09a      	sub	sp, #104	; 0x68
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	615a      	str	r2, [r3, #20]
 800150e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	222c      	movs	r2, #44	; 0x2c
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f009 fd2a 	bl	800af70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800151c:	4b43      	ldr	r3, [pc, #268]	; (800162c <MX_TIM1_Init+0x150>)
 800151e:	4a44      	ldr	r2, [pc, #272]	; (8001630 <MX_TIM1_Init+0x154>)
 8001520:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 108-1;
 8001522:	4b42      	ldr	r3, [pc, #264]	; (800162c <MX_TIM1_Init+0x150>)
 8001524:	226b      	movs	r2, #107	; 0x6b
 8001526:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b40      	ldr	r3, [pc, #256]	; (800162c <MX_TIM1_Init+0x150>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800152e:	4b3f      	ldr	r3, [pc, #252]	; (800162c <MX_TIM1_Init+0x150>)
 8001530:	2263      	movs	r2, #99	; 0x63
 8001532:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001534:	4b3d      	ldr	r3, [pc, #244]	; (800162c <MX_TIM1_Init+0x150>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800153a:	4b3c      	ldr	r3, [pc, #240]	; (800162c <MX_TIM1_Init+0x150>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001540:	4b3a      	ldr	r3, [pc, #232]	; (800162c <MX_TIM1_Init+0x150>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001546:	4839      	ldr	r0, [pc, #228]	; (800162c <MX_TIM1_Init+0x150>)
 8001548:	f003 f874 	bl	8004634 <HAL_TIM_Base_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001552:	f000 fc57 	bl	8001e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800155c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001560:	4619      	mov	r1, r3
 8001562:	4832      	ldr	r0, [pc, #200]	; (800162c <MX_TIM1_Init+0x150>)
 8001564:	f003 fcc6 	bl	8004ef4 <HAL_TIM_ConfigClockSource>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800156e:	f000 fc49 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001572:	482e      	ldr	r0, [pc, #184]	; (800162c <MX_TIM1_Init+0x150>)
 8001574:	f003 f92e 	bl	80047d4 <HAL_TIM_PWM_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800157e:	f000 fc41 	bl	8001e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800158e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001592:	4619      	mov	r1, r3
 8001594:	4825      	ldr	r0, [pc, #148]	; (800162c <MX_TIM1_Init+0x150>)
 8001596:	f004 f95d 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80015a0:	f000 fc30 	bl	8001e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a4:	2360      	movs	r3, #96	; 0x60
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015c4:	2200      	movs	r2, #0
 80015c6:	4619      	mov	r1, r3
 80015c8:	4818      	ldr	r0, [pc, #96]	; (800162c <MX_TIM1_Init+0x150>)
 80015ca:	f003 fb7f 	bl	8004ccc <HAL_TIM_PWM_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80015d4:	f000 fc16 	bl	8001e04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	4619      	mov	r1, r3
 800160c:	4807      	ldr	r0, [pc, #28]	; (800162c <MX_TIM1_Init+0x150>)
 800160e:	f004 f9af 	bl	8005970 <HAL_TIMEx_ConfigBreakDeadTime>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001618:	f000 fbf4 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800161c:	4803      	ldr	r0, [pc, #12]	; (800162c <MX_TIM1_Init+0x150>)
 800161e:	f000 fc79 	bl	8001f14 <HAL_TIM_MspPostInit>

}
 8001622:	bf00      	nop
 8001624:	3768      	adds	r7, #104	; 0x68
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20004e88 	.word	0x20004e88
 8001630:	40010000 	.word	0x40010000

08001634 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	; 0x38
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001654:	463b      	mov	r3, r7
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
 8001662:	615a      	str	r2, [r3, #20]
 8001664:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001666:	4b2d      	ldr	r3, [pc, #180]	; (800171c <MX_TIM2_Init+0xe8>)
 8001668:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800166c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 30;
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <MX_TIM2_Init+0xe8>)
 8001670:	221e      	movs	r2, #30
 8001672:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001674:	4b29      	ldr	r3, [pc, #164]	; (800171c <MX_TIM2_Init+0xe8>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800167a:	4b28      	ldr	r3, [pc, #160]	; (800171c <MX_TIM2_Init+0xe8>)
 800167c:	2264      	movs	r2, #100	; 0x64
 800167e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b26      	ldr	r3, [pc, #152]	; (800171c <MX_TIM2_Init+0xe8>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001686:	4b25      	ldr	r3, [pc, #148]	; (800171c <MX_TIM2_Init+0xe8>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800168c:	4823      	ldr	r0, [pc, #140]	; (800171c <MX_TIM2_Init+0xe8>)
 800168e:	f002 ffd1 	bl	8004634 <HAL_TIM_Base_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001698:	f000 fbb4 	bl	8001e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a6:	4619      	mov	r1, r3
 80016a8:	481c      	ldr	r0, [pc, #112]	; (800171c <MX_TIM2_Init+0xe8>)
 80016aa:	f003 fc23 	bl	8004ef4 <HAL_TIM_ConfigClockSource>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80016b4:	f000 fba6 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016b8:	4818      	ldr	r0, [pc, #96]	; (800171c <MX_TIM2_Init+0xe8>)
 80016ba:	f003 f88b 	bl	80047d4 <HAL_TIM_PWM_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80016c4:	f000 fb9e 	bl	8001e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4619      	mov	r1, r3
 80016d6:	4811      	ldr	r0, [pc, #68]	; (800171c <MX_TIM2_Init+0xe8>)
 80016d8:	f004 f8bc 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80016e2:	f000 fb8f 	bl	8001e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e6:	2360      	movs	r3, #96	; 0x60
 80016e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f6:	463b      	mov	r3, r7
 80016f8:	2200      	movs	r2, #0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4807      	ldr	r0, [pc, #28]	; (800171c <MX_TIM2_Init+0xe8>)
 80016fe:	f003 fae5 	bl	8004ccc <HAL_TIM_PWM_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001708:	f000 fb7c 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <MX_TIM2_Init+0xe8>)
 800170e:	f000 fc01 	bl	8001f14 <HAL_TIM_MspPostInit>

}
 8001712:	bf00      	nop
 8001714:	3738      	adds	r7, #56	; 0x38
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20004f64 	.word	0x20004f64

08001720 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08e      	sub	sp, #56	; 0x38
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001740:	463b      	mov	r3, r7
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	615a      	str	r2, [r3, #20]
 8001750:	619a      	str	r2, [r3, #24]




  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001752:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <MX_TIM3_Init+0xe4>)
 8001754:	4a2c      	ldr	r2, [pc, #176]	; (8001808 <MX_TIM3_Init+0xe8>)
 8001756:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 30;
 8001758:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <MX_TIM3_Init+0xe4>)
 800175a:	221e      	movs	r2, #30
 800175c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175e:	4b29      	ldr	r3, [pc, #164]	; (8001804 <MX_TIM3_Init+0xe4>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001764:	4b27      	ldr	r3, [pc, #156]	; (8001804 <MX_TIM3_Init+0xe4>)
 8001766:	2264      	movs	r2, #100	; 0x64
 8001768:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176a:	4b26      	ldr	r3, [pc, #152]	; (8001804 <MX_TIM3_Init+0xe4>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <MX_TIM3_Init+0xe4>)
 8001772:	2200      	movs	r2, #0
 8001774:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001776:	4823      	ldr	r0, [pc, #140]	; (8001804 <MX_TIM3_Init+0xe4>)
 8001778:	f002 ff5c 	bl	8004634 <HAL_TIM_Base_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001782:	f000 fb3f 	bl	8001e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800178c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001790:	4619      	mov	r1, r3
 8001792:	481c      	ldr	r0, [pc, #112]	; (8001804 <MX_TIM3_Init+0xe4>)
 8001794:	f003 fbae 	bl	8004ef4 <HAL_TIM_ConfigClockSource>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800179e:	f000 fb31 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017a2:	4818      	ldr	r0, [pc, #96]	; (8001804 <MX_TIM3_Init+0xe4>)
 80017a4:	f003 f816 	bl	80047d4 <HAL_TIM_PWM_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80017ae:	f000 fb29 	bl	8001e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	4810      	ldr	r0, [pc, #64]	; (8001804 <MX_TIM3_Init+0xe4>)
 80017c2:	f004 f847 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80017cc:	f000 fb1a 	bl	8001e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d0:	2360      	movs	r3, #96	; 0x60
 80017d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e0:	463b      	mov	r3, r7
 80017e2:	2200      	movs	r2, #0
 80017e4:	4619      	mov	r1, r3
 80017e6:	4807      	ldr	r0, [pc, #28]	; (8001804 <MX_TIM3_Init+0xe4>)
 80017e8:	f003 fa70 	bl	8004ccc <HAL_TIM_PWM_ConfigChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80017f2:	f000 fb07 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017f6:	4803      	ldr	r0, [pc, #12]	; (8001804 <MX_TIM3_Init+0xe4>)
 80017f8:	f000 fb8c 	bl	8001f14 <HAL_TIM_MspPostInit>

}
 80017fc:	bf00      	nop
 80017fe:	3738      	adds	r7, #56	; 0x38
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20004e30 	.word	0x20004e30
 8001808:	40000400 	.word	0x40000400

0800180c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08e      	sub	sp, #56	; 0x38
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800182c:	463b      	mov	r3, r7
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]
 800183a:	615a      	str	r2, [r3, #20]
 800183c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800183e:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <MX_TIM4_Init+0xe4>)
 8001840:	4a2c      	ldr	r2, [pc, #176]	; (80018f4 <MX_TIM4_Init+0xe8>)
 8001842:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108-1;
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <MX_TIM4_Init+0xe4>)
 8001846:	226b      	movs	r2, #107	; 0x6b
 8001848:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184a:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <MX_TIM4_Init+0xe4>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001850:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <MX_TIM4_Init+0xe4>)
 8001852:	2263      	movs	r2, #99	; 0x63
 8001854:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <MX_TIM4_Init+0xe4>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <MX_TIM4_Init+0xe4>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001862:	4823      	ldr	r0, [pc, #140]	; (80018f0 <MX_TIM4_Init+0xe4>)
 8001864:	f002 fee6 	bl	8004634 <HAL_TIM_Base_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800186e:	f000 fac9 	bl	8001e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001878:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800187c:	4619      	mov	r1, r3
 800187e:	481c      	ldr	r0, [pc, #112]	; (80018f0 <MX_TIM4_Init+0xe4>)
 8001880:	f003 fb38 	bl	8004ef4 <HAL_TIM_ConfigClockSource>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800188a:	f000 fabb 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800188e:	4818      	ldr	r0, [pc, #96]	; (80018f0 <MX_TIM4_Init+0xe4>)
 8001890:	f002 ffa0 	bl	80047d4 <HAL_TIM_PWM_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800189a:	f000 fab3 	bl	8001e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	4619      	mov	r1, r3
 80018ac:	4810      	ldr	r0, [pc, #64]	; (80018f0 <MX_TIM4_Init+0xe4>)
 80018ae:	f003 ffd1 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80018b8:	f000 faa4 	bl	8001e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018bc:	2360      	movs	r3, #96	; 0x60
 80018be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018cc:	463b      	mov	r3, r7
 80018ce:	2200      	movs	r2, #0
 80018d0:	4619      	mov	r1, r3
 80018d2:	4807      	ldr	r0, [pc, #28]	; (80018f0 <MX_TIM4_Init+0xe4>)
 80018d4:	f003 f9fa 	bl	8004ccc <HAL_TIM_PWM_ConfigChannel>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80018de:	f000 fa91 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018e2:	4803      	ldr	r0, [pc, #12]	; (80018f0 <MX_TIM4_Init+0xe4>)
 80018e4:	f000 fb16 	bl	8001f14 <HAL_TIM_MspPostInit>

}
 80018e8:	bf00      	nop
 80018ea:	3738      	adds	r7, #56	; 0x38
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20004cfc 	.word	0x20004cfc
 80018f4:	40000800 	.word	0x40000800

080018f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <MX_USART3_UART_Init+0x64>)
 80018fe:	4a18      	ldr	r2, [pc, #96]	; (8001960 <MX_USART3_UART_Init+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <MX_USART3_UART_Init+0x64>)
 8001904:	4a17      	ldr	r2, [pc, #92]	; (8001964 <MX_USART3_UART_Init+0x6c>)
 8001906:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <MX_USART3_UART_Init+0x64>)
 800190a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800190e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <MX_USART3_UART_Init+0x64>)
 8001912:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001916:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8001918:	4b10      	ldr	r3, [pc, #64]	; (800195c <MX_USART3_UART_Init+0x64>)
 800191a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800191e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <MX_USART3_UART_Init+0x64>)
 8001922:	2204      	movs	r2, #4
 8001924:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <MX_USART3_UART_Init+0x64>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <MX_USART3_UART_Init+0x64>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <MX_USART3_UART_Init+0x64>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <MX_USART3_UART_Init+0x64>)
 800193a:	2202      	movs	r2, #2
 800193c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <MX_USART3_UART_Init+0x64>)
 8001940:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001944:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_USART3_UART_Init+0x64>)
 8001948:	f004 f8ae 	bl	8005aa8 <HAL_UART_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 8001952:	f000 fa57 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20004da8 	.word	0x20004da8
 8001960:	40004800 	.word	0x40004800
 8001964:	000186a0 	.word	0x000186a0

08001968 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <MX_USART6_UART_Init+0x58>)
 800196e:	4a15      	ldr	r2, [pc, #84]	; (80019c4 <MX_USART6_UART_Init+0x5c>)
 8001970:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <MX_USART6_UART_Init+0x58>)
 8001974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001978:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_USART6_UART_Init+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_USART6_UART_Init+0x58>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_USART6_UART_Init+0x58>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_USART6_UART_Init+0x58>)
 800198e:	220c      	movs	r2, #12
 8001990:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <MX_USART6_UART_Init+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_USART6_UART_Init+0x58>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <MX_USART6_UART_Init+0x58>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_USART6_UART_Init+0x58>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019aa:	4805      	ldr	r0, [pc, #20]	; (80019c0 <MX_USART6_UART_Init+0x58>)
 80019ac:	f004 f87c 	bl	8005aa8 <HAL_UART_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80019b6:	f000 fa25 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20004ed4 	.word	0x20004ed4
 80019c4:	40011400 	.word	0x40011400

080019c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ce:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <MX_DMA_Init+0x60>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <MX_DMA_Init+0x60>)
 80019d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <MX_DMA_Init+0x60>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <MX_DMA_Init+0x60>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <MX_DMA_Init+0x60>)
 80019ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <MX_DMA_Init+0x60>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2105      	movs	r1, #5
 8001a02:	200c      	movs	r0, #12
 8001a04:	f000 fed0 	bl	80027a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a08:	200c      	movs	r0, #12
 8001a0a:	f000 fee9 	bl	80027e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2105      	movs	r1, #5
 8001a12:	2039      	movs	r0, #57	; 0x39
 8001a14:	f000 fec8 	bl	80027a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001a18:	2039      	movs	r0, #57	; 0x39
 8001a1a:	f000 fee1 	bl	80027e0 <HAL_NVIC_EnableIRQ>

}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a32:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <MX_GPIO_Init+0x8c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a20      	ldr	r2, [pc, #128]	; (8001ab8 <MX_GPIO_Init+0x8c>)
 8001a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <MX_GPIO_Init+0x8c>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_GPIO_Init+0x8c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a1a      	ldr	r2, [pc, #104]	; (8001ab8 <MX_GPIO_Init+0x8c>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_GPIO_Init+0x8c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_GPIO_Init+0x8c>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <MX_GPIO_Init+0x8c>)
 8001a68:	f043 0310 	orr.w	r3, r3, #16
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <MX_GPIO_Init+0x8c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0310 	and.w	r3, r3, #16
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_GPIO_Init+0x8c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <MX_GPIO_Init+0x8c>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_GPIO_Init+0x8c>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_GPIO_Init+0x8c>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <MX_GPIO_Init+0x8c>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_GPIO_Init+0x8c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]

}
 8001aaa:	bf00      	nop
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800

08001abc <USER_UART_IRQHandler>:

/* USER CODE BEGIN 4 */

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
    if(huart == &huart3)                                   //Determine whether it is serial port 1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <USER_UART_IRQHandler+0x38>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d10f      	bne.n	8001aec <USER_UART_IRQHandler+0x30>
    {
        if(RESET != __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <USER_UART_IRQHandler+0x38>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b10      	cmp	r3, #16
 8001ad8:	d108      	bne.n	8001aec <USER_UART_IRQHandler+0x30>
        {
            __HAL_UART_CLEAR_IDLEFLAG(&huart3);                     //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <USER_UART_IRQHandler+0x38>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2210      	movs	r2, #16
 8001ae0:	621a      	str	r2, [r3, #32]
#if DEBUG_KEYA
            //printf("\r\nUART2 Idle IQR Detected\r\n");
#endif
            osSemaphoreRelease(RF_RXsemITHandle);
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <USER_UART_IRQHandler+0x3c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f005 ff16 	bl	8007918 <osSemaphoreRelease>
        }
    }
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20004da8 	.word	0x20004da8
 8001af8:	20004e7c 	.word	0x20004e7c

08001afc <USER_UART_IRQHandler_1>:
}

*/

void USER_UART_IRQHandler_1(UART_HandleTypeDef *huart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
    if(huart == &huart6)                                   //Determine whether it is serial port 1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <USER_UART_IRQHandler_1+0x38>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d10f      	bne.n	8001b2c <USER_UART_IRQHandler_1+0x30>
    {
        if(RESET != __HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <USER_UART_IRQHandler_1+0x38>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	2b10      	cmp	r3, #16
 8001b18:	d108      	bne.n	8001b2c <USER_UART_IRQHandler_1+0x30>
        {
            __HAL_UART_CLEAR_IDLEFLAG(&huart6);                     //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <USER_UART_IRQHandler_1+0x38>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2210      	movs	r2, #16
 8001b20:	621a      	str	r2, [r3, #32]
#if DEBUG_KEYA
            //printf("\r\nUART2 Idle IQR Detected\r\n");
#endif
            osSemaphoreRelease(uartRXsemITHandle);
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <USER_UART_IRQHandler_1+0x3c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f005 fef6 	bl	8007918 <osSemaphoreRelease>
        }
    }
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20004ed4 	.word	0x20004ed4
 8001b38:	20004fbc 	.word	0x20004fbc

08001b3c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	 if(huart == &huart6)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a06      	ldr	r2, [pc, #24]	; (8001b60 <HAL_UART_TxCpltCallback+0x24>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d104      	bne.n	8001b56 <HAL_UART_TxCpltCallback+0x1a>
	 {
		 osSemaphoreRelease(uartTXsemITHandle);
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_UART_TxCpltCallback+0x28>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f005 fee1 	bl	8007918 <osSemaphoreRelease>
	 }
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20004ed4 	.word	0x20004ed4
 8001b64:	20004e80 	.word	0x20004e80

08001b68 <__io_putchar>:


PUTCHAR_PROTOTYPE
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission*/

   //HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 0xFFFF);

  return ch;
 8001b70:	687b      	ldr	r3, [r7, #4]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0d4      	sub	sp, #336	; 0x150
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	uint8_t da[15];
	TIM4 -> CCR1  = 100 ;
 8001b8a:	4b85      	ldr	r3, [pc, #532]	; (8001da0 <StartDefaultTask+0x220>)
 8001b8c:	2264      	movs	r2, #100	; 0x64
 8001b8e:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1 -> CCR1  = 100 ;
 8001b90:	4b84      	ldr	r3, [pc, #528]	; (8001da4 <StartDefaultTask+0x224>)
 8001b92:	2264      	movs	r2, #100	; 0x64
 8001b94:	635a      	str	r2, [r3, #52]	; 0x34
	cal_variable_t  variable={.driver=0};
 8001b96:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001b9a:	2250      	movs	r2, #80	; 0x50
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f009 f9e6 	bl	800af70 <memset>

	r9ds_t  r9ds ={.huart_r9ds=&huart3,.mutex_uart_rx=&rf_mutex_uart_rxHandle,.semaphore_uartIdle=&RF_RXsemITHandle ,
 8001ba4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f009 f9df 	bl	800af70 <memset>
 8001bb2:	4b7d      	ldr	r3, [pc, #500]	; (8001da8 <StartDefaultTask+0x228>)
 8001bb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8001bb6:	4b7d      	ldr	r3, [pc, #500]	; (8001dac <StartDefaultTask+0x22c>)
 8001bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bba:	4b7d      	ldr	r3, [pc, #500]	; (8001db0 <StartDefaultTask+0x230>)
 8001bbc:	663b      	str	r3, [r7, #96]	; 0x60
   */




	keya_t keya_driver ={.huart=&huart6, .uartRXmutex=&uartRXmutexHandle, .uartTXmutex=&uartTXmutexHandle,.uartRXsem=&uartRXsemITHandle,
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	2350      	movs	r3, #80	; 0x50
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	2100      	movs	r1, #0
 8001bca:	f009 f9d1 	bl	800af70 <memset>
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	4a78      	ldr	r2, [pc, #480]	; (8001db4 <StartDefaultTask+0x234>)
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	f107 0308 	add.w	r3, r7, #8
 8001bda:	4a77      	ldr	r2, [pc, #476]	; (8001db8 <StartDefaultTask+0x238>)
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	f107 0308 	add.w	r3, r7, #8
 8001be2:	4a76      	ldr	r2, [pc, #472]	; (8001dbc <StartDefaultTask+0x23c>)
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	4a75      	ldr	r2, [pc, #468]	; (8001dc0 <StartDefaultTask+0x240>)
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	f107 0308 	add.w	r3, r7, #8
 8001bf2:	4a74      	ldr	r2, [pc, #464]	; (8001dc4 <StartDefaultTask+0x244>)
 8001bf4:	611a      	str	r2, [r3, #16]
 8001bf6:	f107 0308 	add.w	r3, r7, #8
 8001bfa:	2232      	movs	r2, #50	; 0x32
 8001bfc:	615a      	str	r2, [r3, #20]
	  TIM1 -> CCR1  = 0 ;
	  TIM2 -> CCR1  = 0 ;
	  TIM3 -> CCR1  = 0 ;
	  TIM4 -> CCR1  = 0 ;
	  */
	  printf("\n");
 8001bfe:	200a      	movs	r0, #10
 8001c00:	f00a f8c8 	bl	800bd94 <putchar>
      printf("prueba rf \n");
 8001c04:	4870      	ldr	r0, [pc, #448]	; (8001dc8 <StartDefaultTask+0x248>)
 8001c06:	f00a f949 	bl	800be9c <puts>
	  r9ds_getChannels(&r9ds);
 8001c0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fede 	bl	80009d0 <r9ds_getChannels>
	  updateCallback(&r9ds);
 8001c14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff f87d 	bl	8000d18 <updateCallback>
	  float velocidad_lineal=r9ds.control;
 8001c1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c22:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	  float velocidad_angular=r9ds.control_w;
 8001c26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c2a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	  int BRUS_ONOFF=r9ds.BRU_ONOFF;
 8001c2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c32:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      int BRUS_1_2=r9ds.brushes;
 8001c36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c3a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
      int VEL_ORUGAS=r9ds.vel_orugas;
 8001c3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c42:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
      printf("escobilla_1_2 = %d\n",BRUS_1_2);
 8001c46:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c4a:	4860      	ldr	r0, [pc, #384]	; (8001dcc <StartDefaultTask+0x24c>)
 8001c4c:	f00a f88a 	bl	800bd64 <iprintf>
	  printf("ENCENDIDO_ESCOBIULLAS = %d\n",BRUS_ONOFF);
 8001c50:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001c54:	485e      	ldr	r0, [pc, #376]	; (8001dd0 <StartDefaultTask+0x250>)
 8001c56:	f00a f885 	bl	800bd64 <iprintf>





	  switch (VEL_ORUGAS) {
 8001c5a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d022      	beq.n	8001ca8 <StartDefaultTask+0x128>
 8001c62:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	dc2b      	bgt.n	8001cc2 <StartDefaultTask+0x142>
 8001c6a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d004      	beq.n	8001c7c <StartDefaultTask+0xfc>
 8001c72:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d009      	beq.n	8001c8e <StartDefaultTask+0x10e>
 8001c7a:	e022      	b.n	8001cc2 <StartDefaultTask+0x142>
	  			case 1:
	  				velocidad_lineal =velocidad_lineal*LINEAR_MAX_VELOCITY;
 8001c7c:	edd7 7a53 	vldr	s15, [r7, #332]	; 0x14c
 8001c80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c88:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c
	  				break;
 8001c8c:	e019      	b.n	8001cc2 <StartDefaultTask+0x142>
	  			case 2:

	  				velocidad_lineal =velocidad_lineal* LINEAR_MEDIO_MAX_VELOCITY;
 8001c8e:	edd7 7a53 	vldr	s15, [r7, #332]	; 0x14c
 8001c92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c96:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8001d90 <StartDefaultTask+0x210>
 8001c9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ca2:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c
	  				break;
 8001ca6:	e00c      	b.n	8001cc2 <StartDefaultTask+0x142>
	  			case 3:
	  				velocidad_lineal =velocidad_lineal*LINEAR_MINIMO_MAX_VELOCITY;
 8001ca8:	edd7 7a53 	vldr	s15, [r7, #332]	; 0x14c
 8001cac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cb0:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8001d98 <StartDefaultTask+0x218>
 8001cb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cb8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cbc:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c
	  				break;
 8001cc0:	bf00      	nop
	  }

	  controlvel(&variable,velocidad_lineal,velocidad_angular);
 8001cc2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001cc6:	edd7 0a52 	vldr	s1, [r7, #328]	; 0x148
 8001cca:	ed97 0a53 	vldr	s0, [r7, #332]	; 0x14c
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fa9e 	bl	8001210 <controlvel>
	  //printf("velocidad_lineal = %f\n",velocidad_lineal);


      if (BRUS_ONOFF == 0){
 8001cd4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d125      	bne.n	8001d28 <StartDefaultTask+0x1a8>
    	 switch (BRUS_1_2) {
 8001cdc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d01a      	beq.n	8001d1a <StartDefaultTask+0x19a>
 8001ce4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	dc27      	bgt.n	8001d3c <StartDefaultTask+0x1bc>
 8001cec:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d004      	beq.n	8001cfe <StartDefaultTask+0x17e>
 8001cf4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d007      	beq.n	8001d0c <StartDefaultTask+0x18c>
 8001cfc:	e01e      	b.n	8001d3c <StartDefaultTask+0x1bc>
			case 1:

			    TIM1 -> CCR1  = 100 ;
 8001cfe:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <StartDefaultTask+0x224>)
 8001d00:	2264      	movs	r2, #100	; 0x64
 8001d02:	635a      	str	r2, [r3, #52]	; 0x34
			    TIM4 -> CCR1  = 0 ;
 8001d04:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <StartDefaultTask+0x220>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34

				break;
 8001d0a:	e017      	b.n	8001d3c <StartDefaultTask+0x1bc>
			case 2:

				TIM4 -> CCR1  = 0 ;
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <StartDefaultTask+0x220>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1 -> CCR1  = 0 ;
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <StartDefaultTask+0x224>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8001d18:	e010      	b.n	8001d3c <StartDefaultTask+0x1bc>
			case 3:
				TIM4 -> CCR1  = 100 ;
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <StartDefaultTask+0x220>)
 8001d1c:	2264      	movs	r2, #100	; 0x64
 8001d1e:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1 -> CCR1  =  0 ;
 8001d20:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <StartDefaultTask+0x224>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8001d26:	e009      	b.n	8001d3c <StartDefaultTask+0x1bc>
		}
      }
      else if (BRUS_ONOFF==1){
 8001d28:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d105      	bne.n	8001d3c <StartDefaultTask+0x1bc>

     	TIM4 -> CCR1  = 100 ;
 8001d30:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <StartDefaultTask+0x220>)
 8001d32:	2264      	movs	r2, #100	; 0x64
 8001d34:	635a      	str	r2, [r3, #52]	; 0x34
    	TIM1 -> CCR1  = 100 ;
 8001d36:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <StartDefaultTask+0x224>)
 8001d38:	2264      	movs	r2, #100	; 0x64
 8001d3a:	635a      	str	r2, [r3, #52]	; 0x34
      }

      HAL_TIM_PWM_Start( & htim4,  TIM_CHANNEL_1);
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4825      	ldr	r0, [pc, #148]	; (8001dd4 <StartDefaultTask+0x254>)
 8001d40:	f002 fdaa 	bl	8004898 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start( & htim1,  TIM_CHANNEL_1);
 8001d44:	2100      	movs	r1, #0
 8001d46:	4824      	ldr	r0, [pc, #144]	; (8001dd8 <StartDefaultTask+0x258>)
 8001d48:	f002 fda6 	bl	8004898 <HAL_TIM_PWM_Start>

      controlvel(&variable, velocidad_lineal, velocidad_angular);
 8001d4c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d50:	edd7 0a52 	vldr	s1, [r7, #328]	; 0x148
 8001d54:	ed97 0a53 	vldr	s0, [r7, #332]	; 0x14c
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fa59 	bl	8001210 <controlvel>
  	  send_cmd[0] = variable.driver[0];
 8001d5e:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 8001d62:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001d66:	ee17 2a90 	vmov	r2, s15
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <StartDefaultTask+0x25c>)
 8001d6c:	601a      	str	r2, [r3, #0]
  	  send_cmd[1] = variable.driver[1];
 8001d6e:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8001d72:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001d76:	ee17 2a90 	vmov	r2, s15
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <StartDefaultTask+0x25c>)
 8001d7c:	605a      	str	r2, [r3, #4]
      set_speed(&keya_driver,(int *)&send_cmd[0]);
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	4916      	ldr	r1, [pc, #88]	; (8001ddc <StartDefaultTask+0x25c>)
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff f9a3 	bl	80010d0 <set_speed>
  {
 8001d8a:	e738      	b.n	8001bfe <StartDefaultTask+0x7e>
 8001d8c:	f3af 8000 	nop.w
 8001d90:	9999999a 	.word	0x9999999a
 8001d94:	3fd99999 	.word	0x3fd99999
 8001d98:	33333333 	.word	0x33333333
 8001d9c:	3fd33333 	.word	0x3fd33333
 8001da0:	40000800 	.word	0x40000800
 8001da4:	40010000 	.word	0x40010000
 8001da8:	20004da8 	.word	0x20004da8
 8001dac:	20004e7c 	.word	0x20004e7c
 8001db0:	20004fb0 	.word	0x20004fb0
 8001db4:	20004ed4 	.word	0x20004ed4
 8001db8:	20004fb4 	.word	0x20004fb4
 8001dbc:	20004e84 	.word	0x20004e84
 8001dc0:	20004e80 	.word	0x20004e80
 8001dc4:	20004fbc 	.word	0x20004fbc
 8001dc8:	0800f95c 	.word	0x0800f95c
 8001dcc:	0800f968 	.word	0x0800f968
 8001dd0:	0800f97c 	.word	0x0800f97c
 8001dd4:	20004cfc 	.word	0x20004cfc
 8001dd8:	20004e88 	.word	0x20004e88
 8001ddc:	20004f5c 	.word	0x20004f5c

08001de0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001df2:	f000 fc01 	bl	80025f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40010400 	.word	0x40010400

08001e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e08:	b672      	cpsid	i
}
 8001e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <Error_Handler+0x8>
	...

08001e10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e20:	6413      	str	r3, [r2, #64]	; 0x40
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e38:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	210f      	movs	r1, #15
 8001e4a:	f06f 0001 	mvn.w	r0, #1
 8001e4e:	f000 fcab 	bl	80027a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800

08001e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <HAL_TIM_Base_MspInit+0xa4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d10c      	bne.n	8001e8c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e72:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <HAL_TIM_Base_MspInit+0xa8>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <HAL_TIM_Base_MspInit+0xa8>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7e:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <HAL_TIM_Base_MspInit+0xa8>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e8a:	e034      	b.n	8001ef6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e94:	d10c      	bne.n	8001eb0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e96:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <HAL_TIM_Base_MspInit+0xa8>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <HAL_TIM_Base_MspInit+0xa8>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <HAL_TIM_Base_MspInit+0xa8>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
}
 8001eae:	e022      	b.n	8001ef6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <HAL_TIM_Base_MspInit+0xac>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <HAL_TIM_Base_MspInit+0xa8>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <HAL_TIM_Base_MspInit+0xa8>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_TIM_Base_MspInit+0xa8>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
}
 8001ed2:	e010      	b.n	8001ef6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <HAL_TIM_Base_MspInit+0xb0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10b      	bne.n	8001ef6 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_TIM_Base_MspInit+0xa8>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_TIM_Base_MspInit+0xa8>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <HAL_TIM_Base_MspInit+0xa8>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
}
 8001ef6:	bf00      	nop
 8001ef8:	371c      	adds	r7, #28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40000400 	.word	0x40000400
 8001f10:	40000800 	.word	0x40000800

08001f14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08c      	sub	sp, #48	; 0x30
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a44      	ldr	r2, [pc, #272]	; (8002044 <HAL_TIM_MspPostInit+0x130>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d11d      	bne.n	8001f72 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f36:	4b44      	ldr	r3, [pc, #272]	; (8002048 <HAL_TIM_MspPostInit+0x134>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a43      	ldr	r2, [pc, #268]	; (8002048 <HAL_TIM_MspPostInit+0x134>)
 8001f3c:	f043 0310 	orr.w	r3, r3, #16
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <HAL_TIM_MspPostInit+0x134>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f60:	2301      	movs	r3, #1
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4838      	ldr	r0, [pc, #224]	; (800204c <HAL_TIM_MspPostInit+0x138>)
 8001f6c:	f001 f85c 	bl	8003028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f70:	e064      	b.n	800203c <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM2)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7a:	d11c      	bne.n	8001fb6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	4b32      	ldr	r3, [pc, #200]	; (8002048 <HAL_TIM_MspPostInit+0x134>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	4a31      	ldr	r2, [pc, #196]	; (8002048 <HAL_TIM_MspPostInit+0x134>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6313      	str	r3, [r2, #48]	; 0x30
 8001f88:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <HAL_TIM_MspPostInit+0x134>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f94:	2320      	movs	r3, #32
 8001f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	4619      	mov	r1, r3
 8001fae:	4828      	ldr	r0, [pc, #160]	; (8002050 <HAL_TIM_MspPostInit+0x13c>)
 8001fb0:	f001 f83a 	bl	8003028 <HAL_GPIO_Init>
}
 8001fb4:	e042      	b.n	800203c <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a26      	ldr	r2, [pc, #152]	; (8002054 <HAL_TIM_MspPostInit+0x140>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d11c      	bne.n	8001ffa <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc0:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_TIM_MspPostInit+0x134>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	4a20      	ldr	r2, [pc, #128]	; (8002048 <HAL_TIM_MspPostInit+0x134>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6313      	str	r3, [r2, #48]	; 0x30
 8001fcc:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <HAL_TIM_MspPostInit+0x134>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fd8:	2340      	movs	r3, #64	; 0x40
 8001fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4817      	ldr	r0, [pc, #92]	; (8002050 <HAL_TIM_MspPostInit+0x13c>)
 8001ff4:	f001 f818 	bl	8003028 <HAL_GPIO_Init>
}
 8001ff8:	e020      	b.n	800203c <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM4)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a16      	ldr	r2, [pc, #88]	; (8002058 <HAL_TIM_MspPostInit+0x144>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d11b      	bne.n	800203c <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002004:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_TIM_MspPostInit+0x134>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	4a0f      	ldr	r2, [pc, #60]	; (8002048 <HAL_TIM_MspPostInit+0x134>)
 800200a:	f043 0302 	orr.w	r3, r3, #2
 800200e:	6313      	str	r3, [r2, #48]	; 0x30
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_TIM_MspPostInit+0x134>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800201c:	2340      	movs	r3, #64	; 0x40
 800201e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800202c:	2302      	movs	r3, #2
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002030:	f107 031c 	add.w	r3, r7, #28
 8002034:	4619      	mov	r1, r3
 8002036:	4809      	ldr	r0, [pc, #36]	; (800205c <HAL_TIM_MspPostInit+0x148>)
 8002038:	f000 fff6 	bl	8003028 <HAL_GPIO_Init>
}
 800203c:	bf00      	nop
 800203e:	3730      	adds	r7, #48	; 0x30
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40010000 	.word	0x40010000
 8002048:	40023800 	.word	0x40023800
 800204c:	40021000 	.word	0x40021000
 8002050:	40020000 	.word	0x40020000
 8002054:	40000400 	.word	0x40000400
 8002058:	40000800 	.word	0x40000800
 800205c:	40020400 	.word	0x40020400

08002060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b0b0      	sub	sp, #192	; 0xc0
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	2290      	movs	r2, #144	; 0x90
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f008 ff75 	bl	800af70 <memset>
  if(huart->Instance==USART3)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a79      	ldr	r2, [pc, #484]	; (8002270 <HAL_UART_MspInit+0x210>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d173      	bne.n	8002178 <HAL_UART_MspInit+0x118>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002094:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002096:	2300      	movs	r3, #0
 8002098:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	4618      	mov	r0, r3
 80020a0:	f001 fea0 	bl	8003de4 <HAL_RCCEx_PeriphCLKConfig>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020aa:	f7ff feab 	bl	8001e04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020ae:	4b71      	ldr	r3, [pc, #452]	; (8002274 <HAL_UART_MspInit+0x214>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a70      	ldr	r2, [pc, #448]	; (8002274 <HAL_UART_MspInit+0x214>)
 80020b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ba:	4b6e      	ldr	r3, [pc, #440]	; (8002274 <HAL_UART_MspInit+0x214>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c2:	61bb      	str	r3, [r7, #24]
 80020c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c6:	4b6b      	ldr	r3, [pc, #428]	; (8002274 <HAL_UART_MspInit+0x214>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a6a      	ldr	r2, [pc, #424]	; (8002274 <HAL_UART_MspInit+0x214>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b68      	ldr	r3, [pc, #416]	; (8002274 <HAL_UART_MspInit+0x214>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f2:	2303      	movs	r3, #3
 80020f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020f8:	2307      	movs	r3, #7
 80020fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002102:	4619      	mov	r1, r3
 8002104:	485c      	ldr	r0, [pc, #368]	; (8002278 <HAL_UART_MspInit+0x218>)
 8002106:	f000 ff8f 	bl	8003028 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800210a:	4b5c      	ldr	r3, [pc, #368]	; (800227c <HAL_UART_MspInit+0x21c>)
 800210c:	4a5c      	ldr	r2, [pc, #368]	; (8002280 <HAL_UART_MspInit+0x220>)
 800210e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002110:	4b5a      	ldr	r3, [pc, #360]	; (800227c <HAL_UART_MspInit+0x21c>)
 8002112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002116:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002118:	4b58      	ldr	r3, [pc, #352]	; (800227c <HAL_UART_MspInit+0x21c>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800211e:	4b57      	ldr	r3, [pc, #348]	; (800227c <HAL_UART_MspInit+0x21c>)
 8002120:	2200      	movs	r2, #0
 8002122:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002124:	4b55      	ldr	r3, [pc, #340]	; (800227c <HAL_UART_MspInit+0x21c>)
 8002126:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800212a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800212c:	4b53      	ldr	r3, [pc, #332]	; (800227c <HAL_UART_MspInit+0x21c>)
 800212e:	2200      	movs	r2, #0
 8002130:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002132:	4b52      	ldr	r3, [pc, #328]	; (800227c <HAL_UART_MspInit+0x21c>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002138:	4b50      	ldr	r3, [pc, #320]	; (800227c <HAL_UART_MspInit+0x21c>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800213e:	4b4f      	ldr	r3, [pc, #316]	; (800227c <HAL_UART_MspInit+0x21c>)
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002144:	4b4d      	ldr	r3, [pc, #308]	; (800227c <HAL_UART_MspInit+0x21c>)
 8002146:	2200      	movs	r2, #0
 8002148:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800214a:	484c      	ldr	r0, [pc, #304]	; (800227c <HAL_UART_MspInit+0x21c>)
 800214c:	f000 fb56 	bl	80027fc <HAL_DMA_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8002156:	f7ff fe55 	bl	8001e04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a47      	ldr	r2, [pc, #284]	; (800227c <HAL_UART_MspInit+0x21c>)
 800215e:	671a      	str	r2, [r3, #112]	; 0x70
 8002160:	4a46      	ldr	r2, [pc, #280]	; (800227c <HAL_UART_MspInit+0x21c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	2105      	movs	r1, #5
 800216a:	2027      	movs	r0, #39	; 0x27
 800216c:	f000 fb1c 	bl	80027a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002170:	2027      	movs	r0, #39	; 0x27
 8002172:	f000 fb35 	bl	80027e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002176:	e076      	b.n	8002266 <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART6)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a41      	ldr	r2, [pc, #260]	; (8002284 <HAL_UART_MspInit+0x224>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d171      	bne.n	8002266 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002182:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002186:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002188:	2300      	movs	r3, #0
 800218a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	4618      	mov	r0, r3
 8002192:	f001 fe27 	bl	8003de4 <HAL_RCCEx_PeriphCLKConfig>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_UART_MspInit+0x140>
      Error_Handler();
 800219c:	f7ff fe32 	bl	8001e04 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80021a0:	4b34      	ldr	r3, [pc, #208]	; (8002274 <HAL_UART_MspInit+0x214>)
 80021a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a4:	4a33      	ldr	r2, [pc, #204]	; (8002274 <HAL_UART_MspInit+0x214>)
 80021a6:	f043 0320 	orr.w	r3, r3, #32
 80021aa:	6453      	str	r3, [r2, #68]	; 0x44
 80021ac:	4b31      	ldr	r3, [pc, #196]	; (8002274 <HAL_UART_MspInit+0x214>)
 80021ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b8:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <HAL_UART_MspInit+0x214>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	4a2d      	ldr	r2, [pc, #180]	; (8002274 <HAL_UART_MspInit+0x214>)
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	6313      	str	r3, [r2, #48]	; 0x30
 80021c4:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <HAL_UART_MspInit+0x214>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021d0:	23c0      	movs	r3, #192	; 0xc0
 80021d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021e8:	2308      	movs	r3, #8
 80021ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021f2:	4619      	mov	r1, r3
 80021f4:	4824      	ldr	r0, [pc, #144]	; (8002288 <HAL_UART_MspInit+0x228>)
 80021f6:	f000 ff17 	bl	8003028 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80021fa:	4b24      	ldr	r3, [pc, #144]	; (800228c <HAL_UART_MspInit+0x22c>)
 80021fc:	4a24      	ldr	r2, [pc, #144]	; (8002290 <HAL_UART_MspInit+0x230>)
 80021fe:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_UART_MspInit+0x22c>)
 8002202:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002206:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002208:	4b20      	ldr	r3, [pc, #128]	; (800228c <HAL_UART_MspInit+0x22c>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <HAL_UART_MspInit+0x22c>)
 8002210:	2200      	movs	r2, #0
 8002212:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_UART_MspInit+0x22c>)
 8002216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800221a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800221c:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_UART_MspInit+0x22c>)
 800221e:	2200      	movs	r2, #0
 8002220:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <HAL_UART_MspInit+0x22c>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_UART_MspInit+0x22c>)
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800222e:	4b17      	ldr	r3, [pc, #92]	; (800228c <HAL_UART_MspInit+0x22c>)
 8002230:	2200      	movs	r2, #0
 8002232:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002234:	4b15      	ldr	r3, [pc, #84]	; (800228c <HAL_UART_MspInit+0x22c>)
 8002236:	2200      	movs	r2, #0
 8002238:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800223a:	4814      	ldr	r0, [pc, #80]	; (800228c <HAL_UART_MspInit+0x22c>)
 800223c:	f000 fade 	bl	80027fc <HAL_DMA_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_UART_MspInit+0x1ea>
      Error_Handler();
 8002246:	f7ff fddd 	bl	8001e04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a0f      	ldr	r2, [pc, #60]	; (800228c <HAL_UART_MspInit+0x22c>)
 800224e:	671a      	str	r2, [r3, #112]	; 0x70
 8002250:	4a0e      	ldr	r2, [pc, #56]	; (800228c <HAL_UART_MspInit+0x22c>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2105      	movs	r1, #5
 800225a:	2047      	movs	r0, #71	; 0x47
 800225c:	f000 faa4 	bl	80027a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002260:	2047      	movs	r0, #71	; 0x47
 8002262:	f000 fabd 	bl	80027e0 <HAL_NVIC_EnableIRQ>
}
 8002266:	bf00      	nop
 8002268:	37c0      	adds	r7, #192	; 0xc0
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40004800 	.word	0x40004800
 8002274:	40023800 	.word	0x40023800
 8002278:	40020400 	.word	0x40020400
 800227c:	20004d48 	.word	0x20004d48
 8002280:	40026028 	.word	0x40026028
 8002284:	40011400 	.word	0x40011400
 8002288:	40020800 	.word	0x40020800
 800228c:	20004c9c 	.word	0x20004c9c
 8002290:	40026428 	.word	0x40026428

08002294 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08c      	sub	sp, #48	; 0x30
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM8 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 80022a4:	2200      	movs	r2, #0
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	202c      	movs	r0, #44	; 0x2c
 80022aa:	f000 fa7d 	bl	80027a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80022ae:	202c      	movs	r0, #44	; 0x2c
 80022b0:	f000 fa96 	bl	80027e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <HAL_InitTick+0xa0>)
 80022b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b8:	4a1e      	ldr	r2, [pc, #120]	; (8002334 <HAL_InitTick+0xa0>)
 80022ba:	f043 0302 	orr.w	r3, r3, #2
 80022be:	6453      	str	r3, [r2, #68]	; 0x44
 80022c0:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <HAL_InitTick+0xa0>)
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022cc:	f107 0210 	add.w	r2, r7, #16
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f001 fd52 	bl	8003d80 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80022dc:	f001 fd3c 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 80022e0:	4603      	mov	r3, r0
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e8:	4a13      	ldr	r2, [pc, #76]	; (8002338 <HAL_InitTick+0xa4>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	0c9b      	lsrs	r3, r3, #18
 80022f0:	3b01      	subs	r3, #1
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_InitTick+0xa8>)
 80022f6:	4a12      	ldr	r2, [pc, #72]	; (8002340 <HAL_InitTick+0xac>)
 80022f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_InitTick+0xa8>)
 80022fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002300:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8002302:	4a0e      	ldr	r2, [pc, #56]	; (800233c <HAL_InitTick+0xa8>)
 8002304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002306:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <HAL_InitTick+0xa8>)
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_InitTick+0xa8>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8002314:	4809      	ldr	r0, [pc, #36]	; (800233c <HAL_InitTick+0xa8>)
 8002316:	f002 f98d 	bl	8004634 <HAL_TIM_Base_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d104      	bne.n	800232a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 8002320:	4806      	ldr	r0, [pc, #24]	; (800233c <HAL_InitTick+0xa8>)
 8002322:	f002 f9df 	bl	80046e4 <HAL_TIM_Base_Start_IT>
 8002326:	4603      	mov	r3, r0
 8002328:	e000      	b.n	800232c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	3730      	adds	r7, #48	; 0x30
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	431bde83 	.word	0x431bde83
 800233c:	20004fc0 	.word	0x20004fc0
 8002340:	40010400 	.word	0x40010400

08002344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002348:	e7fe      	b.n	8002348 <NMI_Handler+0x4>

0800234a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234e:	e7fe      	b.n	800234e <HardFault_Handler+0x4>

08002350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002354:	e7fe      	b.n	8002354 <MemManage_Handler+0x4>

08002356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235a:	e7fe      	b.n	800235a <BusFault_Handler+0x4>

0800235c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <UsageFault_Handler+0x4>

08002362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <DMA1_Stream1_IRQHandler+0x10>)
 8002376:	f000 fbe1 	bl	8002b3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20004d48 	.word	0x20004d48

08002384 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002388:	4803      	ldr	r0, [pc, #12]	; (8002398 <USART3_IRQHandler+0x14>)
 800238a:	f003 fd29 	bl	8005de0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  USER_UART_IRQHandler(&huart3);
 800238e:	4802      	ldr	r0, [pc, #8]	; (8002398 <USART3_IRQHandler+0x14>)
 8002390:	f7ff fb94 	bl	8001abc <USER_UART_IRQHandler>
  /* USER CODE END USART3_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20004da8 	.word	0x20004da8

0800239c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <TIM8_UP_TIM13_IRQHandler+0x10>)
 80023a2:	f002 fb73 	bl	8004a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20004fc0 	.word	0x20004fc0

080023b0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <DMA2_Stream1_IRQHandler+0x10>)
 80023b6:	f000 fbc1 	bl	8002b3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20004c9c 	.word	0x20004c9c

080023c4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80023c8:	4803      	ldr	r0, [pc, #12]	; (80023d8 <USART6_IRQHandler+0x14>)
 80023ca:	f003 fd09 	bl	8005de0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  USER_UART_IRQHandler_1(&huart6);
 80023ce:	4802      	ldr	r0, [pc, #8]	; (80023d8 <USART6_IRQHandler+0x14>)
 80023d0:	f7ff fb94 	bl	8001afc <USER_UART_IRQHandler_1>
  /* USER CODE END USART6_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20004ed4 	.word	0x20004ed4

080023dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
	return 1;
 80023e0:	2301      	movs	r3, #1
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_kill>:

int _kill(int pid, int sig)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023f6:	f008 fc81 	bl	800acfc <__errno>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2216      	movs	r2, #22
 80023fe:	601a      	str	r2, [r3, #0]
	return -1;
 8002400:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_exit>:

void _exit (int status)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ffe7 	bl	80023ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800241e:	e7fe      	b.n	800241e <_exit+0x12>

08002420 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	e00a      	b.n	8002448 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002432:	f3af 8000 	nop.w
 8002436:	4601      	mov	r1, r0
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	60ba      	str	r2, [r7, #8]
 800243e:	b2ca      	uxtb	r2, r1
 8002440:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	3301      	adds	r3, #1
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	429a      	cmp	r2, r3
 800244e:	dbf0      	blt.n	8002432 <_read+0x12>
	}

return len;
 8002450:	687b      	ldr	r3, [r7, #4]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	e009      	b.n	8002480 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	60ba      	str	r2, [r7, #8]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fb77 	bl	8001b68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	3301      	adds	r3, #1
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	429a      	cmp	r2, r3
 8002486:	dbf1      	blt.n	800246c <_write+0x12>
	}
	return len;
 8002488:	687b      	ldr	r3, [r7, #4]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <_close>:

int _close(int file)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
	return -1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024ba:	605a      	str	r2, [r3, #4]
	return 0;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <_isatty>:

int _isatty(int file)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
	return 1;
 80024d2:	2301      	movs	r3, #1
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
	return 0;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002504:	4a14      	ldr	r2, [pc, #80]	; (8002558 <_sbrk+0x5c>)
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <_sbrk+0x60>)
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002510:	4b13      	ldr	r3, [pc, #76]	; (8002560 <_sbrk+0x64>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002518:	4b11      	ldr	r3, [pc, #68]	; (8002560 <_sbrk+0x64>)
 800251a:	4a12      	ldr	r2, [pc, #72]	; (8002564 <_sbrk+0x68>)
 800251c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <_sbrk+0x64>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	429a      	cmp	r2, r3
 800252a:	d207      	bcs.n	800253c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800252c:	f008 fbe6 	bl	800acfc <__errno>
 8002530:	4603      	mov	r3, r0
 8002532:	220c      	movs	r2, #12
 8002534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002536:	f04f 33ff 	mov.w	r3, #4294967295
 800253a:	e009      	b.n	8002550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <_sbrk+0x64>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002542:	4b07      	ldr	r3, [pc, #28]	; (8002560 <_sbrk+0x64>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	4a05      	ldr	r2, [pc, #20]	; (8002560 <_sbrk+0x64>)
 800254c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800254e:	68fb      	ldr	r3, [r7, #12]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20080000 	.word	0x20080000
 800255c:	00000400 	.word	0x00000400
 8002560:	20000260 	.word	0x20000260
 8002564:	20005060 	.word	0x20005060

08002568 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <SystemInit+0x20>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <SystemInit+0x20>)
 8002574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800258c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002590:	480d      	ldr	r0, [pc, #52]	; (80025c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002592:	490e      	ldr	r1, [pc, #56]	; (80025cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002594:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002598:	e002      	b.n	80025a0 <LoopCopyDataInit>

0800259a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800259a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800259c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259e:	3304      	adds	r3, #4

080025a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a4:	d3f9      	bcc.n	800259a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a6:	4a0b      	ldr	r2, [pc, #44]	; (80025d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025a8:	4c0b      	ldr	r4, [pc, #44]	; (80025d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025ac:	e001      	b.n	80025b2 <LoopFillZerobss>

080025ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b0:	3204      	adds	r2, #4

080025b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b4:	d3fb      	bcc.n	80025ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025b6:	f7ff ffd7 	bl	8002568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ba:	f008 fc9b 	bl	800aef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025be:	f7fe fe73 	bl	80012a8 <main>
  bx  lr    
 80025c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025c4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80025c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025cc:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 80025d0:	0800ff5c 	.word	0x0800ff5c
  ldr r2, =_sbss
 80025d4:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 80025d8:	20005060 	.word	0x20005060

080025dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025dc:	e7fe      	b.n	80025dc <ADC_IRQHandler>

080025de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e2:	2003      	movs	r0, #3
 80025e4:	f000 f8d5 	bl	8002792 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025e8:	200f      	movs	r0, #15
 80025ea:	f7ff fe53 	bl	8002294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ee:	f7ff fc0f 	bl	8001e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_IncTick+0x20>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_IncTick+0x24>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4413      	add	r3, r2
 8002608:	4a04      	ldr	r2, [pc, #16]	; (800261c <HAL_IncTick+0x24>)
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000068 	.word	0x20000068
 800261c:	2000500c 	.word	0x2000500c

08002620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return uwTick;
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_GetTick+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	2000500c 	.word	0x2000500c

08002638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <__NVIC_SetPriorityGrouping+0x40>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002654:	4013      	ands	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <__NVIC_SetPriorityGrouping+0x44>)
 8002662:	4313      	orrs	r3, r2
 8002664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002666:	4a04      	ldr	r2, [pc, #16]	; (8002678 <__NVIC_SetPriorityGrouping+0x40>)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	60d3      	str	r3, [r2, #12]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000ed00 	.word	0xe000ed00
 800267c:	05fa0000 	.word	0x05fa0000

08002680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <__NVIC_GetPriorityGrouping+0x18>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	f003 0307 	and.w	r3, r3, #7
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	db0b      	blt.n	80026c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	f003 021f 	and.w	r2, r3, #31
 80026b4:	4907      	ldr	r1, [pc, #28]	; (80026d4 <__NVIC_EnableIRQ+0x38>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	2001      	movs	r0, #1
 80026be:	fa00 f202 	lsl.w	r2, r0, r2
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000e100 	.word	0xe000e100

080026d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	db0a      	blt.n	8002702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	490c      	ldr	r1, [pc, #48]	; (8002724 <__NVIC_SetPriority+0x4c>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	0112      	lsls	r2, r2, #4
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	440b      	add	r3, r1
 80026fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002700:	e00a      	b.n	8002718 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4908      	ldr	r1, [pc, #32]	; (8002728 <__NVIC_SetPriority+0x50>)
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	3b04      	subs	r3, #4
 8002710:	0112      	lsls	r2, r2, #4
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	440b      	add	r3, r1
 8002716:	761a      	strb	r2, [r3, #24]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000e100 	.word	0xe000e100
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f1c3 0307 	rsb	r3, r3, #7
 8002746:	2b04      	cmp	r3, #4
 8002748:	bf28      	it	cs
 800274a:	2304      	movcs	r3, #4
 800274c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3304      	adds	r3, #4
 8002752:	2b06      	cmp	r3, #6
 8002754:	d902      	bls.n	800275c <NVIC_EncodePriority+0x30>
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3b03      	subs	r3, #3
 800275a:	e000      	b.n	800275e <NVIC_EncodePriority+0x32>
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	f04f 32ff 	mov.w	r2, #4294967295
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	401a      	ands	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002774:	f04f 31ff 	mov.w	r1, #4294967295
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	43d9      	mvns	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	4313      	orrs	r3, r2
         );
}
 8002786:	4618      	mov	r0, r3
 8002788:	3724      	adds	r7, #36	; 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff ff4c 	bl	8002638 <__NVIC_SetPriorityGrouping>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ba:	f7ff ff61 	bl	8002680 <__NVIC_GetPriorityGrouping>
 80027be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	68b9      	ldr	r1, [r7, #8]
 80027c4:	6978      	ldr	r0, [r7, #20]
 80027c6:	f7ff ffb1 	bl	800272c <NVIC_EncodePriority>
 80027ca:	4602      	mov	r2, r0
 80027cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff80 	bl	80026d8 <__NVIC_SetPriority>
}
 80027d8:	bf00      	nop
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ff54 	bl	800269c <__NVIC_EnableIRQ>
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002808:	f7ff ff0a 	bl	8002620 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e099      	b.n	800294c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002838:	e00f      	b.n	800285a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800283a:	f7ff fef1 	bl	8002620 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b05      	cmp	r3, #5
 8002846:	d908      	bls.n	800285a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2203      	movs	r2, #3
 8002852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e078      	b.n	800294c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1e8      	bne.n	800283a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	4b38      	ldr	r3, [pc, #224]	; (8002954 <HAL_DMA_Init+0x158>)
 8002874:	4013      	ands	r3, r2
 8002876:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002886:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002892:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d107      	bne.n	80028c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	4313      	orrs	r3, r2
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f023 0307 	bic.w	r3, r3, #7
 80028da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d117      	bne.n	800291e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00e      	beq.n	800291e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fb15 	bl	8002f30 <DMA_CheckFifoParam>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2240      	movs	r2, #64	; 0x40
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800291a:	2301      	movs	r3, #1
 800291c:	e016      	b.n	800294c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 facc 	bl	8002ec4 <DMA_CalcBaseAndBitshift>
 800292c:	4603      	mov	r3, r0
 800292e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	223f      	movs	r2, #63	; 0x3f
 8002936:	409a      	lsls	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	e010803f 	.word	0xe010803f

08002958 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_DMA_Start_IT+0x26>
 800297a:	2302      	movs	r3, #2
 800297c:	e048      	b.n	8002a10 <HAL_DMA_Start_IT+0xb8>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b01      	cmp	r3, #1
 8002990:	d137      	bne.n	8002a02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2202      	movs	r2, #2
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fa5e 	bl	8002e68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	223f      	movs	r2, #63	; 0x3f
 80029b2:	409a      	lsls	r2, r3
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0216 	orr.w	r2, r2, #22
 80029c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695a      	ldr	r2, [r3, #20]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029d6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0208 	orr.w	r2, r2, #8
 80029ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e005      	b.n	8002a0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a26:	f7ff fdfb 	bl	8002620 <HAL_GetTick>
 8002a2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d008      	beq.n	8002a4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2280      	movs	r2, #128	; 0x80
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e052      	b.n	8002af0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0216 	bic.w	r2, r2, #22
 8002a58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695a      	ldr	r2, [r3, #20]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d103      	bne.n	8002a7a <HAL_DMA_Abort+0x62>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d007      	beq.n	8002a8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0208 	bic.w	r2, r2, #8
 8002a88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a9a:	e013      	b.n	8002ac4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a9c:	f7ff fdc0 	bl	8002620 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d90c      	bls.n	8002ac4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2220      	movs	r2, #32
 8002aae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e015      	b.n	8002af0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1e4      	bne.n	8002a9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad6:	223f      	movs	r2, #63	; 0x3f
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d004      	beq.n	8002b16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2280      	movs	r2, #128	; 0x80
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e00c      	b.n	8002b30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2205      	movs	r2, #5
 8002b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0201 	bic.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002b48:	4b92      	ldr	r3, [pc, #584]	; (8002d94 <HAL_DMA_IRQHandler+0x258>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a92      	ldr	r2, [pc, #584]	; (8002d98 <HAL_DMA_IRQHandler+0x25c>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	0a9b      	lsrs	r3, r3, #10
 8002b54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	2208      	movs	r2, #8
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d01a      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d013      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0204 	bic.w	r2, r2, #4
 8002b8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b94:	2208      	movs	r2, #8
 8002b96:	409a      	lsls	r2, r3
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	f043 0201 	orr.w	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bac:	2201      	movs	r2, #1
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d012      	beq.n	8002bde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00b      	beq.n	8002bde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bca:	2201      	movs	r2, #1
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	f043 0202 	orr.w	r2, r3, #2
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be2:	2204      	movs	r2, #4
 8002be4:	409a      	lsls	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d012      	beq.n	8002c14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00b      	beq.n	8002c14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	2204      	movs	r2, #4
 8002c02:	409a      	lsls	r2, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	f043 0204 	orr.w	r2, r3, #4
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c18:	2210      	movs	r2, #16
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d043      	beq.n	8002cac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d03c      	beq.n	8002cac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	2210      	movs	r2, #16
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d018      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d108      	bne.n	8002c6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d024      	beq.n	8002cac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	4798      	blx	r3
 8002c6a:	e01f      	b.n	8002cac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01b      	beq.n	8002cac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4798      	blx	r3
 8002c7c:	e016      	b.n	8002cac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d107      	bne.n	8002c9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0208 	bic.w	r2, r2, #8
 8002c9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 808e 	beq.w	8002dda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 8086 	beq.w	8002dda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d136      	bne.n	8002d54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0216 	bic.w	r2, r2, #22
 8002cf4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d103      	bne.n	8002d16 <HAL_DMA_IRQHandler+0x1da>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d007      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0208 	bic.w	r2, r2, #8
 8002d24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2a:	223f      	movs	r2, #63	; 0x3f
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d07d      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
        }
        return;
 8002d52:	e078      	b.n	8002e46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d01c      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d108      	bne.n	8002d82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d030      	beq.n	8002dda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
 8002d80:	e02b      	b.n	8002dda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d027      	beq.n	8002dda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	4798      	blx	r3
 8002d92:	e022      	b.n	8002dda <HAL_DMA_IRQHandler+0x29e>
 8002d94:	20000060 	.word	0x20000060
 8002d98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10f      	bne.n	8002dca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0210 	bic.w	r2, r2, #16
 8002db8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d032      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d022      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2205      	movs	r2, #5
 8002df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0201 	bic.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d307      	bcc.n	8002e22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f2      	bne.n	8002e06 <HAL_DMA_IRQHandler+0x2ca>
 8002e20:	e000      	b.n	8002e24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e22:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4798      	blx	r3
 8002e44:	e000      	b.n	8002e48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e46:	bf00      	nop
    }
  }
}
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop

08002e50 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b40      	cmp	r3, #64	; 0x40
 8002e94:	d108      	bne.n	8002ea8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ea6:	e007      	b.n	8002eb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	60da      	str	r2, [r3, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	3b10      	subs	r3, #16
 8002ed4:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <DMA_CalcBaseAndBitshift+0x60>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	091b      	lsrs	r3, r3, #4
 8002edc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ede:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <DMA_CalcBaseAndBitshift+0x64>)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d908      	bls.n	8002f04 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <DMA_CalcBaseAndBitshift+0x68>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	1d1a      	adds	r2, r3, #4
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	659a      	str	r2, [r3, #88]	; 0x58
 8002f02:	e006      	b.n	8002f12 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <DMA_CalcBaseAndBitshift+0x68>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	aaaaaaab 	.word	0xaaaaaaab
 8002f28:	0800fa8c 	.word	0x0800fa8c
 8002f2c:	fffffc00 	.word	0xfffffc00

08002f30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d11f      	bne.n	8002f8a <DMA_CheckFifoParam+0x5a>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d856      	bhi.n	8002ffe <DMA_CheckFifoParam+0xce>
 8002f50:	a201      	add	r2, pc, #4	; (adr r2, 8002f58 <DMA_CheckFifoParam+0x28>)
 8002f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f56:	bf00      	nop
 8002f58:	08002f69 	.word	0x08002f69
 8002f5c:	08002f7b 	.word	0x08002f7b
 8002f60:	08002f69 	.word	0x08002f69
 8002f64:	08002fff 	.word	0x08002fff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d046      	beq.n	8003002 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f78:	e043      	b.n	8003002 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f82:	d140      	bne.n	8003006 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f88:	e03d      	b.n	8003006 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f92:	d121      	bne.n	8002fd8 <DMA_CheckFifoParam+0xa8>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d837      	bhi.n	800300a <DMA_CheckFifoParam+0xda>
 8002f9a:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <DMA_CheckFifoParam+0x70>)
 8002f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa0:	08002fb1 	.word	0x08002fb1
 8002fa4:	08002fb7 	.word	0x08002fb7
 8002fa8:	08002fb1 	.word	0x08002fb1
 8002fac:	08002fc9 	.word	0x08002fc9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb4:	e030      	b.n	8003018 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d025      	beq.n	800300e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc6:	e022      	b.n	800300e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fd0:	d11f      	bne.n	8003012 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fd6:	e01c      	b.n	8003012 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d903      	bls.n	8002fe6 <DMA_CheckFifoParam+0xb6>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d003      	beq.n	8002fec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fe4:	e018      	b.n	8003018 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8002fea:	e015      	b.n	8003018 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00e      	beq.n	8003016 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8002ffc:	e00b      	b.n	8003016 <DMA_CheckFifoParam+0xe6>
      break;
 8002ffe:	bf00      	nop
 8003000:	e00a      	b.n	8003018 <DMA_CheckFifoParam+0xe8>
      break;
 8003002:	bf00      	nop
 8003004:	e008      	b.n	8003018 <DMA_CheckFifoParam+0xe8>
      break;
 8003006:	bf00      	nop
 8003008:	e006      	b.n	8003018 <DMA_CheckFifoParam+0xe8>
      break;
 800300a:	bf00      	nop
 800300c:	e004      	b.n	8003018 <DMA_CheckFifoParam+0xe8>
      break;
 800300e:	bf00      	nop
 8003010:	e002      	b.n	8003018 <DMA_CheckFifoParam+0xe8>
      break;   
 8003012:	bf00      	nop
 8003014:	e000      	b.n	8003018 <DMA_CheckFifoParam+0xe8>
      break;
 8003016:	bf00      	nop
    }
  } 
  
  return status; 
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop

08003028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003028:	b480      	push	{r7}
 800302a:	b089      	sub	sp, #36	; 0x24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800303e:	2300      	movs	r3, #0
 8003040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	e175      	b.n	8003334 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003048:	2201      	movs	r2, #1
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	429a      	cmp	r2, r3
 8003062:	f040 8164 	bne.w	800332e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d005      	beq.n	800307e <HAL_GPIO_Init+0x56>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d130      	bne.n	80030e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	2203      	movs	r2, #3
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b4:	2201      	movs	r2, #1
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f003 0201 	and.w	r2, r3, #1
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d017      	beq.n	800311c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d123      	bne.n	8003170 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	08da      	lsrs	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3208      	adds	r2, #8
 8003130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	220f      	movs	r2, #15
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	08da      	lsrs	r2, r3, #3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3208      	adds	r2, #8
 800316a:	69b9      	ldr	r1, [r7, #24]
 800316c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	2203      	movs	r2, #3
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0203 	and.w	r2, r3, #3
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80be 	beq.w	800332e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b2:	4b66      	ldr	r3, [pc, #408]	; (800334c <HAL_GPIO_Init+0x324>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	4a65      	ldr	r2, [pc, #404]	; (800334c <HAL_GPIO_Init+0x324>)
 80031b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031bc:	6453      	str	r3, [r2, #68]	; 0x44
 80031be:	4b63      	ldr	r3, [pc, #396]	; (800334c <HAL_GPIO_Init+0x324>)
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031ca:	4a61      	ldr	r2, [pc, #388]	; (8003350 <HAL_GPIO_Init+0x328>)
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	089b      	lsrs	r3, r3, #2
 80031d0:	3302      	adds	r3, #2
 80031d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	220f      	movs	r2, #15
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4013      	ands	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a58      	ldr	r2, [pc, #352]	; (8003354 <HAL_GPIO_Init+0x32c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d037      	beq.n	8003266 <HAL_GPIO_Init+0x23e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a57      	ldr	r2, [pc, #348]	; (8003358 <HAL_GPIO_Init+0x330>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d031      	beq.n	8003262 <HAL_GPIO_Init+0x23a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a56      	ldr	r2, [pc, #344]	; (800335c <HAL_GPIO_Init+0x334>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d02b      	beq.n	800325e <HAL_GPIO_Init+0x236>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a55      	ldr	r2, [pc, #340]	; (8003360 <HAL_GPIO_Init+0x338>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d025      	beq.n	800325a <HAL_GPIO_Init+0x232>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a54      	ldr	r2, [pc, #336]	; (8003364 <HAL_GPIO_Init+0x33c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d01f      	beq.n	8003256 <HAL_GPIO_Init+0x22e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a53      	ldr	r2, [pc, #332]	; (8003368 <HAL_GPIO_Init+0x340>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d019      	beq.n	8003252 <HAL_GPIO_Init+0x22a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a52      	ldr	r2, [pc, #328]	; (800336c <HAL_GPIO_Init+0x344>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_GPIO_Init+0x226>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a51      	ldr	r2, [pc, #324]	; (8003370 <HAL_GPIO_Init+0x348>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00d      	beq.n	800324a <HAL_GPIO_Init+0x222>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a50      	ldr	r2, [pc, #320]	; (8003374 <HAL_GPIO_Init+0x34c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <HAL_GPIO_Init+0x21e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a4f      	ldr	r2, [pc, #316]	; (8003378 <HAL_GPIO_Init+0x350>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d101      	bne.n	8003242 <HAL_GPIO_Init+0x21a>
 800323e:	2309      	movs	r3, #9
 8003240:	e012      	b.n	8003268 <HAL_GPIO_Init+0x240>
 8003242:	230a      	movs	r3, #10
 8003244:	e010      	b.n	8003268 <HAL_GPIO_Init+0x240>
 8003246:	2308      	movs	r3, #8
 8003248:	e00e      	b.n	8003268 <HAL_GPIO_Init+0x240>
 800324a:	2307      	movs	r3, #7
 800324c:	e00c      	b.n	8003268 <HAL_GPIO_Init+0x240>
 800324e:	2306      	movs	r3, #6
 8003250:	e00a      	b.n	8003268 <HAL_GPIO_Init+0x240>
 8003252:	2305      	movs	r3, #5
 8003254:	e008      	b.n	8003268 <HAL_GPIO_Init+0x240>
 8003256:	2304      	movs	r3, #4
 8003258:	e006      	b.n	8003268 <HAL_GPIO_Init+0x240>
 800325a:	2303      	movs	r3, #3
 800325c:	e004      	b.n	8003268 <HAL_GPIO_Init+0x240>
 800325e:	2302      	movs	r3, #2
 8003260:	e002      	b.n	8003268 <HAL_GPIO_Init+0x240>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_GPIO_Init+0x240>
 8003266:	2300      	movs	r3, #0
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	f002 0203 	and.w	r2, r2, #3
 800326e:	0092      	lsls	r2, r2, #2
 8003270:	4093      	lsls	r3, r2
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003278:	4935      	ldr	r1, [pc, #212]	; (8003350 <HAL_GPIO_Init+0x328>)
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	089b      	lsrs	r3, r3, #2
 800327e:	3302      	adds	r3, #2
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003286:	4b3d      	ldr	r3, [pc, #244]	; (800337c <HAL_GPIO_Init+0x354>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	43db      	mvns	r3, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4013      	ands	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032aa:	4a34      	ldr	r2, [pc, #208]	; (800337c <HAL_GPIO_Init+0x354>)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032b0:	4b32      	ldr	r3, [pc, #200]	; (800337c <HAL_GPIO_Init+0x354>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032d4:	4a29      	ldr	r2, [pc, #164]	; (800337c <HAL_GPIO_Init+0x354>)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032da:	4b28      	ldr	r3, [pc, #160]	; (800337c <HAL_GPIO_Init+0x354>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032fe:	4a1f      	ldr	r2, [pc, #124]	; (800337c <HAL_GPIO_Init+0x354>)
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003304:	4b1d      	ldr	r3, [pc, #116]	; (800337c <HAL_GPIO_Init+0x354>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003328:	4a14      	ldr	r2, [pc, #80]	; (800337c <HAL_GPIO_Init+0x354>)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3301      	adds	r3, #1
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	2b0f      	cmp	r3, #15
 8003338:	f67f ae86 	bls.w	8003048 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	3724      	adds	r7, #36	; 0x24
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	40013800 	.word	0x40013800
 8003354:	40020000 	.word	0x40020000
 8003358:	40020400 	.word	0x40020400
 800335c:	40020800 	.word	0x40020800
 8003360:	40020c00 	.word	0x40020c00
 8003364:	40021000 	.word	0x40021000
 8003368:	40021400 	.word	0x40021400
 800336c:	40021800 	.word	0x40021800
 8003370:	40021c00 	.word	0x40021c00
 8003374:	40022000 	.word	0x40022000
 8003378:	40022400 	.word	0x40022400
 800337c:	40013c00 	.word	0x40013c00

08003380 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	4b23      	ldr	r3, [pc, #140]	; (8003418 <HAL_PWREx_EnableOverDrive+0x98>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	4a22      	ldr	r2, [pc, #136]	; (8003418 <HAL_PWREx_EnableOverDrive+0x98>)
 8003390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003394:	6413      	str	r3, [r2, #64]	; 0x40
 8003396:	4b20      	ldr	r3, [pc, #128]	; (8003418 <HAL_PWREx_EnableOverDrive+0x98>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033a2:	4b1e      	ldr	r3, [pc, #120]	; (800341c <HAL_PWREx_EnableOverDrive+0x9c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1d      	ldr	r2, [pc, #116]	; (800341c <HAL_PWREx_EnableOverDrive+0x9c>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033ae:	f7ff f937 	bl	8002620 <HAL_GetTick>
 80033b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033b4:	e009      	b.n	80033ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033b6:	f7ff f933 	bl	8002620 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033c4:	d901      	bls.n	80033ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e022      	b.n	8003410 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <HAL_PWREx_EnableOverDrive+0x9c>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d6:	d1ee      	bne.n	80033b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033d8:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_PWREx_EnableOverDrive+0x9c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0f      	ldr	r2, [pc, #60]	; (800341c <HAL_PWREx_EnableOverDrive+0x9c>)
 80033de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033e4:	f7ff f91c 	bl	8002620 <HAL_GetTick>
 80033e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033ea:	e009      	b.n	8003400 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033ec:	f7ff f918 	bl	8002620 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033fa:	d901      	bls.n	8003400 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e007      	b.n	8003410 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800340c:	d1ee      	bne.n	80033ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40023800 	.word	0x40023800
 800341c:	40007000 	.word	0x40007000

08003420 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003428:	2300      	movs	r3, #0
 800342a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e29b      	b.n	800396e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8087 	beq.w	8003552 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003444:	4b96      	ldr	r3, [pc, #600]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b04      	cmp	r3, #4
 800344e:	d00c      	beq.n	800346a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003450:	4b93      	ldr	r3, [pc, #588]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b08      	cmp	r3, #8
 800345a:	d112      	bne.n	8003482 <HAL_RCC_OscConfig+0x62>
 800345c:	4b90      	ldr	r3, [pc, #576]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003468:	d10b      	bne.n	8003482 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346a:	4b8d      	ldr	r3, [pc, #564]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d06c      	beq.n	8003550 <HAL_RCC_OscConfig+0x130>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d168      	bne.n	8003550 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e275      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348a:	d106      	bne.n	800349a <HAL_RCC_OscConfig+0x7a>
 800348c:	4b84      	ldr	r3, [pc, #528]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a83      	ldr	r2, [pc, #524]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	e02e      	b.n	80034f8 <HAL_RCC_OscConfig+0xd8>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0x9c>
 80034a2:	4b7f      	ldr	r3, [pc, #508]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a7e      	ldr	r2, [pc, #504]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	4b7c      	ldr	r3, [pc, #496]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a7b      	ldr	r2, [pc, #492]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	e01d      	b.n	80034f8 <HAL_RCC_OscConfig+0xd8>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0xc0>
 80034c6:	4b76      	ldr	r3, [pc, #472]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a75      	ldr	r2, [pc, #468]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	4b73      	ldr	r3, [pc, #460]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a72      	ldr	r2, [pc, #456]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e00b      	b.n	80034f8 <HAL_RCC_OscConfig+0xd8>
 80034e0:	4b6f      	ldr	r3, [pc, #444]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a6e      	ldr	r2, [pc, #440]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	4b6c      	ldr	r3, [pc, #432]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a6b      	ldr	r2, [pc, #428]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80034f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d013      	beq.n	8003528 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7ff f88e 	bl	8002620 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003508:	f7ff f88a 	bl	8002620 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e229      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	4b61      	ldr	r3, [pc, #388]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0xe8>
 8003526:	e014      	b.n	8003552 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7ff f87a 	bl	8002620 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003530:	f7ff f876 	bl	8002620 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e215      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003542:	4b57      	ldr	r3, [pc, #348]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x110>
 800354e:	e000      	b.n	8003552 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d069      	beq.n	8003632 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800355e:	4b50      	ldr	r3, [pc, #320]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00b      	beq.n	8003582 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800356a:	4b4d      	ldr	r3, [pc, #308]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b08      	cmp	r3, #8
 8003574:	d11c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x190>
 8003576:	4b4a      	ldr	r3, [pc, #296]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d116      	bne.n	80035b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003582:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_RCC_OscConfig+0x17a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d001      	beq.n	800359a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e1e9      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359a:	4b41      	ldr	r3, [pc, #260]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	493d      	ldr	r1, [pc, #244]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ae:	e040      	b.n	8003632 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d023      	beq.n	8003600 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b8:	4b39      	ldr	r3, [pc, #228]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a38      	ldr	r2, [pc, #224]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7ff f82c 	bl	8002620 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035cc:	f7ff f828 	bl	8002620 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e1c7      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035de:	4b30      	ldr	r3, [pc, #192]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ea:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4929      	ldr	r1, [pc, #164]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
 80035fe:	e018      	b.n	8003632 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003600:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a26      	ldr	r2, [pc, #152]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7ff f808 	bl	8002620 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003614:	f7ff f804 	bl	8002620 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e1a3      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003626:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d038      	beq.n	80036b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d019      	beq.n	800367a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364a:	4a15      	ldr	r2, [pc, #84]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7fe ffe5 	bl	8002620 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365a:	f7fe ffe1 	bl	8002620 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e180      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366c:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800366e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x23a>
 8003678:	e01a      	b.n	80036b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 800367c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367e:	4a08      	ldr	r2, [pc, #32]	; (80036a0 <HAL_RCC_OscConfig+0x280>)
 8003680:	f023 0301 	bic.w	r3, r3, #1
 8003684:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fe ffcb 	bl	8002620 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800368e:	f7fe ffc7 	bl	8002620 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d903      	bls.n	80036a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e166      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
 80036a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a4:	4b92      	ldr	r3, [pc, #584]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80036a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1ee      	bne.n	800368e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80a4 	beq.w	8003806 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036be:	4b8c      	ldr	r3, [pc, #560]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10d      	bne.n	80036e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	4b89      	ldr	r3, [pc, #548]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	4a88      	ldr	r2, [pc, #544]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80036d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d4:	6413      	str	r3, [r2, #64]	; 0x40
 80036d6:	4b86      	ldr	r3, [pc, #536]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e6:	4b83      	ldr	r3, [pc, #524]	; (80038f4 <HAL_RCC_OscConfig+0x4d4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d118      	bne.n	8003724 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80036f2:	4b80      	ldr	r3, [pc, #512]	; (80038f4 <HAL_RCC_OscConfig+0x4d4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a7f      	ldr	r2, [pc, #508]	; (80038f4 <HAL_RCC_OscConfig+0x4d4>)
 80036f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fe:	f7fe ff8f 	bl	8002620 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003706:	f7fe ff8b 	bl	8002620 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b64      	cmp	r3, #100	; 0x64
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e12a      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003718:	4b76      	ldr	r3, [pc, #472]	; (80038f4 <HAL_RCC_OscConfig+0x4d4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d106      	bne.n	800373a <HAL_RCC_OscConfig+0x31a>
 800372c:	4b70      	ldr	r3, [pc, #448]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4a6f      	ldr	r2, [pc, #444]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6713      	str	r3, [r2, #112]	; 0x70
 8003738:	e02d      	b.n	8003796 <HAL_RCC_OscConfig+0x376>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x33c>
 8003742:	4b6b      	ldr	r3, [pc, #428]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4a6a      	ldr	r2, [pc, #424]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	6713      	str	r3, [r2, #112]	; 0x70
 800374e:	4b68      	ldr	r3, [pc, #416]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a67      	ldr	r2, [pc, #412]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003754:	f023 0304 	bic.w	r3, r3, #4
 8003758:	6713      	str	r3, [r2, #112]	; 0x70
 800375a:	e01c      	b.n	8003796 <HAL_RCC_OscConfig+0x376>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b05      	cmp	r3, #5
 8003762:	d10c      	bne.n	800377e <HAL_RCC_OscConfig+0x35e>
 8003764:	4b62      	ldr	r3, [pc, #392]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	4a61      	ldr	r2, [pc, #388]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 800376a:	f043 0304 	orr.w	r3, r3, #4
 800376e:	6713      	str	r3, [r2, #112]	; 0x70
 8003770:	4b5f      	ldr	r3, [pc, #380]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	4a5e      	ldr	r2, [pc, #376]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6713      	str	r3, [r2, #112]	; 0x70
 800377c:	e00b      	b.n	8003796 <HAL_RCC_OscConfig+0x376>
 800377e:	4b5c      	ldr	r3, [pc, #368]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	4a5b      	ldr	r2, [pc, #364]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	6713      	str	r3, [r2, #112]	; 0x70
 800378a:	4b59      	ldr	r3, [pc, #356]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	4a58      	ldr	r2, [pc, #352]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003790:	f023 0304 	bic.w	r3, r3, #4
 8003794:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d015      	beq.n	80037ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379e:	f7fe ff3f 	bl	8002620 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a4:	e00a      	b.n	80037bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a6:	f7fe ff3b 	bl	8002620 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0d8      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037bc:	4b4c      	ldr	r3, [pc, #304]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0ee      	beq.n	80037a6 <HAL_RCC_OscConfig+0x386>
 80037c8:	e014      	b.n	80037f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ca:	f7fe ff29 	bl	8002620 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d0:	e00a      	b.n	80037e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d2:	f7fe ff25 	bl	8002620 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e0c2      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e8:	4b41      	ldr	r3, [pc, #260]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1ee      	bne.n	80037d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d105      	bne.n	8003806 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fa:	4b3d      	ldr	r3, [pc, #244]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	4a3c      	ldr	r2, [pc, #240]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003804:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80ae 	beq.w	800396c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003810:	4b37      	ldr	r3, [pc, #220]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b08      	cmp	r3, #8
 800381a:	d06d      	beq.n	80038f8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d14b      	bne.n	80038bc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003824:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a31      	ldr	r2, [pc, #196]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 800382a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800382e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fe fef6 	bl	8002620 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe fef2 	bl	8002620 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e091      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384a:	4b29      	ldr	r3, [pc, #164]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69da      	ldr	r2, [r3, #28]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	019b      	lsls	r3, r3, #6
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	085b      	lsrs	r3, r3, #1
 800386e:	3b01      	subs	r3, #1
 8003870:	041b      	lsls	r3, r3, #16
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	061b      	lsls	r3, r3, #24
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	071b      	lsls	r3, r3, #28
 8003882:	491b      	ldr	r1, [pc, #108]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003888:	4b19      	ldr	r3, [pc, #100]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a18      	ldr	r2, [pc, #96]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 800388e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fe fec4 	bl	8002620 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389c:	f7fe fec0 	bl	8002620 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e05f      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ae:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x47c>
 80038ba:	e057      	b.n	800396c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038bc:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0b      	ldr	r2, [pc, #44]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80038c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fe feaa 	bl	8002620 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7fe fea6 	bl	8002620 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e045      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e2:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_RCC_OscConfig+0x4d0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4b0>
 80038ee:	e03d      	b.n	800396c <HAL_RCC_OscConfig+0x54c>
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80038f8:	4b1f      	ldr	r3, [pc, #124]	; (8003978 <HAL_RCC_OscConfig+0x558>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d030      	beq.n	8003968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d129      	bne.n	8003968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d122      	bne.n	8003968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003928:	4013      	ands	r3, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800392e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003930:	4293      	cmp	r3, r2
 8003932:	d119      	bne.n	8003968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	3b01      	subs	r3, #1
 8003942:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d10f      	bne.n	8003968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d107      	bne.n	8003968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800

0800397c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0d0      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003994:	4b6a      	ldr	r3, [pc, #424]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d910      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b67      	ldr	r3, [pc, #412]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 020f 	bic.w	r2, r3, #15
 80039aa:	4965      	ldr	r1, [pc, #404]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b63      	ldr	r3, [pc, #396]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0b8      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d020      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039dc:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a58      	ldr	r2, [pc, #352]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 80039e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f4:	4b53      	ldr	r3, [pc, #332]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a52      	ldr	r2, [pc, #328]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 80039fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a00:	4b50      	ldr	r3, [pc, #320]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	494d      	ldr	r1, [pc, #308]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d040      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b47      	ldr	r3, [pc, #284]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d115      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e07f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d107      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3e:	4b41      	ldr	r3, [pc, #260]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e073      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4e:	4b3d      	ldr	r3, [pc, #244]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e06b      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a5e:	4b39      	ldr	r3, [pc, #228]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f023 0203 	bic.w	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4936      	ldr	r1, [pc, #216]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a70:	f7fe fdd6 	bl	8002620 <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	e00a      	b.n	8003a8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a78:	f7fe fdd2 	bl	8002620 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e053      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8e:	4b2d      	ldr	r3, [pc, #180]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 020c 	and.w	r2, r3, #12
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d1eb      	bne.n	8003a78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa0:	4b27      	ldr	r3, [pc, #156]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d210      	bcs.n	8003ad0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aae:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 020f 	bic.w	r2, r3, #15
 8003ab6:	4922      	ldr	r1, [pc, #136]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e032      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003adc:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4916      	ldr	r1, [pc, #88]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	490e      	ldr	r1, [pc, #56]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b0e:	f000 f821 	bl	8003b54 <HAL_RCC_GetSysClockFreq>
 8003b12:	4602      	mov	r2, r0
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	490a      	ldr	r1, [pc, #40]	; (8003b48 <HAL_RCC_ClockConfig+0x1cc>)
 8003b20:	5ccb      	ldrb	r3, [r1, r3]
 8003b22:	fa22 f303 	lsr.w	r3, r2, r3
 8003b26:	4a09      	ldr	r2, [pc, #36]	; (8003b4c <HAL_RCC_ClockConfig+0x1d0>)
 8003b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <HAL_RCC_ClockConfig+0x1d4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe fbb0 	bl	8002294 <HAL_InitTick>

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40023c00 	.word	0x40023c00
 8003b44:	40023800 	.word	0x40023800
 8003b48:	0800fa74 	.word	0x0800fa74
 8003b4c:	20000060 	.word	0x20000060
 8003b50:	20000064 	.word	0x20000064

08003b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	607b      	str	r3, [r7, #4]
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	2300      	movs	r3, #0
 8003b66:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b6c:	4b67      	ldr	r3, [pc, #412]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 030c 	and.w	r3, r3, #12
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d00d      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0x40>
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	f200 80bd 	bhi.w	8003cf8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x34>
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d003      	beq.n	8003b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b86:	e0b7      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b88:	4b61      	ldr	r3, [pc, #388]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b8a:	60bb      	str	r3, [r7, #8]
      break;
 8003b8c:	e0b7      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b8e:	4b61      	ldr	r3, [pc, #388]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003b90:	60bb      	str	r3, [r7, #8]
      break;
 8003b92:	e0b4      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b94:	4b5d      	ldr	r3, [pc, #372]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b9c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b9e:	4b5b      	ldr	r3, [pc, #364]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d04d      	beq.n	8003c46 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003baa:	4b58      	ldr	r3, [pc, #352]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	099b      	lsrs	r3, r3, #6
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bba:	f04f 0100 	mov.w	r1, #0
 8003bbe:	ea02 0800 	and.w	r8, r2, r0
 8003bc2:	ea03 0901 	and.w	r9, r3, r1
 8003bc6:	4640      	mov	r0, r8
 8003bc8:	4649      	mov	r1, r9
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	014b      	lsls	r3, r1, #5
 8003bd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bd8:	0142      	lsls	r2, r0, #5
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4619      	mov	r1, r3
 8003bde:	ebb0 0008 	subs.w	r0, r0, r8
 8003be2:	eb61 0109 	sbc.w	r1, r1, r9
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	018b      	lsls	r3, r1, #6
 8003bf0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bf4:	0182      	lsls	r2, r0, #6
 8003bf6:	1a12      	subs	r2, r2, r0
 8003bf8:	eb63 0301 	sbc.w	r3, r3, r1
 8003bfc:	f04f 0000 	mov.w	r0, #0
 8003c00:	f04f 0100 	mov.w	r1, #0
 8003c04:	00d9      	lsls	r1, r3, #3
 8003c06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c0a:	00d0      	lsls	r0, r2, #3
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	eb12 0208 	adds.w	r2, r2, r8
 8003c14:	eb43 0309 	adc.w	r3, r3, r9
 8003c18:	f04f 0000 	mov.w	r0, #0
 8003c1c:	f04f 0100 	mov.w	r1, #0
 8003c20:	0259      	lsls	r1, r3, #9
 8003c22:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c26:	0250      	lsls	r0, r2, #9
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4619      	mov	r1, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	f7fc fd16 	bl	8000668 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4613      	mov	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e04a      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c46:	4b31      	ldr	r3, [pc, #196]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	099b      	lsrs	r3, r3, #6
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c56:	f04f 0100 	mov.w	r1, #0
 8003c5a:	ea02 0400 	and.w	r4, r2, r0
 8003c5e:	ea03 0501 	and.w	r5, r3, r1
 8003c62:	4620      	mov	r0, r4
 8003c64:	4629      	mov	r1, r5
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	014b      	lsls	r3, r1, #5
 8003c70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c74:	0142      	lsls	r2, r0, #5
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	1b00      	subs	r0, r0, r4
 8003c7c:	eb61 0105 	sbc.w	r1, r1, r5
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	018b      	lsls	r3, r1, #6
 8003c8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c8e:	0182      	lsls	r2, r0, #6
 8003c90:	1a12      	subs	r2, r2, r0
 8003c92:	eb63 0301 	sbc.w	r3, r3, r1
 8003c96:	f04f 0000 	mov.w	r0, #0
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	00d9      	lsls	r1, r3, #3
 8003ca0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ca4:	00d0      	lsls	r0, r2, #3
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	1912      	adds	r2, r2, r4
 8003cac:	eb45 0303 	adc.w	r3, r5, r3
 8003cb0:	f04f 0000 	mov.w	r0, #0
 8003cb4:	f04f 0100 	mov.w	r1, #0
 8003cb8:	0299      	lsls	r1, r3, #10
 8003cba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cbe:	0290      	lsls	r0, r2, #10
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	f7fc fcca 	bl	8000668 <__aeabi_uldivmod>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4613      	mov	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	60bb      	str	r3, [r7, #8]
      break;
 8003cf6:	e002      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003cfa:	60bb      	str	r3, [r7, #8]
      break;
 8003cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	00f42400 	.word	0x00f42400
 8003d14:	007a1200 	.word	0x007a1200

08003d18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	20000060 	.word	0x20000060

08003d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d34:	f7ff fff0 	bl	8003d18 <HAL_RCC_GetHCLKFreq>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	0a9b      	lsrs	r3, r3, #10
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	4903      	ldr	r1, [pc, #12]	; (8003d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d46:	5ccb      	ldrb	r3, [r1, r3]
 8003d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40023800 	.word	0x40023800
 8003d54:	0800fa84 	.word	0x0800fa84

08003d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d5c:	f7ff ffdc 	bl	8003d18 <HAL_RCC_GetHCLKFreq>
 8003d60:	4602      	mov	r2, r0
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	0b5b      	lsrs	r3, r3, #13
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	4903      	ldr	r1, [pc, #12]	; (8003d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d6e:	5ccb      	ldrb	r3, [r1, r3]
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	0800fa84 	.word	0x0800fa84

08003d80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	220f      	movs	r2, #15
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d90:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <HAL_RCC_GetClockConfig+0x5c>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 0203 	and.w	r2, r3, #3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <HAL_RCC_GetClockConfig+0x5c>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <HAL_RCC_GetClockConfig+0x5c>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_RCC_GetClockConfig+0x5c>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	08db      	lsrs	r3, r3, #3
 8003dba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dc2:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <HAL_RCC_GetClockConfig+0x60>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 020f 	and.w	r2, r3, #15
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	601a      	str	r2, [r3, #0]
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40023c00 	.word	0x40023c00

08003de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d012      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e0c:	4b69      	ldr	r3, [pc, #420]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	4a68      	ldr	r2, [pc, #416]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e16:	6093      	str	r3, [r2, #8]
 8003e18:	4b66      	ldr	r3, [pc, #408]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e20:	4964      	ldr	r1, [pc, #400]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d017      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e3e:	4b5d      	ldr	r3, [pc, #372]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4c:	4959      	ldr	r1, [pc, #356]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d017      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e7a:	4b4e      	ldr	r3, [pc, #312]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	494a      	ldr	r1, [pc, #296]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e98:	d101      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 808b 	beq.w	8003fde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ec8:	4b3a      	ldr	r3, [pc, #232]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	4a39      	ldr	r2, [pc, #228]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed4:	4b37      	ldr	r3, [pc, #220]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ee0:	4b35      	ldr	r3, [pc, #212]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a34      	ldr	r2, [pc, #208]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eec:	f7fe fb98 	bl	8002620 <HAL_GetTick>
 8003ef0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef4:	f7fe fb94 	bl	8002620 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b64      	cmp	r3, #100	; 0x64
 8003f00:	d901      	bls.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e38f      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f06:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f12:	4b28      	ldr	r3, [pc, #160]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d035      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d02e      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f30:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f3a:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f44:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f46:	4b1b      	ldr	r3, [pc, #108]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	4a1a      	ldr	r2, [pc, #104]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f52:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f58:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d114      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f64:	f7fe fb5c 	bl	8002620 <HAL_GetTick>
 8003f68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6a:	e00a      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f6c:	f7fe fb58 	bl	8002620 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e351      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0ee      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f9a:	d111      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003faa:	400b      	ands	r3, r1
 8003fac:	4901      	ldr	r1, [pc, #4]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	608b      	str	r3, [r1, #8]
 8003fb2:	e00b      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	40007000 	.word	0x40007000
 8003fbc:	0ffffcff 	.word	0x0ffffcff
 8003fc0:	4bb3      	ldr	r3, [pc, #716]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	4ab2      	ldr	r2, [pc, #712]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003fca:	6093      	str	r3, [r2, #8]
 8003fcc:	4bb0      	ldr	r3, [pc, #704]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd8:	49ad      	ldr	r1, [pc, #692]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d010      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fea:	4ba9      	ldr	r3, [pc, #676]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff0:	4aa7      	ldr	r2, [pc, #668]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ffa:	4ba5      	ldr	r3, [pc, #660]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ffc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	49a2      	ldr	r1, [pc, #648]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004018:	4b9d      	ldr	r3, [pc, #628]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004026:	499a      	ldr	r1, [pc, #616]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800403a:	4b95      	ldr	r3, [pc, #596]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004040:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004048:	4991      	ldr	r1, [pc, #580]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800405c:	4b8c      	ldr	r3, [pc, #560]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406a:	4989      	ldr	r1, [pc, #548]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800407e:	4b84      	ldr	r3, [pc, #528]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004084:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	4980      	ldr	r1, [pc, #512]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040a0:	4b7b      	ldr	r3, [pc, #492]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a6:	f023 0203 	bic.w	r2, r3, #3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	4978      	ldr	r1, [pc, #480]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040c2:	4b73      	ldr	r3, [pc, #460]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	f023 020c 	bic.w	r2, r3, #12
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d0:	496f      	ldr	r1, [pc, #444]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040e4:	4b6a      	ldr	r3, [pc, #424]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f2:	4967      	ldr	r1, [pc, #412]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004106:	4b62      	ldr	r3, [pc, #392]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004114:	495e      	ldr	r1, [pc, #376]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004128:	4b59      	ldr	r3, [pc, #356]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	4956      	ldr	r1, [pc, #344]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800414a:	4b51      	ldr	r3, [pc, #324]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004158:	494d      	ldr	r1, [pc, #308]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800416c:	4b48      	ldr	r3, [pc, #288]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004172:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417a:	4945      	ldr	r1, [pc, #276]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800418e:	4b40      	ldr	r3, [pc, #256]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004194:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419c:	493c      	ldr	r1, [pc, #240]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041b0:	4b37      	ldr	r3, [pc, #220]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041be:	4934      	ldr	r1, [pc, #208]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d011      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041d2:	4b2f      	ldr	r3, [pc, #188]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e0:	492b      	ldr	r1, [pc, #172]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041f0:	d101      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80041f2:	2301      	movs	r3, #1
 80041f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004202:	2301      	movs	r3, #1
 8004204:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004212:	4b1f      	ldr	r3, [pc, #124]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004218:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004220:	491b      	ldr	r1, [pc, #108]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004234:	4b16      	ldr	r3, [pc, #88]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004244:	4912      	ldr	r1, [pc, #72]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00b      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004258:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004268:	4909      	ldr	r1, [pc, #36]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00f      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800427c:	4b04      	ldr	r3, [pc, #16]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800427e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004282:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428c:	e002      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800428e:	bf00      	nop
 8004290:	40023800 	.word	0x40023800
 8004294:	4986      	ldr	r1, [pc, #536]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00b      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80042a8:	4b81      	ldr	r3, [pc, #516]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042b8:	497d      	ldr	r1, [pc, #500]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d006      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 80d6 	beq.w	8004480 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042d4:	4b76      	ldr	r3, [pc, #472]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a75      	ldr	r2, [pc, #468]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e0:	f7fe f99e 	bl	8002620 <HAL_GetTick>
 80042e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042e8:	f7fe f99a 	bl	8002620 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	; 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e195      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042fa:	4b6d      	ldr	r3, [pc, #436]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d021      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004316:	2b00      	cmp	r3, #0
 8004318:	d11d      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800431a:	4b65      	ldr	r3, [pc, #404]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800431c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004320:	0c1b      	lsrs	r3, r3, #16
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004328:	4b61      	ldr	r3, [pc, #388]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432e:	0e1b      	lsrs	r3, r3, #24
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	019a      	lsls	r2, r3, #6
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	431a      	orrs	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	061b      	lsls	r3, r3, #24
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	071b      	lsls	r3, r3, #28
 800434e:	4958      	ldr	r1, [pc, #352]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d004      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800436a:	d00a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004374:	2b00      	cmp	r3, #0
 8004376:	d02e      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004380:	d129      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004382:	4b4b      	ldr	r3, [pc, #300]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004390:	4b47      	ldr	r3, [pc, #284]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004396:	0f1b      	lsrs	r3, r3, #28
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	019a      	lsls	r2, r3, #6
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	041b      	lsls	r3, r3, #16
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	061b      	lsls	r3, r3, #24
 80043b0:	431a      	orrs	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	071b      	lsls	r3, r3, #28
 80043b6:	493e      	ldr	r1, [pc, #248]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043be:	4b3c      	ldr	r3, [pc, #240]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c4:	f023 021f 	bic.w	r2, r3, #31
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	3b01      	subs	r3, #1
 80043ce:	4938      	ldr	r1, [pc, #224]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01d      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043e2:	4b33      	ldr	r3, [pc, #204]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e8:	0e1b      	lsrs	r3, r3, #24
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043f0:	4b2f      	ldr	r3, [pc, #188]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f6:	0f1b      	lsrs	r3, r3, #28
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	019a      	lsls	r2, r3, #6
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	041b      	lsls	r3, r3, #16
 800440a:	431a      	orrs	r2, r3
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	061b      	lsls	r3, r3, #24
 8004410:	431a      	orrs	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	071b      	lsls	r3, r3, #28
 8004416:	4926      	ldr	r1, [pc, #152]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d011      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	019a      	lsls	r2, r3, #6
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	041b      	lsls	r3, r3, #16
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	061b      	lsls	r3, r3, #24
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	071b      	lsls	r3, r3, #28
 8004446:	491a      	ldr	r1, [pc, #104]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800444e:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a17      	ldr	r2, [pc, #92]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004454:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004458:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800445a:	f7fe f8e1 	bl	8002620 <HAL_GetTick>
 800445e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004462:	f7fe f8dd 	bl	8002620 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b64      	cmp	r3, #100	; 0x64
 800446e:	d901      	bls.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e0d8      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004474:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b01      	cmp	r3, #1
 8004484:	f040 80ce 	bne.w	8004624 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004488:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a08      	ldr	r2, [pc, #32]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800448e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004494:	f7fe f8c4 	bl	8002620 <HAL_GetTick>
 8004498:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800449a:	e00b      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800449c:	f7fe f8c0 	bl	8002620 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	; 0x64
 80044a8:	d904      	bls.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e0bb      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80044ae:	bf00      	nop
 80044b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044b4:	4b5e      	ldr	r3, [pc, #376]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044c0:	d0ec      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d02e      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d12a      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044ea:	4b51      	ldr	r3, [pc, #324]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f0:	0c1b      	lsrs	r3, r3, #16
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044f8:	4b4d      	ldr	r3, [pc, #308]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fe:	0f1b      	lsrs	r3, r3, #28
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	019a      	lsls	r2, r3, #6
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	041b      	lsls	r3, r3, #16
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	061b      	lsls	r3, r3, #24
 8004518:	431a      	orrs	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	071b      	lsls	r3, r3, #28
 800451e:	4944      	ldr	r1, [pc, #272]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004526:	4b42      	ldr	r3, [pc, #264]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800452c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	3b01      	subs	r3, #1
 8004536:	021b      	lsls	r3, r3, #8
 8004538:	493d      	ldr	r1, [pc, #244]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d022      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004554:	d11d      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004556:	4b36      	ldr	r3, [pc, #216]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	0e1b      	lsrs	r3, r3, #24
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004564:	4b32      	ldr	r3, [pc, #200]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	0f1b      	lsrs	r3, r3, #28
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	019a      	lsls	r2, r3, #6
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	041b      	lsls	r3, r3, #16
 800457e:	431a      	orrs	r2, r3
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	061b      	lsls	r3, r3, #24
 8004584:	431a      	orrs	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	071b      	lsls	r3, r3, #28
 800458a:	4929      	ldr	r1, [pc, #164]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d028      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800459e:	4b24      	ldr	r3, [pc, #144]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a4:	0e1b      	lsrs	r3, r3, #24
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045ac:	4b20      	ldr	r3, [pc, #128]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	0c1b      	lsrs	r3, r3, #16
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	019a      	lsls	r2, r3, #6
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	041b      	lsls	r3, r3, #16
 80045c4:	431a      	orrs	r2, r3
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	061b      	lsls	r3, r3, #24
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	071b      	lsls	r3, r3, #28
 80045d2:	4917      	ldr	r1, [pc, #92]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80045da:	4b15      	ldr	r3, [pc, #84]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	4911      	ldr	r1, [pc, #68]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045f0:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a0e      	ldr	r2, [pc, #56]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045fc:	f7fe f810 	bl	8002620 <HAL_GetTick>
 8004600:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004604:	f7fe f80c 	bl	8002620 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b64      	cmp	r3, #100	; 0x64
 8004610:	d901      	bls.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e007      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800461e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004622:	d1ef      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3720      	adds	r7, #32
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40023800 	.word	0x40023800

08004634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e049      	b.n	80046da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fd fc00 	bl	8001e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3304      	adds	r3, #4
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f000 fd30 	bl	80050d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d001      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e054      	b.n	80047a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a26      	ldr	r2, [pc, #152]	; (80047b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d022      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x80>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004726:	d01d      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x80>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a22      	ldr	r2, [pc, #136]	; (80047b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d018      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x80>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a21      	ldr	r2, [pc, #132]	; (80047bc <HAL_TIM_Base_Start_IT+0xd8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x80>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1f      	ldr	r2, [pc, #124]	; (80047c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00e      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x80>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a1e      	ldr	r2, [pc, #120]	; (80047c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x80>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x80>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <HAL_TIM_Base_Start_IT+0xe8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d115      	bne.n	8004790 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	4b19      	ldr	r3, [pc, #100]	; (80047d0 <HAL_TIM_Base_Start_IT+0xec>)
 800476c:	4013      	ands	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b06      	cmp	r3, #6
 8004774:	d015      	beq.n	80047a2 <HAL_TIM_Base_Start_IT+0xbe>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d011      	beq.n	80047a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478e:	e008      	b.n	80047a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0201 	orr.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	e000      	b.n	80047a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40000400 	.word	0x40000400
 80047bc:	40000800 	.word	0x40000800
 80047c0:	40000c00 	.word	0x40000c00
 80047c4:	40010400 	.word	0x40010400
 80047c8:	40014000 	.word	0x40014000
 80047cc:	40001800 	.word	0x40001800
 80047d0:	00010007 	.word	0x00010007

080047d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e049      	b.n	800487a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f841 	bl	8004882 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3304      	adds	r3, #4
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f000 fc60 	bl	80050d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <HAL_TIM_PWM_Start+0x24>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	bf14      	ite	ne
 80048b4:	2301      	movne	r3, #1
 80048b6:	2300      	moveq	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	e03c      	b.n	8004936 <HAL_TIM_PWM_Start+0x9e>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d109      	bne.n	80048d6 <HAL_TIM_PWM_Start+0x3e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	bf14      	ite	ne
 80048ce:	2301      	movne	r3, #1
 80048d0:	2300      	moveq	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	e02f      	b.n	8004936 <HAL_TIM_PWM_Start+0x9e>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d109      	bne.n	80048f0 <HAL_TIM_PWM_Start+0x58>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	bf14      	ite	ne
 80048e8:	2301      	movne	r3, #1
 80048ea:	2300      	moveq	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	e022      	b.n	8004936 <HAL_TIM_PWM_Start+0x9e>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b0c      	cmp	r3, #12
 80048f4:	d109      	bne.n	800490a <HAL_TIM_PWM_Start+0x72>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b01      	cmp	r3, #1
 8004900:	bf14      	ite	ne
 8004902:	2301      	movne	r3, #1
 8004904:	2300      	moveq	r3, #0
 8004906:	b2db      	uxtb	r3, r3
 8004908:	e015      	b.n	8004936 <HAL_TIM_PWM_Start+0x9e>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b10      	cmp	r3, #16
 800490e:	d109      	bne.n	8004924 <HAL_TIM_PWM_Start+0x8c>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	bf14      	ite	ne
 800491c:	2301      	movne	r3, #1
 800491e:	2300      	moveq	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	e008      	b.n	8004936 <HAL_TIM_PWM_Start+0x9e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	bf14      	ite	ne
 8004930:	2301      	movne	r3, #1
 8004932:	2300      	moveq	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e092      	b.n	8004a64 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d104      	bne.n	800494e <HAL_TIM_PWM_Start+0xb6>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800494c:	e023      	b.n	8004996 <HAL_TIM_PWM_Start+0xfe>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b04      	cmp	r3, #4
 8004952:	d104      	bne.n	800495e <HAL_TIM_PWM_Start+0xc6>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800495c:	e01b      	b.n	8004996 <HAL_TIM_PWM_Start+0xfe>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b08      	cmp	r3, #8
 8004962:	d104      	bne.n	800496e <HAL_TIM_PWM_Start+0xd6>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800496c:	e013      	b.n	8004996 <HAL_TIM_PWM_Start+0xfe>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b0c      	cmp	r3, #12
 8004972:	d104      	bne.n	800497e <HAL_TIM_PWM_Start+0xe6>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800497c:	e00b      	b.n	8004996 <HAL_TIM_PWM_Start+0xfe>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b10      	cmp	r3, #16
 8004982:	d104      	bne.n	800498e <HAL_TIM_PWM_Start+0xf6>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800498c:	e003      	b.n	8004996 <HAL_TIM_PWM_Start+0xfe>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2202      	movs	r2, #2
 8004992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2201      	movs	r2, #1
 800499c:	6839      	ldr	r1, [r7, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 ff32 	bl	8005808 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a30      	ldr	r2, [pc, #192]	; (8004a6c <HAL_TIM_PWM_Start+0x1d4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <HAL_TIM_PWM_Start+0x120>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a2f      	ldr	r2, [pc, #188]	; (8004a70 <HAL_TIM_PWM_Start+0x1d8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d101      	bne.n	80049bc <HAL_TIM_PWM_Start+0x124>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <HAL_TIM_PWM_Start+0x126>
 80049bc:	2300      	movs	r3, #0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a25      	ldr	r2, [pc, #148]	; (8004a6c <HAL_TIM_PWM_Start+0x1d4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d022      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x18a>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e4:	d01d      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x18a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a22      	ldr	r2, [pc, #136]	; (8004a74 <HAL_TIM_PWM_Start+0x1dc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d018      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x18a>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a20      	ldr	r2, [pc, #128]	; (8004a78 <HAL_TIM_PWM_Start+0x1e0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d013      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x18a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1f      	ldr	r2, [pc, #124]	; (8004a7c <HAL_TIM_PWM_Start+0x1e4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00e      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x18a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a19      	ldr	r2, [pc, #100]	; (8004a70 <HAL_TIM_PWM_Start+0x1d8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d009      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x18a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <HAL_TIM_PWM_Start+0x1e8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d004      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x18a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a19      	ldr	r2, [pc, #100]	; (8004a84 <HAL_TIM_PWM_Start+0x1ec>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d115      	bne.n	8004a4e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <HAL_TIM_PWM_Start+0x1f0>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b06      	cmp	r3, #6
 8004a32:	d015      	beq.n	8004a60 <HAL_TIM_PWM_Start+0x1c8>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3a:	d011      	beq.n	8004a60 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4c:	e008      	b.n	8004a60 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0201 	orr.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e000      	b.n	8004a62 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40010000 	.word	0x40010000
 8004a70:	40010400 	.word	0x40010400
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40000c00 	.word	0x40000c00
 8004a80:	40014000 	.word	0x40014000
 8004a84:	40001800 	.word	0x40001800
 8004a88:	00010007 	.word	0x00010007

08004a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d122      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d11b      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0202 	mvn.w	r2, #2
 8004ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fae4 	bl	800509c <HAL_TIM_IC_CaptureCallback>
 8004ad4:	e005      	b.n	8004ae2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fad6 	bl	8005088 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fae7 	bl	80050b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d122      	bne.n	8004b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d11b      	bne.n	8004b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0204 	mvn.w	r2, #4
 8004b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2202      	movs	r2, #2
 8004b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 faba 	bl	800509c <HAL_TIM_IC_CaptureCallback>
 8004b28:	e005      	b.n	8004b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 faac 	bl	8005088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fabd 	bl	80050b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d122      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d11b      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0208 	mvn.w	r2, #8
 8004b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2204      	movs	r2, #4
 8004b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fa90 	bl	800509c <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fa82 	bl	8005088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fa93 	bl	80050b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b10      	cmp	r3, #16
 8004b9c:	d122      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b10      	cmp	r3, #16
 8004baa:	d11b      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0210 	mvn.w	r2, #16
 8004bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2208      	movs	r2, #8
 8004bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fa66 	bl	800509c <HAL_TIM_IC_CaptureCallback>
 8004bd0:	e005      	b.n	8004bde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fa58 	bl	8005088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fa69 	bl	80050b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d10e      	bne.n	8004c10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d107      	bne.n	8004c10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0201 	mvn.w	r2, #1
 8004c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fd f8e8 	bl	8001de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1a:	2b80      	cmp	r3, #128	; 0x80
 8004c1c:	d10e      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c28:	2b80      	cmp	r3, #128	; 0x80
 8004c2a:	d107      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 ff22 	bl	8005a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4a:	d10e      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c56:	2b80      	cmp	r3, #128	; 0x80
 8004c58:	d107      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 ff15 	bl	8005a94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c74:	2b40      	cmp	r3, #64	; 0x40
 8004c76:	d10e      	bne.n	8004c96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c82:	2b40      	cmp	r3, #64	; 0x40
 8004c84:	d107      	bne.n	8004c96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fa17 	bl	80050c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f003 0320 	and.w	r3, r3, #32
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d10e      	bne.n	8004cc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b20      	cmp	r3, #32
 8004cb0:	d107      	bne.n	8004cc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f06f 0220 	mvn.w	r2, #32
 8004cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fed5 	bl	8005a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cc2:	bf00      	nop
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e0ff      	b.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b14      	cmp	r3, #20
 8004cf6:	f200 80f0 	bhi.w	8004eda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004cfa:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004d55 	.word	0x08004d55
 8004d04:	08004edb 	.word	0x08004edb
 8004d08:	08004edb 	.word	0x08004edb
 8004d0c:	08004edb 	.word	0x08004edb
 8004d10:	08004d95 	.word	0x08004d95
 8004d14:	08004edb 	.word	0x08004edb
 8004d18:	08004edb 	.word	0x08004edb
 8004d1c:	08004edb 	.word	0x08004edb
 8004d20:	08004dd7 	.word	0x08004dd7
 8004d24:	08004edb 	.word	0x08004edb
 8004d28:	08004edb 	.word	0x08004edb
 8004d2c:	08004edb 	.word	0x08004edb
 8004d30:	08004e17 	.word	0x08004e17
 8004d34:	08004edb 	.word	0x08004edb
 8004d38:	08004edb 	.word	0x08004edb
 8004d3c:	08004edb 	.word	0x08004edb
 8004d40:	08004e59 	.word	0x08004e59
 8004d44:	08004edb 	.word	0x08004edb
 8004d48:	08004edb 	.word	0x08004edb
 8004d4c:	08004edb 	.word	0x08004edb
 8004d50:	08004e99 	.word	0x08004e99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fa5c 	bl	8005218 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0208 	orr.w	r2, r2, #8
 8004d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699a      	ldr	r2, [r3, #24]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0204 	bic.w	r2, r2, #4
 8004d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6999      	ldr	r1, [r3, #24]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	619a      	str	r2, [r3, #24]
      break;
 8004d92:	e0a5      	b.n	8004ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 faae 	bl	80052fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6999      	ldr	r1, [r3, #24]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	021a      	lsls	r2, r3, #8
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	619a      	str	r2, [r3, #24]
      break;
 8004dd4:	e084      	b.n	8004ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68b9      	ldr	r1, [r7, #8]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 fb05 	bl	80053ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69da      	ldr	r2, [r3, #28]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0208 	orr.w	r2, r2, #8
 8004df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69da      	ldr	r2, [r3, #28]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0204 	bic.w	r2, r2, #4
 8004e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69d9      	ldr	r1, [r3, #28]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	61da      	str	r2, [r3, #28]
      break;
 8004e14:	e064      	b.n	8004ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fb5b 	bl	80054d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69d9      	ldr	r1, [r3, #28]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	021a      	lsls	r2, r3, #8
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	61da      	str	r2, [r3, #28]
      break;
 8004e56:	e043      	b.n	8004ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fb92 	bl	8005588 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0208 	orr.w	r2, r2, #8
 8004e72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0204 	bic.w	r2, r2, #4
 8004e82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e96:	e023      	b.n	8004ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fbc4 	bl	800562c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	021a      	lsls	r2, r3, #8
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ed8:	e002      	b.n	8004ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ede:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop

08004ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_TIM_ConfigClockSource+0x1c>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e0b4      	b.n	800507a <HAL_TIM_ConfigClockSource+0x186>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	4b56      	ldr	r3, [pc, #344]	; (8005084 <HAL_TIM_ConfigClockSource+0x190>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f48:	d03e      	beq.n	8004fc8 <HAL_TIM_ConfigClockSource+0xd4>
 8004f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4e:	f200 8087 	bhi.w	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f56:	f000 8086 	beq.w	8005066 <HAL_TIM_ConfigClockSource+0x172>
 8004f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5e:	d87f      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f60:	2b70      	cmp	r3, #112	; 0x70
 8004f62:	d01a      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0xa6>
 8004f64:	2b70      	cmp	r3, #112	; 0x70
 8004f66:	d87b      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f68:	2b60      	cmp	r3, #96	; 0x60
 8004f6a:	d050      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x11a>
 8004f6c:	2b60      	cmp	r3, #96	; 0x60
 8004f6e:	d877      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f70:	2b50      	cmp	r3, #80	; 0x50
 8004f72:	d03c      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0xfa>
 8004f74:	2b50      	cmp	r3, #80	; 0x50
 8004f76:	d873      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	d058      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x13a>
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d86f      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f80:	2b30      	cmp	r3, #48	; 0x30
 8004f82:	d064      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f84:	2b30      	cmp	r3, #48	; 0x30
 8004f86:	d86b      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d060      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d867      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d05c      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f94:	2b10      	cmp	r3, #16
 8004f96:	d05a      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f98:	e062      	b.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6899      	ldr	r1, [r3, #8]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f000 fc0d 	bl	80057c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	609a      	str	r2, [r3, #8]
      break;
 8004fc6:	e04f      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	6899      	ldr	r1, [r3, #8]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f000 fbf6 	bl	80057c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fea:	609a      	str	r2, [r3, #8]
      break;
 8004fec:	e03c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6859      	ldr	r1, [r3, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f000 fb6a 	bl	80056d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2150      	movs	r1, #80	; 0x50
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fbc3 	bl	8005792 <TIM_ITRx_SetConfig>
      break;
 800500c:	e02c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6859      	ldr	r1, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	461a      	mov	r2, r3
 800501c:	f000 fb89 	bl	8005732 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2160      	movs	r1, #96	; 0x60
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fbb3 	bl	8005792 <TIM_ITRx_SetConfig>
      break;
 800502c:	e01c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6859      	ldr	r1, [r3, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	461a      	mov	r2, r3
 800503c:	f000 fb4a 	bl	80056d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2140      	movs	r1, #64	; 0x40
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fba3 	bl	8005792 <TIM_ITRx_SetConfig>
      break;
 800504c:	e00c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4619      	mov	r1, r3
 8005058:	4610      	mov	r0, r2
 800505a:	f000 fb9a 	bl	8005792 <TIM_ITRx_SetConfig>
      break;
 800505e:	e003      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
      break;
 8005064:	e000      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005078:	7bfb      	ldrb	r3, [r7, #15]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	fffeff88 	.word	0xfffeff88

08005088 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a40      	ldr	r2, [pc, #256]	; (80051ec <TIM_Base_SetConfig+0x114>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <TIM_Base_SetConfig+0x40>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f6:	d00f      	beq.n	8005118 <TIM_Base_SetConfig+0x40>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a3d      	ldr	r2, [pc, #244]	; (80051f0 <TIM_Base_SetConfig+0x118>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00b      	beq.n	8005118 <TIM_Base_SetConfig+0x40>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a3c      	ldr	r2, [pc, #240]	; (80051f4 <TIM_Base_SetConfig+0x11c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d007      	beq.n	8005118 <TIM_Base_SetConfig+0x40>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a3b      	ldr	r2, [pc, #236]	; (80051f8 <TIM_Base_SetConfig+0x120>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d003      	beq.n	8005118 <TIM_Base_SetConfig+0x40>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a3a      	ldr	r2, [pc, #232]	; (80051fc <TIM_Base_SetConfig+0x124>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d108      	bne.n	800512a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a2f      	ldr	r2, [pc, #188]	; (80051ec <TIM_Base_SetConfig+0x114>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d02b      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005138:	d027      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a2c      	ldr	r2, [pc, #176]	; (80051f0 <TIM_Base_SetConfig+0x118>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d023      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a2b      	ldr	r2, [pc, #172]	; (80051f4 <TIM_Base_SetConfig+0x11c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d01f      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a2a      	ldr	r2, [pc, #168]	; (80051f8 <TIM_Base_SetConfig+0x120>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d01b      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a29      	ldr	r2, [pc, #164]	; (80051fc <TIM_Base_SetConfig+0x124>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d017      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a28      	ldr	r2, [pc, #160]	; (8005200 <TIM_Base_SetConfig+0x128>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a27      	ldr	r2, [pc, #156]	; (8005204 <TIM_Base_SetConfig+0x12c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00f      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a26      	ldr	r2, [pc, #152]	; (8005208 <TIM_Base_SetConfig+0x130>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00b      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a25      	ldr	r2, [pc, #148]	; (800520c <TIM_Base_SetConfig+0x134>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d007      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a24      	ldr	r2, [pc, #144]	; (8005210 <TIM_Base_SetConfig+0x138>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d003      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a23      	ldr	r2, [pc, #140]	; (8005214 <TIM_Base_SetConfig+0x13c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d108      	bne.n	800519c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <TIM_Base_SetConfig+0x114>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_Base_SetConfig+0xf8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a0c      	ldr	r2, [pc, #48]	; (80051fc <TIM_Base_SetConfig+0x124>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d103      	bne.n	80051d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	615a      	str	r2, [r3, #20]
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40010000 	.word	0x40010000
 80051f0:	40000400 	.word	0x40000400
 80051f4:	40000800 	.word	0x40000800
 80051f8:	40000c00 	.word	0x40000c00
 80051fc:	40010400 	.word	0x40010400
 8005200:	40014000 	.word	0x40014000
 8005204:	40014400 	.word	0x40014400
 8005208:	40014800 	.word	0x40014800
 800520c:	40001800 	.word	0x40001800
 8005210:	40001c00 	.word	0x40001c00
 8005214:	40002000 	.word	0x40002000

08005218 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0201 	bic.w	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4b2b      	ldr	r3, [pc, #172]	; (80052f0 <TIM_OC1_SetConfig+0xd8>)
 8005244:	4013      	ands	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0303 	bic.w	r3, r3, #3
 800524e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f023 0302 	bic.w	r3, r3, #2
 8005260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <TIM_OC1_SetConfig+0xdc>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d003      	beq.n	800527c <TIM_OC1_SetConfig+0x64>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a20      	ldr	r2, [pc, #128]	; (80052f8 <TIM_OC1_SetConfig+0xe0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d10c      	bne.n	8005296 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f023 0308 	bic.w	r3, r3, #8
 8005282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f023 0304 	bic.w	r3, r3, #4
 8005294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a16      	ldr	r2, [pc, #88]	; (80052f4 <TIM_OC1_SetConfig+0xdc>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d003      	beq.n	80052a6 <TIM_OC1_SetConfig+0x8e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a15      	ldr	r2, [pc, #84]	; (80052f8 <TIM_OC1_SetConfig+0xe0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d111      	bne.n	80052ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	621a      	str	r2, [r3, #32]
}
 80052e4:	bf00      	nop
 80052e6:	371c      	adds	r7, #28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	fffeff8f 	.word	0xfffeff8f
 80052f4:	40010000 	.word	0x40010000
 80052f8:	40010400 	.word	0x40010400

080052fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f023 0210 	bic.w	r2, r3, #16
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4b2e      	ldr	r3, [pc, #184]	; (80053e0 <TIM_OC2_SetConfig+0xe4>)
 8005328:	4013      	ands	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	021b      	lsls	r3, r3, #8
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f023 0320 	bic.w	r3, r3, #32
 8005346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a23      	ldr	r2, [pc, #140]	; (80053e4 <TIM_OC2_SetConfig+0xe8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_OC2_SetConfig+0x68>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a22      	ldr	r2, [pc, #136]	; (80053e8 <TIM_OC2_SetConfig+0xec>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d10d      	bne.n	8005380 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800536a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800537e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a18      	ldr	r2, [pc, #96]	; (80053e4 <TIM_OC2_SetConfig+0xe8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d003      	beq.n	8005390 <TIM_OC2_SetConfig+0x94>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a17      	ldr	r2, [pc, #92]	; (80053e8 <TIM_OC2_SetConfig+0xec>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d113      	bne.n	80053b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005396:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800539e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	feff8fff 	.word	0xfeff8fff
 80053e4:	40010000 	.word	0x40010000
 80053e8:	40010400 	.word	0x40010400

080053ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4b2d      	ldr	r3, [pc, #180]	; (80054cc <TIM_OC3_SetConfig+0xe0>)
 8005418:	4013      	ands	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	021b      	lsls	r3, r3, #8
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a22      	ldr	r2, [pc, #136]	; (80054d0 <TIM_OC3_SetConfig+0xe4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d003      	beq.n	8005452 <TIM_OC3_SetConfig+0x66>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a21      	ldr	r2, [pc, #132]	; (80054d4 <TIM_OC3_SetConfig+0xe8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d10d      	bne.n	800546e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	021b      	lsls	r3, r3, #8
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800546c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a17      	ldr	r2, [pc, #92]	; (80054d0 <TIM_OC3_SetConfig+0xe4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d003      	beq.n	800547e <TIM_OC3_SetConfig+0x92>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a16      	ldr	r2, [pc, #88]	; (80054d4 <TIM_OC3_SetConfig+0xe8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d113      	bne.n	80054a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800548c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	621a      	str	r2, [r3, #32]
}
 80054c0:	bf00      	nop
 80054c2:	371c      	adds	r7, #28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	fffeff8f 	.word	0xfffeff8f
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40010400 	.word	0x40010400

080054d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4b1e      	ldr	r3, [pc, #120]	; (800557c <TIM_OC4_SetConfig+0xa4>)
 8005504:	4013      	ands	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	031b      	lsls	r3, r3, #12
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a13      	ldr	r2, [pc, #76]	; (8005580 <TIM_OC4_SetConfig+0xa8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_OC4_SetConfig+0x68>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a12      	ldr	r2, [pc, #72]	; (8005584 <TIM_OC4_SetConfig+0xac>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d109      	bne.n	8005554 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	019b      	lsls	r3, r3, #6
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	feff8fff 	.word	0xfeff8fff
 8005580:	40010000 	.word	0x40010000
 8005584:	40010400 	.word	0x40010400

08005588 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4b1b      	ldr	r3, [pc, #108]	; (8005620 <TIM_OC5_SetConfig+0x98>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	041b      	lsls	r3, r3, #16
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a12      	ldr	r2, [pc, #72]	; (8005624 <TIM_OC5_SetConfig+0x9c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d003      	beq.n	80055e6 <TIM_OC5_SetConfig+0x5e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a11      	ldr	r2, [pc, #68]	; (8005628 <TIM_OC5_SetConfig+0xa0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d109      	bne.n	80055fa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	621a      	str	r2, [r3, #32]
}
 8005614:	bf00      	nop
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	fffeff8f 	.word	0xfffeff8f
 8005624:	40010000 	.word	0x40010000
 8005628:	40010400 	.word	0x40010400

0800562c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4b1c      	ldr	r3, [pc, #112]	; (80056c8 <TIM_OC6_SetConfig+0x9c>)
 8005658:	4013      	ands	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	021b      	lsls	r3, r3, #8
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800566e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	051b      	lsls	r3, r3, #20
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a13      	ldr	r2, [pc, #76]	; (80056cc <TIM_OC6_SetConfig+0xa0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d003      	beq.n	800568c <TIM_OC6_SetConfig+0x60>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a12      	ldr	r2, [pc, #72]	; (80056d0 <TIM_OC6_SetConfig+0xa4>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d109      	bne.n	80056a0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005692:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	029b      	lsls	r3, r3, #10
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	621a      	str	r2, [r3, #32]
}
 80056ba:	bf00      	nop
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	feff8fff 	.word	0xfeff8fff
 80056cc:	40010000 	.word	0x40010000
 80056d0:	40010400 	.word	0x40010400

080056d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	f023 0201 	bic.w	r2, r3, #1
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f023 030a 	bic.w	r3, r3, #10
 8005710:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4313      	orrs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	621a      	str	r2, [r3, #32]
}
 8005726:	bf00      	nop
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005732:	b480      	push	{r7}
 8005734:	b087      	sub	sp, #28
 8005736:	af00      	add	r7, sp, #0
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f023 0210 	bic.w	r2, r3, #16
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800575c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	031b      	lsls	r3, r3, #12
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800576e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	621a      	str	r2, [r3, #32]
}
 8005786:	bf00      	nop
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f043 0307 	orr.w	r3, r3, #7
 80057b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	609a      	str	r2, [r3, #8]
}
 80057bc:	bf00      	nop
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	021a      	lsls	r2, r3, #8
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	431a      	orrs	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	609a      	str	r2, [r3, #8]
}
 80057fc:	bf00      	nop
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f003 031f 	and.w	r3, r3, #31
 800581a:	2201      	movs	r2, #1
 800581c:	fa02 f303 	lsl.w	r3, r2, r3
 8005820:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a1a      	ldr	r2, [r3, #32]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	43db      	mvns	r3, r3
 800582a:	401a      	ands	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a1a      	ldr	r2, [r3, #32]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	fa01 f303 	lsl.w	r3, r1, r3
 8005840:	431a      	orrs	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005868:	2302      	movs	r3, #2
 800586a:	e06d      	b.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a30      	ldr	r2, [pc, #192]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d004      	beq.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a2f      	ldr	r2, [pc, #188]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d108      	bne.n	80058b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a20      	ldr	r2, [pc, #128]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d022      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058de:	d01d      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1d      	ldr	r2, [pc, #116]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d018      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1c      	ldr	r2, [pc, #112]	; (8005960 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d013      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1a      	ldr	r2, [pc, #104]	; (8005964 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00e      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a15      	ldr	r2, [pc, #84]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d009      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a16      	ldr	r2, [pc, #88]	; (8005968 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a15      	ldr	r2, [pc, #84]	; (800596c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d10c      	bne.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005922:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	4313      	orrs	r3, r2
 800592c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	40010000 	.word	0x40010000
 8005958:	40010400 	.word	0x40010400
 800595c:	40000400 	.word	0x40000400
 8005960:	40000800 	.word	0x40000800
 8005964:	40000c00 	.word	0x40000c00
 8005968:	40014000 	.word	0x40014000
 800596c:	40001800 	.word	0x40001800

08005970 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005988:	2302      	movs	r3, #2
 800598a:	e065      	b.n	8005a58 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	041b      	lsls	r3, r3, #16
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a16      	ldr	r2, [pc, #88]	; (8005a64 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d004      	beq.n	8005a1a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a14      	ldr	r2, [pc, #80]	; (8005a68 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d115      	bne.n	8005a46 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	051b      	lsls	r3, r3, #20
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	40010000 	.word	0x40010000
 8005a68:	40010400 	.word	0x40010400

08005a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e040      	b.n	8005b3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fc fac8 	bl	8002060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2224      	movs	r2, #36	; 0x24
 8005ad4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0201 	bic.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fc8e 	bl	8006408 <UART_SetConfig>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d101      	bne.n	8005af6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e022      	b.n	8005b3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fee4 	bl	80068cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 ff6b 	bl	8006a10 <UART_CheckIdleState>
 8005b3a:	4603      	mov	r3, r0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b08b      	sub	sp, #44	; 0x2c
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	d156      	bne.n	8005c08 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <HAL_UART_Transmit_IT+0x22>
 8005b60:	88fb      	ldrh	r3, [r7, #6]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e04f      	b.n	8005c0a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_UART_Transmit_IT+0x34>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e048      	b.n	8005c0a <HAL_UART_Transmit_IT+0xc6>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	88fa      	ldrh	r2, [r7, #6]
 8005b8a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	88fa      	ldrh	r2, [r7, #6]
 8005b92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2221      	movs	r2, #33	; 0x21
 8005ba8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb2:	d107      	bne.n	8005bc4 <HAL_UART_Transmit_IT+0x80>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d103      	bne.n	8005bc4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4a16      	ldr	r2, [pc, #88]	; (8005c18 <HAL_UART_Transmit_IT+0xd4>)
 8005bc0:	669a      	str	r2, [r3, #104]	; 0x68
 8005bc2:	e002      	b.n	8005bca <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4a15      	ldr	r2, [pc, #84]	; (8005c1c <HAL_UART_Transmit_IT+0xd8>)
 8005bc8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	613b      	str	r3, [r7, #16]
   return(result);
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	461a      	mov	r2, r3
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	623b      	str	r3, [r7, #32]
 8005bf2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf4:	69f9      	ldr	r1, [r7, #28]
 8005bf6:	6a3a      	ldr	r2, [r7, #32]
 8005bf8:	e841 2300 	strex	r3, r2, [r1]
 8005bfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1e6      	bne.n	8005bd2 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	e000      	b.n	8005c0a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005c08:	2302      	movs	r3, #2
  }
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	372c      	adds	r7, #44	; 0x2c
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	08007141 	.word	0x08007141
 8005c1c:	0800708b 	.word	0x0800708b

08005c20 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08a      	sub	sp, #40	; 0x28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	d13d      	bne.n	8005cb2 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <HAL_UART_Receive_DMA+0x22>
 8005c3c:	88fb      	ldrh	r3, [r7, #6]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e036      	b.n	8005cb4 <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_UART_Receive_DMA+0x34>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e02f      	b.n	8005cb4 <HAL_UART_Receive_DMA+0x94>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d018      	beq.n	8005ca2 <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c84:	627b      	str	r3, [r7, #36]	; 0x24
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	623b      	str	r3, [r7, #32]
 8005c90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c92:	69f9      	ldr	r1, [r7, #28]
 8005c94:	6a3a      	ldr	r2, [r7, #32]
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1e6      	bne.n	8005c70 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	68b9      	ldr	r1, [r7, #8]
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 ffbf 	bl	8006c2c <UART_Start_Receive_DMA>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	e000      	b.n	8005cb4 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cb2:	2302      	movs	r3, #2
  }
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3728      	adds	r7, #40	; 0x28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b090      	sub	sp, #64	; 0x40
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cda:	2b80      	cmp	r3, #128	; 0x80
 8005cdc:	d139      	bne.n	8005d52 <HAL_UART_DMAStop+0x96>
 8005cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce0:	2b21      	cmp	r3, #33	; 0x21
 8005ce2:	d136      	bne.n	8005d52 <HAL_UART_DMAStop+0x96>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3308      	adds	r3, #8
 8005cea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3308      	adds	r3, #8
 8005d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e5      	bne.n	8005ce4 <HAL_UART_DMAStop+0x28>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d015      	beq.n	8005d4c <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fc fe77 	bl	8002a18 <HAL_DMA_Abort>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00d      	beq.n	8005d4c <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7fd f88b 	bl	8002e50 <HAL_DMA_GetError>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d105      	bne.n	8005d4c <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2210      	movs	r2, #16
 8005d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e044      	b.n	8005dd6 <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f001 f813 	bl	8006d78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5c:	2b40      	cmp	r3, #64	; 0x40
 8005d5e:	d139      	bne.n	8005dd4 <HAL_UART_DMAStop+0x118>
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	2b22      	cmp	r3, #34	; 0x22
 8005d64:	d136      	bne.n	8005dd4 <HAL_UART_DMAStop+0x118>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	e853 3f00 	ldrex	r3, [r3]
 8005d74:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3308      	adds	r3, #8
 8005d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d86:	61ba      	str	r2, [r7, #24]
 8005d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8a:	6979      	ldr	r1, [r7, #20]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	e841 2300 	strex	r3, r2, [r1]
 8005d92:	613b      	str	r3, [r7, #16]
   return(result);
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1e5      	bne.n	8005d66 <HAL_UART_DMAStop+0xaa>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d015      	beq.n	8005dce <HAL_UART_DMAStop+0x112>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fc fe36 	bl	8002a18 <HAL_DMA_Abort>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00d      	beq.n	8005dce <HAL_UART_DMAStop+0x112>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fd f84a 	bl	8002e50 <HAL_DMA_GetError>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b20      	cmp	r3, #32
 8005dc0:	d105      	bne.n	8005dce <HAL_UART_DMAStop+0x112>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2210      	movs	r2, #16
 8005dc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e003      	b.n	8005dd6 <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fff8 	bl	8006dc4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3740      	adds	r7, #64	; 0x40
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b0ba      	sub	sp, #232	; 0xe8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e0e:	4013      	ands	r3, r2
 8005e10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d115      	bne.n	8005e48 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00f      	beq.n	8005e48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d009      	beq.n	8005e48 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 82a4 	beq.w	8006386 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
      }
      return;
 8005e46:	e29e      	b.n	8006386 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 8117 	beq.w	8006080 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e62:	4b85      	ldr	r3, [pc, #532]	; (8006078 <HAL_UART_IRQHandler+0x298>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 810a 	beq.w	8006080 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d011      	beq.n	8005e9c <HAL_UART_IRQHandler+0xbc>
 8005e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00b      	beq.n	8005e9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e92:	f043 0201 	orr.w	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d011      	beq.n	8005ecc <HAL_UART_IRQHandler+0xec>
 8005ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00b      	beq.n	8005ecc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2202      	movs	r2, #2
 8005eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ec2:	f043 0204 	orr.w	r2, r3, #4
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d011      	beq.n	8005efc <HAL_UART_IRQHandler+0x11c>
 8005ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00b      	beq.n	8005efc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2204      	movs	r2, #4
 8005eea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ef2:	f043 0202 	orr.w	r2, r3, #2
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f00:	f003 0308 	and.w	r3, r3, #8
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d017      	beq.n	8005f38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d105      	bne.n	8005f20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00b      	beq.n	8005f38 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2208      	movs	r2, #8
 8005f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f2e:	f043 0208 	orr.w	r2, r3, #8
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d012      	beq.n	8005f6a <HAL_UART_IRQHandler+0x18a>
 8005f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00c      	beq.n	8005f6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f60:	f043 0220 	orr.w	r2, r3, #32
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 820a 	beq.w	800638a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00d      	beq.n	8005f9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d007      	beq.n	8005f9e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	d005      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d04f      	beq.n	8006062 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fefe 	bl	8006dc4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd2:	2b40      	cmp	r3, #64	; 0x40
 8005fd4:	d141      	bne.n	800605a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3308      	adds	r3, #8
 8005fdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006002:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006006:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800600e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800601a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1d9      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006026:	2b00      	cmp	r3, #0
 8006028:	d013      	beq.n	8006052 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602e:	4a13      	ldr	r2, [pc, #76]	; (800607c <HAL_UART_IRQHandler+0x29c>)
 8006030:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	4618      	mov	r0, r3
 8006038:	f7fc fd5e 	bl	8002af8 <HAL_DMA_Abort_IT>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d017      	beq.n	8006072 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800604c:	4610      	mov	r0, r2
 800604e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006050:	e00f      	b.n	8006072 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f9b8 	bl	80063c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006058:	e00b      	b.n	8006072 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f9b4 	bl	80063c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006060:	e007      	b.n	8006072 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f9b0 	bl	80063c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006070:	e18b      	b.n	800638a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006072:	bf00      	nop
    return;
 8006074:	e189      	b.n	800638a <HAL_UART_IRQHandler+0x5aa>
 8006076:	bf00      	nop
 8006078:	04000120 	.word	0x04000120
 800607c:	0800705f 	.word	0x0800705f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006084:	2b01      	cmp	r3, #1
 8006086:	f040 8144 	bne.w	8006312 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800608a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800608e:	f003 0310 	and.w	r3, r3, #16
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 813d 	beq.w	8006312 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 8136 	beq.w	8006312 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2210      	movs	r2, #16
 80060ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b8:	2b40      	cmp	r3, #64	; 0x40
 80060ba:	f040 80b2 	bne.w	8006222 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 815d 	beq.w	800638e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80060da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060de:	429a      	cmp	r2, r3
 80060e0:	f080 8155 	bcs.w	800638e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f8:	f000 8085 	beq.w	8006206 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006118:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006126:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800612a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006132:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006136:	e841 2300 	strex	r3, r2, [r1]
 800613a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800613e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1da      	bne.n	80060fc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3308      	adds	r3, #8
 800614c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006158:	f023 0301 	bic.w	r3, r3, #1
 800615c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3308      	adds	r3, #8
 8006166:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800616a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800616e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006170:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006172:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800617c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e1      	bne.n	8006146 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3308      	adds	r3, #8
 8006188:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3308      	adds	r3, #8
 80061a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061ae:	e841 2300 	strex	r3, r2, [r1]
 80061b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1e3      	bne.n	8006182 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2220      	movs	r2, #32
 80061be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ce:	e853 3f00 	ldrex	r3, [r3]
 80061d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d6:	f023 0310 	bic.w	r3, r3, #16
 80061da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80061ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061f0:	e841 2300 	strex	r3, r2, [r1]
 80061f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1e4      	bne.n	80061c6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006200:	4618      	mov	r0, r3
 8006202:	f7fc fc09 	bl	8002a18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006212:	b29b      	uxth	r3, r3
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	b29b      	uxth	r3, r3
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f8de 	bl	80063dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006220:	e0b5      	b.n	800638e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800622e:	b29b      	uxth	r3, r3
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 80a7 	beq.w	8006392 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006244:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 80a2 	beq.w	8006392 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800625c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006262:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	461a      	mov	r2, r3
 800626c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006270:	647b      	str	r3, [r7, #68]	; 0x44
 8006272:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006276:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800627e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e4      	bne.n	800624e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3308      	adds	r3, #8
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	623b      	str	r3, [r7, #32]
   return(result);
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	f023 0301 	bic.w	r3, r3, #1
 800629a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3308      	adds	r3, #8
 80062a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062a8:	633a      	str	r2, [r7, #48]	; 0x30
 80062aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e3      	bne.n	8006284 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	e853 3f00 	ldrex	r3, [r3]
 80062da:	60fb      	str	r3, [r7, #12]
   return(result);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0310 	bic.w	r3, r3, #16
 80062e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062f0:	61fb      	str	r3, [r7, #28]
 80062f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	69b9      	ldr	r1, [r7, #24]
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	e841 2300 	strex	r3, r2, [r1]
 80062fc:	617b      	str	r3, [r7, #20]
   return(result);
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e4      	bne.n	80062ce <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006308:	4619      	mov	r1, r3
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f866 	bl	80063dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006310:	e03f      	b.n	8006392 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00e      	beq.n	800633c <HAL_UART_IRQHandler+0x55c>
 800631e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d008      	beq.n	800633c <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006332:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f85d 	bl	80063f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800633a:	e02d      	b.n	8006398 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800633c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00e      	beq.n	8006366 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800634c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006358:	2b00      	cmp	r3, #0
 800635a:	d01c      	beq.n	8006396 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	4798      	blx	r3
    }
    return;
 8006364:	e017      	b.n	8006396 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d012      	beq.n	8006398 <HAL_UART_IRQHandler+0x5b8>
 8006372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00c      	beq.n	8006398 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 ff3e 	bl	8007200 <UART_EndTransmit_IT>
    return;
 8006384:	e008      	b.n	8006398 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006386:	bf00      	nop
 8006388:	e006      	b.n	8006398 <HAL_UART_IRQHandler+0x5b8>
    return;
 800638a:	bf00      	nop
 800638c:	e004      	b.n	8006398 <HAL_UART_IRQHandler+0x5b8>
      return;
 800638e:	bf00      	nop
 8006390:	e002      	b.n	8006398 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006392:	bf00      	nop
 8006394:	e000      	b.n	8006398 <HAL_UART_IRQHandler+0x5b8>
    return;
 8006396:	bf00      	nop
  }

}
 8006398:	37e8      	adds	r7, #232	; 0xe8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop

080063a0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	460b      	mov	r3, r1
 80063e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b088      	sub	sp, #32
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	431a      	orrs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4ba7      	ldr	r3, [pc, #668]	; (80066d0 <UART_SetConfig+0x2c8>)
 8006434:	4013      	ands	r3, r2
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6812      	ldr	r2, [r2, #0]
 800643a:	6979      	ldr	r1, [r7, #20]
 800643c:	430b      	orrs	r3, r1
 800643e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	430a      	orrs	r2, r1
 8006478:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a95      	ldr	r2, [pc, #596]	; (80066d4 <UART_SetConfig+0x2cc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d120      	bne.n	80064c6 <UART_SetConfig+0xbe>
 8006484:	4b94      	ldr	r3, [pc, #592]	; (80066d8 <UART_SetConfig+0x2d0>)
 8006486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	2b03      	cmp	r3, #3
 8006490:	d816      	bhi.n	80064c0 <UART_SetConfig+0xb8>
 8006492:	a201      	add	r2, pc, #4	; (adr r2, 8006498 <UART_SetConfig+0x90>)
 8006494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006498:	080064a9 	.word	0x080064a9
 800649c:	080064b5 	.word	0x080064b5
 80064a0:	080064af 	.word	0x080064af
 80064a4:	080064bb 	.word	0x080064bb
 80064a8:	2301      	movs	r3, #1
 80064aa:	77fb      	strb	r3, [r7, #31]
 80064ac:	e14f      	b.n	800674e <UART_SetConfig+0x346>
 80064ae:	2302      	movs	r3, #2
 80064b0:	77fb      	strb	r3, [r7, #31]
 80064b2:	e14c      	b.n	800674e <UART_SetConfig+0x346>
 80064b4:	2304      	movs	r3, #4
 80064b6:	77fb      	strb	r3, [r7, #31]
 80064b8:	e149      	b.n	800674e <UART_SetConfig+0x346>
 80064ba:	2308      	movs	r3, #8
 80064bc:	77fb      	strb	r3, [r7, #31]
 80064be:	e146      	b.n	800674e <UART_SetConfig+0x346>
 80064c0:	2310      	movs	r3, #16
 80064c2:	77fb      	strb	r3, [r7, #31]
 80064c4:	e143      	b.n	800674e <UART_SetConfig+0x346>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a84      	ldr	r2, [pc, #528]	; (80066dc <UART_SetConfig+0x2d4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d132      	bne.n	8006536 <UART_SetConfig+0x12e>
 80064d0:	4b81      	ldr	r3, [pc, #516]	; (80066d8 <UART_SetConfig+0x2d0>)
 80064d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d6:	f003 030c 	and.w	r3, r3, #12
 80064da:	2b0c      	cmp	r3, #12
 80064dc:	d828      	bhi.n	8006530 <UART_SetConfig+0x128>
 80064de:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <UART_SetConfig+0xdc>)
 80064e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e4:	08006519 	.word	0x08006519
 80064e8:	08006531 	.word	0x08006531
 80064ec:	08006531 	.word	0x08006531
 80064f0:	08006531 	.word	0x08006531
 80064f4:	08006525 	.word	0x08006525
 80064f8:	08006531 	.word	0x08006531
 80064fc:	08006531 	.word	0x08006531
 8006500:	08006531 	.word	0x08006531
 8006504:	0800651f 	.word	0x0800651f
 8006508:	08006531 	.word	0x08006531
 800650c:	08006531 	.word	0x08006531
 8006510:	08006531 	.word	0x08006531
 8006514:	0800652b 	.word	0x0800652b
 8006518:	2300      	movs	r3, #0
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e117      	b.n	800674e <UART_SetConfig+0x346>
 800651e:	2302      	movs	r3, #2
 8006520:	77fb      	strb	r3, [r7, #31]
 8006522:	e114      	b.n	800674e <UART_SetConfig+0x346>
 8006524:	2304      	movs	r3, #4
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e111      	b.n	800674e <UART_SetConfig+0x346>
 800652a:	2308      	movs	r3, #8
 800652c:	77fb      	strb	r3, [r7, #31]
 800652e:	e10e      	b.n	800674e <UART_SetConfig+0x346>
 8006530:	2310      	movs	r3, #16
 8006532:	77fb      	strb	r3, [r7, #31]
 8006534:	e10b      	b.n	800674e <UART_SetConfig+0x346>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a69      	ldr	r2, [pc, #420]	; (80066e0 <UART_SetConfig+0x2d8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d120      	bne.n	8006582 <UART_SetConfig+0x17a>
 8006540:	4b65      	ldr	r3, [pc, #404]	; (80066d8 <UART_SetConfig+0x2d0>)
 8006542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006546:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800654a:	2b30      	cmp	r3, #48	; 0x30
 800654c:	d013      	beq.n	8006576 <UART_SetConfig+0x16e>
 800654e:	2b30      	cmp	r3, #48	; 0x30
 8006550:	d814      	bhi.n	800657c <UART_SetConfig+0x174>
 8006552:	2b20      	cmp	r3, #32
 8006554:	d009      	beq.n	800656a <UART_SetConfig+0x162>
 8006556:	2b20      	cmp	r3, #32
 8006558:	d810      	bhi.n	800657c <UART_SetConfig+0x174>
 800655a:	2b00      	cmp	r3, #0
 800655c:	d002      	beq.n	8006564 <UART_SetConfig+0x15c>
 800655e:	2b10      	cmp	r3, #16
 8006560:	d006      	beq.n	8006570 <UART_SetConfig+0x168>
 8006562:	e00b      	b.n	800657c <UART_SetConfig+0x174>
 8006564:	2300      	movs	r3, #0
 8006566:	77fb      	strb	r3, [r7, #31]
 8006568:	e0f1      	b.n	800674e <UART_SetConfig+0x346>
 800656a:	2302      	movs	r3, #2
 800656c:	77fb      	strb	r3, [r7, #31]
 800656e:	e0ee      	b.n	800674e <UART_SetConfig+0x346>
 8006570:	2304      	movs	r3, #4
 8006572:	77fb      	strb	r3, [r7, #31]
 8006574:	e0eb      	b.n	800674e <UART_SetConfig+0x346>
 8006576:	2308      	movs	r3, #8
 8006578:	77fb      	strb	r3, [r7, #31]
 800657a:	e0e8      	b.n	800674e <UART_SetConfig+0x346>
 800657c:	2310      	movs	r3, #16
 800657e:	77fb      	strb	r3, [r7, #31]
 8006580:	e0e5      	b.n	800674e <UART_SetConfig+0x346>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a57      	ldr	r2, [pc, #348]	; (80066e4 <UART_SetConfig+0x2dc>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d120      	bne.n	80065ce <UART_SetConfig+0x1c6>
 800658c:	4b52      	ldr	r3, [pc, #328]	; (80066d8 <UART_SetConfig+0x2d0>)
 800658e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006592:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006596:	2bc0      	cmp	r3, #192	; 0xc0
 8006598:	d013      	beq.n	80065c2 <UART_SetConfig+0x1ba>
 800659a:	2bc0      	cmp	r3, #192	; 0xc0
 800659c:	d814      	bhi.n	80065c8 <UART_SetConfig+0x1c0>
 800659e:	2b80      	cmp	r3, #128	; 0x80
 80065a0:	d009      	beq.n	80065b6 <UART_SetConfig+0x1ae>
 80065a2:	2b80      	cmp	r3, #128	; 0x80
 80065a4:	d810      	bhi.n	80065c8 <UART_SetConfig+0x1c0>
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <UART_SetConfig+0x1a8>
 80065aa:	2b40      	cmp	r3, #64	; 0x40
 80065ac:	d006      	beq.n	80065bc <UART_SetConfig+0x1b4>
 80065ae:	e00b      	b.n	80065c8 <UART_SetConfig+0x1c0>
 80065b0:	2300      	movs	r3, #0
 80065b2:	77fb      	strb	r3, [r7, #31]
 80065b4:	e0cb      	b.n	800674e <UART_SetConfig+0x346>
 80065b6:	2302      	movs	r3, #2
 80065b8:	77fb      	strb	r3, [r7, #31]
 80065ba:	e0c8      	b.n	800674e <UART_SetConfig+0x346>
 80065bc:	2304      	movs	r3, #4
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e0c5      	b.n	800674e <UART_SetConfig+0x346>
 80065c2:	2308      	movs	r3, #8
 80065c4:	77fb      	strb	r3, [r7, #31]
 80065c6:	e0c2      	b.n	800674e <UART_SetConfig+0x346>
 80065c8:	2310      	movs	r3, #16
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e0bf      	b.n	800674e <UART_SetConfig+0x346>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a45      	ldr	r2, [pc, #276]	; (80066e8 <UART_SetConfig+0x2e0>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d125      	bne.n	8006624 <UART_SetConfig+0x21c>
 80065d8:	4b3f      	ldr	r3, [pc, #252]	; (80066d8 <UART_SetConfig+0x2d0>)
 80065da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e6:	d017      	beq.n	8006618 <UART_SetConfig+0x210>
 80065e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ec:	d817      	bhi.n	800661e <UART_SetConfig+0x216>
 80065ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f2:	d00b      	beq.n	800660c <UART_SetConfig+0x204>
 80065f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f8:	d811      	bhi.n	800661e <UART_SetConfig+0x216>
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <UART_SetConfig+0x1fe>
 80065fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006602:	d006      	beq.n	8006612 <UART_SetConfig+0x20a>
 8006604:	e00b      	b.n	800661e <UART_SetConfig+0x216>
 8006606:	2300      	movs	r3, #0
 8006608:	77fb      	strb	r3, [r7, #31]
 800660a:	e0a0      	b.n	800674e <UART_SetConfig+0x346>
 800660c:	2302      	movs	r3, #2
 800660e:	77fb      	strb	r3, [r7, #31]
 8006610:	e09d      	b.n	800674e <UART_SetConfig+0x346>
 8006612:	2304      	movs	r3, #4
 8006614:	77fb      	strb	r3, [r7, #31]
 8006616:	e09a      	b.n	800674e <UART_SetConfig+0x346>
 8006618:	2308      	movs	r3, #8
 800661a:	77fb      	strb	r3, [r7, #31]
 800661c:	e097      	b.n	800674e <UART_SetConfig+0x346>
 800661e:	2310      	movs	r3, #16
 8006620:	77fb      	strb	r3, [r7, #31]
 8006622:	e094      	b.n	800674e <UART_SetConfig+0x346>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a30      	ldr	r2, [pc, #192]	; (80066ec <UART_SetConfig+0x2e4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d125      	bne.n	800667a <UART_SetConfig+0x272>
 800662e:	4b2a      	ldr	r3, [pc, #168]	; (80066d8 <UART_SetConfig+0x2d0>)
 8006630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006634:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006638:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800663c:	d017      	beq.n	800666e <UART_SetConfig+0x266>
 800663e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006642:	d817      	bhi.n	8006674 <UART_SetConfig+0x26c>
 8006644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006648:	d00b      	beq.n	8006662 <UART_SetConfig+0x25a>
 800664a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800664e:	d811      	bhi.n	8006674 <UART_SetConfig+0x26c>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <UART_SetConfig+0x254>
 8006654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006658:	d006      	beq.n	8006668 <UART_SetConfig+0x260>
 800665a:	e00b      	b.n	8006674 <UART_SetConfig+0x26c>
 800665c:	2301      	movs	r3, #1
 800665e:	77fb      	strb	r3, [r7, #31]
 8006660:	e075      	b.n	800674e <UART_SetConfig+0x346>
 8006662:	2302      	movs	r3, #2
 8006664:	77fb      	strb	r3, [r7, #31]
 8006666:	e072      	b.n	800674e <UART_SetConfig+0x346>
 8006668:	2304      	movs	r3, #4
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e06f      	b.n	800674e <UART_SetConfig+0x346>
 800666e:	2308      	movs	r3, #8
 8006670:	77fb      	strb	r3, [r7, #31]
 8006672:	e06c      	b.n	800674e <UART_SetConfig+0x346>
 8006674:	2310      	movs	r3, #16
 8006676:	77fb      	strb	r3, [r7, #31]
 8006678:	e069      	b.n	800674e <UART_SetConfig+0x346>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1c      	ldr	r2, [pc, #112]	; (80066f0 <UART_SetConfig+0x2e8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d137      	bne.n	80066f4 <UART_SetConfig+0x2ec>
 8006684:	4b14      	ldr	r3, [pc, #80]	; (80066d8 <UART_SetConfig+0x2d0>)
 8006686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800668e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006692:	d017      	beq.n	80066c4 <UART_SetConfig+0x2bc>
 8006694:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006698:	d817      	bhi.n	80066ca <UART_SetConfig+0x2c2>
 800669a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800669e:	d00b      	beq.n	80066b8 <UART_SetConfig+0x2b0>
 80066a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a4:	d811      	bhi.n	80066ca <UART_SetConfig+0x2c2>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <UART_SetConfig+0x2aa>
 80066aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ae:	d006      	beq.n	80066be <UART_SetConfig+0x2b6>
 80066b0:	e00b      	b.n	80066ca <UART_SetConfig+0x2c2>
 80066b2:	2300      	movs	r3, #0
 80066b4:	77fb      	strb	r3, [r7, #31]
 80066b6:	e04a      	b.n	800674e <UART_SetConfig+0x346>
 80066b8:	2302      	movs	r3, #2
 80066ba:	77fb      	strb	r3, [r7, #31]
 80066bc:	e047      	b.n	800674e <UART_SetConfig+0x346>
 80066be:	2304      	movs	r3, #4
 80066c0:	77fb      	strb	r3, [r7, #31]
 80066c2:	e044      	b.n	800674e <UART_SetConfig+0x346>
 80066c4:	2308      	movs	r3, #8
 80066c6:	77fb      	strb	r3, [r7, #31]
 80066c8:	e041      	b.n	800674e <UART_SetConfig+0x346>
 80066ca:	2310      	movs	r3, #16
 80066cc:	77fb      	strb	r3, [r7, #31]
 80066ce:	e03e      	b.n	800674e <UART_SetConfig+0x346>
 80066d0:	efff69f3 	.word	0xefff69f3
 80066d4:	40011000 	.word	0x40011000
 80066d8:	40023800 	.word	0x40023800
 80066dc:	40004400 	.word	0x40004400
 80066e0:	40004800 	.word	0x40004800
 80066e4:	40004c00 	.word	0x40004c00
 80066e8:	40005000 	.word	0x40005000
 80066ec:	40011400 	.word	0x40011400
 80066f0:	40007800 	.word	0x40007800
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a71      	ldr	r2, [pc, #452]	; (80068c0 <UART_SetConfig+0x4b8>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d125      	bne.n	800674a <UART_SetConfig+0x342>
 80066fe:	4b71      	ldr	r3, [pc, #452]	; (80068c4 <UART_SetConfig+0x4bc>)
 8006700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006708:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800670c:	d017      	beq.n	800673e <UART_SetConfig+0x336>
 800670e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006712:	d817      	bhi.n	8006744 <UART_SetConfig+0x33c>
 8006714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006718:	d00b      	beq.n	8006732 <UART_SetConfig+0x32a>
 800671a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800671e:	d811      	bhi.n	8006744 <UART_SetConfig+0x33c>
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <UART_SetConfig+0x324>
 8006724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006728:	d006      	beq.n	8006738 <UART_SetConfig+0x330>
 800672a:	e00b      	b.n	8006744 <UART_SetConfig+0x33c>
 800672c:	2300      	movs	r3, #0
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e00d      	b.n	800674e <UART_SetConfig+0x346>
 8006732:	2302      	movs	r3, #2
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e00a      	b.n	800674e <UART_SetConfig+0x346>
 8006738:	2304      	movs	r3, #4
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e007      	b.n	800674e <UART_SetConfig+0x346>
 800673e:	2308      	movs	r3, #8
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e004      	b.n	800674e <UART_SetConfig+0x346>
 8006744:	2310      	movs	r3, #16
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e001      	b.n	800674e <UART_SetConfig+0x346>
 800674a:	2310      	movs	r3, #16
 800674c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006756:	d15a      	bne.n	800680e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006758:	7ffb      	ldrb	r3, [r7, #31]
 800675a:	2b08      	cmp	r3, #8
 800675c:	d827      	bhi.n	80067ae <UART_SetConfig+0x3a6>
 800675e:	a201      	add	r2, pc, #4	; (adr r2, 8006764 <UART_SetConfig+0x35c>)
 8006760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006764:	08006789 	.word	0x08006789
 8006768:	08006791 	.word	0x08006791
 800676c:	08006799 	.word	0x08006799
 8006770:	080067af 	.word	0x080067af
 8006774:	0800679f 	.word	0x0800679f
 8006778:	080067af 	.word	0x080067af
 800677c:	080067af 	.word	0x080067af
 8006780:	080067af 	.word	0x080067af
 8006784:	080067a7 	.word	0x080067a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006788:	f7fd fad2 	bl	8003d30 <HAL_RCC_GetPCLK1Freq>
 800678c:	61b8      	str	r0, [r7, #24]
        break;
 800678e:	e013      	b.n	80067b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006790:	f7fd fae2 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 8006794:	61b8      	str	r0, [r7, #24]
        break;
 8006796:	e00f      	b.n	80067b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006798:	4b4b      	ldr	r3, [pc, #300]	; (80068c8 <UART_SetConfig+0x4c0>)
 800679a:	61bb      	str	r3, [r7, #24]
        break;
 800679c:	e00c      	b.n	80067b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800679e:	f7fd f9d9 	bl	8003b54 <HAL_RCC_GetSysClockFreq>
 80067a2:	61b8      	str	r0, [r7, #24]
        break;
 80067a4:	e008      	b.n	80067b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067aa:	61bb      	str	r3, [r7, #24]
        break;
 80067ac:	e004      	b.n	80067b8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	77bb      	strb	r3, [r7, #30]
        break;
 80067b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d074      	beq.n	80068a8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	005a      	lsls	r2, r3, #1
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	085b      	lsrs	r3, r3, #1
 80067c8:	441a      	add	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	2b0f      	cmp	r3, #15
 80067d8:	d916      	bls.n	8006808 <UART_SetConfig+0x400>
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e0:	d212      	bcs.n	8006808 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	f023 030f 	bic.w	r3, r3, #15
 80067ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	085b      	lsrs	r3, r3, #1
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	89fb      	ldrh	r3, [r7, #14]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	89fa      	ldrh	r2, [r7, #14]
 8006804:	60da      	str	r2, [r3, #12]
 8006806:	e04f      	b.n	80068a8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	77bb      	strb	r3, [r7, #30]
 800680c:	e04c      	b.n	80068a8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800680e:	7ffb      	ldrb	r3, [r7, #31]
 8006810:	2b08      	cmp	r3, #8
 8006812:	d828      	bhi.n	8006866 <UART_SetConfig+0x45e>
 8006814:	a201      	add	r2, pc, #4	; (adr r2, 800681c <UART_SetConfig+0x414>)
 8006816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681a:	bf00      	nop
 800681c:	08006841 	.word	0x08006841
 8006820:	08006849 	.word	0x08006849
 8006824:	08006851 	.word	0x08006851
 8006828:	08006867 	.word	0x08006867
 800682c:	08006857 	.word	0x08006857
 8006830:	08006867 	.word	0x08006867
 8006834:	08006867 	.word	0x08006867
 8006838:	08006867 	.word	0x08006867
 800683c:	0800685f 	.word	0x0800685f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006840:	f7fd fa76 	bl	8003d30 <HAL_RCC_GetPCLK1Freq>
 8006844:	61b8      	str	r0, [r7, #24]
        break;
 8006846:	e013      	b.n	8006870 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006848:	f7fd fa86 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 800684c:	61b8      	str	r0, [r7, #24]
        break;
 800684e:	e00f      	b.n	8006870 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006850:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <UART_SetConfig+0x4c0>)
 8006852:	61bb      	str	r3, [r7, #24]
        break;
 8006854:	e00c      	b.n	8006870 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006856:	f7fd f97d 	bl	8003b54 <HAL_RCC_GetSysClockFreq>
 800685a:	61b8      	str	r0, [r7, #24]
        break;
 800685c:	e008      	b.n	8006870 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800685e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006862:	61bb      	str	r3, [r7, #24]
        break;
 8006864:	e004      	b.n	8006870 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	77bb      	strb	r3, [r7, #30]
        break;
 800686e:	bf00      	nop
    }

    if (pclk != 0U)
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d018      	beq.n	80068a8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	085a      	lsrs	r2, r3, #1
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	441a      	add	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	fbb2 f3f3 	udiv	r3, r2, r3
 8006888:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	2b0f      	cmp	r3, #15
 800688e:	d909      	bls.n	80068a4 <UART_SetConfig+0x49c>
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006896:	d205      	bcs.n	80068a4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	b29a      	uxth	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60da      	str	r2, [r3, #12]
 80068a2:	e001      	b.n	80068a8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80068b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3720      	adds	r7, #32
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	40007c00 	.word	0x40007c00
 80068c4:	40023800 	.word	0x40023800
 80068c8:	00f42400 	.word	0x00f42400

080068cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00a      	beq.n	80068f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	f003 0304 	and.w	r3, r3, #4
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00a      	beq.n	800693a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d01a      	beq.n	80069e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ca:	d10a      	bne.n	80069e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	605a      	str	r2, [r3, #4]
  }
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a20:	f7fb fdfe 	bl	8002620 <HAL_GetTick>
 8006a24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d10e      	bne.n	8006a52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f82d 	bl	8006aa2 <UART_WaitOnFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e023      	b.n	8006a9a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	2b04      	cmp	r3, #4
 8006a5e:	d10e      	bne.n	8006a7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f817 	bl	8006aa2 <UART_WaitOnFlagUntilTimeout>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e00d      	b.n	8006a9a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2220      	movs	r2, #32
 8006a82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b09c      	sub	sp, #112	; 0x70
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab2:	e0a5      	b.n	8006c00 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aba:	f000 80a1 	beq.w	8006c00 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006abe:	f7fb fdaf 	bl	8002620 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d302      	bcc.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006ace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d13e      	bne.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006adc:	e853 3f00 	ldrex	r3, [r3]
 8006ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ae8:	667b      	str	r3, [r7, #100]	; 0x64
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006af2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006af4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006af8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006afa:	e841 2300 	strex	r3, r2, [r1]
 8006afe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1e6      	bne.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b18:	f023 0301 	bic.w	r3, r3, #1
 8006b1c:	663b      	str	r3, [r7, #96]	; 0x60
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3308      	adds	r3, #8
 8006b24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b26:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e5      	bne.n	8006b06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2220      	movs	r2, #32
 8006b44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e067      	b.n	8006c22 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d04f      	beq.n	8006c00 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b6e:	d147      	bne.n	8006c00 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	e853 3f00 	ldrex	r3, [r3]
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b98:	637b      	str	r3, [r7, #52]	; 0x34
 8006b9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e6      	bne.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	e853 3f00 	ldrex	r3, [r3]
 8006bba:	613b      	str	r3, [r7, #16]
   return(result);
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	f023 0301 	bic.w	r3, r3, #1
 8006bc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3308      	adds	r3, #8
 8006bca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006bcc:	623a      	str	r2, [r7, #32]
 8006bce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	69f9      	ldr	r1, [r7, #28]
 8006bd2:	6a3a      	ldr	r2, [r7, #32]
 8006bd4:	e841 2300 	strex	r3, r2, [r1]
 8006bd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e5      	bne.n	8006bac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2220      	movs	r2, #32
 8006be4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2220      	movs	r2, #32
 8006bea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e010      	b.n	8006c22 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	69da      	ldr	r2, [r3, #28]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	bf0c      	ite	eq
 8006c10:	2301      	moveq	r3, #1
 8006c12:	2300      	movne	r3, #0
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	461a      	mov	r2, r3
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	f43f af4a 	beq.w	8006ab4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3770      	adds	r7, #112	; 0x70
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b096      	sub	sp, #88	; 0x58
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	4613      	mov	r3, r2
 8006c38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	88fa      	ldrh	r2, [r7, #6]
 8006c44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2222      	movs	r2, #34	; 0x22
 8006c54:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d02b      	beq.n	8006cb6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c62:	4a42      	ldr	r2, [pc, #264]	; (8006d6c <UART_Start_Receive_DMA+0x140>)
 8006c64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6a:	4a41      	ldr	r2, [pc, #260]	; (8006d70 <UART_Start_Receive_DMA+0x144>)
 8006c6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c72:	4a40      	ldr	r2, [pc, #256]	; (8006d74 <UART_Start_Receive_DMA+0x148>)
 8006c74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3324      	adds	r3, #36	; 0x24
 8006c88:	4619      	mov	r1, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8e:	461a      	mov	r2, r3
 8006c90:	88fb      	ldrh	r3, [r7, #6]
 8006c92:	f7fb fe61 	bl	8002958 <HAL_DMA_Start_IT>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00c      	beq.n	8006cb6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2210      	movs	r2, #16
 8006ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e055      	b.n	8006d62 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d018      	beq.n	8006cf8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cda:	657b      	str	r3, [r7, #84]	; 0x54
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ce6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e6      	bne.n	8006cc6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	f043 0301 	orr.w	r3, r3, #1
 8006d0e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3308      	adds	r3, #8
 8006d16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d18:	637a      	str	r2, [r7, #52]	; 0x34
 8006d1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d20:	e841 2300 	strex	r3, r2, [r1]
 8006d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1e5      	bne.n	8006cf8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3308      	adds	r3, #8
 8006d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	e853 3f00 	ldrex	r3, [r3]
 8006d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3308      	adds	r3, #8
 8006d4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d4c:	623a      	str	r2, [r7, #32]
 8006d4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d50:	69f9      	ldr	r1, [r7, #28]
 8006d52:	6a3a      	ldr	r2, [r7, #32]
 8006d54:	e841 2300 	strex	r3, r2, [r1]
 8006d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1e5      	bne.n	8006d2c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3758      	adds	r7, #88	; 0x58
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	08006e8b 	.word	0x08006e8b
 8006d70:	08006fab 	.word	0x08006fab
 8006d74:	08006fe3 	.word	0x08006fe3

08006d78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b089      	sub	sp, #36	; 0x24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d94:	61fb      	str	r3, [r7, #28]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	61bb      	str	r3, [r7, #24]
 8006da0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	6979      	ldr	r1, [r7, #20]
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	613b      	str	r3, [r7, #16]
   return(result);
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e6      	bne.n	8006d80 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2220      	movs	r2, #32
 8006db6:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006db8:	bf00      	nop
 8006dba:	3724      	adds	r7, #36	; 0x24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b095      	sub	sp, #84	; 0x54
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd4:	e853 3f00 	ldrex	r3, [r3]
 8006dd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006de0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dea:	643b      	str	r3, [r7, #64]	; 0x40
 8006dec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006df0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006df2:	e841 2300 	strex	r3, r2, [r1]
 8006df6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e6      	bne.n	8006dcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3308      	adds	r3, #8
 8006e04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	e853 3f00 	ldrex	r3, [r3]
 8006e0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	f023 0301 	bic.w	r3, r3, #1
 8006e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e26:	e841 2300 	strex	r3, r2, [r1]
 8006e2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1e5      	bne.n	8006dfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d118      	bne.n	8006e6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f023 0310 	bic.w	r3, r3, #16
 8006e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	461a      	mov	r2, r3
 8006e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e58:	61bb      	str	r3, [r7, #24]
 8006e5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	6979      	ldr	r1, [r7, #20]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	613b      	str	r3, [r7, #16]
   return(result);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e6      	bne.n	8006e3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006e7e:	bf00      	nop
 8006e80:	3754      	adds	r7, #84	; 0x54
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b09c      	sub	sp, #112	; 0x70
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e96:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ea0:	d070      	beq.n	8006f84 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8006ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb2:	e853 3f00 	ldrex	r3, [r3]
 8006eb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ebe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ec8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006eca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ece:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e6      	bne.n	8006eaa <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eee:	f023 0301 	bic.w	r3, r3, #1
 8006ef2:	667b      	str	r3, [r7, #100]	; 0x64
 8006ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3308      	adds	r3, #8
 8006efa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006efc:	647a      	str	r2, [r7, #68]	; 0x44
 8006efe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e5      	bne.n	8006edc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3308      	adds	r3, #8
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	623b      	str	r3, [r7, #32]
   return(result);
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f26:	663b      	str	r3, [r7, #96]	; 0x60
 8006f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f30:	633a      	str	r2, [r7, #48]	; 0x30
 8006f32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e5      	bne.n	8006f10 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f46:	2220      	movs	r2, #32
 8006f48:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d118      	bne.n	8006f84 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	e853 3f00 	ldrex	r3, [r3]
 8006f5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f023 0310 	bic.w	r3, r3, #16
 8006f66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f70:	61fb      	str	r3, [r7, #28]
 8006f72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	69b9      	ldr	r1, [r7, #24]
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e6      	bne.n	8006f52 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d107      	bne.n	8006f9c <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f92:	4619      	mov	r1, r3
 8006f94:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f96:	f7ff fa21 	bl	80063dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f9a:	e002      	b.n	8006fa2 <UART_DMAReceiveCplt+0x118>
    HAL_UART_RxCpltCallback(huart);
 8006f9c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f9e:	f7ff f9ff 	bl	80063a0 <HAL_UART_RxCpltCallback>
}
 8006fa2:	bf00      	nop
 8006fa4:	3770      	adds	r7, #112	; 0x70
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d109      	bne.n	8006fd4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006fc6:	085b      	lsrs	r3, r3, #1
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	4619      	mov	r1, r3
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f7ff fa05 	bl	80063dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fd2:	e002      	b.n	8006fda <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f7ff f9ed 	bl	80063b4 <HAL_UART_RxHalfCpltCallback>
}
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b086      	sub	sp, #24
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ff4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007006:	2b80      	cmp	r3, #128	; 0x80
 8007008:	d109      	bne.n	800701e <UART_DMAError+0x3c>
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	2b21      	cmp	r3, #33	; 0x21
 800700e:	d106      	bne.n	800701e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	2200      	movs	r2, #0
 8007014:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007018:	6978      	ldr	r0, [r7, #20]
 800701a:	f7ff fead 	bl	8006d78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007028:	2b40      	cmp	r3, #64	; 0x40
 800702a:	d109      	bne.n	8007040 <UART_DMAError+0x5e>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b22      	cmp	r3, #34	; 0x22
 8007030:	d106      	bne.n	8007040 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2200      	movs	r2, #0
 8007036:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800703a:	6978      	ldr	r0, [r7, #20]
 800703c:	f7ff fec2 	bl	8006dc4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007046:	f043 0210 	orr.w	r2, r3, #16
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007050:	6978      	ldr	r0, [r7, #20]
 8007052:	f7ff f9b9 	bl	80063c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007056:	bf00      	nop
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f7ff f9a3 	bl	80063c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007082:	bf00      	nop
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800708a:	b480      	push	{r7}
 800708c:	b08f      	sub	sp, #60	; 0x3c
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007096:	2b21      	cmp	r3, #33	; 0x21
 8007098:	d14c      	bne.n	8007134 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d132      	bne.n	800710c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	e853 3f00 	ldrex	r3, [r3]
 80070b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ba:	637b      	str	r3, [r7, #52]	; 0x34
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	461a      	mov	r2, r3
 80070c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070c6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070cc:	e841 2300 	strex	r3, r2, [r1]
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e6      	bne.n	80070a6 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	e853 3f00 	ldrex	r3, [r3]
 80070e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ec:	633b      	str	r3, [r7, #48]	; 0x30
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	461a      	mov	r2, r3
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	61bb      	str	r3, [r7, #24]
 80070f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fa:	6979      	ldr	r1, [r7, #20]
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	e841 2300 	strex	r3, r2, [r1]
 8007102:	613b      	str	r3, [r7, #16]
   return(result);
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1e6      	bne.n	80070d8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800710a:	e013      	b.n	8007134 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007110:	781a      	ldrb	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007134:	bf00      	nop
 8007136:	373c      	adds	r7, #60	; 0x3c
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007140:	b480      	push	{r7}
 8007142:	b091      	sub	sp, #68	; 0x44
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800714c:	2b21      	cmp	r3, #33	; 0x21
 800714e:	d151      	bne.n	80071f4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007156:	b29b      	uxth	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d132      	bne.n	80071c2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	623b      	str	r3, [r7, #32]
   return(result);
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007170:	63bb      	str	r3, [r7, #56]	; 0x38
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	633b      	str	r3, [r7, #48]	; 0x30
 800717c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e6      	bne.n	800715c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	e853 3f00 	ldrex	r3, [r3]
 800719a:	60fb      	str	r3, [r7, #12]
   return(result);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071a2:	637b      	str	r3, [r7, #52]	; 0x34
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	461a      	mov	r2, r3
 80071aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ac:	61fb      	str	r3, [r7, #28]
 80071ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b0:	69b9      	ldr	r1, [r7, #24]
 80071b2:	69fa      	ldr	r2, [r7, #28]
 80071b4:	e841 2300 	strex	r3, r2, [r1]
 80071b8:	617b      	str	r3, [r7, #20]
   return(result);
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1e6      	bne.n	800718e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80071c0:	e018      	b.n	80071f4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80071c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071d6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071dc:	1c9a      	adds	r2, r3, #2
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	3b01      	subs	r3, #1
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80071f4:	bf00      	nop
 80071f6:	3744      	adds	r7, #68	; 0x44
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b088      	sub	sp, #32
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	60bb      	str	r3, [r7, #8]
   return(result);
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800721c:	61fb      	str	r3, [r7, #28]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	61bb      	str	r3, [r7, #24]
 8007228:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	6979      	ldr	r1, [r7, #20]
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	613b      	str	r3, [r7, #16]
   return(result);
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e6      	bne.n	8007208 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2220      	movs	r2, #32
 800723e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7fa fc78 	bl	8001b3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800724c:	bf00      	nop
 800724e:	3720      	adds	r7, #32
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007254:	b480      	push	{r7}
 8007256:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007258:	bf00      	nop
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
	...

08007264 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800726a:	f3ef 8305 	mrs	r3, IPSR
 800726e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007270:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10f      	bne.n	8007296 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007276:	f3ef 8310 	mrs	r3, PRIMASK
 800727a:	607b      	str	r3, [r7, #4]
  return(result);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d105      	bne.n	800728e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007282:	f3ef 8311 	mrs	r3, BASEPRI
 8007286:	603b      	str	r3, [r7, #0]
  return(result);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d007      	beq.n	800729e <osKernelInitialize+0x3a>
 800728e:	4b0e      	ldr	r3, [pc, #56]	; (80072c8 <osKernelInitialize+0x64>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b02      	cmp	r3, #2
 8007294:	d103      	bne.n	800729e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007296:	f06f 0305 	mvn.w	r3, #5
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	e00c      	b.n	80072b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800729e:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <osKernelInitialize+0x64>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d105      	bne.n	80072b2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80072a6:	4b08      	ldr	r3, [pc, #32]	; (80072c8 <osKernelInitialize+0x64>)
 80072a8:	2201      	movs	r2, #1
 80072aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	e002      	b.n	80072b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80072b2:	f04f 33ff 	mov.w	r3, #4294967295
 80072b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80072b8:	68fb      	ldr	r3, [r7, #12]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	20000264 	.word	0x20000264

080072cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072d2:	f3ef 8305 	mrs	r3, IPSR
 80072d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80072d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10f      	bne.n	80072fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072de:	f3ef 8310 	mrs	r3, PRIMASK
 80072e2:	607b      	str	r3, [r7, #4]
  return(result);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d105      	bne.n	80072f6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072ea:	f3ef 8311 	mrs	r3, BASEPRI
 80072ee:	603b      	str	r3, [r7, #0]
  return(result);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d007      	beq.n	8007306 <osKernelStart+0x3a>
 80072f6:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <osKernelStart+0x68>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d103      	bne.n	8007306 <osKernelStart+0x3a>
    stat = osErrorISR;
 80072fe:	f06f 0305 	mvn.w	r3, #5
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	e010      	b.n	8007328 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007306:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <osKernelStart+0x68>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d109      	bne.n	8007322 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800730e:	f7ff ffa1 	bl	8007254 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007312:	4b08      	ldr	r3, [pc, #32]	; (8007334 <osKernelStart+0x68>)
 8007314:	2202      	movs	r2, #2
 8007316:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007318:	f001 ff0e 	bl	8009138 <vTaskStartScheduler>
      stat = osOK;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	e002      	b.n	8007328 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007322:	f04f 33ff 	mov.w	r3, #4294967295
 8007326:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007328:	68fb      	ldr	r3, [r7, #12]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20000264 	.word	0x20000264

08007338 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007338:	b580      	push	{r7, lr}
 800733a:	b090      	sub	sp, #64	; 0x40
 800733c:	af04      	add	r7, sp, #16
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007344:	2300      	movs	r3, #0
 8007346:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007348:	f3ef 8305 	mrs	r3, IPSR
 800734c:	61fb      	str	r3, [r7, #28]
  return(result);
 800734e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007350:	2b00      	cmp	r3, #0
 8007352:	f040 808f 	bne.w	8007474 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007356:	f3ef 8310 	mrs	r3, PRIMASK
 800735a:	61bb      	str	r3, [r7, #24]
  return(result);
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d105      	bne.n	800736e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007362:	f3ef 8311 	mrs	r3, BASEPRI
 8007366:	617b      	str	r3, [r7, #20]
  return(result);
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <osThreadNew+0x3e>
 800736e:	4b44      	ldr	r3, [pc, #272]	; (8007480 <osThreadNew+0x148>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b02      	cmp	r3, #2
 8007374:	d07e      	beq.n	8007474 <osThreadNew+0x13c>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d07b      	beq.n	8007474 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800737c:	2380      	movs	r3, #128	; 0x80
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007380:	2318      	movs	r3, #24
 8007382:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007384:	2300      	movs	r3, #0
 8007386:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007388:	f04f 33ff 	mov.w	r3, #4294967295
 800738c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d045      	beq.n	8007420 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <osThreadNew+0x6a>
        name = attr->name;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d008      	beq.n	80073c8 <osThreadNew+0x90>
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	2b38      	cmp	r3, #56	; 0x38
 80073ba:	d805      	bhi.n	80073c8 <osThreadNew+0x90>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <osThreadNew+0x94>
        return (NULL);
 80073c8:	2300      	movs	r3, #0
 80073ca:	e054      	b.n	8007476 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	089b      	lsrs	r3, r3, #2
 80073da:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00e      	beq.n	8007402 <osThreadNew+0xca>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	2bbb      	cmp	r3, #187	; 0xbb
 80073ea:	d90a      	bls.n	8007402 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d006      	beq.n	8007402 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <osThreadNew+0xca>
        mem = 1;
 80073fc:	2301      	movs	r3, #1
 80073fe:	623b      	str	r3, [r7, #32]
 8007400:	e010      	b.n	8007424 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10c      	bne.n	8007424 <osThreadNew+0xec>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d108      	bne.n	8007424 <osThreadNew+0xec>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d104      	bne.n	8007424 <osThreadNew+0xec>
          mem = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	623b      	str	r3, [r7, #32]
 800741e:	e001      	b.n	8007424 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d110      	bne.n	800744c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007432:	9202      	str	r2, [sp, #8]
 8007434:	9301      	str	r3, [sp, #4]
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800743e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f001 fcb9 	bl	8008db8 <xTaskCreateStatic>
 8007446:	4603      	mov	r3, r0
 8007448:	613b      	str	r3, [r7, #16]
 800744a:	e013      	b.n	8007474 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d110      	bne.n	8007474 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007454:	b29a      	uxth	r2, r3
 8007456:	f107 0310 	add.w	r3, r7, #16
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f001 fd0a 	bl	8008e7e <xTaskCreate>
 800746a:	4603      	mov	r3, r0
 800746c:	2b01      	cmp	r3, #1
 800746e:	d001      	beq.n	8007474 <osThreadNew+0x13c>
          hTask = NULL;
 8007470:	2300      	movs	r3, #0
 8007472:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007474:	693b      	ldr	r3, [r7, #16]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3730      	adds	r7, #48	; 0x30
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20000264 	.word	0x20000264

08007484 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007484:	b580      	push	{r7, lr}
 8007486:	b08a      	sub	sp, #40	; 0x28
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800748c:	2300      	movs	r3, #0
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007490:	f3ef 8305 	mrs	r3, IPSR
 8007494:	613b      	str	r3, [r7, #16]
  return(result);
 8007496:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007498:	2b00      	cmp	r3, #0
 800749a:	f040 8085 	bne.w	80075a8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800749e:	f3ef 8310 	mrs	r3, PRIMASK
 80074a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d105      	bne.n	80074b6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074aa:	f3ef 8311 	mrs	r3, BASEPRI
 80074ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <osMutexNew+0x3a>
 80074b6:	4b3f      	ldr	r3, [pc, #252]	; (80075b4 <osMutexNew+0x130>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d074      	beq.n	80075a8 <osMutexNew+0x124>
    if (attr != NULL) {
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <osMutexNew+0x48>
      type = attr->attr_bits;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	623b      	str	r3, [r7, #32]
 80074ca:	e001      	b.n	80074d0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <osMutexNew+0x5c>
      rmtx = 1U;
 80074da:	2301      	movs	r3, #1
 80074dc:	61fb      	str	r3, [r7, #28]
 80074de:	e001      	b.n	80074e4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	f003 0308 	and.w	r3, r3, #8
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d15c      	bne.n	80075a8 <osMutexNew+0x124>
      mem = -1;
 80074ee:	f04f 33ff 	mov.w	r3, #4294967295
 80074f2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d015      	beq.n	8007526 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d006      	beq.n	8007510 <osMutexNew+0x8c>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	2b4f      	cmp	r3, #79	; 0x4f
 8007508:	d902      	bls.n	8007510 <osMutexNew+0x8c>
          mem = 1;
 800750a:	2301      	movs	r3, #1
 800750c:	61bb      	str	r3, [r7, #24]
 800750e:	e00c      	b.n	800752a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d108      	bne.n	800752a <osMutexNew+0xa6>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d104      	bne.n	800752a <osMutexNew+0xa6>
            mem = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	61bb      	str	r3, [r7, #24]
 8007524:	e001      	b.n	800752a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d112      	bne.n	8007556 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d007      	beq.n	8007546 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	4619      	mov	r1, r3
 800753c:	2004      	movs	r0, #4
 800753e:	f000 fcae 	bl	8007e9e <xQueueCreateMutexStatic>
 8007542:	6278      	str	r0, [r7, #36]	; 0x24
 8007544:	e016      	b.n	8007574 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	4619      	mov	r1, r3
 800754c:	2001      	movs	r0, #1
 800754e:	f000 fca6 	bl	8007e9e <xQueueCreateMutexStatic>
 8007552:	6278      	str	r0, [r7, #36]	; 0x24
 8007554:	e00e      	b.n	8007574 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10b      	bne.n	8007574 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d004      	beq.n	800756c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007562:	2004      	movs	r0, #4
 8007564:	f000 fc83 	bl	8007e6e <xQueueCreateMutex>
 8007568:	6278      	str	r0, [r7, #36]	; 0x24
 800756a:	e003      	b.n	8007574 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800756c:	2001      	movs	r0, #1
 800756e:	f000 fc7e 	bl	8007e6e <xQueueCreateMutex>
 8007572:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00c      	beq.n	8007594 <osMutexNew+0x110>
        if (attr != NULL) {
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <osMutexNew+0x104>
          name = attr->name;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	617b      	str	r3, [r7, #20]
 8007586:	e001      	b.n	800758c <osMutexNew+0x108>
        } else {
          name = NULL;
 8007588:	2300      	movs	r3, #0
 800758a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800758c:	6979      	ldr	r1, [r7, #20]
 800758e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007590:	f001 fb8a 	bl	8008ca8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	2b00      	cmp	r3, #0
 8007598:	d006      	beq.n	80075a8 <osMutexNew+0x124>
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	f043 0301 	orr.w	r3, r3, #1
 80075a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3728      	adds	r7, #40	; 0x28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20000264 	.word	0x20000264

080075b8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f023 0301 	bic.w	r3, r3, #1
 80075c8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075d6:	f3ef 8305 	mrs	r3, IPSR
 80075da:	613b      	str	r3, [r7, #16]
  return(result);
 80075dc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10f      	bne.n	8007602 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075e2:	f3ef 8310 	mrs	r3, PRIMASK
 80075e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d105      	bne.n	80075fa <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075ee:	f3ef 8311 	mrs	r3, BASEPRI
 80075f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d007      	beq.n	800760a <osMutexAcquire+0x52>
 80075fa:	4b1d      	ldr	r3, [pc, #116]	; (8007670 <osMutexAcquire+0xb8>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d103      	bne.n	800760a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8007602:	f06f 0305 	mvn.w	r3, #5
 8007606:	61fb      	str	r3, [r7, #28]
 8007608:	e02c      	b.n	8007664 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d103      	bne.n	8007618 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8007610:	f06f 0303 	mvn.w	r3, #3
 8007614:	61fb      	str	r3, [r7, #28]
 8007616:	e025      	b.n	8007664 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d011      	beq.n	8007642 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	69b8      	ldr	r0, [r7, #24]
 8007622:	f000 fc8d 	bl	8007f40 <xQueueTakeMutexRecursive>
 8007626:	4603      	mov	r3, r0
 8007628:	2b01      	cmp	r3, #1
 800762a:	d01b      	beq.n	8007664 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8007632:	f06f 0301 	mvn.w	r3, #1
 8007636:	61fb      	str	r3, [r7, #28]
 8007638:	e014      	b.n	8007664 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800763a:	f06f 0302 	mvn.w	r3, #2
 800763e:	61fb      	str	r3, [r7, #28]
 8007640:	e010      	b.n	8007664 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	69b8      	ldr	r0, [r7, #24]
 8007646:	f001 f847 	bl	80086d8 <xQueueSemaphoreTake>
 800764a:	4603      	mov	r3, r0
 800764c:	2b01      	cmp	r3, #1
 800764e:	d009      	beq.n	8007664 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d003      	beq.n	800765e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8007656:	f06f 0301 	mvn.w	r3, #1
 800765a:	61fb      	str	r3, [r7, #28]
 800765c:	e002      	b.n	8007664 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800765e:	f06f 0302 	mvn.w	r3, #2
 8007662:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007664:	69fb      	ldr	r3, [r7, #28]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3720      	adds	r7, #32
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000264 	.word	0x20000264

08007674 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007674:	b580      	push	{r7, lr}
 8007676:	b088      	sub	sp, #32
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f023 0301 	bic.w	r3, r3, #1
 8007682:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800768c:	2300      	movs	r3, #0
 800768e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007690:	f3ef 8305 	mrs	r3, IPSR
 8007694:	613b      	str	r3, [r7, #16]
  return(result);
 8007696:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10f      	bne.n	80076bc <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800769c:	f3ef 8310 	mrs	r3, PRIMASK
 80076a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d105      	bne.n	80076b4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076a8:	f3ef 8311 	mrs	r3, BASEPRI
 80076ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d007      	beq.n	80076c4 <osMutexRelease+0x50>
 80076b4:	4b16      	ldr	r3, [pc, #88]	; (8007710 <osMutexRelease+0x9c>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d103      	bne.n	80076c4 <osMutexRelease+0x50>
    stat = osErrorISR;
 80076bc:	f06f 0305 	mvn.w	r3, #5
 80076c0:	61fb      	str	r3, [r7, #28]
 80076c2:	e01f      	b.n	8007704 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d103      	bne.n	80076d2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80076ca:	f06f 0303 	mvn.w	r3, #3
 80076ce:	61fb      	str	r3, [r7, #28]
 80076d0:	e018      	b.n	8007704 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d009      	beq.n	80076ec <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80076d8:	69b8      	ldr	r0, [r7, #24]
 80076da:	f000 fbfb 	bl	8007ed4 <xQueueGiveMutexRecursive>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d00f      	beq.n	8007704 <osMutexRelease+0x90>
        stat = osErrorResource;
 80076e4:	f06f 0302 	mvn.w	r3, #2
 80076e8:	61fb      	str	r3, [r7, #28]
 80076ea:	e00b      	b.n	8007704 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80076ec:	2300      	movs	r3, #0
 80076ee:	2200      	movs	r2, #0
 80076f0:	2100      	movs	r1, #0
 80076f2:	69b8      	ldr	r0, [r7, #24]
 80076f4:	f000 fcce 	bl	8008094 <xQueueGenericSend>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d002      	beq.n	8007704 <osMutexRelease+0x90>
        stat = osErrorResource;
 80076fe:	f06f 0302 	mvn.w	r3, #2
 8007702:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8007704:	69fb      	ldr	r3, [r7, #28]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3720      	adds	r7, #32
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	20000264 	.word	0x20000264

08007714 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007714:	b580      	push	{r7, lr}
 8007716:	b08c      	sub	sp, #48	; 0x30
 8007718:	af02      	add	r7, sp, #8
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007720:	2300      	movs	r3, #0
 8007722:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007724:	f3ef 8305 	mrs	r3, IPSR
 8007728:	61bb      	str	r3, [r7, #24]
  return(result);
 800772a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800772c:	2b00      	cmp	r3, #0
 800772e:	f040 8086 	bne.w	800783e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007732:	f3ef 8310 	mrs	r3, PRIMASK
 8007736:	617b      	str	r3, [r7, #20]
  return(result);
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d105      	bne.n	800774a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800773e:	f3ef 8311 	mrs	r3, BASEPRI
 8007742:	613b      	str	r3, [r7, #16]
  return(result);
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <osSemaphoreNew+0x3e>
 800774a:	4b3f      	ldr	r3, [pc, #252]	; (8007848 <osSemaphoreNew+0x134>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d075      	beq.n	800783e <osSemaphoreNew+0x12a>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d072      	beq.n	800783e <osSemaphoreNew+0x12a>
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	429a      	cmp	r2, r3
 800775e:	d86e      	bhi.n	800783e <osSemaphoreNew+0x12a>
    mem = -1;
 8007760:	f04f 33ff 	mov.w	r3, #4294967295
 8007764:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d015      	beq.n	8007798 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d006      	beq.n	8007782 <osSemaphoreNew+0x6e>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	2b4f      	cmp	r3, #79	; 0x4f
 800777a:	d902      	bls.n	8007782 <osSemaphoreNew+0x6e>
        mem = 1;
 800777c:	2301      	movs	r3, #1
 800777e:	623b      	str	r3, [r7, #32]
 8007780:	e00c      	b.n	800779c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d108      	bne.n	800779c <osSemaphoreNew+0x88>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d104      	bne.n	800779c <osSemaphoreNew+0x88>
          mem = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	623b      	str	r3, [r7, #32]
 8007796:	e001      	b.n	800779c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007798:	2300      	movs	r3, #0
 800779a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a2:	d04c      	beq.n	800783e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d128      	bne.n	80077fc <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d10a      	bne.n	80077c6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	2203      	movs	r2, #3
 80077b6:	9200      	str	r2, [sp, #0]
 80077b8:	2200      	movs	r2, #0
 80077ba:	2100      	movs	r1, #0
 80077bc:	2001      	movs	r0, #1
 80077be:	f000 fa55 	bl	8007c6c <xQueueGenericCreateStatic>
 80077c2:	6278      	str	r0, [r7, #36]	; 0x24
 80077c4:	e005      	b.n	80077d2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80077c6:	2203      	movs	r2, #3
 80077c8:	2100      	movs	r1, #0
 80077ca:	2001      	movs	r0, #1
 80077cc:	f000 fad0 	bl	8007d70 <xQueueGenericCreate>
 80077d0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d022      	beq.n	800781e <osSemaphoreNew+0x10a>
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d01f      	beq.n	800781e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80077de:	2300      	movs	r3, #0
 80077e0:	2200      	movs	r2, #0
 80077e2:	2100      	movs	r1, #0
 80077e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077e6:	f000 fc55 	bl	8008094 <xQueueGenericSend>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d016      	beq.n	800781e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80077f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077f2:	f001 f90b 	bl	8008a0c <vQueueDelete>
            hSemaphore = NULL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
 80077fa:	e010      	b.n	800781e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d108      	bne.n	8007814 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	461a      	mov	r2, r3
 8007808:	68b9      	ldr	r1, [r7, #8]
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 fbd0 	bl	8007fb0 <xQueueCreateCountingSemaphoreStatic>
 8007810:	6278      	str	r0, [r7, #36]	; 0x24
 8007812:	e004      	b.n	800781e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f000 fc05 	bl	8008026 <xQueueCreateCountingSemaphore>
 800781c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00c      	beq.n	800783e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <osSemaphoreNew+0x11e>
          name = attr->name;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	61fb      	str	r3, [r7, #28]
 8007830:	e001      	b.n	8007836 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8007832:	2300      	movs	r3, #0
 8007834:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007836:	69f9      	ldr	r1, [r7, #28]
 8007838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800783a:	f001 fa35 	bl	8008ca8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007840:	4618      	mov	r0, r3
 8007842:	3728      	adds	r7, #40	; 0x28
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	20000264 	.word	0x20000264

0800784c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800784c:	b580      	push	{r7, lr}
 800784e:	b088      	sub	sp, #32
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800785a:	2300      	movs	r3, #0
 800785c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d103      	bne.n	800786c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007864:	f06f 0303 	mvn.w	r3, #3
 8007868:	61fb      	str	r3, [r7, #28]
 800786a:	e04b      	b.n	8007904 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800786c:	f3ef 8305 	mrs	r3, IPSR
 8007870:	617b      	str	r3, [r7, #20]
  return(result);
 8007872:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10f      	bne.n	8007898 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007878:	f3ef 8310 	mrs	r3, PRIMASK
 800787c:	613b      	str	r3, [r7, #16]
  return(result);
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d105      	bne.n	8007890 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007884:	f3ef 8311 	mrs	r3, BASEPRI
 8007888:	60fb      	str	r3, [r7, #12]
  return(result);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d026      	beq.n	80078de <osSemaphoreAcquire+0x92>
 8007890:	4b1f      	ldr	r3, [pc, #124]	; (8007910 <osSemaphoreAcquire+0xc4>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b02      	cmp	r3, #2
 8007896:	d122      	bne.n	80078de <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800789e:	f06f 0303 	mvn.w	r3, #3
 80078a2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80078a4:	e02d      	b.n	8007902 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80078a6:	2300      	movs	r3, #0
 80078a8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80078aa:	f107 0308 	add.w	r3, r7, #8
 80078ae:	461a      	mov	r2, r3
 80078b0:	2100      	movs	r1, #0
 80078b2:	69b8      	ldr	r0, [r7, #24]
 80078b4:	f001 f824 	bl	8008900 <xQueueReceiveFromISR>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d003      	beq.n	80078c6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80078be:	f06f 0302 	mvn.w	r3, #2
 80078c2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80078c4:	e01d      	b.n	8007902 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d01a      	beq.n	8007902 <osSemaphoreAcquire+0xb6>
 80078cc:	4b11      	ldr	r3, [pc, #68]	; (8007914 <osSemaphoreAcquire+0xc8>)
 80078ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80078dc:	e011      	b.n	8007902 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	69b8      	ldr	r0, [r7, #24]
 80078e2:	f000 fef9 	bl	80086d8 <xQueueSemaphoreTake>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d00b      	beq.n	8007904 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d003      	beq.n	80078fa <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80078f2:	f06f 0301 	mvn.w	r3, #1
 80078f6:	61fb      	str	r3, [r7, #28]
 80078f8:	e004      	b.n	8007904 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80078fa:	f06f 0302 	mvn.w	r3, #2
 80078fe:	61fb      	str	r3, [r7, #28]
 8007900:	e000      	b.n	8007904 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8007902:	bf00      	nop
      }
    }
  }

  return (stat);
 8007904:	69fb      	ldr	r3, [r7, #28]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3720      	adds	r7, #32
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20000264 	.word	0x20000264
 8007914:	e000ed04 	.word	0xe000ed04

08007918 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007918:	b580      	push	{r7, lr}
 800791a:	b088      	sub	sp, #32
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007924:	2300      	movs	r3, #0
 8007926:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d103      	bne.n	8007936 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800792e:	f06f 0303 	mvn.w	r3, #3
 8007932:	61fb      	str	r3, [r7, #28]
 8007934:	e03e      	b.n	80079b4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007936:	f3ef 8305 	mrs	r3, IPSR
 800793a:	617b      	str	r3, [r7, #20]
  return(result);
 800793c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10f      	bne.n	8007962 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007942:	f3ef 8310 	mrs	r3, PRIMASK
 8007946:	613b      	str	r3, [r7, #16]
  return(result);
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d105      	bne.n	800795a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800794e:	f3ef 8311 	mrs	r3, BASEPRI
 8007952:	60fb      	str	r3, [r7, #12]
  return(result);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d01e      	beq.n	8007998 <osSemaphoreRelease+0x80>
 800795a:	4b19      	ldr	r3, [pc, #100]	; (80079c0 <osSemaphoreRelease+0xa8>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b02      	cmp	r3, #2
 8007960:	d11a      	bne.n	8007998 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8007962:	2300      	movs	r3, #0
 8007964:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007966:	f107 0308 	add.w	r3, r7, #8
 800796a:	4619      	mov	r1, r3
 800796c:	69b8      	ldr	r0, [r7, #24]
 800796e:	f000 fd37 	bl	80083e0 <xQueueGiveFromISR>
 8007972:	4603      	mov	r3, r0
 8007974:	2b01      	cmp	r3, #1
 8007976:	d003      	beq.n	8007980 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007978:	f06f 0302 	mvn.w	r3, #2
 800797c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800797e:	e018      	b.n	80079b2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d015      	beq.n	80079b2 <osSemaphoreRelease+0x9a>
 8007986:	4b0f      	ldr	r3, [pc, #60]	; (80079c4 <osSemaphoreRelease+0xac>)
 8007988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007996:	e00c      	b.n	80079b2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007998:	2300      	movs	r3, #0
 800799a:	2200      	movs	r2, #0
 800799c:	2100      	movs	r1, #0
 800799e:	69b8      	ldr	r0, [r7, #24]
 80079a0:	f000 fb78 	bl	8008094 <xQueueGenericSend>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d004      	beq.n	80079b4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80079aa:	f06f 0302 	mvn.w	r3, #2
 80079ae:	61fb      	str	r3, [r7, #28]
 80079b0:	e000      	b.n	80079b4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80079b2:	bf00      	nop
    }
  }

  return (stat);
 80079b4:	69fb      	ldr	r3, [r7, #28]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3720      	adds	r7, #32
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	20000264 	.word	0x20000264
 80079c4:	e000ed04 	.word	0xe000ed04

080079c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4a07      	ldr	r2, [pc, #28]	; (80079f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80079d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	4a06      	ldr	r2, [pc, #24]	; (80079f8 <vApplicationGetIdleTaskMemory+0x30>)
 80079de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2280      	movs	r2, #128	; 0x80
 80079e4:	601a      	str	r2, [r3, #0]
}
 80079e6:	bf00      	nop
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	20000268 	.word	0x20000268
 80079f8:	20000324 	.word	0x20000324

080079fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4a07      	ldr	r2, [pc, #28]	; (8007a28 <vApplicationGetTimerTaskMemory+0x2c>)
 8007a0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	4a06      	ldr	r2, [pc, #24]	; (8007a2c <vApplicationGetTimerTaskMemory+0x30>)
 8007a12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a1a:	601a      	str	r2, [r3, #0]
}
 8007a1c:	bf00      	nop
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	20000524 	.word	0x20000524
 8007a2c:	200005e0 	.word	0x200005e0

08007a30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f103 0208 	add.w	r2, r3, #8
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f04f 32ff 	mov.w	r2, #4294967295
 8007a48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f103 0208 	add.w	r2, r3, #8
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f103 0208 	add.w	r2, r3, #8
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a7e:	bf00      	nop
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b085      	sub	sp, #20
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	601a      	str	r2, [r3, #0]
}
 8007ac6:	bf00      	nop
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae8:	d103      	bne.n	8007af2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	e00c      	b.n	8007b0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	3308      	adds	r3, #8
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	e002      	b.n	8007b00 <vListInsert+0x2e>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d2f6      	bcs.n	8007afa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	601a      	str	r2, [r3, #0]
}
 8007b38:	bf00      	nop
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6892      	ldr	r2, [r2, #8]
 8007b5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	6852      	ldr	r2, [r2, #4]
 8007b64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d103      	bne.n	8007b78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	1e5a      	subs	r2, r3, #1
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10c      	bne.n	8007bc6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb0:	b672      	cpsid	i
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	b662      	cpsie	i
 8007bc0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007bc2:	bf00      	nop
 8007bc4:	e7fe      	b.n	8007bc4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007bc6:	f002 fd89 	bl	800a6dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd2:	68f9      	ldr	r1, [r7, #12]
 8007bd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007bd6:	fb01 f303 	mul.w	r3, r1, r3
 8007bda:	441a      	add	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	68f9      	ldr	r1, [r7, #12]
 8007bfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007bfc:	fb01 f303 	mul.w	r3, r1, r3
 8007c00:	441a      	add	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	22ff      	movs	r2, #255	; 0xff
 8007c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	22ff      	movs	r2, #255	; 0xff
 8007c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d114      	bne.n	8007c46 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d01a      	beq.n	8007c5a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3310      	adds	r3, #16
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f001 fd2d 	bl	8009688 <xTaskRemoveFromEventList>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d012      	beq.n	8007c5a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c34:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <xQueueGenericReset+0xd0>)
 8007c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	f3bf 8f6f 	isb	sy
 8007c44:	e009      	b.n	8007c5a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3310      	adds	r3, #16
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7ff fef0 	bl	8007a30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	3324      	adds	r3, #36	; 0x24
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7ff feeb 	bl	8007a30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c5a:	f002 fd73 	bl	800a744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c5e:	2301      	movs	r3, #1
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	e000ed04 	.word	0xe000ed04

08007c6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08e      	sub	sp, #56	; 0x38
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10c      	bne.n	8007c9a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	b672      	cpsid	i
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	b662      	cpsie	i
 8007c94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c96:	bf00      	nop
 8007c98:	e7fe      	b.n	8007c98 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10c      	bne.n	8007cba <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	b672      	cpsid	i
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	b662      	cpsie	i
 8007cb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cb6:	bf00      	nop
 8007cb8:	e7fe      	b.n	8007cb8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <xQueueGenericCreateStatic+0x5a>
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <xQueueGenericCreateStatic+0x5e>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e000      	b.n	8007ccc <xQueueGenericCreateStatic+0x60>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10c      	bne.n	8007cea <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd4:	b672      	cpsid	i
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	b662      	cpsie	i
 8007ce4:	623b      	str	r3, [r7, #32]
}
 8007ce6:	bf00      	nop
 8007ce8:	e7fe      	b.n	8007ce8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d102      	bne.n	8007cf6 <xQueueGenericCreateStatic+0x8a>
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <xQueueGenericCreateStatic+0x8e>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e000      	b.n	8007cfc <xQueueGenericCreateStatic+0x90>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10c      	bne.n	8007d1a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	b672      	cpsid	i
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	b662      	cpsie	i
 8007d14:	61fb      	str	r3, [r7, #28]
}
 8007d16:	bf00      	nop
 8007d18:	e7fe      	b.n	8007d18 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007d1a:	2350      	movs	r3, #80	; 0x50
 8007d1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2b50      	cmp	r3, #80	; 0x50
 8007d22:	d00c      	beq.n	8007d3e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d28:	b672      	cpsid	i
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	b662      	cpsie	i
 8007d38:	61bb      	str	r3, [r7, #24]
}
 8007d3a:	bf00      	nop
 8007d3c:	e7fe      	b.n	8007d3c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007d3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00d      	beq.n	8007d66 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	68b9      	ldr	r1, [r7, #8]
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 f847 	bl	8007df4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3730      	adds	r7, #48	; 0x30
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b08a      	sub	sp, #40	; 0x28
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10c      	bne.n	8007d9e <xQueueGenericCreate+0x2e>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	b672      	cpsid	i
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	b662      	cpsie	i
 8007d98:	613b      	str	r3, [r7, #16]
}
 8007d9a:	bf00      	nop
 8007d9c:	e7fe      	b.n	8007d9c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d102      	bne.n	8007daa <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	61fb      	str	r3, [r7, #28]
 8007da8:	e004      	b.n	8007db4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	fb02 f303 	mul.w	r3, r2, r3
 8007db2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	3350      	adds	r3, #80	; 0x50
 8007db8:	4618      	mov	r0, r3
 8007dba:	f002 fdbb 	bl	800a934 <pvPortMalloc>
 8007dbe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d011      	beq.n	8007dea <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	3350      	adds	r3, #80	; 0x50
 8007dce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007dd8:	79fa      	ldrb	r2, [r7, #7]
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	4613      	mov	r3, r2
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	68b9      	ldr	r1, [r7, #8]
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 f805 	bl	8007df4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007dea:	69bb      	ldr	r3, [r7, #24]
	}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3720      	adds	r7, #32
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d103      	bne.n	8007e10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	69ba      	ldr	r2, [r7, #24]
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	e002      	b.n	8007e16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e22:	2101      	movs	r1, #1
 8007e24:	69b8      	ldr	r0, [r7, #24]
 8007e26:	f7ff feb7 	bl	8007b98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	78fa      	ldrb	r2, [r7, #3]
 8007e2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e32:	bf00      	nop
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b082      	sub	sp, #8
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00e      	beq.n	8007e66 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	2100      	movs	r1, #0
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f917 	bl	8008094 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007e66:	bf00      	nop
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b086      	sub	sp, #24
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	4603      	mov	r3, r0
 8007e76:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	617b      	str	r3, [r7, #20]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007e80:	79fb      	ldrb	r3, [r7, #7]
 8007e82:	461a      	mov	r2, r3
 8007e84:	6939      	ldr	r1, [r7, #16]
 8007e86:	6978      	ldr	r0, [r7, #20]
 8007e88:	f7ff ff72 	bl	8007d70 <xQueueGenericCreate>
 8007e8c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f7ff ffd3 	bl	8007e3a <prvInitialiseMutex>

		return xNewQueue;
 8007e94:	68fb      	ldr	r3, [r7, #12]
	}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3718      	adds	r7, #24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b088      	sub	sp, #32
 8007ea2:	af02      	add	r7, sp, #8
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	6039      	str	r1, [r7, #0]
 8007ea8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	617b      	str	r3, [r7, #20]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	6939      	ldr	r1, [r7, #16]
 8007ebc:	6978      	ldr	r0, [r7, #20]
 8007ebe:	f7ff fed5 	bl	8007c6c <xQueueGenericCreateStatic>
 8007ec2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f7ff ffb8 	bl	8007e3a <prvInitialiseMutex>

		return xNewQueue;
 8007eca:	68fb      	ldr	r3, [r7, #12]
	}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3718      	adds	r7, #24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007ed4:	b590      	push	{r4, r7, lr}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10c      	bne.n	8007f00 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	b672      	cpsid	i
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	b662      	cpsie	i
 8007efa:	60fb      	str	r3, [r7, #12]
}
 8007efc:	bf00      	nop
 8007efe:	e7fe      	b.n	8007efe <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	689c      	ldr	r4, [r3, #8]
 8007f04:	f001 fd8a 	bl	8009a1c <xTaskGetCurrentTaskHandle>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	429c      	cmp	r4, r3
 8007f0c:	d111      	bne.n	8007f32 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	1e5a      	subs	r2, r3, #1
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d105      	bne.n	8007f2c <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007f20:	2300      	movs	r3, #0
 8007f22:	2200      	movs	r2, #0
 8007f24:	2100      	movs	r1, #0
 8007f26:	6938      	ldr	r0, [r7, #16]
 8007f28:	f000 f8b4 	bl	8008094 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	617b      	str	r3, [r7, #20]
 8007f30:	e001      	b.n	8007f36 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007f32:	2300      	movs	r3, #0
 8007f34:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007f36:	697b      	ldr	r3, [r7, #20]
	}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	371c      	adds	r7, #28
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd90      	pop	{r4, r7, pc}

08007f40 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007f40:	b590      	push	{r4, r7, lr}
 8007f42:	b087      	sub	sp, #28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10c      	bne.n	8007f6e <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f58:	b672      	cpsid	i
 8007f5a:	f383 8811 	msr	BASEPRI, r3
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	b662      	cpsie	i
 8007f68:	60fb      	str	r3, [r7, #12]
}
 8007f6a:	bf00      	nop
 8007f6c:	e7fe      	b.n	8007f6c <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	689c      	ldr	r4, [r3, #8]
 8007f72:	f001 fd53 	bl	8009a1c <xTaskGetCurrentTaskHandle>
 8007f76:	4603      	mov	r3, r0
 8007f78:	429c      	cmp	r4, r3
 8007f7a:	d107      	bne.n	8007f8c <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007f86:	2301      	movs	r3, #1
 8007f88:	617b      	str	r3, [r7, #20]
 8007f8a:	e00c      	b.n	8007fa6 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6938      	ldr	r0, [r7, #16]
 8007f90:	f000 fba2 	bl	80086d8 <xQueueSemaphoreTake>
 8007f94:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d004      	beq.n	8007fa6 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007fa6:	697b      	ldr	r3, [r7, #20]
	}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	371c      	adds	r7, #28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd90      	pop	{r4, r7, pc}

08007fb0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b08a      	sub	sp, #40	; 0x28
 8007fb4:	af02      	add	r7, sp, #8
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10c      	bne.n	8007fdc <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	b672      	cpsid	i
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	b662      	cpsie	i
 8007fd6:	61bb      	str	r3, [r7, #24]
}
 8007fd8:	bf00      	nop
 8007fda:	e7fe      	b.n	8007fda <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d90c      	bls.n	8007ffe <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8007fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe8:	b672      	cpsid	i
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	b662      	cpsie	i
 8007ff8:	617b      	str	r3, [r7, #20]
}
 8007ffa:	bf00      	nop
 8007ffc:	e7fe      	b.n	8007ffc <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007ffe:	2302      	movs	r3, #2
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	2100      	movs	r1, #0
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f7ff fe2f 	bl	8007c6c <xQueueGenericCreateStatic>
 800800e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800801c:	69fb      	ldr	r3, [r7, #28]
	}
 800801e:	4618      	mov	r0, r3
 8008020:	3720      	adds	r7, #32
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008026:	b580      	push	{r7, lr}
 8008028:	b086      	sub	sp, #24
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10c      	bne.n	8008050 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8008036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803a:	b672      	cpsid	i
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	b662      	cpsie	i
 800804a:	613b      	str	r3, [r7, #16]
}
 800804c:	bf00      	nop
 800804e:	e7fe      	b.n	800804e <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	429a      	cmp	r2, r3
 8008056:	d90c      	bls.n	8008072 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	b672      	cpsid	i
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	b662      	cpsie	i
 800806c:	60fb      	str	r3, [r7, #12]
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008072:	2202      	movs	r2, #2
 8008074:	2100      	movs	r1, #0
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7ff fe7a 	bl	8007d70 <xQueueGenericCreate>
 800807c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800808a:	697b      	ldr	r3, [r7, #20]
	}
 800808c:	4618      	mov	r0, r3
 800808e:	3718      	adds	r7, #24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08e      	sub	sp, #56	; 0x38
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080a2:	2300      	movs	r3, #0
 80080a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10c      	bne.n	80080ca <xQueueGenericSend+0x36>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	b672      	cpsid	i
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	b662      	cpsie	i
 80080c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080c6:	bf00      	nop
 80080c8:	e7fe      	b.n	80080c8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d103      	bne.n	80080d8 <xQueueGenericSend+0x44>
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <xQueueGenericSend+0x48>
 80080d8:	2301      	movs	r3, #1
 80080da:	e000      	b.n	80080de <xQueueGenericSend+0x4a>
 80080dc:	2300      	movs	r3, #0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10c      	bne.n	80080fc <xQueueGenericSend+0x68>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	b672      	cpsid	i
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	b662      	cpsie	i
 80080f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080f8:	bf00      	nop
 80080fa:	e7fe      	b.n	80080fa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d103      	bne.n	800810a <xQueueGenericSend+0x76>
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008106:	2b01      	cmp	r3, #1
 8008108:	d101      	bne.n	800810e <xQueueGenericSend+0x7a>
 800810a:	2301      	movs	r3, #1
 800810c:	e000      	b.n	8008110 <xQueueGenericSend+0x7c>
 800810e:	2300      	movs	r3, #0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10c      	bne.n	800812e <xQueueGenericSend+0x9a>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	b672      	cpsid	i
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	b662      	cpsie	i
 8008128:	623b      	str	r3, [r7, #32]
}
 800812a:	bf00      	nop
 800812c:	e7fe      	b.n	800812c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800812e:	f001 fc85 	bl	8009a3c <xTaskGetSchedulerState>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d102      	bne.n	800813e <xQueueGenericSend+0xaa>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <xQueueGenericSend+0xae>
 800813e:	2301      	movs	r3, #1
 8008140:	e000      	b.n	8008144 <xQueueGenericSend+0xb0>
 8008142:	2300      	movs	r3, #0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10c      	bne.n	8008162 <xQueueGenericSend+0xce>
	__asm volatile
 8008148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814c:	b672      	cpsid	i
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	b662      	cpsie	i
 800815c:	61fb      	str	r3, [r7, #28]
}
 800815e:	bf00      	nop
 8008160:	e7fe      	b.n	8008160 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008162:	f002 fabb 	bl	800a6dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816e:	429a      	cmp	r2, r3
 8008170:	d302      	bcc.n	8008178 <xQueueGenericSend+0xe4>
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b02      	cmp	r3, #2
 8008176:	d129      	bne.n	80081cc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008178:	683a      	ldr	r2, [r7, #0]
 800817a:	68b9      	ldr	r1, [r7, #8]
 800817c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800817e:	f000 fc82 	bl	8008a86 <prvCopyDataToQueue>
 8008182:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008188:	2b00      	cmp	r3, #0
 800818a:	d010      	beq.n	80081ae <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	3324      	adds	r3, #36	; 0x24
 8008190:	4618      	mov	r0, r3
 8008192:	f001 fa79 	bl	8009688 <xTaskRemoveFromEventList>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d013      	beq.n	80081c4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800819c:	4b3f      	ldr	r3, [pc, #252]	; (800829c <xQueueGenericSend+0x208>)
 800819e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	e00a      	b.n	80081c4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80081ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d007      	beq.n	80081c4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80081b4:	4b39      	ldr	r3, [pc, #228]	; (800829c <xQueueGenericSend+0x208>)
 80081b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80081c4:	f002 fabe 	bl	800a744 <vPortExitCritical>
				return pdPASS;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e063      	b.n	8008294 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d103      	bne.n	80081da <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081d2:	f002 fab7 	bl	800a744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	e05c      	b.n	8008294 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d106      	bne.n	80081ee <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081e0:	f107 0314 	add.w	r3, r7, #20
 80081e4:	4618      	mov	r0, r3
 80081e6:	f001 fab5 	bl	8009754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081ea:	2301      	movs	r3, #1
 80081ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081ee:	f002 faa9 	bl	800a744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081f2:	f001 f815 	bl	8009220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081f6:	f002 fa71 	bl	800a6dc <vPortEnterCritical>
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008200:	b25b      	sxtb	r3, r3
 8008202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008206:	d103      	bne.n	8008210 <xQueueGenericSend+0x17c>
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	2200      	movs	r2, #0
 800820c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008216:	b25b      	sxtb	r3, r3
 8008218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821c:	d103      	bne.n	8008226 <xQueueGenericSend+0x192>
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008226:	f002 fa8d 	bl	800a744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800822a:	1d3a      	adds	r2, r7, #4
 800822c:	f107 0314 	add.w	r3, r7, #20
 8008230:	4611      	mov	r1, r2
 8008232:	4618      	mov	r0, r3
 8008234:	f001 faa4 	bl	8009780 <xTaskCheckForTimeOut>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d124      	bne.n	8008288 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800823e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008240:	f000 fd19 	bl	8008c76 <prvIsQueueFull>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d018      	beq.n	800827c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824c:	3310      	adds	r3, #16
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	4611      	mov	r1, r2
 8008252:	4618      	mov	r0, r3
 8008254:	f001 f9c4 	bl	80095e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800825a:	f000 fca4 	bl	8008ba6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800825e:	f000 ffed 	bl	800923c <xTaskResumeAll>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	f47f af7c 	bne.w	8008162 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800826a:	4b0c      	ldr	r3, [pc, #48]	; (800829c <xQueueGenericSend+0x208>)
 800826c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	e772      	b.n	8008162 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800827c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800827e:	f000 fc92 	bl	8008ba6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008282:	f000 ffdb 	bl	800923c <xTaskResumeAll>
 8008286:	e76c      	b.n	8008162 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800828a:	f000 fc8c 	bl	8008ba6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800828e:	f000 ffd5 	bl	800923c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008292:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008294:	4618      	mov	r0, r3
 8008296:	3738      	adds	r7, #56	; 0x38
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	e000ed04 	.word	0xe000ed04

080082a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08e      	sub	sp, #56	; 0x38
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80082b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10c      	bne.n	80082d2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	b672      	cpsid	i
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	b662      	cpsie	i
 80082cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082ce:	bf00      	nop
 80082d0:	e7fe      	b.n	80082d0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d103      	bne.n	80082e0 <xQueueGenericSendFromISR+0x40>
 80082d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <xQueueGenericSendFromISR+0x44>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e000      	b.n	80082e6 <xQueueGenericSendFromISR+0x46>
 80082e4:	2300      	movs	r3, #0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10c      	bne.n	8008304 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	b672      	cpsid	i
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	b662      	cpsie	i
 80082fe:	623b      	str	r3, [r7, #32]
}
 8008300:	bf00      	nop
 8008302:	e7fe      	b.n	8008302 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	2b02      	cmp	r3, #2
 8008308:	d103      	bne.n	8008312 <xQueueGenericSendFromISR+0x72>
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830e:	2b01      	cmp	r3, #1
 8008310:	d101      	bne.n	8008316 <xQueueGenericSendFromISR+0x76>
 8008312:	2301      	movs	r3, #1
 8008314:	e000      	b.n	8008318 <xQueueGenericSendFromISR+0x78>
 8008316:	2300      	movs	r3, #0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10c      	bne.n	8008336 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800831c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008320:	b672      	cpsid	i
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	b662      	cpsie	i
 8008330:	61fb      	str	r3, [r7, #28]
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008336:	f002 fab9 	bl	800a8ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800833a:	f3ef 8211 	mrs	r2, BASEPRI
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	b672      	cpsid	i
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	b662      	cpsie	i
 8008352:	61ba      	str	r2, [r7, #24]
 8008354:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008356:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008358:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800835e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008362:	429a      	cmp	r2, r3
 8008364:	d302      	bcc.n	800836c <xQueueGenericSendFromISR+0xcc>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b02      	cmp	r3, #2
 800836a:	d12c      	bne.n	80083c6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	68b9      	ldr	r1, [r7, #8]
 800837a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800837c:	f000 fb83 	bl	8008a86 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008380:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008388:	d112      	bne.n	80083b0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838e:	2b00      	cmp	r3, #0
 8008390:	d016      	beq.n	80083c0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008394:	3324      	adds	r3, #36	; 0x24
 8008396:	4618      	mov	r0, r3
 8008398:	f001 f976 	bl	8009688 <xTaskRemoveFromEventList>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00e      	beq.n	80083c0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00b      	beq.n	80083c0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	e007      	b.n	80083c0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083b4:	3301      	adds	r3, #1
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	b25a      	sxtb	r2, r3
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80083c0:	2301      	movs	r3, #1
 80083c2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80083c4:	e001      	b.n	80083ca <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	637b      	str	r3, [r7, #52]	; 0x34
 80083ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083cc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3738      	adds	r7, #56	; 0x38
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08e      	sub	sp, #56	; 0x38
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80083ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10c      	bne.n	800840e <xQueueGiveFromISR+0x2e>
	__asm volatile
 80083f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f8:	b672      	cpsid	i
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	b662      	cpsie	i
 8008408:	623b      	str	r3, [r7, #32]
}
 800840a:	bf00      	nop
 800840c:	e7fe      	b.n	800840c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00c      	beq.n	8008430 <xQueueGiveFromISR+0x50>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841a:	b672      	cpsid	i
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	b662      	cpsie	i
 800842a:	61fb      	str	r3, [r7, #28]
}
 800842c:	bf00      	nop
 800842e:	e7fe      	b.n	800842e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d103      	bne.n	8008440 <xQueueGiveFromISR+0x60>
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <xQueueGiveFromISR+0x64>
 8008440:	2301      	movs	r3, #1
 8008442:	e000      	b.n	8008446 <xQueueGiveFromISR+0x66>
 8008444:	2300      	movs	r3, #0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10c      	bne.n	8008464 <xQueueGiveFromISR+0x84>
	__asm volatile
 800844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844e:	b672      	cpsid	i
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	b662      	cpsie	i
 800845e:	61bb      	str	r3, [r7, #24]
}
 8008460:	bf00      	nop
 8008462:	e7fe      	b.n	8008462 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008464:	f002 fa22 	bl	800a8ac <vPortValidateInterruptPriority>
	__asm volatile
 8008468:	f3ef 8211 	mrs	r2, BASEPRI
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	b672      	cpsid	i
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	b662      	cpsie	i
 8008480:	617a      	str	r2, [r7, #20]
 8008482:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008484:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008486:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800848e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008494:	429a      	cmp	r2, r3
 8008496:	d22b      	bcs.n	80084f0 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800849e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b2:	d112      	bne.n	80084da <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d016      	beq.n	80084ea <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084be:	3324      	adds	r3, #36	; 0x24
 80084c0:	4618      	mov	r0, r3
 80084c2:	f001 f8e1 	bl	8009688 <xTaskRemoveFromEventList>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00e      	beq.n	80084ea <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00b      	beq.n	80084ea <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2201      	movs	r2, #1
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	e007      	b.n	80084ea <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084de:	3301      	adds	r3, #1
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	b25a      	sxtb	r2, r3
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80084ea:	2301      	movs	r3, #1
 80084ec:	637b      	str	r3, [r7, #52]	; 0x34
 80084ee:	e001      	b.n	80084f4 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084f0:	2300      	movs	r3, #0
 80084f2:	637b      	str	r3, [r7, #52]	; 0x34
 80084f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f383 8811 	msr	BASEPRI, r3
}
 80084fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008502:	4618      	mov	r0, r3
 8008504:	3738      	adds	r7, #56	; 0x38
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b08c      	sub	sp, #48	; 0x30
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008518:	2300      	movs	r3, #0
 800851a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10c      	bne.n	8008540 <xQueueReceive+0x34>
	__asm volatile
 8008526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852a:	b672      	cpsid	i
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	b662      	cpsie	i
 800853a:	623b      	str	r3, [r7, #32]
}
 800853c:	bf00      	nop
 800853e:	e7fe      	b.n	800853e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d103      	bne.n	800854e <xQueueReceive+0x42>
 8008546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <xQueueReceive+0x46>
 800854e:	2301      	movs	r3, #1
 8008550:	e000      	b.n	8008554 <xQueueReceive+0x48>
 8008552:	2300      	movs	r3, #0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10c      	bne.n	8008572 <xQueueReceive+0x66>
	__asm volatile
 8008558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855c:	b672      	cpsid	i
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	b662      	cpsie	i
 800856c:	61fb      	str	r3, [r7, #28]
}
 800856e:	bf00      	nop
 8008570:	e7fe      	b.n	8008570 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008572:	f001 fa63 	bl	8009a3c <xTaskGetSchedulerState>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d102      	bne.n	8008582 <xQueueReceive+0x76>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <xQueueReceive+0x7a>
 8008582:	2301      	movs	r3, #1
 8008584:	e000      	b.n	8008588 <xQueueReceive+0x7c>
 8008586:	2300      	movs	r3, #0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10c      	bne.n	80085a6 <xQueueReceive+0x9a>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	b672      	cpsid	i
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	b662      	cpsie	i
 80085a0:	61bb      	str	r3, [r7, #24]
}
 80085a2:	bf00      	nop
 80085a4:	e7fe      	b.n	80085a4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085a6:	f002 f899 	bl	800a6dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d01f      	beq.n	80085f6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ba:	f000 face 	bl	8008b5a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	1e5a      	subs	r2, r3, #1
 80085c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00f      	beq.n	80085ee <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d0:	3310      	adds	r3, #16
 80085d2:	4618      	mov	r0, r3
 80085d4:	f001 f858 	bl	8009688 <xTaskRemoveFromEventList>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d007      	beq.n	80085ee <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085de:	4b3d      	ldr	r3, [pc, #244]	; (80086d4 <xQueueReceive+0x1c8>)
 80085e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085ee:	f002 f8a9 	bl	800a744 <vPortExitCritical>
				return pdPASS;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e069      	b.n	80086ca <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d103      	bne.n	8008604 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085fc:	f002 f8a2 	bl	800a744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008600:	2300      	movs	r3, #0
 8008602:	e062      	b.n	80086ca <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008606:	2b00      	cmp	r3, #0
 8008608:	d106      	bne.n	8008618 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800860a:	f107 0310 	add.w	r3, r7, #16
 800860e:	4618      	mov	r0, r3
 8008610:	f001 f8a0 	bl	8009754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008614:	2301      	movs	r3, #1
 8008616:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008618:	f002 f894 	bl	800a744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800861c:	f000 fe00 	bl	8009220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008620:	f002 f85c 	bl	800a6dc <vPortEnterCritical>
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800862a:	b25b      	sxtb	r3, r3
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008630:	d103      	bne.n	800863a <xQueueReceive+0x12e>
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800863a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008640:	b25b      	sxtb	r3, r3
 8008642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008646:	d103      	bne.n	8008650 <xQueueReceive+0x144>
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008650:	f002 f878 	bl	800a744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008654:	1d3a      	adds	r2, r7, #4
 8008656:	f107 0310 	add.w	r3, r7, #16
 800865a:	4611      	mov	r1, r2
 800865c:	4618      	mov	r0, r3
 800865e:	f001 f88f 	bl	8009780 <xTaskCheckForTimeOut>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d123      	bne.n	80086b0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800866a:	f000 faee 	bl	8008c4a <prvIsQueueEmpty>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d017      	beq.n	80086a4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008676:	3324      	adds	r3, #36	; 0x24
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	4611      	mov	r1, r2
 800867c:	4618      	mov	r0, r3
 800867e:	f000 ffaf 	bl	80095e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008684:	f000 fa8f 	bl	8008ba6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008688:	f000 fdd8 	bl	800923c <xTaskResumeAll>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d189      	bne.n	80085a6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008692:	4b10      	ldr	r3, [pc, #64]	; (80086d4 <xQueueReceive+0x1c8>)
 8008694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	e780      	b.n	80085a6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80086a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086a6:	f000 fa7e 	bl	8008ba6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086aa:	f000 fdc7 	bl	800923c <xTaskResumeAll>
 80086ae:	e77a      	b.n	80085a6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80086b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086b2:	f000 fa78 	bl	8008ba6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086b6:	f000 fdc1 	bl	800923c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086bc:	f000 fac5 	bl	8008c4a <prvIsQueueEmpty>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f43f af6f 	beq.w	80085a6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3730      	adds	r7, #48	; 0x30
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	e000ed04 	.word	0xe000ed04

080086d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08e      	sub	sp, #56	; 0x38
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80086e2:	2300      	movs	r3, #0
 80086e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80086ea:	2300      	movs	r3, #0
 80086ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80086ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10c      	bne.n	800870e <xQueueSemaphoreTake+0x36>
	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f8:	b672      	cpsid	i
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	b662      	cpsie	i
 8008708:	623b      	str	r3, [r7, #32]
}
 800870a:	bf00      	nop
 800870c:	e7fe      	b.n	800870c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800870e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00c      	beq.n	8008730 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8008716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871a:	b672      	cpsid	i
 800871c:	f383 8811 	msr	BASEPRI, r3
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	b662      	cpsie	i
 800872a:	61fb      	str	r3, [r7, #28]
}
 800872c:	bf00      	nop
 800872e:	e7fe      	b.n	800872e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008730:	f001 f984 	bl	8009a3c <xTaskGetSchedulerState>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d102      	bne.n	8008740 <xQueueSemaphoreTake+0x68>
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <xQueueSemaphoreTake+0x6c>
 8008740:	2301      	movs	r3, #1
 8008742:	e000      	b.n	8008746 <xQueueSemaphoreTake+0x6e>
 8008744:	2300      	movs	r3, #0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10c      	bne.n	8008764 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874e:	b672      	cpsid	i
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	b662      	cpsie	i
 800875e:	61bb      	str	r3, [r7, #24]
}
 8008760:	bf00      	nop
 8008762:	e7fe      	b.n	8008762 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008764:	f001 ffba 	bl	800a6dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800876e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008770:	2b00      	cmp	r3, #0
 8008772:	d024      	beq.n	80087be <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008776:	1e5a      	subs	r2, r3, #1
 8008778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800877c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d104      	bne.n	800878e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008784:	f001 fad8 	bl	8009d38 <pvTaskIncrementMutexHeldCount>
 8008788:	4602      	mov	r2, r0
 800878a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800878e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00f      	beq.n	80087b6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008798:	3310      	adds	r3, #16
 800879a:	4618      	mov	r0, r3
 800879c:	f000 ff74 	bl	8009688 <xTaskRemoveFromEventList>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d007      	beq.n	80087b6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087a6:	4b55      	ldr	r3, [pc, #340]	; (80088fc <xQueueSemaphoreTake+0x224>)
 80087a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ac:	601a      	str	r2, [r3, #0]
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087b6:	f001 ffc5 	bl	800a744 <vPortExitCritical>
				return pdPASS;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e099      	b.n	80088f2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d113      	bne.n	80087ec <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00c      	beq.n	80087e4 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	b672      	cpsid	i
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	b662      	cpsie	i
 80087de:	617b      	str	r3, [r7, #20]
}
 80087e0:	bf00      	nop
 80087e2:	e7fe      	b.n	80087e2 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80087e4:	f001 ffae 	bl	800a744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087e8:	2300      	movs	r3, #0
 80087ea:	e082      	b.n	80088f2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d106      	bne.n	8008800 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087f2:	f107 030c 	add.w	r3, r7, #12
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 ffac 	bl	8009754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087fc:	2301      	movs	r3, #1
 80087fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008800:	f001 ffa0 	bl	800a744 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008804:	f000 fd0c 	bl	8009220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008808:	f001 ff68 	bl	800a6dc <vPortEnterCritical>
 800880c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008812:	b25b      	sxtb	r3, r3
 8008814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008818:	d103      	bne.n	8008822 <xQueueSemaphoreTake+0x14a>
 800881a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881c:	2200      	movs	r2, #0
 800881e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008828:	b25b      	sxtb	r3, r3
 800882a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882e:	d103      	bne.n	8008838 <xQueueSemaphoreTake+0x160>
 8008830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008838:	f001 ff84 	bl	800a744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800883c:	463a      	mov	r2, r7
 800883e:	f107 030c 	add.w	r3, r7, #12
 8008842:	4611      	mov	r1, r2
 8008844:	4618      	mov	r0, r3
 8008846:	f000 ff9b 	bl	8009780 <xTaskCheckForTimeOut>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d132      	bne.n	80088b6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008850:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008852:	f000 f9fa 	bl	8008c4a <prvIsQueueEmpty>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d026      	beq.n	80088aa <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800885c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d109      	bne.n	8008878 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8008864:	f001 ff3a 	bl	800a6dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	4618      	mov	r0, r3
 800886e:	f001 f903 	bl	8009a78 <xTaskPriorityInherit>
 8008872:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008874:	f001 ff66 	bl	800a744 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	3324      	adds	r3, #36	; 0x24
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	4611      	mov	r1, r2
 8008880:	4618      	mov	r0, r3
 8008882:	f000 fead 	bl	80095e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008886:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008888:	f000 f98d 	bl	8008ba6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800888c:	f000 fcd6 	bl	800923c <xTaskResumeAll>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	f47f af66 	bne.w	8008764 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8008898:	4b18      	ldr	r3, [pc, #96]	; (80088fc <xQueueSemaphoreTake+0x224>)
 800889a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	e75c      	b.n	8008764 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80088aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088ac:	f000 f97b 	bl	8008ba6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088b0:	f000 fcc4 	bl	800923c <xTaskResumeAll>
 80088b4:	e756      	b.n	8008764 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80088b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088b8:	f000 f975 	bl	8008ba6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088bc:	f000 fcbe 	bl	800923c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088c2:	f000 f9c2 	bl	8008c4a <prvIsQueueEmpty>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f43f af4b 	beq.w	8008764 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00d      	beq.n	80088f0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80088d4:	f001 ff02 	bl	800a6dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80088d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088da:	f000 f8bc 	bl	8008a56 <prvGetDisinheritPriorityAfterTimeout>
 80088de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80088e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 f9a0 	bl	8009c2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80088ec:	f001 ff2a 	bl	800a744 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3738      	adds	r7, #56	; 0x38
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	e000ed04 	.word	0xe000ed04

08008900 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08e      	sub	sp, #56	; 0x38
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10c      	bne.n	8008930 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8008916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891a:	b672      	cpsid	i
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	b662      	cpsie	i
 800892a:	623b      	str	r3, [r7, #32]
}
 800892c:	bf00      	nop
 800892e:	e7fe      	b.n	800892e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d103      	bne.n	800893e <xQueueReceiveFromISR+0x3e>
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <xQueueReceiveFromISR+0x42>
 800893e:	2301      	movs	r3, #1
 8008940:	e000      	b.n	8008944 <xQueueReceiveFromISR+0x44>
 8008942:	2300      	movs	r3, #0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10c      	bne.n	8008962 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894c:	b672      	cpsid	i
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	b662      	cpsie	i
 800895c:	61fb      	str	r3, [r7, #28]
}
 800895e:	bf00      	nop
 8008960:	e7fe      	b.n	8008960 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008962:	f001 ffa3 	bl	800a8ac <vPortValidateInterruptPriority>
	__asm volatile
 8008966:	f3ef 8211 	mrs	r2, BASEPRI
 800896a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896e:	b672      	cpsid	i
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	b662      	cpsie	i
 800897e:	61ba      	str	r2, [r7, #24]
 8008980:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008982:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008984:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898e:	2b00      	cmp	r3, #0
 8008990:	d02f      	beq.n	80089f2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800899c:	68b9      	ldr	r1, [r7, #8]
 800899e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089a0:	f000 f8db 	bl	8008b5a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a6:	1e5a      	subs	r2, r3, #1
 80089a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80089ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b4:	d112      	bne.n	80089dc <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d016      	beq.n	80089ec <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	3310      	adds	r3, #16
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 fe60 	bl	8009688 <xTaskRemoveFromEventList>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00e      	beq.n	80089ec <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00b      	beq.n	80089ec <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	e007      	b.n	80089ec <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80089dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089e0:	3301      	adds	r3, #1
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	b25a      	sxtb	r2, r3
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80089ec:	2301      	movs	r3, #1
 80089ee:	637b      	str	r3, [r7, #52]	; 0x34
 80089f0:	e001      	b.n	80089f6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	637b      	str	r3, [r7, #52]	; 0x34
 80089f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f383 8811 	msr	BASEPRI, r3
}
 8008a00:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3738      	adds	r7, #56	; 0x38
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10c      	bne.n	8008a38 <vQueueDelete+0x2c>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	b672      	cpsid	i
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	b662      	cpsie	i
 8008a32:	60bb      	str	r3, [r7, #8]
}
 8008a34:	bf00      	nop
 8008a36:	e7fe      	b.n	8008a36 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 f95f 	bl	8008cfc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d102      	bne.n	8008a4e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f002 f83d 	bl	800aac8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008a4e:	bf00      	nop
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008a56:	b480      	push	{r7}
 8008a58:	b085      	sub	sp, #20
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d006      	beq.n	8008a74 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008a70:	60fb      	str	r3, [r7, #12]
 8008a72:	e001      	b.n	8008a78 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008a78:	68fb      	ldr	r3, [r7, #12]
	}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b086      	sub	sp, #24
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	60f8      	str	r0, [r7, #12]
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a92:	2300      	movs	r3, #0
 8008a94:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10d      	bne.n	8008ac0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d14d      	bne.n	8008b48 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f001 f849 	bl	8009b48 <xTaskPriorityDisinherit>
 8008ab6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	609a      	str	r2, [r3, #8]
 8008abe:	e043      	b.n	8008b48 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d119      	bne.n	8008afa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6858      	ldr	r0, [r3, #4]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ace:	461a      	mov	r2, r3
 8008ad0:	68b9      	ldr	r1, [r7, #8]
 8008ad2:	f002 fa3f 	bl	800af54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ade:	441a      	add	r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d32b      	bcc.n	8008b48 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	605a      	str	r2, [r3, #4]
 8008af8:	e026      	b.n	8008b48 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	68d8      	ldr	r0, [r3, #12]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b02:	461a      	mov	r2, r3
 8008b04:	68b9      	ldr	r1, [r7, #8]
 8008b06:	f002 fa25 	bl	800af54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	68da      	ldr	r2, [r3, #12]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b12:	425b      	negs	r3, r3
 8008b14:	441a      	add	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d207      	bcs.n	8008b36 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	689a      	ldr	r2, [r3, #8]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2e:	425b      	negs	r3, r3
 8008b30:	441a      	add	r2, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d105      	bne.n	8008b48 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d002      	beq.n	8008b48 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	1c5a      	adds	r2, r3, #1
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008b50:	697b      	ldr	r3, [r7, #20]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3718      	adds	r7, #24
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b082      	sub	sp, #8
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d018      	beq.n	8008b9e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68da      	ldr	r2, [r3, #12]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b74:	441a      	add	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d303      	bcc.n	8008b8e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68d9      	ldr	r1, [r3, #12]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b96:	461a      	mov	r2, r3
 8008b98:	6838      	ldr	r0, [r7, #0]
 8008b9a:	f002 f9db 	bl	800af54 <memcpy>
	}
}
 8008b9e:	bf00      	nop
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b084      	sub	sp, #16
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008bae:	f001 fd95 	bl	800a6dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bb8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bba:	e011      	b.n	8008be0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d012      	beq.n	8008bea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	3324      	adds	r3, #36	; 0x24
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 fd5d 	bl	8009688 <xTaskRemoveFromEventList>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d001      	beq.n	8008bd8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008bd4:	f000 fe3a 	bl	800984c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	dce9      	bgt.n	8008bbc <prvUnlockQueue+0x16>
 8008be8:	e000      	b.n	8008bec <prvUnlockQueue+0x46>
					break;
 8008bea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	22ff      	movs	r2, #255	; 0xff
 8008bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008bf4:	f001 fda6 	bl	800a744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008bf8:	f001 fd70 	bl	800a6dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c02:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c04:	e011      	b.n	8008c2a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d012      	beq.n	8008c34 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	3310      	adds	r3, #16
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 fd38 	bl	8009688 <xTaskRemoveFromEventList>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c1e:	f000 fe15 	bl	800984c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	dce9      	bgt.n	8008c06 <prvUnlockQueue+0x60>
 8008c32:	e000      	b.n	8008c36 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c34:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	22ff      	movs	r2, #255	; 0xff
 8008c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c3e:	f001 fd81 	bl	800a744 <vPortExitCritical>
}
 8008c42:	bf00      	nop
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c52:	f001 fd43 	bl	800a6dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d102      	bne.n	8008c64 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	60fb      	str	r3, [r7, #12]
 8008c62:	e001      	b.n	8008c68 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c64:	2300      	movs	r3, #0
 8008c66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c68:	f001 fd6c 	bl	800a744 <vPortExitCritical>

	return xReturn;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b084      	sub	sp, #16
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c7e:	f001 fd2d 	bl	800a6dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d102      	bne.n	8008c94 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	e001      	b.n	8008c98 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c94:	2300      	movs	r3, #0
 8008c96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c98:	f001 fd54 	bl	800a744 <vPortExitCritical>

	return xReturn;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
	...

08008ca8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	60fb      	str	r3, [r7, #12]
 8008cb6:	e014      	b.n	8008ce2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008cb8:	4a0f      	ldr	r2, [pc, #60]	; (8008cf8 <vQueueAddToRegistry+0x50>)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10b      	bne.n	8008cdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008cc4:	490c      	ldr	r1, [pc, #48]	; (8008cf8 <vQueueAddToRegistry+0x50>)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	683a      	ldr	r2, [r7, #0]
 8008cca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008cce:	4a0a      	ldr	r2, [pc, #40]	; (8008cf8 <vQueueAddToRegistry+0x50>)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	4413      	add	r3, r2
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008cda:	e006      	b.n	8008cea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	60fb      	str	r3, [r7, #12]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2b07      	cmp	r3, #7
 8008ce6:	d9e7      	bls.n	8008cb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ce8:	bf00      	nop
 8008cea:	bf00      	nop
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	20005010 	.word	0x20005010

08008cfc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d04:	2300      	movs	r3, #0
 8008d06:	60fb      	str	r3, [r7, #12]
 8008d08:	e016      	b.n	8008d38 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008d0a:	4a10      	ldr	r2, [pc, #64]	; (8008d4c <vQueueUnregisterQueue+0x50>)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	4413      	add	r3, r2
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d10b      	bne.n	8008d32 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008d1a:	4a0c      	ldr	r2, [pc, #48]	; (8008d4c <vQueueUnregisterQueue+0x50>)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2100      	movs	r1, #0
 8008d20:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008d24:	4a09      	ldr	r2, [pc, #36]	; (8008d4c <vQueueUnregisterQueue+0x50>)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	00db      	lsls	r3, r3, #3
 8008d2a:	4413      	add	r3, r2
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	605a      	str	r2, [r3, #4]
				break;
 8008d30:	e006      	b.n	8008d40 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3301      	adds	r3, #1
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b07      	cmp	r3, #7
 8008d3c:	d9e5      	bls.n	8008d0a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008d3e:	bf00      	nop
 8008d40:	bf00      	nop
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	20005010 	.word	0x20005010

08008d50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008d60:	f001 fcbc 	bl	800a6dc <vPortEnterCritical>
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d6a:	b25b      	sxtb	r3, r3
 8008d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d70:	d103      	bne.n	8008d7a <vQueueWaitForMessageRestricted+0x2a>
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d80:	b25b      	sxtb	r3, r3
 8008d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d86:	d103      	bne.n	8008d90 <vQueueWaitForMessageRestricted+0x40>
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d90:	f001 fcd8 	bl	800a744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d106      	bne.n	8008daa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	3324      	adds	r3, #36	; 0x24
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	68b9      	ldr	r1, [r7, #8]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 fc41 	bl	800962c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008daa:	6978      	ldr	r0, [r7, #20]
 8008dac:	f7ff fefb 	bl	8008ba6 <prvUnlockQueue>
	}
 8008db0:	bf00      	nop
 8008db2:	3718      	adds	r7, #24
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08e      	sub	sp, #56	; 0x38
 8008dbc:	af04      	add	r7, sp, #16
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
 8008dc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10c      	bne.n	8008de6 <xTaskCreateStatic+0x2e>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	b672      	cpsid	i
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	b662      	cpsie	i
 8008de0:	623b      	str	r3, [r7, #32]
}
 8008de2:	bf00      	nop
 8008de4:	e7fe      	b.n	8008de4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10c      	bne.n	8008e06 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df0:	b672      	cpsid	i
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	b662      	cpsie	i
 8008e00:	61fb      	str	r3, [r7, #28]
}
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e06:	23bc      	movs	r3, #188	; 0xbc
 8008e08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	2bbc      	cmp	r3, #188	; 0xbc
 8008e0e:	d00c      	beq.n	8008e2a <xTaskCreateStatic+0x72>
	__asm volatile
 8008e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e14:	b672      	cpsid	i
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	b662      	cpsie	i
 8008e24:	61bb      	str	r3, [r7, #24]
}
 8008e26:	bf00      	nop
 8008e28:	e7fe      	b.n	8008e28 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d01e      	beq.n	8008e70 <xTaskCreateStatic+0xb8>
 8008e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d01b      	beq.n	8008e70 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	2202      	movs	r2, #2
 8008e46:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	9303      	str	r3, [sp, #12]
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	9302      	str	r3, [sp, #8]
 8008e52:	f107 0314 	add.w	r3, r7, #20
 8008e56:	9301      	str	r3, [sp, #4]
 8008e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	68b9      	ldr	r1, [r7, #8]
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f000 f850 	bl	8008f08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e6a:	f000 f8f5 	bl	8009058 <prvAddNewTaskToReadyList>
 8008e6e:	e001      	b.n	8008e74 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e74:	697b      	ldr	r3, [r7, #20]
	}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3728      	adds	r7, #40	; 0x28
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b08c      	sub	sp, #48	; 0x30
 8008e82:	af04      	add	r7, sp, #16
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	60b9      	str	r1, [r7, #8]
 8008e88:	603b      	str	r3, [r7, #0]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e8e:	88fb      	ldrh	r3, [r7, #6]
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f001 fd4e 	bl	800a934 <pvPortMalloc>
 8008e98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00e      	beq.n	8008ebe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ea0:	20bc      	movs	r0, #188	; 0xbc
 8008ea2:	f001 fd47 	bl	800a934 <pvPortMalloc>
 8008ea6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	697a      	ldr	r2, [r7, #20]
 8008eb2:	631a      	str	r2, [r3, #48]	; 0x30
 8008eb4:	e005      	b.n	8008ec2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008eb6:	6978      	ldr	r0, [r7, #20]
 8008eb8:	f001 fe06 	bl	800aac8 <vPortFree>
 8008ebc:	e001      	b.n	8008ec2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d017      	beq.n	8008ef8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ed0:	88fa      	ldrh	r2, [r7, #6]
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	9303      	str	r3, [sp, #12]
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	9302      	str	r3, [sp, #8]
 8008eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008edc:	9301      	str	r3, [sp, #4]
 8008ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	68b9      	ldr	r1, [r7, #8]
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 f80e 	bl	8008f08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008eec:	69f8      	ldr	r0, [r7, #28]
 8008eee:	f000 f8b3 	bl	8009058 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	61bb      	str	r3, [r7, #24]
 8008ef6:	e002      	b.n	8008efe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8008efc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008efe:	69bb      	ldr	r3, [r7, #24]
	}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3720      	adds	r7, #32
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
 8008f14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	461a      	mov	r2, r3
 8008f20:	21a5      	movs	r1, #165	; 0xa5
 8008f22:	f002 f825 	bl	800af70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f2a:	6879      	ldr	r1, [r7, #4]
 8008f2c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008f30:	440b      	add	r3, r1
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	f023 0307 	bic.w	r3, r3, #7
 8008f3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	f003 0307 	and.w	r3, r3, #7
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00c      	beq.n	8008f64 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	b672      	cpsid	i
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	b662      	cpsie	i
 8008f5e:	617b      	str	r3, [r7, #20]
}
 8008f60:	bf00      	nop
 8008f62:	e7fe      	b.n	8008f62 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d01f      	beq.n	8008faa <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	61fb      	str	r3, [r7, #28]
 8008f6e:	e012      	b.n	8008f96 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	4413      	add	r3, r2
 8008f76:	7819      	ldrb	r1, [r3, #0]
 8008f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	3334      	adds	r3, #52	; 0x34
 8008f80:	460a      	mov	r2, r1
 8008f82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	4413      	add	r3, r2
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d006      	beq.n	8008f9e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	3301      	adds	r3, #1
 8008f94:	61fb      	str	r3, [r7, #28]
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	2b0f      	cmp	r3, #15
 8008f9a:	d9e9      	bls.n	8008f70 <prvInitialiseNewTask+0x68>
 8008f9c:	e000      	b.n	8008fa0 <prvInitialiseNewTask+0x98>
			{
				break;
 8008f9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fa8:	e003      	b.n	8008fb2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb4:	2b37      	cmp	r3, #55	; 0x37
 8008fb6:	d901      	bls.n	8008fbc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008fb8:	2337      	movs	r3, #55	; 0x37
 8008fba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fc0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fc6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	2200      	movs	r2, #0
 8008fcc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe fd4c 	bl	8007a70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fda:	3318      	adds	r3, #24
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fe fd47 	bl	8007a70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fe6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ff6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009002:	2200      	movs	r2, #0
 8009004:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900a:	3354      	adds	r3, #84	; 0x54
 800900c:	2260      	movs	r2, #96	; 0x60
 800900e:	2100      	movs	r1, #0
 8009010:	4618      	mov	r0, r3
 8009012:	f001 ffad 	bl	800af70 <memset>
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	4a0c      	ldr	r2, [pc, #48]	; (800904c <prvInitialiseNewTask+0x144>)
 800901a:	659a      	str	r2, [r3, #88]	; 0x58
 800901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901e:	4a0c      	ldr	r2, [pc, #48]	; (8009050 <prvInitialiseNewTask+0x148>)
 8009020:	65da      	str	r2, [r3, #92]	; 0x5c
 8009022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009024:	4a0b      	ldr	r2, [pc, #44]	; (8009054 <prvInitialiseNewTask+0x14c>)
 8009026:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	68f9      	ldr	r1, [r7, #12]
 800902c:	69b8      	ldr	r0, [r7, #24]
 800902e:	f001 fa47 	bl	800a4c0 <pxPortInitialiseStack>
 8009032:	4602      	mov	r2, r0
 8009034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009036:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903a:	2b00      	cmp	r3, #0
 800903c:	d002      	beq.n	8009044 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009042:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009044:	bf00      	nop
 8009046:	3720      	adds	r7, #32
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	0800fbb8 	.word	0x0800fbb8
 8009050:	0800fbd8 	.word	0x0800fbd8
 8009054:	0800fb98 	.word	0x0800fb98

08009058 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009060:	f001 fb3c 	bl	800a6dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009064:	4b2d      	ldr	r3, [pc, #180]	; (800911c <prvAddNewTaskToReadyList+0xc4>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3301      	adds	r3, #1
 800906a:	4a2c      	ldr	r2, [pc, #176]	; (800911c <prvAddNewTaskToReadyList+0xc4>)
 800906c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800906e:	4b2c      	ldr	r3, [pc, #176]	; (8009120 <prvAddNewTaskToReadyList+0xc8>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d109      	bne.n	800908a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009076:	4a2a      	ldr	r2, [pc, #168]	; (8009120 <prvAddNewTaskToReadyList+0xc8>)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800907c:	4b27      	ldr	r3, [pc, #156]	; (800911c <prvAddNewTaskToReadyList+0xc4>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d110      	bne.n	80090a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009084:	f000 fc06 	bl	8009894 <prvInitialiseTaskLists>
 8009088:	e00d      	b.n	80090a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800908a:	4b26      	ldr	r3, [pc, #152]	; (8009124 <prvAddNewTaskToReadyList+0xcc>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d109      	bne.n	80090a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009092:	4b23      	ldr	r3, [pc, #140]	; (8009120 <prvAddNewTaskToReadyList+0xc8>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909c:	429a      	cmp	r2, r3
 800909e:	d802      	bhi.n	80090a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090a0:	4a1f      	ldr	r2, [pc, #124]	; (8009120 <prvAddNewTaskToReadyList+0xc8>)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090a6:	4b20      	ldr	r3, [pc, #128]	; (8009128 <prvAddNewTaskToReadyList+0xd0>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3301      	adds	r3, #1
 80090ac:	4a1e      	ldr	r2, [pc, #120]	; (8009128 <prvAddNewTaskToReadyList+0xd0>)
 80090ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090b0:	4b1d      	ldr	r3, [pc, #116]	; (8009128 <prvAddNewTaskToReadyList+0xd0>)
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090bc:	4b1b      	ldr	r3, [pc, #108]	; (800912c <prvAddNewTaskToReadyList+0xd4>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d903      	bls.n	80090cc <prvAddNewTaskToReadyList+0x74>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c8:	4a18      	ldr	r2, [pc, #96]	; (800912c <prvAddNewTaskToReadyList+0xd4>)
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d0:	4613      	mov	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4413      	add	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4a15      	ldr	r2, [pc, #84]	; (8009130 <prvAddNewTaskToReadyList+0xd8>)
 80090da:	441a      	add	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	3304      	adds	r3, #4
 80090e0:	4619      	mov	r1, r3
 80090e2:	4610      	mov	r0, r2
 80090e4:	f7fe fcd1 	bl	8007a8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80090e8:	f001 fb2c 	bl	800a744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80090ec:	4b0d      	ldr	r3, [pc, #52]	; (8009124 <prvAddNewTaskToReadyList+0xcc>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00e      	beq.n	8009112 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80090f4:	4b0a      	ldr	r3, [pc, #40]	; (8009120 <prvAddNewTaskToReadyList+0xc8>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fe:	429a      	cmp	r2, r3
 8009100:	d207      	bcs.n	8009112 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009102:	4b0c      	ldr	r3, [pc, #48]	; (8009134 <prvAddNewTaskToReadyList+0xdc>)
 8009104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009112:	bf00      	nop
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	20000eb4 	.word	0x20000eb4
 8009120:	200009e0 	.word	0x200009e0
 8009124:	20000ec0 	.word	0x20000ec0
 8009128:	20000ed0 	.word	0x20000ed0
 800912c:	20000ebc 	.word	0x20000ebc
 8009130:	200009e4 	.word	0x200009e4
 8009134:	e000ed04 	.word	0xe000ed04

08009138 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08a      	sub	sp, #40	; 0x28
 800913c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800913e:	2300      	movs	r3, #0
 8009140:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009142:	2300      	movs	r3, #0
 8009144:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009146:	463a      	mov	r2, r7
 8009148:	1d39      	adds	r1, r7, #4
 800914a:	f107 0308 	add.w	r3, r7, #8
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fc3a 	bl	80079c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009154:	6839      	ldr	r1, [r7, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	9202      	str	r2, [sp, #8]
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	2300      	movs	r3, #0
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	2300      	movs	r3, #0
 8009164:	460a      	mov	r2, r1
 8009166:	4926      	ldr	r1, [pc, #152]	; (8009200 <vTaskStartScheduler+0xc8>)
 8009168:	4826      	ldr	r0, [pc, #152]	; (8009204 <vTaskStartScheduler+0xcc>)
 800916a:	f7ff fe25 	bl	8008db8 <xTaskCreateStatic>
 800916e:	4603      	mov	r3, r0
 8009170:	4a25      	ldr	r2, [pc, #148]	; (8009208 <vTaskStartScheduler+0xd0>)
 8009172:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009174:	4b24      	ldr	r3, [pc, #144]	; (8009208 <vTaskStartScheduler+0xd0>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d002      	beq.n	8009182 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800917c:	2301      	movs	r3, #1
 800917e:	617b      	str	r3, [r7, #20]
 8009180:	e001      	b.n	8009186 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009182:	2300      	movs	r3, #0
 8009184:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d102      	bne.n	8009192 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800918c:	f000 fe3c 	bl	8009e08 <xTimerCreateTimerTask>
 8009190:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d11d      	bne.n	80091d4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8009198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919c:	b672      	cpsid	i
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	b662      	cpsie	i
 80091ac:	613b      	str	r3, [r7, #16]
}
 80091ae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091b0:	4b16      	ldr	r3, [pc, #88]	; (800920c <vTaskStartScheduler+0xd4>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3354      	adds	r3, #84	; 0x54
 80091b6:	4a16      	ldr	r2, [pc, #88]	; (8009210 <vTaskStartScheduler+0xd8>)
 80091b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80091ba:	4b16      	ldr	r3, [pc, #88]	; (8009214 <vTaskStartScheduler+0xdc>)
 80091bc:	f04f 32ff 	mov.w	r2, #4294967295
 80091c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091c2:	4b15      	ldr	r3, [pc, #84]	; (8009218 <vTaskStartScheduler+0xe0>)
 80091c4:	2201      	movs	r2, #1
 80091c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091c8:	4b14      	ldr	r3, [pc, #80]	; (800921c <vTaskStartScheduler+0xe4>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091ce:	f001 fa07 	bl	800a5e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091d2:	e010      	b.n	80091f6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091da:	d10c      	bne.n	80091f6 <vTaskStartScheduler+0xbe>
	__asm volatile
 80091dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e0:	b672      	cpsid	i
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	b662      	cpsie	i
 80091f0:	60fb      	str	r3, [r7, #12]
}
 80091f2:	bf00      	nop
 80091f4:	e7fe      	b.n	80091f4 <vTaskStartScheduler+0xbc>
}
 80091f6:	bf00      	nop
 80091f8:	3718      	adds	r7, #24
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	0800f998 	.word	0x0800f998
 8009204:	08009865 	.word	0x08009865
 8009208:	20000ed8 	.word	0x20000ed8
 800920c:	200009e0 	.word	0x200009e0
 8009210:	20000070 	.word	0x20000070
 8009214:	20000ed4 	.word	0x20000ed4
 8009218:	20000ec0 	.word	0x20000ec0
 800921c:	20000eb8 	.word	0x20000eb8

08009220 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009220:	b480      	push	{r7}
 8009222:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009224:	4b04      	ldr	r3, [pc, #16]	; (8009238 <vTaskSuspendAll+0x18>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	3301      	adds	r3, #1
 800922a:	4a03      	ldr	r2, [pc, #12]	; (8009238 <vTaskSuspendAll+0x18>)
 800922c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800922e:	bf00      	nop
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr
 8009238:	20000edc 	.word	0x20000edc

0800923c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009242:	2300      	movs	r3, #0
 8009244:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009246:	2300      	movs	r3, #0
 8009248:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800924a:	4b43      	ldr	r3, [pc, #268]	; (8009358 <xTaskResumeAll+0x11c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10c      	bne.n	800926c <xTaskResumeAll+0x30>
	__asm volatile
 8009252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009256:	b672      	cpsid	i
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	b662      	cpsie	i
 8009266:	603b      	str	r3, [r7, #0]
}
 8009268:	bf00      	nop
 800926a:	e7fe      	b.n	800926a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800926c:	f001 fa36 	bl	800a6dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009270:	4b39      	ldr	r3, [pc, #228]	; (8009358 <xTaskResumeAll+0x11c>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	3b01      	subs	r3, #1
 8009276:	4a38      	ldr	r2, [pc, #224]	; (8009358 <xTaskResumeAll+0x11c>)
 8009278:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800927a:	4b37      	ldr	r3, [pc, #220]	; (8009358 <xTaskResumeAll+0x11c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d162      	bne.n	8009348 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009282:	4b36      	ldr	r3, [pc, #216]	; (800935c <xTaskResumeAll+0x120>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d05e      	beq.n	8009348 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800928a:	e02f      	b.n	80092ec <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800928c:	4b34      	ldr	r3, [pc, #208]	; (8009360 <xTaskResumeAll+0x124>)
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	3318      	adds	r3, #24
 8009298:	4618      	mov	r0, r3
 800929a:	f7fe fc53 	bl	8007b44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3304      	adds	r3, #4
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fe fc4e 	bl	8007b44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ac:	4b2d      	ldr	r3, [pc, #180]	; (8009364 <xTaskResumeAll+0x128>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d903      	bls.n	80092bc <xTaskResumeAll+0x80>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	4a2a      	ldr	r2, [pc, #168]	; (8009364 <xTaskResumeAll+0x128>)
 80092ba:	6013      	str	r3, [r2, #0]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c0:	4613      	mov	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4a27      	ldr	r2, [pc, #156]	; (8009368 <xTaskResumeAll+0x12c>)
 80092ca:	441a      	add	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	3304      	adds	r3, #4
 80092d0:	4619      	mov	r1, r3
 80092d2:	4610      	mov	r0, r2
 80092d4:	f7fe fbd9 	bl	8007a8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092dc:	4b23      	ldr	r3, [pc, #140]	; (800936c <xTaskResumeAll+0x130>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d302      	bcc.n	80092ec <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80092e6:	4b22      	ldr	r3, [pc, #136]	; (8009370 <xTaskResumeAll+0x134>)
 80092e8:	2201      	movs	r2, #1
 80092ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092ec:	4b1c      	ldr	r3, [pc, #112]	; (8009360 <xTaskResumeAll+0x124>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1cb      	bne.n	800928c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d001      	beq.n	80092fe <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092fa:	f000 fb6f 	bl	80099dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80092fe:	4b1d      	ldr	r3, [pc, #116]	; (8009374 <xTaskResumeAll+0x138>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d010      	beq.n	800932c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800930a:	f000 f847 	bl	800939c <xTaskIncrementTick>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d002      	beq.n	800931a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8009314:	4b16      	ldr	r3, [pc, #88]	; (8009370 <xTaskResumeAll+0x134>)
 8009316:	2201      	movs	r2, #1
 8009318:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	3b01      	subs	r3, #1
 800931e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1f1      	bne.n	800930a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8009326:	4b13      	ldr	r3, [pc, #76]	; (8009374 <xTaskResumeAll+0x138>)
 8009328:	2200      	movs	r2, #0
 800932a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800932c:	4b10      	ldr	r3, [pc, #64]	; (8009370 <xTaskResumeAll+0x134>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d009      	beq.n	8009348 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009334:	2301      	movs	r3, #1
 8009336:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009338:	4b0f      	ldr	r3, [pc, #60]	; (8009378 <xTaskResumeAll+0x13c>)
 800933a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800933e:	601a      	str	r2, [r3, #0]
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009348:	f001 f9fc 	bl	800a744 <vPortExitCritical>

	return xAlreadyYielded;
 800934c:	68bb      	ldr	r3, [r7, #8]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20000edc 	.word	0x20000edc
 800935c:	20000eb4 	.word	0x20000eb4
 8009360:	20000e74 	.word	0x20000e74
 8009364:	20000ebc 	.word	0x20000ebc
 8009368:	200009e4 	.word	0x200009e4
 800936c:	200009e0 	.word	0x200009e0
 8009370:	20000ec8 	.word	0x20000ec8
 8009374:	20000ec4 	.word	0x20000ec4
 8009378:	e000ed04 	.word	0xe000ed04

0800937c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009382:	4b05      	ldr	r3, [pc, #20]	; (8009398 <xTaskGetTickCount+0x1c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009388:	687b      	ldr	r3, [r7, #4]
}
 800938a:	4618      	mov	r0, r3
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	20000eb8 	.word	0x20000eb8

0800939c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093a2:	2300      	movs	r3, #0
 80093a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093a6:	4b50      	ldr	r3, [pc, #320]	; (80094e8 <xTaskIncrementTick+0x14c>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f040 808b 	bne.w	80094c6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093b0:	4b4e      	ldr	r3, [pc, #312]	; (80094ec <xTaskIncrementTick+0x150>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3301      	adds	r3, #1
 80093b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093b8:	4a4c      	ldr	r2, [pc, #304]	; (80094ec <xTaskIncrementTick+0x150>)
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d122      	bne.n	800940a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80093c4:	4b4a      	ldr	r3, [pc, #296]	; (80094f0 <xTaskIncrementTick+0x154>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00c      	beq.n	80093e8 <xTaskIncrementTick+0x4c>
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	b672      	cpsid	i
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	b662      	cpsie	i
 80093e2:	603b      	str	r3, [r7, #0]
}
 80093e4:	bf00      	nop
 80093e6:	e7fe      	b.n	80093e6 <xTaskIncrementTick+0x4a>
 80093e8:	4b41      	ldr	r3, [pc, #260]	; (80094f0 <xTaskIncrementTick+0x154>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	60fb      	str	r3, [r7, #12]
 80093ee:	4b41      	ldr	r3, [pc, #260]	; (80094f4 <xTaskIncrementTick+0x158>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a3f      	ldr	r2, [pc, #252]	; (80094f0 <xTaskIncrementTick+0x154>)
 80093f4:	6013      	str	r3, [r2, #0]
 80093f6:	4a3f      	ldr	r2, [pc, #252]	; (80094f4 <xTaskIncrementTick+0x158>)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6013      	str	r3, [r2, #0]
 80093fc:	4b3e      	ldr	r3, [pc, #248]	; (80094f8 <xTaskIncrementTick+0x15c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3301      	adds	r3, #1
 8009402:	4a3d      	ldr	r2, [pc, #244]	; (80094f8 <xTaskIncrementTick+0x15c>)
 8009404:	6013      	str	r3, [r2, #0]
 8009406:	f000 fae9 	bl	80099dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800940a:	4b3c      	ldr	r3, [pc, #240]	; (80094fc <xTaskIncrementTick+0x160>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	693a      	ldr	r2, [r7, #16]
 8009410:	429a      	cmp	r2, r3
 8009412:	d349      	bcc.n	80094a8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009414:	4b36      	ldr	r3, [pc, #216]	; (80094f0 <xTaskIncrementTick+0x154>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d104      	bne.n	8009428 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800941e:	4b37      	ldr	r3, [pc, #220]	; (80094fc <xTaskIncrementTick+0x160>)
 8009420:	f04f 32ff 	mov.w	r2, #4294967295
 8009424:	601a      	str	r2, [r3, #0]
					break;
 8009426:	e03f      	b.n	80094a8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009428:	4b31      	ldr	r3, [pc, #196]	; (80094f0 <xTaskIncrementTick+0x154>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	429a      	cmp	r2, r3
 800943e:	d203      	bcs.n	8009448 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009440:	4a2e      	ldr	r2, [pc, #184]	; (80094fc <xTaskIncrementTick+0x160>)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009446:	e02f      	b.n	80094a8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	3304      	adds	r3, #4
 800944c:	4618      	mov	r0, r3
 800944e:	f7fe fb79 	bl	8007b44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009456:	2b00      	cmp	r3, #0
 8009458:	d004      	beq.n	8009464 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	3318      	adds	r3, #24
 800945e:	4618      	mov	r0, r3
 8009460:	f7fe fb70 	bl	8007b44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009468:	4b25      	ldr	r3, [pc, #148]	; (8009500 <xTaskIncrementTick+0x164>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	429a      	cmp	r2, r3
 800946e:	d903      	bls.n	8009478 <xTaskIncrementTick+0xdc>
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009474:	4a22      	ldr	r2, [pc, #136]	; (8009500 <xTaskIncrementTick+0x164>)
 8009476:	6013      	str	r3, [r2, #0]
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800947c:	4613      	mov	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4a1f      	ldr	r2, [pc, #124]	; (8009504 <xTaskIncrementTick+0x168>)
 8009486:	441a      	add	r2, r3
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	3304      	adds	r3, #4
 800948c:	4619      	mov	r1, r3
 800948e:	4610      	mov	r0, r2
 8009490:	f7fe fafb 	bl	8007a8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009498:	4b1b      	ldr	r3, [pc, #108]	; (8009508 <xTaskIncrementTick+0x16c>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949e:	429a      	cmp	r2, r3
 80094a0:	d3b8      	bcc.n	8009414 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80094a2:	2301      	movs	r3, #1
 80094a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094a6:	e7b5      	b.n	8009414 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094a8:	4b17      	ldr	r3, [pc, #92]	; (8009508 <xTaskIncrementTick+0x16c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ae:	4915      	ldr	r1, [pc, #84]	; (8009504 <xTaskIncrementTick+0x168>)
 80094b0:	4613      	mov	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	440b      	add	r3, r1
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d907      	bls.n	80094d0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80094c0:	2301      	movs	r3, #1
 80094c2:	617b      	str	r3, [r7, #20]
 80094c4:	e004      	b.n	80094d0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80094c6:	4b11      	ldr	r3, [pc, #68]	; (800950c <xTaskIncrementTick+0x170>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3301      	adds	r3, #1
 80094cc:	4a0f      	ldr	r2, [pc, #60]	; (800950c <xTaskIncrementTick+0x170>)
 80094ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80094d0:	4b0f      	ldr	r3, [pc, #60]	; (8009510 <xTaskIncrementTick+0x174>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d001      	beq.n	80094dc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80094d8:	2301      	movs	r3, #1
 80094da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80094dc:	697b      	ldr	r3, [r7, #20]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	20000edc 	.word	0x20000edc
 80094ec:	20000eb8 	.word	0x20000eb8
 80094f0:	20000e6c 	.word	0x20000e6c
 80094f4:	20000e70 	.word	0x20000e70
 80094f8:	20000ecc 	.word	0x20000ecc
 80094fc:	20000ed4 	.word	0x20000ed4
 8009500:	20000ebc 	.word	0x20000ebc
 8009504:	200009e4 	.word	0x200009e4
 8009508:	200009e0 	.word	0x200009e0
 800950c:	20000ec4 	.word	0x20000ec4
 8009510:	20000ec8 	.word	0x20000ec8

08009514 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800951a:	4b2b      	ldr	r3, [pc, #172]	; (80095c8 <vTaskSwitchContext+0xb4>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009522:	4b2a      	ldr	r3, [pc, #168]	; (80095cc <vTaskSwitchContext+0xb8>)
 8009524:	2201      	movs	r2, #1
 8009526:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009528:	e048      	b.n	80095bc <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800952a:	4b28      	ldr	r3, [pc, #160]	; (80095cc <vTaskSwitchContext+0xb8>)
 800952c:	2200      	movs	r2, #0
 800952e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009530:	4b27      	ldr	r3, [pc, #156]	; (80095d0 <vTaskSwitchContext+0xbc>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	60fb      	str	r3, [r7, #12]
 8009536:	e012      	b.n	800955e <vTaskSwitchContext+0x4a>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10c      	bne.n	8009558 <vTaskSwitchContext+0x44>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	b672      	cpsid	i
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	b662      	cpsie	i
 8009552:	607b      	str	r3, [r7, #4]
}
 8009554:	bf00      	nop
 8009556:	e7fe      	b.n	8009556 <vTaskSwitchContext+0x42>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3b01      	subs	r3, #1
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	491d      	ldr	r1, [pc, #116]	; (80095d4 <vTaskSwitchContext+0xc0>)
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	4613      	mov	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4413      	add	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	440b      	add	r3, r1
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d0e2      	beq.n	8009538 <vTaskSwitchContext+0x24>
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	4613      	mov	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4a15      	ldr	r2, [pc, #84]	; (80095d4 <vTaskSwitchContext+0xc0>)
 800957e:	4413      	add	r3, r2
 8009580:	60bb      	str	r3, [r7, #8]
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	605a      	str	r2, [r3, #4]
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	3308      	adds	r3, #8
 8009594:	429a      	cmp	r2, r3
 8009596:	d104      	bne.n	80095a2 <vTaskSwitchContext+0x8e>
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	605a      	str	r2, [r3, #4]
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	4a0b      	ldr	r2, [pc, #44]	; (80095d8 <vTaskSwitchContext+0xc4>)
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	4a08      	ldr	r2, [pc, #32]	; (80095d0 <vTaskSwitchContext+0xbc>)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80095b2:	4b09      	ldr	r3, [pc, #36]	; (80095d8 <vTaskSwitchContext+0xc4>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3354      	adds	r3, #84	; 0x54
 80095b8:	4a08      	ldr	r2, [pc, #32]	; (80095dc <vTaskSwitchContext+0xc8>)
 80095ba:	6013      	str	r3, [r2, #0]
}
 80095bc:	bf00      	nop
 80095be:	3714      	adds	r7, #20
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr
 80095c8:	20000edc 	.word	0x20000edc
 80095cc:	20000ec8 	.word	0x20000ec8
 80095d0:	20000ebc 	.word	0x20000ebc
 80095d4:	200009e4 	.word	0x200009e4
 80095d8:	200009e0 	.word	0x200009e0
 80095dc:	20000070 	.word	0x20000070

080095e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d10c      	bne.n	800960a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80095f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f4:	b672      	cpsid	i
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	b662      	cpsie	i
 8009604:	60fb      	str	r3, [r7, #12]
}
 8009606:	bf00      	nop
 8009608:	e7fe      	b.n	8009608 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800960a:	4b07      	ldr	r3, [pc, #28]	; (8009628 <vTaskPlaceOnEventList+0x48>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3318      	adds	r3, #24
 8009610:	4619      	mov	r1, r3
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f7fe fa5d 	bl	8007ad2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009618:	2101      	movs	r1, #1
 800961a:	6838      	ldr	r0, [r7, #0]
 800961c:	f000 fba0 	bl	8009d60 <prvAddCurrentTaskToDelayedList>
}
 8009620:	bf00      	nop
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	200009e0 	.word	0x200009e0

0800962c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10c      	bne.n	8009658 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009642:	b672      	cpsid	i
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	b662      	cpsie	i
 8009652:	617b      	str	r3, [r7, #20]
}
 8009654:	bf00      	nop
 8009656:	e7fe      	b.n	8009656 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009658:	4b0a      	ldr	r3, [pc, #40]	; (8009684 <vTaskPlaceOnEventListRestricted+0x58>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3318      	adds	r3, #24
 800965e:	4619      	mov	r1, r3
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f7fe fa12 	bl	8007a8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d002      	beq.n	8009672 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800966c:	f04f 33ff 	mov.w	r3, #4294967295
 8009670:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009672:	6879      	ldr	r1, [r7, #4]
 8009674:	68b8      	ldr	r0, [r7, #8]
 8009676:	f000 fb73 	bl	8009d60 <prvAddCurrentTaskToDelayedList>
	}
 800967a:	bf00      	nop
 800967c:	3718      	adds	r7, #24
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	200009e0 	.word	0x200009e0

08009688 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10c      	bne.n	80096b8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a2:	b672      	cpsid	i
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	b662      	cpsie	i
 80096b2:	60fb      	str	r3, [r7, #12]
}
 80096b4:	bf00      	nop
 80096b6:	e7fe      	b.n	80096b6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	3318      	adds	r3, #24
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fe fa41 	bl	8007b44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096c2:	4b1e      	ldr	r3, [pc, #120]	; (800973c <xTaskRemoveFromEventList+0xb4>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d11d      	bne.n	8009706 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	3304      	adds	r3, #4
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fe fa38 	bl	8007b44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d8:	4b19      	ldr	r3, [pc, #100]	; (8009740 <xTaskRemoveFromEventList+0xb8>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d903      	bls.n	80096e8 <xTaskRemoveFromEventList+0x60>
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e4:	4a16      	ldr	r2, [pc, #88]	; (8009740 <xTaskRemoveFromEventList+0xb8>)
 80096e6:	6013      	str	r3, [r2, #0]
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ec:	4613      	mov	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4a13      	ldr	r2, [pc, #76]	; (8009744 <xTaskRemoveFromEventList+0xbc>)
 80096f6:	441a      	add	r2, r3
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	3304      	adds	r3, #4
 80096fc:	4619      	mov	r1, r3
 80096fe:	4610      	mov	r0, r2
 8009700:	f7fe f9c3 	bl	8007a8a <vListInsertEnd>
 8009704:	e005      	b.n	8009712 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	3318      	adds	r3, #24
 800970a:	4619      	mov	r1, r3
 800970c:	480e      	ldr	r0, [pc, #56]	; (8009748 <xTaskRemoveFromEventList+0xc0>)
 800970e:	f7fe f9bc 	bl	8007a8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009716:	4b0d      	ldr	r3, [pc, #52]	; (800974c <xTaskRemoveFromEventList+0xc4>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971c:	429a      	cmp	r2, r3
 800971e:	d905      	bls.n	800972c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009720:	2301      	movs	r3, #1
 8009722:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009724:	4b0a      	ldr	r3, [pc, #40]	; (8009750 <xTaskRemoveFromEventList+0xc8>)
 8009726:	2201      	movs	r2, #1
 8009728:	601a      	str	r2, [r3, #0]
 800972a:	e001      	b.n	8009730 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800972c:	2300      	movs	r3, #0
 800972e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009730:	697b      	ldr	r3, [r7, #20]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	20000edc 	.word	0x20000edc
 8009740:	20000ebc 	.word	0x20000ebc
 8009744:	200009e4 	.word	0x200009e4
 8009748:	20000e74 	.word	0x20000e74
 800974c:	200009e0 	.word	0x200009e0
 8009750:	20000ec8 	.word	0x20000ec8

08009754 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800975c:	4b06      	ldr	r3, [pc, #24]	; (8009778 <vTaskInternalSetTimeOutState+0x24>)
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009764:	4b05      	ldr	r3, [pc, #20]	; (800977c <vTaskInternalSetTimeOutState+0x28>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	605a      	str	r2, [r3, #4]
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	20000ecc 	.word	0x20000ecc
 800977c:	20000eb8 	.word	0x20000eb8

08009780 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b088      	sub	sp, #32
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10c      	bne.n	80097aa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	b672      	cpsid	i
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	b662      	cpsie	i
 80097a4:	613b      	str	r3, [r7, #16]
}
 80097a6:	bf00      	nop
 80097a8:	e7fe      	b.n	80097a8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10c      	bne.n	80097ca <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	b672      	cpsid	i
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	b662      	cpsie	i
 80097c4:	60fb      	str	r3, [r7, #12]
}
 80097c6:	bf00      	nop
 80097c8:	e7fe      	b.n	80097c8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80097ca:	f000 ff87 	bl	800a6dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80097ce:	4b1d      	ldr	r3, [pc, #116]	; (8009844 <xTaskCheckForTimeOut+0xc4>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	69ba      	ldr	r2, [r7, #24]
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e6:	d102      	bne.n	80097ee <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80097e8:	2300      	movs	r3, #0
 80097ea:	61fb      	str	r3, [r7, #28]
 80097ec:	e023      	b.n	8009836 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	4b15      	ldr	r3, [pc, #84]	; (8009848 <xTaskCheckForTimeOut+0xc8>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d007      	beq.n	800980a <xTaskCheckForTimeOut+0x8a>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	69ba      	ldr	r2, [r7, #24]
 8009800:	429a      	cmp	r2, r3
 8009802:	d302      	bcc.n	800980a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009804:	2301      	movs	r3, #1
 8009806:	61fb      	str	r3, [r7, #28]
 8009808:	e015      	b.n	8009836 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	429a      	cmp	r2, r3
 8009812:	d20b      	bcs.n	800982c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	1ad2      	subs	r2, r2, r3
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7ff ff97 	bl	8009754 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009826:	2300      	movs	r3, #0
 8009828:	61fb      	str	r3, [r7, #28]
 800982a:	e004      	b.n	8009836 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	2200      	movs	r2, #0
 8009830:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009832:	2301      	movs	r3, #1
 8009834:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009836:	f000 ff85 	bl	800a744 <vPortExitCritical>

	return xReturn;
 800983a:	69fb      	ldr	r3, [r7, #28]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3720      	adds	r7, #32
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	20000eb8 	.word	0x20000eb8
 8009848:	20000ecc 	.word	0x20000ecc

0800984c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800984c:	b480      	push	{r7}
 800984e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009850:	4b03      	ldr	r3, [pc, #12]	; (8009860 <vTaskMissedYield+0x14>)
 8009852:	2201      	movs	r2, #1
 8009854:	601a      	str	r2, [r3, #0]
}
 8009856:	bf00      	nop
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	20000ec8 	.word	0x20000ec8

08009864 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800986c:	f000 f852 	bl	8009914 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009870:	4b06      	ldr	r3, [pc, #24]	; (800988c <prvIdleTask+0x28>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d9f9      	bls.n	800986c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009878:	4b05      	ldr	r3, [pc, #20]	; (8009890 <prvIdleTask+0x2c>)
 800987a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800987e:	601a      	str	r2, [r3, #0]
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009888:	e7f0      	b.n	800986c <prvIdleTask+0x8>
 800988a:	bf00      	nop
 800988c:	200009e4 	.word	0x200009e4
 8009890:	e000ed04 	.word	0xe000ed04

08009894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800989a:	2300      	movs	r3, #0
 800989c:	607b      	str	r3, [r7, #4]
 800989e:	e00c      	b.n	80098ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	4613      	mov	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4a12      	ldr	r2, [pc, #72]	; (80098f4 <prvInitialiseTaskLists+0x60>)
 80098ac:	4413      	add	r3, r2
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fe f8be 	bl	8007a30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	3301      	adds	r3, #1
 80098b8:	607b      	str	r3, [r7, #4]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b37      	cmp	r3, #55	; 0x37
 80098be:	d9ef      	bls.n	80098a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098c0:	480d      	ldr	r0, [pc, #52]	; (80098f8 <prvInitialiseTaskLists+0x64>)
 80098c2:	f7fe f8b5 	bl	8007a30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098c6:	480d      	ldr	r0, [pc, #52]	; (80098fc <prvInitialiseTaskLists+0x68>)
 80098c8:	f7fe f8b2 	bl	8007a30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80098cc:	480c      	ldr	r0, [pc, #48]	; (8009900 <prvInitialiseTaskLists+0x6c>)
 80098ce:	f7fe f8af 	bl	8007a30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80098d2:	480c      	ldr	r0, [pc, #48]	; (8009904 <prvInitialiseTaskLists+0x70>)
 80098d4:	f7fe f8ac 	bl	8007a30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098d8:	480b      	ldr	r0, [pc, #44]	; (8009908 <prvInitialiseTaskLists+0x74>)
 80098da:	f7fe f8a9 	bl	8007a30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098de:	4b0b      	ldr	r3, [pc, #44]	; (800990c <prvInitialiseTaskLists+0x78>)
 80098e0:	4a05      	ldr	r2, [pc, #20]	; (80098f8 <prvInitialiseTaskLists+0x64>)
 80098e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098e4:	4b0a      	ldr	r3, [pc, #40]	; (8009910 <prvInitialiseTaskLists+0x7c>)
 80098e6:	4a05      	ldr	r2, [pc, #20]	; (80098fc <prvInitialiseTaskLists+0x68>)
 80098e8:	601a      	str	r2, [r3, #0]
}
 80098ea:	bf00      	nop
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	200009e4 	.word	0x200009e4
 80098f8:	20000e44 	.word	0x20000e44
 80098fc:	20000e58 	.word	0x20000e58
 8009900:	20000e74 	.word	0x20000e74
 8009904:	20000e88 	.word	0x20000e88
 8009908:	20000ea0 	.word	0x20000ea0
 800990c:	20000e6c 	.word	0x20000e6c
 8009910:	20000e70 	.word	0x20000e70

08009914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800991a:	e019      	b.n	8009950 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800991c:	f000 fede 	bl	800a6dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009920:	4b10      	ldr	r3, [pc, #64]	; (8009964 <prvCheckTasksWaitingTermination+0x50>)
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	3304      	adds	r3, #4
 800992c:	4618      	mov	r0, r3
 800992e:	f7fe f909 	bl	8007b44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009932:	4b0d      	ldr	r3, [pc, #52]	; (8009968 <prvCheckTasksWaitingTermination+0x54>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3b01      	subs	r3, #1
 8009938:	4a0b      	ldr	r2, [pc, #44]	; (8009968 <prvCheckTasksWaitingTermination+0x54>)
 800993a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800993c:	4b0b      	ldr	r3, [pc, #44]	; (800996c <prvCheckTasksWaitingTermination+0x58>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	3b01      	subs	r3, #1
 8009942:	4a0a      	ldr	r2, [pc, #40]	; (800996c <prvCheckTasksWaitingTermination+0x58>)
 8009944:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009946:	f000 fefd 	bl	800a744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f810 	bl	8009970 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009950:	4b06      	ldr	r3, [pc, #24]	; (800996c <prvCheckTasksWaitingTermination+0x58>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1e1      	bne.n	800991c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009958:	bf00      	nop
 800995a:	bf00      	nop
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	20000e88 	.word	0x20000e88
 8009968:	20000eb4 	.word	0x20000eb4
 800996c:	20000e9c 	.word	0x20000e9c

08009970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	3354      	adds	r3, #84	; 0x54
 800997c:	4618      	mov	r0, r3
 800997e:	f002 faa3 	bl	800bec8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009988:	2b00      	cmp	r3, #0
 800998a:	d108      	bne.n	800999e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009990:	4618      	mov	r0, r3
 8009992:	f001 f899 	bl	800aac8 <vPortFree>
				vPortFree( pxTCB );
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f001 f896 	bl	800aac8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800999c:	e01a      	b.n	80099d4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d103      	bne.n	80099b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f001 f88d 	bl	800aac8 <vPortFree>
	}
 80099ae:	e011      	b.n	80099d4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d00c      	beq.n	80099d4 <prvDeleteTCB+0x64>
	__asm volatile
 80099ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099be:	b672      	cpsid	i
 80099c0:	f383 8811 	msr	BASEPRI, r3
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	b662      	cpsie	i
 80099ce:	60fb      	str	r3, [r7, #12]
}
 80099d0:	bf00      	nop
 80099d2:	e7fe      	b.n	80099d2 <prvDeleteTCB+0x62>
	}
 80099d4:	bf00      	nop
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099e2:	4b0c      	ldr	r3, [pc, #48]	; (8009a14 <prvResetNextTaskUnblockTime+0x38>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d104      	bne.n	80099f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80099ec:	4b0a      	ldr	r3, [pc, #40]	; (8009a18 <prvResetNextTaskUnblockTime+0x3c>)
 80099ee:	f04f 32ff 	mov.w	r2, #4294967295
 80099f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80099f4:	e008      	b.n	8009a08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099f6:	4b07      	ldr	r3, [pc, #28]	; (8009a14 <prvResetNextTaskUnblockTime+0x38>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	4a04      	ldr	r2, [pc, #16]	; (8009a18 <prvResetNextTaskUnblockTime+0x3c>)
 8009a06:	6013      	str	r3, [r2, #0]
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	20000e6c 	.word	0x20000e6c
 8009a18:	20000ed4 	.word	0x20000ed4

08009a1c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009a22:	4b05      	ldr	r3, [pc, #20]	; (8009a38 <xTaskGetCurrentTaskHandle+0x1c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009a28:	687b      	ldr	r3, [r7, #4]
	}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	370c      	adds	r7, #12
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	200009e0 	.word	0x200009e0

08009a3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a42:	4b0b      	ldr	r3, [pc, #44]	; (8009a70 <xTaskGetSchedulerState+0x34>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d102      	bne.n	8009a50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	607b      	str	r3, [r7, #4]
 8009a4e:	e008      	b.n	8009a62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a50:	4b08      	ldr	r3, [pc, #32]	; (8009a74 <xTaskGetSchedulerState+0x38>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d102      	bne.n	8009a5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a58:	2302      	movs	r3, #2
 8009a5a:	607b      	str	r3, [r7, #4]
 8009a5c:	e001      	b.n	8009a62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a62:	687b      	ldr	r3, [r7, #4]
	}
 8009a64:	4618      	mov	r0, r3
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr
 8009a70:	20000ec0 	.word	0x20000ec0
 8009a74:	20000edc 	.word	0x20000edc

08009a78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009a84:	2300      	movs	r3, #0
 8009a86:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d051      	beq.n	8009b32 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a92:	4b2a      	ldr	r3, [pc, #168]	; (8009b3c <xTaskPriorityInherit+0xc4>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d241      	bcs.n	8009b20 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	699b      	ldr	r3, [r3, #24]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	db06      	blt.n	8009ab2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aa4:	4b25      	ldr	r3, [pc, #148]	; (8009b3c <xTaskPriorityInherit+0xc4>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	6959      	ldr	r1, [r3, #20]
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aba:	4613      	mov	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4413      	add	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4a1f      	ldr	r2, [pc, #124]	; (8009b40 <xTaskPriorityInherit+0xc8>)
 8009ac4:	4413      	add	r3, r2
 8009ac6:	4299      	cmp	r1, r3
 8009ac8:	d122      	bne.n	8009b10 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	3304      	adds	r3, #4
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fe f838 	bl	8007b44 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ad4:	4b19      	ldr	r3, [pc, #100]	; (8009b3c <xTaskPriorityInherit+0xc4>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae2:	4b18      	ldr	r3, [pc, #96]	; (8009b44 <xTaskPriorityInherit+0xcc>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d903      	bls.n	8009af2 <xTaskPriorityInherit+0x7a>
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aee:	4a15      	ldr	r2, [pc, #84]	; (8009b44 <xTaskPriorityInherit+0xcc>)
 8009af0:	6013      	str	r3, [r2, #0]
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af6:	4613      	mov	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4a10      	ldr	r2, [pc, #64]	; (8009b40 <xTaskPriorityInherit+0xc8>)
 8009b00:	441a      	add	r2, r3
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	3304      	adds	r3, #4
 8009b06:	4619      	mov	r1, r3
 8009b08:	4610      	mov	r0, r2
 8009b0a:	f7fd ffbe 	bl	8007a8a <vListInsertEnd>
 8009b0e:	e004      	b.n	8009b1a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b10:	4b0a      	ldr	r3, [pc, #40]	; (8009b3c <xTaskPriorityInherit+0xc4>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	60fb      	str	r3, [r7, #12]
 8009b1e:	e008      	b.n	8009b32 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b24:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <xTaskPriorityInherit+0xc4>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d201      	bcs.n	8009b32 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b32:	68fb      	ldr	r3, [r7, #12]
	}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	200009e0 	.word	0x200009e0
 8009b40:	200009e4 	.word	0x200009e4
 8009b44:	20000ebc 	.word	0x20000ebc

08009b48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b54:	2300      	movs	r3, #0
 8009b56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d05a      	beq.n	8009c14 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b5e:	4b30      	ldr	r3, [pc, #192]	; (8009c20 <xTaskPriorityDisinherit+0xd8>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d00c      	beq.n	8009b82 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	b672      	cpsid	i
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	b662      	cpsie	i
 8009b7c:	60fb      	str	r3, [r7, #12]
}
 8009b7e:	bf00      	nop
 8009b80:	e7fe      	b.n	8009b80 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10c      	bne.n	8009ba4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8e:	b672      	cpsid	i
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	b662      	cpsie	i
 8009b9e:	60bb      	str	r3, [r7, #8]
}
 8009ba0:	bf00      	nop
 8009ba2:	e7fe      	b.n	8009ba2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ba8:	1e5a      	subs	r2, r3, #1
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d02c      	beq.n	8009c14 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d128      	bne.n	8009c14 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fd ffbc 	bl	8007b44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be4:	4b0f      	ldr	r3, [pc, #60]	; (8009c24 <xTaskPriorityDisinherit+0xdc>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d903      	bls.n	8009bf4 <xTaskPriorityDisinherit+0xac>
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf0:	4a0c      	ldr	r2, [pc, #48]	; (8009c24 <xTaskPriorityDisinherit+0xdc>)
 8009bf2:	6013      	str	r3, [r2, #0]
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4413      	add	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4a09      	ldr	r2, [pc, #36]	; (8009c28 <xTaskPriorityDisinherit+0xe0>)
 8009c02:	441a      	add	r2, r3
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	3304      	adds	r3, #4
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4610      	mov	r0, r2
 8009c0c:	f7fd ff3d 	bl	8007a8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c10:	2301      	movs	r3, #1
 8009c12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c14:	697b      	ldr	r3, [r7, #20]
	}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3718      	adds	r7, #24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	200009e0 	.word	0x200009e0
 8009c24:	20000ebc 	.word	0x20000ebc
 8009c28:	200009e4 	.word	0x200009e4

08009c2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b088      	sub	sp, #32
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d06e      	beq.n	8009d22 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10c      	bne.n	8009c66 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8009c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c50:	b672      	cpsid	i
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	b662      	cpsie	i
 8009c60:	60fb      	str	r3, [r7, #12]
}
 8009c62:	bf00      	nop
 8009c64:	e7fe      	b.n	8009c64 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d902      	bls.n	8009c76 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	61fb      	str	r3, [r7, #28]
 8009c74:	e002      	b.n	8009c7c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c7a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c80:	69fa      	ldr	r2, [r7, #28]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d04d      	beq.n	8009d22 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d148      	bne.n	8009d22 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009c90:	4b26      	ldr	r3, [pc, #152]	; (8009d2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	69ba      	ldr	r2, [r7, #24]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d10c      	bne.n	8009cb4 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8009c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9e:	b672      	cpsid	i
 8009ca0:	f383 8811 	msr	BASEPRI, r3
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	b662      	cpsie	i
 8009cae:	60bb      	str	r3, [r7, #8]
}
 8009cb0:	bf00      	nop
 8009cb2:	e7fe      	b.n	8009cb2 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	69fa      	ldr	r2, [r7, #28]
 8009cbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	699b      	ldr	r3, [r3, #24]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	db04      	blt.n	8009cd2 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	6959      	ldr	r1, [r3, #20]
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	4a13      	ldr	r2, [pc, #76]	; (8009d30 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009ce2:	4413      	add	r3, r2
 8009ce4:	4299      	cmp	r1, r3
 8009ce6:	d11c      	bne.n	8009d22 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	3304      	adds	r3, #4
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fd ff29 	bl	8007b44 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf6:	4b0f      	ldr	r3, [pc, #60]	; (8009d34 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d903      	bls.n	8009d06 <vTaskPriorityDisinheritAfterTimeout+0xda>
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d02:	4a0c      	ldr	r2, [pc, #48]	; (8009d34 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009d04:	6013      	str	r3, [r2, #0]
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4a07      	ldr	r2, [pc, #28]	; (8009d30 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009d14:	441a      	add	r2, r3
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	3304      	adds	r3, #4
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	f7fd feb4 	bl	8007a8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d22:	bf00      	nop
 8009d24:	3720      	adds	r7, #32
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	200009e0 	.word	0x200009e0
 8009d30:	200009e4 	.word	0x200009e4
 8009d34:	20000ebc 	.word	0x20000ebc

08009d38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009d38:	b480      	push	{r7}
 8009d3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009d3c:	4b07      	ldr	r3, [pc, #28]	; (8009d5c <pvTaskIncrementMutexHeldCount+0x24>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d004      	beq.n	8009d4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009d44:	4b05      	ldr	r3, [pc, #20]	; (8009d5c <pvTaskIncrementMutexHeldCount+0x24>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d4a:	3201      	adds	r2, #1
 8009d4c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009d4e:	4b03      	ldr	r3, [pc, #12]	; (8009d5c <pvTaskIncrementMutexHeldCount+0x24>)
 8009d50:	681b      	ldr	r3, [r3, #0]
	}
 8009d52:	4618      	mov	r0, r3
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	200009e0 	.word	0x200009e0

08009d60 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d6a:	4b21      	ldr	r3, [pc, #132]	; (8009df0 <prvAddCurrentTaskToDelayedList+0x90>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d70:	4b20      	ldr	r3, [pc, #128]	; (8009df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3304      	adds	r3, #4
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fd fee4 	bl	8007b44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d82:	d10a      	bne.n	8009d9a <prvAddCurrentTaskToDelayedList+0x3a>
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d007      	beq.n	8009d9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d8a:	4b1a      	ldr	r3, [pc, #104]	; (8009df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	3304      	adds	r3, #4
 8009d90:	4619      	mov	r1, r3
 8009d92:	4819      	ldr	r0, [pc, #100]	; (8009df8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d94:	f7fd fe79 	bl	8007a8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d98:	e026      	b.n	8009de8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4413      	add	r3, r2
 8009da0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009da2:	4b14      	ldr	r3, [pc, #80]	; (8009df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009daa:	68ba      	ldr	r2, [r7, #8]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d209      	bcs.n	8009dc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009db2:	4b12      	ldr	r3, [pc, #72]	; (8009dfc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	4b0f      	ldr	r3, [pc, #60]	; (8009df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3304      	adds	r3, #4
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	f7fd fe87 	bl	8007ad2 <vListInsert>
}
 8009dc4:	e010      	b.n	8009de8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dc6:	4b0e      	ldr	r3, [pc, #56]	; (8009e00 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	4b0a      	ldr	r3, [pc, #40]	; (8009df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	3304      	adds	r3, #4
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	f7fd fe7d 	bl	8007ad2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009dd8:	4b0a      	ldr	r3, [pc, #40]	; (8009e04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d202      	bcs.n	8009de8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009de2:	4a08      	ldr	r2, [pc, #32]	; (8009e04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	6013      	str	r3, [r2, #0]
}
 8009de8:	bf00      	nop
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	20000eb8 	.word	0x20000eb8
 8009df4:	200009e0 	.word	0x200009e0
 8009df8:	20000ea0 	.word	0x20000ea0
 8009dfc:	20000e70 	.word	0x20000e70
 8009e00:	20000e6c 	.word	0x20000e6c
 8009e04:	20000ed4 	.word	0x20000ed4

08009e08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b08a      	sub	sp, #40	; 0x28
 8009e0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009e12:	f000 fb15 	bl	800a440 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009e16:	4b1d      	ldr	r3, [pc, #116]	; (8009e8c <xTimerCreateTimerTask+0x84>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d021      	beq.n	8009e62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009e22:	2300      	movs	r3, #0
 8009e24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e26:	1d3a      	adds	r2, r7, #4
 8009e28:	f107 0108 	add.w	r1, r7, #8
 8009e2c:	f107 030c 	add.w	r3, r7, #12
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7fd fde3 	bl	80079fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e36:	6879      	ldr	r1, [r7, #4]
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	9202      	str	r2, [sp, #8]
 8009e3e:	9301      	str	r3, [sp, #4]
 8009e40:	2302      	movs	r3, #2
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	2300      	movs	r3, #0
 8009e46:	460a      	mov	r2, r1
 8009e48:	4911      	ldr	r1, [pc, #68]	; (8009e90 <xTimerCreateTimerTask+0x88>)
 8009e4a:	4812      	ldr	r0, [pc, #72]	; (8009e94 <xTimerCreateTimerTask+0x8c>)
 8009e4c:	f7fe ffb4 	bl	8008db8 <xTaskCreateStatic>
 8009e50:	4603      	mov	r3, r0
 8009e52:	4a11      	ldr	r2, [pc, #68]	; (8009e98 <xTimerCreateTimerTask+0x90>)
 8009e54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e56:	4b10      	ldr	r3, [pc, #64]	; (8009e98 <xTimerCreateTimerTask+0x90>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10c      	bne.n	8009e82 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6c:	b672      	cpsid	i
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	b662      	cpsie	i
 8009e7c:	613b      	str	r3, [r7, #16]
}
 8009e7e:	bf00      	nop
 8009e80:	e7fe      	b.n	8009e80 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009e82:	697b      	ldr	r3, [r7, #20]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	20000f10 	.word	0x20000f10
 8009e90:	0800f9a0 	.word	0x0800f9a0
 8009e94:	08009fd9 	.word	0x08009fd9
 8009e98:	20000f14 	.word	0x20000f14

08009e9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08a      	sub	sp, #40	; 0x28
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
 8009ea8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10c      	bne.n	8009ece <xTimerGenericCommand+0x32>
	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb8:	b672      	cpsid	i
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	b662      	cpsie	i
 8009ec8:	623b      	str	r3, [r7, #32]
}
 8009eca:	bf00      	nop
 8009ecc:	e7fe      	b.n	8009ecc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009ece:	4b1a      	ldr	r3, [pc, #104]	; (8009f38 <xTimerGenericCommand+0x9c>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d02a      	beq.n	8009f2c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	2b05      	cmp	r3, #5
 8009ee6:	dc18      	bgt.n	8009f1a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ee8:	f7ff fda8 	bl	8009a3c <xTaskGetSchedulerState>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d109      	bne.n	8009f06 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ef2:	4b11      	ldr	r3, [pc, #68]	; (8009f38 <xTimerGenericCommand+0x9c>)
 8009ef4:	6818      	ldr	r0, [r3, #0]
 8009ef6:	f107 0110 	add.w	r1, r7, #16
 8009efa:	2300      	movs	r3, #0
 8009efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009efe:	f7fe f8c9 	bl	8008094 <xQueueGenericSend>
 8009f02:	6278      	str	r0, [r7, #36]	; 0x24
 8009f04:	e012      	b.n	8009f2c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f06:	4b0c      	ldr	r3, [pc, #48]	; (8009f38 <xTimerGenericCommand+0x9c>)
 8009f08:	6818      	ldr	r0, [r3, #0]
 8009f0a:	f107 0110 	add.w	r1, r7, #16
 8009f0e:	2300      	movs	r3, #0
 8009f10:	2200      	movs	r2, #0
 8009f12:	f7fe f8bf 	bl	8008094 <xQueueGenericSend>
 8009f16:	6278      	str	r0, [r7, #36]	; 0x24
 8009f18:	e008      	b.n	8009f2c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009f1a:	4b07      	ldr	r3, [pc, #28]	; (8009f38 <xTimerGenericCommand+0x9c>)
 8009f1c:	6818      	ldr	r0, [r3, #0]
 8009f1e:	f107 0110 	add.w	r1, r7, #16
 8009f22:	2300      	movs	r3, #0
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	f7fe f9bb 	bl	80082a0 <xQueueGenericSendFromISR>
 8009f2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3728      	adds	r7, #40	; 0x28
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	20000f10 	.word	0x20000f10

08009f3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b088      	sub	sp, #32
 8009f40:	af02      	add	r7, sp, #8
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f46:	4b23      	ldr	r3, [pc, #140]	; (8009fd4 <prvProcessExpiredTimer+0x98>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	3304      	adds	r3, #4
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fd fdf5 	bl	8007b44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f60:	f003 0304 	and.w	r3, r3, #4
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d024      	beq.n	8009fb2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	699a      	ldr	r2, [r3, #24]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	18d1      	adds	r1, r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	6978      	ldr	r0, [r7, #20]
 8009f76:	f000 f8d3 	bl	800a120 <prvInsertTimerInActiveList>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d021      	beq.n	8009fc4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f80:	2300      	movs	r3, #0
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	2300      	movs	r3, #0
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	2100      	movs	r1, #0
 8009f8a:	6978      	ldr	r0, [r7, #20]
 8009f8c:	f7ff ff86 	bl	8009e9c <xTimerGenericCommand>
 8009f90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d115      	bne.n	8009fc4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	b672      	cpsid	i
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	b662      	cpsie	i
 8009fac:	60fb      	str	r3, [r7, #12]
}
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fb8:	f023 0301 	bic.w	r3, r3, #1
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	6a1b      	ldr	r3, [r3, #32]
 8009fc8:	6978      	ldr	r0, [r7, #20]
 8009fca:	4798      	blx	r3
}
 8009fcc:	bf00      	nop
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	20000f08 	.word	0x20000f08

08009fd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fe0:	f107 0308 	add.w	r3, r7, #8
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 f857 	bl	800a098 <prvGetNextExpireTime>
 8009fea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 f803 	bl	8009ffc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009ff6:	f000 f8d5 	bl	800a1a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ffa:	e7f1      	b.n	8009fe0 <prvTimerTask+0x8>

08009ffc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a006:	f7ff f90b 	bl	8009220 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a00a:	f107 0308 	add.w	r3, r7, #8
 800a00e:	4618      	mov	r0, r3
 800a010:	f000 f866 	bl	800a0e0 <prvSampleTimeNow>
 800a014:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d130      	bne.n	800a07e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10a      	bne.n	800a038 <prvProcessTimerOrBlockTask+0x3c>
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	429a      	cmp	r2, r3
 800a028:	d806      	bhi.n	800a038 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a02a:	f7ff f907 	bl	800923c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a02e:	68f9      	ldr	r1, [r7, #12]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f7ff ff83 	bl	8009f3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a036:	e024      	b.n	800a082 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d008      	beq.n	800a050 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a03e:	4b13      	ldr	r3, [pc, #76]	; (800a08c <prvProcessTimerOrBlockTask+0x90>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d101      	bne.n	800a04c <prvProcessTimerOrBlockTask+0x50>
 800a048:	2301      	movs	r3, #1
 800a04a:	e000      	b.n	800a04e <prvProcessTimerOrBlockTask+0x52>
 800a04c:	2300      	movs	r3, #0
 800a04e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a050:	4b0f      	ldr	r3, [pc, #60]	; (800a090 <prvProcessTimerOrBlockTask+0x94>)
 800a052:	6818      	ldr	r0, [r3, #0]
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	683a      	ldr	r2, [r7, #0]
 800a05c:	4619      	mov	r1, r3
 800a05e:	f7fe fe77 	bl	8008d50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a062:	f7ff f8eb 	bl	800923c <xTaskResumeAll>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10a      	bne.n	800a082 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a06c:	4b09      	ldr	r3, [pc, #36]	; (800a094 <prvProcessTimerOrBlockTask+0x98>)
 800a06e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a072:	601a      	str	r2, [r3, #0]
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	f3bf 8f6f 	isb	sy
}
 800a07c:	e001      	b.n	800a082 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a07e:	f7ff f8dd 	bl	800923c <xTaskResumeAll>
}
 800a082:	bf00      	nop
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	20000f0c 	.word	0x20000f0c
 800a090:	20000f10 	.word	0x20000f10
 800a094:	e000ed04 	.word	0xe000ed04

0800a098 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a0a0:	4b0e      	ldr	r3, [pc, #56]	; (800a0dc <prvGetNextExpireTime+0x44>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d101      	bne.n	800a0ae <prvGetNextExpireTime+0x16>
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	e000      	b.n	800a0b0 <prvGetNextExpireTime+0x18>
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d105      	bne.n	800a0c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0bc:	4b07      	ldr	r3, [pc, #28]	; (800a0dc <prvGetNextExpireTime+0x44>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	60fb      	str	r3, [r7, #12]
 800a0c6:	e001      	b.n	800a0cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3714      	adds	r7, #20
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	20000f08 	.word	0x20000f08

0800a0e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a0e8:	f7ff f948 	bl	800937c <xTaskGetTickCount>
 800a0ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a0ee:	4b0b      	ldr	r3, [pc, #44]	; (800a11c <prvSampleTimeNow+0x3c>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d205      	bcs.n	800a104 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a0f8:	f000 f93c 	bl	800a374 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	e002      	b.n	800a10a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a10a:	4a04      	ldr	r2, [pc, #16]	; (800a11c <prvSampleTimeNow+0x3c>)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a110:	68fb      	ldr	r3, [r7, #12]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	20000f18 	.word	0x20000f18

0800a120 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a12e:	2300      	movs	r3, #0
 800a130:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	429a      	cmp	r2, r3
 800a144:	d812      	bhi.n	800a16c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	1ad2      	subs	r2, r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	429a      	cmp	r2, r3
 800a152:	d302      	bcc.n	800a15a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a154:	2301      	movs	r3, #1
 800a156:	617b      	str	r3, [r7, #20]
 800a158:	e01b      	b.n	800a192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a15a:	4b10      	ldr	r3, [pc, #64]	; (800a19c <prvInsertTimerInActiveList+0x7c>)
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	3304      	adds	r3, #4
 800a162:	4619      	mov	r1, r3
 800a164:	4610      	mov	r0, r2
 800a166:	f7fd fcb4 	bl	8007ad2 <vListInsert>
 800a16a:	e012      	b.n	800a192 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	429a      	cmp	r2, r3
 800a172:	d206      	bcs.n	800a182 <prvInsertTimerInActiveList+0x62>
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d302      	bcc.n	800a182 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a17c:	2301      	movs	r3, #1
 800a17e:	617b      	str	r3, [r7, #20]
 800a180:	e007      	b.n	800a192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a182:	4b07      	ldr	r3, [pc, #28]	; (800a1a0 <prvInsertTimerInActiveList+0x80>)
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	3304      	adds	r3, #4
 800a18a:	4619      	mov	r1, r3
 800a18c:	4610      	mov	r0, r2
 800a18e:	f7fd fca0 	bl	8007ad2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a192:	697b      	ldr	r3, [r7, #20]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	20000f0c 	.word	0x20000f0c
 800a1a0:	20000f08 	.word	0x20000f08

0800a1a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b08e      	sub	sp, #56	; 0x38
 800a1a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1aa:	e0d0      	b.n	800a34e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	da1a      	bge.n	800a1e8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a1b2:	1d3b      	adds	r3, r7, #4
 800a1b4:	3304      	adds	r3, #4
 800a1b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10c      	bne.n	800a1d8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800a1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c2:	b672      	cpsid	i
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	b662      	cpsie	i
 800a1d2:	61fb      	str	r3, [r7, #28]
}
 800a1d4:	bf00      	nop
 800a1d6:	e7fe      	b.n	800a1d6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1de:	6850      	ldr	r0, [r2, #4]
 800a1e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1e2:	6892      	ldr	r2, [r2, #8]
 800a1e4:	4611      	mov	r1, r2
 800a1e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f2c0 80ae 	blt.w	800a34c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f6:	695b      	ldr	r3, [r3, #20]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d004      	beq.n	800a206 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fe:	3304      	adds	r3, #4
 800a200:	4618      	mov	r0, r3
 800a202:	f7fd fc9f 	bl	8007b44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a206:	463b      	mov	r3, r7
 800a208:	4618      	mov	r0, r3
 800a20a:	f7ff ff69 	bl	800a0e0 <prvSampleTimeNow>
 800a20e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b09      	cmp	r3, #9
 800a214:	f200 809b 	bhi.w	800a34e <prvProcessReceivedCommands+0x1aa>
 800a218:	a201      	add	r2, pc, #4	; (adr r2, 800a220 <prvProcessReceivedCommands+0x7c>)
 800a21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21e:	bf00      	nop
 800a220:	0800a249 	.word	0x0800a249
 800a224:	0800a249 	.word	0x0800a249
 800a228:	0800a249 	.word	0x0800a249
 800a22c:	0800a2c1 	.word	0x0800a2c1
 800a230:	0800a2d5 	.word	0x0800a2d5
 800a234:	0800a323 	.word	0x0800a323
 800a238:	0800a249 	.word	0x0800a249
 800a23c:	0800a249 	.word	0x0800a249
 800a240:	0800a2c1 	.word	0x0800a2c1
 800a244:	0800a2d5 	.word	0x0800a2d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a24e:	f043 0301 	orr.w	r3, r3, #1
 800a252:	b2da      	uxtb	r2, r3
 800a254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25e:	699b      	ldr	r3, [r3, #24]
 800a260:	18d1      	adds	r1, r2, r3
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a268:	f7ff ff5a 	bl	800a120 <prvInsertTimerInActiveList>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d06d      	beq.n	800a34e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a278:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a280:	f003 0304 	and.w	r3, r3, #4
 800a284:	2b00      	cmp	r3, #0
 800a286:	d062      	beq.n	800a34e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28c:	699b      	ldr	r3, [r3, #24]
 800a28e:	441a      	add	r2, r3
 800a290:	2300      	movs	r3, #0
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	2300      	movs	r3, #0
 800a296:	2100      	movs	r1, #0
 800a298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a29a:	f7ff fdff 	bl	8009e9c <xTimerGenericCommand>
 800a29e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a2a0:	6a3b      	ldr	r3, [r7, #32]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d153      	bne.n	800a34e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800a2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2aa:	b672      	cpsid	i
 800a2ac:	f383 8811 	msr	BASEPRI, r3
 800a2b0:	f3bf 8f6f 	isb	sy
 800a2b4:	f3bf 8f4f 	dsb	sy
 800a2b8:	b662      	cpsie	i
 800a2ba:	61bb      	str	r3, [r7, #24]
}
 800a2bc:	bf00      	nop
 800a2be:	e7fe      	b.n	800a2be <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2c6:	f023 0301 	bic.w	r3, r3, #1
 800a2ca:	b2da      	uxtb	r2, r3
 800a2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a2d2:	e03c      	b.n	800a34e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2da:	f043 0301 	orr.w	r3, r3, #1
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10c      	bne.n	800a30e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	b672      	cpsid	i
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	b662      	cpsie	i
 800a308:	617b      	str	r3, [r7, #20]
}
 800a30a:	bf00      	nop
 800a30c:	e7fe      	b.n	800a30c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a310:	699a      	ldr	r2, [r3, #24]
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	18d1      	adds	r1, r2, r3
 800a316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a31a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a31c:	f7ff ff00 	bl	800a120 <prvInsertTimerInActiveList>
					break;
 800a320:	e015      	b.n	800a34e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a324:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a328:	f003 0302 	and.w	r3, r3, #2
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d103      	bne.n	800a338 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a332:	f000 fbc9 	bl	800aac8 <vPortFree>
 800a336:	e00a      	b.n	800a34e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a33e:	f023 0301 	bic.w	r3, r3, #1
 800a342:	b2da      	uxtb	r2, r3
 800a344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a346:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a34a:	e000      	b.n	800a34e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a34c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a34e:	4b08      	ldr	r3, [pc, #32]	; (800a370 <prvProcessReceivedCommands+0x1cc>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	1d39      	adds	r1, r7, #4
 800a354:	2200      	movs	r2, #0
 800a356:	4618      	mov	r0, r3
 800a358:	f7fe f8d8 	bl	800850c <xQueueReceive>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f47f af24 	bne.w	800a1ac <prvProcessReceivedCommands+0x8>
	}
}
 800a364:	bf00      	nop
 800a366:	bf00      	nop
 800a368:	3730      	adds	r7, #48	; 0x30
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	20000f10 	.word	0x20000f10

0800a374 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b088      	sub	sp, #32
 800a378:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a37a:	e04a      	b.n	800a412 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a37c:	4b2e      	ldr	r3, [pc, #184]	; (800a438 <prvSwitchTimerLists+0xc4>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a386:	4b2c      	ldr	r3, [pc, #176]	; (800a438 <prvSwitchTimerLists+0xc4>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3304      	adds	r3, #4
 800a394:	4618      	mov	r0, r3
 800a396:	f7fd fbd5 	bl	8007b44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6a1b      	ldr	r3, [r3, #32]
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3a8:	f003 0304 	and.w	r3, r3, #4
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d030      	beq.n	800a412 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	699b      	ldr	r3, [r3, #24]
 800a3b4:	693a      	ldr	r2, [r7, #16]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d90e      	bls.n	800a3e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3ce:	4b1a      	ldr	r3, [pc, #104]	; (800a438 <prvSwitchTimerLists+0xc4>)
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	4610      	mov	r0, r2
 800a3da:	f7fd fb7a 	bl	8007ad2 <vListInsert>
 800a3de:	e018      	b.n	800a412 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	9300      	str	r3, [sp, #0]
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f7ff fd56 	bl	8009e9c <xTimerGenericCommand>
 800a3f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10c      	bne.n	800a412 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800a3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fc:	b672      	cpsid	i
 800a3fe:	f383 8811 	msr	BASEPRI, r3
 800a402:	f3bf 8f6f 	isb	sy
 800a406:	f3bf 8f4f 	dsb	sy
 800a40a:	b662      	cpsie	i
 800a40c:	603b      	str	r3, [r7, #0]
}
 800a40e:	bf00      	nop
 800a410:	e7fe      	b.n	800a410 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a412:	4b09      	ldr	r3, [pc, #36]	; (800a438 <prvSwitchTimerLists+0xc4>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d1af      	bne.n	800a37c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a41c:	4b06      	ldr	r3, [pc, #24]	; (800a438 <prvSwitchTimerLists+0xc4>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a422:	4b06      	ldr	r3, [pc, #24]	; (800a43c <prvSwitchTimerLists+0xc8>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a04      	ldr	r2, [pc, #16]	; (800a438 <prvSwitchTimerLists+0xc4>)
 800a428:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a42a:	4a04      	ldr	r2, [pc, #16]	; (800a43c <prvSwitchTimerLists+0xc8>)
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	6013      	str	r3, [r2, #0]
}
 800a430:	bf00      	nop
 800a432:	3718      	adds	r7, #24
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	20000f08 	.word	0x20000f08
 800a43c:	20000f0c 	.word	0x20000f0c

0800a440 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a446:	f000 f949 	bl	800a6dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a44a:	4b15      	ldr	r3, [pc, #84]	; (800a4a0 <prvCheckForValidListAndQueue+0x60>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d120      	bne.n	800a494 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a452:	4814      	ldr	r0, [pc, #80]	; (800a4a4 <prvCheckForValidListAndQueue+0x64>)
 800a454:	f7fd faec 	bl	8007a30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a458:	4813      	ldr	r0, [pc, #76]	; (800a4a8 <prvCheckForValidListAndQueue+0x68>)
 800a45a:	f7fd fae9 	bl	8007a30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a45e:	4b13      	ldr	r3, [pc, #76]	; (800a4ac <prvCheckForValidListAndQueue+0x6c>)
 800a460:	4a10      	ldr	r2, [pc, #64]	; (800a4a4 <prvCheckForValidListAndQueue+0x64>)
 800a462:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a464:	4b12      	ldr	r3, [pc, #72]	; (800a4b0 <prvCheckForValidListAndQueue+0x70>)
 800a466:	4a10      	ldr	r2, [pc, #64]	; (800a4a8 <prvCheckForValidListAndQueue+0x68>)
 800a468:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a46a:	2300      	movs	r3, #0
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	4b11      	ldr	r3, [pc, #68]	; (800a4b4 <prvCheckForValidListAndQueue+0x74>)
 800a470:	4a11      	ldr	r2, [pc, #68]	; (800a4b8 <prvCheckForValidListAndQueue+0x78>)
 800a472:	2110      	movs	r1, #16
 800a474:	200a      	movs	r0, #10
 800a476:	f7fd fbf9 	bl	8007c6c <xQueueGenericCreateStatic>
 800a47a:	4603      	mov	r3, r0
 800a47c:	4a08      	ldr	r2, [pc, #32]	; (800a4a0 <prvCheckForValidListAndQueue+0x60>)
 800a47e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a480:	4b07      	ldr	r3, [pc, #28]	; (800a4a0 <prvCheckForValidListAndQueue+0x60>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d005      	beq.n	800a494 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a488:	4b05      	ldr	r3, [pc, #20]	; (800a4a0 <prvCheckForValidListAndQueue+0x60>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	490b      	ldr	r1, [pc, #44]	; (800a4bc <prvCheckForValidListAndQueue+0x7c>)
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fe fc0a 	bl	8008ca8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a494:	f000 f956 	bl	800a744 <vPortExitCritical>
}
 800a498:	bf00      	nop
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	20000f10 	.word	0x20000f10
 800a4a4:	20000ee0 	.word	0x20000ee0
 800a4a8:	20000ef4 	.word	0x20000ef4
 800a4ac:	20000f08 	.word	0x20000f08
 800a4b0:	20000f0c 	.word	0x20000f0c
 800a4b4:	20000fbc 	.word	0x20000fbc
 800a4b8:	20000f1c 	.word	0x20000f1c
 800a4bc:	0800f9a8 	.word	0x0800f9a8

0800a4c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	3b04      	subs	r3, #4
 800a4d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a4d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	3b04      	subs	r3, #4
 800a4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	f023 0201 	bic.w	r2, r3, #1
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	3b04      	subs	r3, #4
 800a4ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4f0:	4a0c      	ldr	r2, [pc, #48]	; (800a524 <pxPortInitialiseStack+0x64>)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	3b14      	subs	r3, #20
 800a4fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	3b04      	subs	r3, #4
 800a506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f06f 0202 	mvn.w	r2, #2
 800a50e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	3b20      	subs	r3, #32
 800a514:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a516:	68fb      	ldr	r3, [r7, #12]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr
 800a524:	0800a529 	.word	0x0800a529

0800a528 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a532:	4b14      	ldr	r3, [pc, #80]	; (800a584 <prvTaskExitError+0x5c>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a53a:	d00c      	beq.n	800a556 <prvTaskExitError+0x2e>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a540:	b672      	cpsid	i
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	b662      	cpsie	i
 800a550:	60fb      	str	r3, [r7, #12]
}
 800a552:	bf00      	nop
 800a554:	e7fe      	b.n	800a554 <prvTaskExitError+0x2c>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55a:	b672      	cpsid	i
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	b662      	cpsie	i
 800a56a:	60bb      	str	r3, [r7, #8]
}
 800a56c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a56e:	bf00      	nop
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d0fc      	beq.n	800a570 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a576:	bf00      	nop
 800a578:	bf00      	nop
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr
 800a584:	2000006c 	.word	0x2000006c
	...

0800a590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a590:	4b07      	ldr	r3, [pc, #28]	; (800a5b0 <pxCurrentTCBConst2>)
 800a592:	6819      	ldr	r1, [r3, #0]
 800a594:	6808      	ldr	r0, [r1, #0]
 800a596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59a:	f380 8809 	msr	PSP, r0
 800a59e:	f3bf 8f6f 	isb	sy
 800a5a2:	f04f 0000 	mov.w	r0, #0
 800a5a6:	f380 8811 	msr	BASEPRI, r0
 800a5aa:	4770      	bx	lr
 800a5ac:	f3af 8000 	nop.w

0800a5b0 <pxCurrentTCBConst2>:
 800a5b0:	200009e0 	.word	0x200009e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a5b4:	bf00      	nop
 800a5b6:	bf00      	nop

0800a5b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a5b8:	4808      	ldr	r0, [pc, #32]	; (800a5dc <prvPortStartFirstTask+0x24>)
 800a5ba:	6800      	ldr	r0, [r0, #0]
 800a5bc:	6800      	ldr	r0, [r0, #0]
 800a5be:	f380 8808 	msr	MSP, r0
 800a5c2:	f04f 0000 	mov.w	r0, #0
 800a5c6:	f380 8814 	msr	CONTROL, r0
 800a5ca:	b662      	cpsie	i
 800a5cc:	b661      	cpsie	f
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	df00      	svc	0
 800a5d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a5da:	bf00      	nop
 800a5dc:	e000ed08 	.word	0xe000ed08

0800a5e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5e6:	4b37      	ldr	r3, [pc, #220]	; (800a6c4 <xPortStartScheduler+0xe4>)
 800a5e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	22ff      	movs	r2, #255	; 0xff
 800a5f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a600:	78fb      	ldrb	r3, [r7, #3]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a608:	b2da      	uxtb	r2, r3
 800a60a:	4b2f      	ldr	r3, [pc, #188]	; (800a6c8 <xPortStartScheduler+0xe8>)
 800a60c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a60e:	4b2f      	ldr	r3, [pc, #188]	; (800a6cc <xPortStartScheduler+0xec>)
 800a610:	2207      	movs	r2, #7
 800a612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a614:	e009      	b.n	800a62a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a616:	4b2d      	ldr	r3, [pc, #180]	; (800a6cc <xPortStartScheduler+0xec>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	4a2b      	ldr	r2, [pc, #172]	; (800a6cc <xPortStartScheduler+0xec>)
 800a61e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a620:	78fb      	ldrb	r3, [r7, #3]
 800a622:	b2db      	uxtb	r3, r3
 800a624:	005b      	lsls	r3, r3, #1
 800a626:	b2db      	uxtb	r3, r3
 800a628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a62a:	78fb      	ldrb	r3, [r7, #3]
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a632:	2b80      	cmp	r3, #128	; 0x80
 800a634:	d0ef      	beq.n	800a616 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a636:	4b25      	ldr	r3, [pc, #148]	; (800a6cc <xPortStartScheduler+0xec>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f1c3 0307 	rsb	r3, r3, #7
 800a63e:	2b04      	cmp	r3, #4
 800a640:	d00c      	beq.n	800a65c <xPortStartScheduler+0x7c>
	__asm volatile
 800a642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a646:	b672      	cpsid	i
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	b662      	cpsie	i
 800a656:	60bb      	str	r3, [r7, #8]
}
 800a658:	bf00      	nop
 800a65a:	e7fe      	b.n	800a65a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a65c:	4b1b      	ldr	r3, [pc, #108]	; (800a6cc <xPortStartScheduler+0xec>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	021b      	lsls	r3, r3, #8
 800a662:	4a1a      	ldr	r2, [pc, #104]	; (800a6cc <xPortStartScheduler+0xec>)
 800a664:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a666:	4b19      	ldr	r3, [pc, #100]	; (800a6cc <xPortStartScheduler+0xec>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a66e:	4a17      	ldr	r2, [pc, #92]	; (800a6cc <xPortStartScheduler+0xec>)
 800a670:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	b2da      	uxtb	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a67a:	4b15      	ldr	r3, [pc, #84]	; (800a6d0 <xPortStartScheduler+0xf0>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a14      	ldr	r2, [pc, #80]	; (800a6d0 <xPortStartScheduler+0xf0>)
 800a680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a684:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a686:	4b12      	ldr	r3, [pc, #72]	; (800a6d0 <xPortStartScheduler+0xf0>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a11      	ldr	r2, [pc, #68]	; (800a6d0 <xPortStartScheduler+0xf0>)
 800a68c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a690:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a692:	f000 f8dd 	bl	800a850 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a696:	4b0f      	ldr	r3, [pc, #60]	; (800a6d4 <xPortStartScheduler+0xf4>)
 800a698:	2200      	movs	r2, #0
 800a69a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a69c:	f000 f8fc 	bl	800a898 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a6a0:	4b0d      	ldr	r3, [pc, #52]	; (800a6d8 <xPortStartScheduler+0xf8>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a0c      	ldr	r2, [pc, #48]	; (800a6d8 <xPortStartScheduler+0xf8>)
 800a6a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a6aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a6ac:	f7ff ff84 	bl	800a5b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a6b0:	f7fe ff30 	bl	8009514 <vTaskSwitchContext>
	prvTaskExitError();
 800a6b4:	f7ff ff38 	bl	800a528 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	e000e400 	.word	0xe000e400
 800a6c8:	2000100c 	.word	0x2000100c
 800a6cc:	20001010 	.word	0x20001010
 800a6d0:	e000ed20 	.word	0xe000ed20
 800a6d4:	2000006c 	.word	0x2000006c
 800a6d8:	e000ef34 	.word	0xe000ef34

0800a6dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	b672      	cpsid	i
 800a6e8:	f383 8811 	msr	BASEPRI, r3
 800a6ec:	f3bf 8f6f 	isb	sy
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	b662      	cpsie	i
 800a6f6:	607b      	str	r3, [r7, #4]
}
 800a6f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a6fa:	4b10      	ldr	r3, [pc, #64]	; (800a73c <vPortEnterCritical+0x60>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	3301      	adds	r3, #1
 800a700:	4a0e      	ldr	r2, [pc, #56]	; (800a73c <vPortEnterCritical+0x60>)
 800a702:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a704:	4b0d      	ldr	r3, [pc, #52]	; (800a73c <vPortEnterCritical+0x60>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d111      	bne.n	800a730 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a70c:	4b0c      	ldr	r3, [pc, #48]	; (800a740 <vPortEnterCritical+0x64>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	b2db      	uxtb	r3, r3
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00c      	beq.n	800a730 <vPortEnterCritical+0x54>
	__asm volatile
 800a716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71a:	b672      	cpsid	i
 800a71c:	f383 8811 	msr	BASEPRI, r3
 800a720:	f3bf 8f6f 	isb	sy
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	b662      	cpsie	i
 800a72a:	603b      	str	r3, [r7, #0]
}
 800a72c:	bf00      	nop
 800a72e:	e7fe      	b.n	800a72e <vPortEnterCritical+0x52>
	}
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr
 800a73c:	2000006c 	.word	0x2000006c
 800a740:	e000ed04 	.word	0xe000ed04

0800a744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a74a:	4b13      	ldr	r3, [pc, #76]	; (800a798 <vPortExitCritical+0x54>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10c      	bne.n	800a76c <vPortExitCritical+0x28>
	__asm volatile
 800a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a756:	b672      	cpsid	i
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	b662      	cpsie	i
 800a766:	607b      	str	r3, [r7, #4]
}
 800a768:	bf00      	nop
 800a76a:	e7fe      	b.n	800a76a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a76c:	4b0a      	ldr	r3, [pc, #40]	; (800a798 <vPortExitCritical+0x54>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	3b01      	subs	r3, #1
 800a772:	4a09      	ldr	r2, [pc, #36]	; (800a798 <vPortExitCritical+0x54>)
 800a774:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a776:	4b08      	ldr	r3, [pc, #32]	; (800a798 <vPortExitCritical+0x54>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d105      	bne.n	800a78a <vPortExitCritical+0x46>
 800a77e:	2300      	movs	r3, #0
 800a780:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	f383 8811 	msr	BASEPRI, r3
}
 800a788:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a78a:	bf00      	nop
 800a78c:	370c      	adds	r7, #12
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	2000006c 	.word	0x2000006c
 800a79c:	00000000 	.word	0x00000000

0800a7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a7a0:	f3ef 8009 	mrs	r0, PSP
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	4b15      	ldr	r3, [pc, #84]	; (800a800 <pxCurrentTCBConst>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	f01e 0f10 	tst.w	lr, #16
 800a7b0:	bf08      	it	eq
 800a7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ba:	6010      	str	r0, [r2, #0]
 800a7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a7c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a7c4:	b672      	cpsid	i
 800a7c6:	f380 8811 	msr	BASEPRI, r0
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	b662      	cpsie	i
 800a7d4:	f7fe fe9e 	bl	8009514 <vTaskSwitchContext>
 800a7d8:	f04f 0000 	mov.w	r0, #0
 800a7dc:	f380 8811 	msr	BASEPRI, r0
 800a7e0:	bc09      	pop	{r0, r3}
 800a7e2:	6819      	ldr	r1, [r3, #0]
 800a7e4:	6808      	ldr	r0, [r1, #0]
 800a7e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ea:	f01e 0f10 	tst.w	lr, #16
 800a7ee:	bf08      	it	eq
 800a7f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a7f4:	f380 8809 	msr	PSP, r0
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop

0800a800 <pxCurrentTCBConst>:
 800a800:	200009e0 	.word	0x200009e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop

0800a808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	b672      	cpsid	i
 800a814:	f383 8811 	msr	BASEPRI, r3
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	b662      	cpsie	i
 800a822:	607b      	str	r3, [r7, #4]
}
 800a824:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a826:	f7fe fdb9 	bl	800939c <xTaskIncrementTick>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d003      	beq.n	800a838 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a830:	4b06      	ldr	r3, [pc, #24]	; (800a84c <SysTick_Handler+0x44>)
 800a832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a836:	601a      	str	r2, [r3, #0]
 800a838:	2300      	movs	r3, #0
 800a83a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	f383 8811 	msr	BASEPRI, r3
}
 800a842:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a844:	bf00      	nop
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	e000ed04 	.word	0xe000ed04

0800a850 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a850:	b480      	push	{r7}
 800a852:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a854:	4b0b      	ldr	r3, [pc, #44]	; (800a884 <vPortSetupTimerInterrupt+0x34>)
 800a856:	2200      	movs	r2, #0
 800a858:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a85a:	4b0b      	ldr	r3, [pc, #44]	; (800a888 <vPortSetupTimerInterrupt+0x38>)
 800a85c:	2200      	movs	r2, #0
 800a85e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a860:	4b0a      	ldr	r3, [pc, #40]	; (800a88c <vPortSetupTimerInterrupt+0x3c>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a0a      	ldr	r2, [pc, #40]	; (800a890 <vPortSetupTimerInterrupt+0x40>)
 800a866:	fba2 2303 	umull	r2, r3, r2, r3
 800a86a:	099b      	lsrs	r3, r3, #6
 800a86c:	4a09      	ldr	r2, [pc, #36]	; (800a894 <vPortSetupTimerInterrupt+0x44>)
 800a86e:	3b01      	subs	r3, #1
 800a870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a872:	4b04      	ldr	r3, [pc, #16]	; (800a884 <vPortSetupTimerInterrupt+0x34>)
 800a874:	2207      	movs	r2, #7
 800a876:	601a      	str	r2, [r3, #0]
}
 800a878:	bf00      	nop
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	e000e010 	.word	0xe000e010
 800a888:	e000e018 	.word	0xe000e018
 800a88c:	20000060 	.word	0x20000060
 800a890:	10624dd3 	.word	0x10624dd3
 800a894:	e000e014 	.word	0xe000e014

0800a898 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a898:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a8a8 <vPortEnableVFP+0x10>
 800a89c:	6801      	ldr	r1, [r0, #0]
 800a89e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a8a2:	6001      	str	r1, [r0, #0]
 800a8a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a8a6:	bf00      	nop
 800a8a8:	e000ed88 	.word	0xe000ed88

0800a8ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a8b2:	f3ef 8305 	mrs	r3, IPSR
 800a8b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2b0f      	cmp	r3, #15
 800a8bc:	d916      	bls.n	800a8ec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a8be:	4a19      	ldr	r2, [pc, #100]	; (800a924 <vPortValidateInterruptPriority+0x78>)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a8c8:	4b17      	ldr	r3, [pc, #92]	; (800a928 <vPortValidateInterruptPriority+0x7c>)
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	7afa      	ldrb	r2, [r7, #11]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d20c      	bcs.n	800a8ec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d6:	b672      	cpsid	i
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	b662      	cpsie	i
 800a8e6:	607b      	str	r3, [r7, #4]
}
 800a8e8:	bf00      	nop
 800a8ea:	e7fe      	b.n	800a8ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a8ec:	4b0f      	ldr	r3, [pc, #60]	; (800a92c <vPortValidateInterruptPriority+0x80>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a8f4:	4b0e      	ldr	r3, [pc, #56]	; (800a930 <vPortValidateInterruptPriority+0x84>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d90c      	bls.n	800a916 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a900:	b672      	cpsid	i
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	b662      	cpsie	i
 800a910:	603b      	str	r3, [r7, #0]
}
 800a912:	bf00      	nop
 800a914:	e7fe      	b.n	800a914 <vPortValidateInterruptPriority+0x68>
	}
 800a916:	bf00      	nop
 800a918:	3714      	adds	r7, #20
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	e000e3f0 	.word	0xe000e3f0
 800a928:	2000100c 	.word	0x2000100c
 800a92c:	e000ed0c 	.word	0xe000ed0c
 800a930:	20001010 	.word	0x20001010

0800a934 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b08a      	sub	sp, #40	; 0x28
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a93c:	2300      	movs	r3, #0
 800a93e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a940:	f7fe fc6e 	bl	8009220 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a944:	4b5b      	ldr	r3, [pc, #364]	; (800aab4 <pvPortMalloc+0x180>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d101      	bne.n	800a950 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a94c:	f000 f91a 	bl	800ab84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a950:	4b59      	ldr	r3, [pc, #356]	; (800aab8 <pvPortMalloc+0x184>)
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4013      	ands	r3, r2
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f040 8092 	bne.w	800aa82 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d01f      	beq.n	800a9a4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a964:	2208      	movs	r2, #8
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4413      	add	r3, r2
 800a96a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f003 0307 	and.w	r3, r3, #7
 800a972:	2b00      	cmp	r3, #0
 800a974:	d016      	beq.n	800a9a4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f023 0307 	bic.w	r3, r3, #7
 800a97c:	3308      	adds	r3, #8
 800a97e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f003 0307 	and.w	r3, r3, #7
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00c      	beq.n	800a9a4 <pvPortMalloc+0x70>
	__asm volatile
 800a98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98e:	b672      	cpsid	i
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	b662      	cpsie	i
 800a99e:	617b      	str	r3, [r7, #20]
}
 800a9a0:	bf00      	nop
 800a9a2:	e7fe      	b.n	800a9a2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d06b      	beq.n	800aa82 <pvPortMalloc+0x14e>
 800a9aa:	4b44      	ldr	r3, [pc, #272]	; (800aabc <pvPortMalloc+0x188>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d866      	bhi.n	800aa82 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a9b4:	4b42      	ldr	r3, [pc, #264]	; (800aac0 <pvPortMalloc+0x18c>)
 800a9b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a9b8:	4b41      	ldr	r3, [pc, #260]	; (800aac0 <pvPortMalloc+0x18c>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9be:	e004      	b.n	800a9ca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d903      	bls.n	800a9dc <pvPortMalloc+0xa8>
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1f1      	bne.n	800a9c0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9dc:	4b35      	ldr	r3, [pc, #212]	; (800aab4 <pvPortMalloc+0x180>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d04d      	beq.n	800aa82 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9e6:	6a3b      	ldr	r3, [r7, #32]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2208      	movs	r2, #8
 800a9ec:	4413      	add	r3, r2
 800a9ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	6a3b      	ldr	r3, [r7, #32]
 800a9f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	1ad2      	subs	r2, r2, r3
 800aa00:	2308      	movs	r3, #8
 800aa02:	005b      	lsls	r3, r3, #1
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d921      	bls.n	800aa4c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	f003 0307 	and.w	r3, r3, #7
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00c      	beq.n	800aa34 <pvPortMalloc+0x100>
	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1e:	b672      	cpsid	i
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	b662      	cpsie	i
 800aa2e:	613b      	str	r3, [r7, #16]
}
 800aa30:	bf00      	nop
 800aa32:	e7fe      	b.n	800aa32 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa36:	685a      	ldr	r2, [r3, #4]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	1ad2      	subs	r2, r2, r3
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa46:	69b8      	ldr	r0, [r7, #24]
 800aa48:	f000 f8fe 	bl	800ac48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa4c:	4b1b      	ldr	r3, [pc, #108]	; (800aabc <pvPortMalloc+0x188>)
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	4a19      	ldr	r2, [pc, #100]	; (800aabc <pvPortMalloc+0x188>)
 800aa58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa5a:	4b18      	ldr	r3, [pc, #96]	; (800aabc <pvPortMalloc+0x188>)
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	4b19      	ldr	r3, [pc, #100]	; (800aac4 <pvPortMalloc+0x190>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d203      	bcs.n	800aa6e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa66:	4b15      	ldr	r3, [pc, #84]	; (800aabc <pvPortMalloc+0x188>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a16      	ldr	r2, [pc, #88]	; (800aac4 <pvPortMalloc+0x190>)
 800aa6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	4b11      	ldr	r3, [pc, #68]	; (800aab8 <pvPortMalloc+0x184>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	431a      	orrs	r2, r3
 800aa78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7e:	2200      	movs	r2, #0
 800aa80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa82:	f7fe fbdb 	bl	800923c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	f003 0307 	and.w	r3, r3, #7
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00c      	beq.n	800aaaa <pvPortMalloc+0x176>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa94:	b672      	cpsid	i
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	b662      	cpsie	i
 800aaa4:	60fb      	str	r3, [r7, #12]
}
 800aaa6:	bf00      	nop
 800aaa8:	e7fe      	b.n	800aaa8 <pvPortMalloc+0x174>
	return pvReturn;
 800aaaa:	69fb      	ldr	r3, [r7, #28]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3728      	adds	r7, #40	; 0x28
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	20004c1c 	.word	0x20004c1c
 800aab8:	20004c28 	.word	0x20004c28
 800aabc:	20004c20 	.word	0x20004c20
 800aac0:	20004c14 	.word	0x20004c14
 800aac4:	20004c24 	.word	0x20004c24

0800aac8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d04c      	beq.n	800ab74 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aada:	2308      	movs	r3, #8
 800aadc:	425b      	negs	r3, r3
 800aade:	697a      	ldr	r2, [r7, #20]
 800aae0:	4413      	add	r3, r2
 800aae2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	685a      	ldr	r2, [r3, #4]
 800aaec:	4b23      	ldr	r3, [pc, #140]	; (800ab7c <vPortFree+0xb4>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10c      	bne.n	800ab10 <vPortFree+0x48>
	__asm volatile
 800aaf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafa:	b672      	cpsid	i
 800aafc:	f383 8811 	msr	BASEPRI, r3
 800ab00:	f3bf 8f6f 	isb	sy
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	b662      	cpsie	i
 800ab0a:	60fb      	str	r3, [r7, #12]
}
 800ab0c:	bf00      	nop
 800ab0e:	e7fe      	b.n	800ab0e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00c      	beq.n	800ab32 <vPortFree+0x6a>
	__asm volatile
 800ab18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1c:	b672      	cpsid	i
 800ab1e:	f383 8811 	msr	BASEPRI, r3
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	f3bf 8f4f 	dsb	sy
 800ab2a:	b662      	cpsie	i
 800ab2c:	60bb      	str	r3, [r7, #8]
}
 800ab2e:	bf00      	nop
 800ab30:	e7fe      	b.n	800ab30 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	685a      	ldr	r2, [r3, #4]
 800ab36:	4b11      	ldr	r3, [pc, #68]	; (800ab7c <vPortFree+0xb4>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4013      	ands	r3, r2
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d019      	beq.n	800ab74 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d115      	bne.n	800ab74 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	4b0b      	ldr	r3, [pc, #44]	; (800ab7c <vPortFree+0xb4>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	43db      	mvns	r3, r3
 800ab52:	401a      	ands	r2, r3
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab58:	f7fe fb62 	bl	8009220 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	685a      	ldr	r2, [r3, #4]
 800ab60:	4b07      	ldr	r3, [pc, #28]	; (800ab80 <vPortFree+0xb8>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4413      	add	r3, r2
 800ab66:	4a06      	ldr	r2, [pc, #24]	; (800ab80 <vPortFree+0xb8>)
 800ab68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab6a:	6938      	ldr	r0, [r7, #16]
 800ab6c:	f000 f86c 	bl	800ac48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ab70:	f7fe fb64 	bl	800923c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab74:	bf00      	nop
 800ab76:	3718      	adds	r7, #24
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	20004c28 	.word	0x20004c28
 800ab80:	20004c20 	.word	0x20004c20

0800ab84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ab8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab90:	4b27      	ldr	r3, [pc, #156]	; (800ac30 <prvHeapInit+0xac>)
 800ab92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f003 0307 	and.w	r3, r3, #7
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00c      	beq.n	800abb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	3307      	adds	r3, #7
 800aba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f023 0307 	bic.w	r3, r3, #7
 800abaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800abac:	68ba      	ldr	r2, [r7, #8]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	4a1f      	ldr	r2, [pc, #124]	; (800ac30 <prvHeapInit+0xac>)
 800abb4:	4413      	add	r3, r2
 800abb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800abbc:	4a1d      	ldr	r2, [pc, #116]	; (800ac34 <prvHeapInit+0xb0>)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800abc2:	4b1c      	ldr	r3, [pc, #112]	; (800ac34 <prvHeapInit+0xb0>)
 800abc4:	2200      	movs	r2, #0
 800abc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	4413      	add	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800abd0:	2208      	movs	r2, #8
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	1a9b      	subs	r3, r3, r2
 800abd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f023 0307 	bic.w	r3, r3, #7
 800abde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	4a15      	ldr	r2, [pc, #84]	; (800ac38 <prvHeapInit+0xb4>)
 800abe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800abe6:	4b14      	ldr	r3, [pc, #80]	; (800ac38 <prvHeapInit+0xb4>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2200      	movs	r2, #0
 800abec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abee:	4b12      	ldr	r3, [pc, #72]	; (800ac38 <prvHeapInit+0xb4>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2200      	movs	r2, #0
 800abf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	1ad2      	subs	r2, r2, r3
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac04:	4b0c      	ldr	r3, [pc, #48]	; (800ac38 <prvHeapInit+0xb4>)
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	4a0a      	ldr	r2, [pc, #40]	; (800ac3c <prvHeapInit+0xb8>)
 800ac12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	4a09      	ldr	r2, [pc, #36]	; (800ac40 <prvHeapInit+0xbc>)
 800ac1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac1c:	4b09      	ldr	r3, [pc, #36]	; (800ac44 <prvHeapInit+0xc0>)
 800ac1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac22:	601a      	str	r2, [r3, #0]
}
 800ac24:	bf00      	nop
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	20001014 	.word	0x20001014
 800ac34:	20004c14 	.word	0x20004c14
 800ac38:	20004c1c 	.word	0x20004c1c
 800ac3c:	20004c24 	.word	0x20004c24
 800ac40:	20004c20 	.word	0x20004c20
 800ac44:	20004c28 	.word	0x20004c28

0800ac48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac50:	4b28      	ldr	r3, [pc, #160]	; (800acf4 <prvInsertBlockIntoFreeList+0xac>)
 800ac52:	60fb      	str	r3, [r7, #12]
 800ac54:	e002      	b.n	800ac5c <prvInsertBlockIntoFreeList+0x14>
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	60fb      	str	r3, [r7, #12]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d8f7      	bhi.n	800ac56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	4413      	add	r3, r2
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d108      	bne.n	800ac8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	441a      	add	r2, r3
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	68ba      	ldr	r2, [r7, #8]
 800ac94:	441a      	add	r2, r3
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d118      	bne.n	800acd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	4b15      	ldr	r3, [pc, #84]	; (800acf8 <prvInsertBlockIntoFreeList+0xb0>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d00d      	beq.n	800acc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685a      	ldr	r2, [r3, #4]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	441a      	add	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	601a      	str	r2, [r3, #0]
 800acc4:	e008      	b.n	800acd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800acc6:	4b0c      	ldr	r3, [pc, #48]	; (800acf8 <prvInsertBlockIntoFreeList+0xb0>)
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	601a      	str	r2, [r3, #0]
 800acce:	e003      	b.n	800acd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d002      	beq.n	800ace6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ace6:	bf00      	nop
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	20004c14 	.word	0x20004c14
 800acf8:	20004c1c 	.word	0x20004c1c

0800acfc <__errno>:
 800acfc:	4b01      	ldr	r3, [pc, #4]	; (800ad04 <__errno+0x8>)
 800acfe:	6818      	ldr	r0, [r3, #0]
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	20000070 	.word	0x20000070

0800ad08 <std>:
 800ad08:	2300      	movs	r3, #0
 800ad0a:	b510      	push	{r4, lr}
 800ad0c:	4604      	mov	r4, r0
 800ad0e:	e9c0 3300 	strd	r3, r3, [r0]
 800ad12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad16:	6083      	str	r3, [r0, #8]
 800ad18:	8181      	strh	r1, [r0, #12]
 800ad1a:	6643      	str	r3, [r0, #100]	; 0x64
 800ad1c:	81c2      	strh	r2, [r0, #14]
 800ad1e:	6183      	str	r3, [r0, #24]
 800ad20:	4619      	mov	r1, r3
 800ad22:	2208      	movs	r2, #8
 800ad24:	305c      	adds	r0, #92	; 0x5c
 800ad26:	f000 f923 	bl	800af70 <memset>
 800ad2a:	4b05      	ldr	r3, [pc, #20]	; (800ad40 <std+0x38>)
 800ad2c:	6263      	str	r3, [r4, #36]	; 0x24
 800ad2e:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <std+0x3c>)
 800ad30:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad32:	4b05      	ldr	r3, [pc, #20]	; (800ad48 <std+0x40>)
 800ad34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad36:	4b05      	ldr	r3, [pc, #20]	; (800ad4c <std+0x44>)
 800ad38:	6224      	str	r4, [r4, #32]
 800ad3a:	6323      	str	r3, [r4, #48]	; 0x30
 800ad3c:	bd10      	pop	{r4, pc}
 800ad3e:	bf00      	nop
 800ad40:	0800bfed 	.word	0x0800bfed
 800ad44:	0800c00f 	.word	0x0800c00f
 800ad48:	0800c047 	.word	0x0800c047
 800ad4c:	0800c06b 	.word	0x0800c06b

0800ad50 <_cleanup_r>:
 800ad50:	4901      	ldr	r1, [pc, #4]	; (800ad58 <_cleanup_r+0x8>)
 800ad52:	f000 b8af 	b.w	800aeb4 <_fwalk_reent>
 800ad56:	bf00      	nop
 800ad58:	0800dc59 	.word	0x0800dc59

0800ad5c <__sfmoreglue>:
 800ad5c:	b570      	push	{r4, r5, r6, lr}
 800ad5e:	1e4a      	subs	r2, r1, #1
 800ad60:	2568      	movs	r5, #104	; 0x68
 800ad62:	4355      	muls	r5, r2
 800ad64:	460e      	mov	r6, r1
 800ad66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad6a:	f000 f959 	bl	800b020 <_malloc_r>
 800ad6e:	4604      	mov	r4, r0
 800ad70:	b140      	cbz	r0, 800ad84 <__sfmoreglue+0x28>
 800ad72:	2100      	movs	r1, #0
 800ad74:	e9c0 1600 	strd	r1, r6, [r0]
 800ad78:	300c      	adds	r0, #12
 800ad7a:	60a0      	str	r0, [r4, #8]
 800ad7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad80:	f000 f8f6 	bl	800af70 <memset>
 800ad84:	4620      	mov	r0, r4
 800ad86:	bd70      	pop	{r4, r5, r6, pc}

0800ad88 <__sfp_lock_acquire>:
 800ad88:	4801      	ldr	r0, [pc, #4]	; (800ad90 <__sfp_lock_acquire+0x8>)
 800ad8a:	f000 b8d8 	b.w	800af3e <__retarget_lock_acquire_recursive>
 800ad8e:	bf00      	nop
 800ad90:	20005058 	.word	0x20005058

0800ad94 <__sfp_lock_release>:
 800ad94:	4801      	ldr	r0, [pc, #4]	; (800ad9c <__sfp_lock_release+0x8>)
 800ad96:	f000 b8d3 	b.w	800af40 <__retarget_lock_release_recursive>
 800ad9a:	bf00      	nop
 800ad9c:	20005058 	.word	0x20005058

0800ada0 <__sinit_lock_acquire>:
 800ada0:	4801      	ldr	r0, [pc, #4]	; (800ada8 <__sinit_lock_acquire+0x8>)
 800ada2:	f000 b8cc 	b.w	800af3e <__retarget_lock_acquire_recursive>
 800ada6:	bf00      	nop
 800ada8:	20005053 	.word	0x20005053

0800adac <__sinit_lock_release>:
 800adac:	4801      	ldr	r0, [pc, #4]	; (800adb4 <__sinit_lock_release+0x8>)
 800adae:	f000 b8c7 	b.w	800af40 <__retarget_lock_release_recursive>
 800adb2:	bf00      	nop
 800adb4:	20005053 	.word	0x20005053

0800adb8 <__sinit>:
 800adb8:	b510      	push	{r4, lr}
 800adba:	4604      	mov	r4, r0
 800adbc:	f7ff fff0 	bl	800ada0 <__sinit_lock_acquire>
 800adc0:	69a3      	ldr	r3, [r4, #24]
 800adc2:	b11b      	cbz	r3, 800adcc <__sinit+0x14>
 800adc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adc8:	f7ff bff0 	b.w	800adac <__sinit_lock_release>
 800adcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800add0:	6523      	str	r3, [r4, #80]	; 0x50
 800add2:	4b13      	ldr	r3, [pc, #76]	; (800ae20 <__sinit+0x68>)
 800add4:	4a13      	ldr	r2, [pc, #76]	; (800ae24 <__sinit+0x6c>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	62a2      	str	r2, [r4, #40]	; 0x28
 800adda:	42a3      	cmp	r3, r4
 800addc:	bf04      	itt	eq
 800adde:	2301      	moveq	r3, #1
 800ade0:	61a3      	streq	r3, [r4, #24]
 800ade2:	4620      	mov	r0, r4
 800ade4:	f000 f820 	bl	800ae28 <__sfp>
 800ade8:	6060      	str	r0, [r4, #4]
 800adea:	4620      	mov	r0, r4
 800adec:	f000 f81c 	bl	800ae28 <__sfp>
 800adf0:	60a0      	str	r0, [r4, #8]
 800adf2:	4620      	mov	r0, r4
 800adf4:	f000 f818 	bl	800ae28 <__sfp>
 800adf8:	2200      	movs	r2, #0
 800adfa:	60e0      	str	r0, [r4, #12]
 800adfc:	2104      	movs	r1, #4
 800adfe:	6860      	ldr	r0, [r4, #4]
 800ae00:	f7ff ff82 	bl	800ad08 <std>
 800ae04:	68a0      	ldr	r0, [r4, #8]
 800ae06:	2201      	movs	r2, #1
 800ae08:	2109      	movs	r1, #9
 800ae0a:	f7ff ff7d 	bl	800ad08 <std>
 800ae0e:	68e0      	ldr	r0, [r4, #12]
 800ae10:	2202      	movs	r2, #2
 800ae12:	2112      	movs	r1, #18
 800ae14:	f7ff ff78 	bl	800ad08 <std>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	61a3      	str	r3, [r4, #24]
 800ae1c:	e7d2      	b.n	800adc4 <__sinit+0xc>
 800ae1e:	bf00      	nop
 800ae20:	0800fbf8 	.word	0x0800fbf8
 800ae24:	0800ad51 	.word	0x0800ad51

0800ae28 <__sfp>:
 800ae28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2a:	4607      	mov	r7, r0
 800ae2c:	f7ff ffac 	bl	800ad88 <__sfp_lock_acquire>
 800ae30:	4b1e      	ldr	r3, [pc, #120]	; (800aeac <__sfp+0x84>)
 800ae32:	681e      	ldr	r6, [r3, #0]
 800ae34:	69b3      	ldr	r3, [r6, #24]
 800ae36:	b913      	cbnz	r3, 800ae3e <__sfp+0x16>
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f7ff ffbd 	bl	800adb8 <__sinit>
 800ae3e:	3648      	adds	r6, #72	; 0x48
 800ae40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae44:	3b01      	subs	r3, #1
 800ae46:	d503      	bpl.n	800ae50 <__sfp+0x28>
 800ae48:	6833      	ldr	r3, [r6, #0]
 800ae4a:	b30b      	cbz	r3, 800ae90 <__sfp+0x68>
 800ae4c:	6836      	ldr	r6, [r6, #0]
 800ae4e:	e7f7      	b.n	800ae40 <__sfp+0x18>
 800ae50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae54:	b9d5      	cbnz	r5, 800ae8c <__sfp+0x64>
 800ae56:	4b16      	ldr	r3, [pc, #88]	; (800aeb0 <__sfp+0x88>)
 800ae58:	60e3      	str	r3, [r4, #12]
 800ae5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae5e:	6665      	str	r5, [r4, #100]	; 0x64
 800ae60:	f000 f86c 	bl	800af3c <__retarget_lock_init_recursive>
 800ae64:	f7ff ff96 	bl	800ad94 <__sfp_lock_release>
 800ae68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae70:	6025      	str	r5, [r4, #0]
 800ae72:	61a5      	str	r5, [r4, #24]
 800ae74:	2208      	movs	r2, #8
 800ae76:	4629      	mov	r1, r5
 800ae78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae7c:	f000 f878 	bl	800af70 <memset>
 800ae80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae88:	4620      	mov	r0, r4
 800ae8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae8c:	3468      	adds	r4, #104	; 0x68
 800ae8e:	e7d9      	b.n	800ae44 <__sfp+0x1c>
 800ae90:	2104      	movs	r1, #4
 800ae92:	4638      	mov	r0, r7
 800ae94:	f7ff ff62 	bl	800ad5c <__sfmoreglue>
 800ae98:	4604      	mov	r4, r0
 800ae9a:	6030      	str	r0, [r6, #0]
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d1d5      	bne.n	800ae4c <__sfp+0x24>
 800aea0:	f7ff ff78 	bl	800ad94 <__sfp_lock_release>
 800aea4:	230c      	movs	r3, #12
 800aea6:	603b      	str	r3, [r7, #0]
 800aea8:	e7ee      	b.n	800ae88 <__sfp+0x60>
 800aeaa:	bf00      	nop
 800aeac:	0800fbf8 	.word	0x0800fbf8
 800aeb0:	ffff0001 	.word	0xffff0001

0800aeb4 <_fwalk_reent>:
 800aeb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeb8:	4606      	mov	r6, r0
 800aeba:	4688      	mov	r8, r1
 800aebc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aec0:	2700      	movs	r7, #0
 800aec2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aec6:	f1b9 0901 	subs.w	r9, r9, #1
 800aeca:	d505      	bpl.n	800aed8 <_fwalk_reent+0x24>
 800aecc:	6824      	ldr	r4, [r4, #0]
 800aece:	2c00      	cmp	r4, #0
 800aed0:	d1f7      	bne.n	800aec2 <_fwalk_reent+0xe>
 800aed2:	4638      	mov	r0, r7
 800aed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aed8:	89ab      	ldrh	r3, [r5, #12]
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d907      	bls.n	800aeee <_fwalk_reent+0x3a>
 800aede:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aee2:	3301      	adds	r3, #1
 800aee4:	d003      	beq.n	800aeee <_fwalk_reent+0x3a>
 800aee6:	4629      	mov	r1, r5
 800aee8:	4630      	mov	r0, r6
 800aeea:	47c0      	blx	r8
 800aeec:	4307      	orrs	r7, r0
 800aeee:	3568      	adds	r5, #104	; 0x68
 800aef0:	e7e9      	b.n	800aec6 <_fwalk_reent+0x12>
	...

0800aef4 <__libc_init_array>:
 800aef4:	b570      	push	{r4, r5, r6, lr}
 800aef6:	4d0d      	ldr	r5, [pc, #52]	; (800af2c <__libc_init_array+0x38>)
 800aef8:	4c0d      	ldr	r4, [pc, #52]	; (800af30 <__libc_init_array+0x3c>)
 800aefa:	1b64      	subs	r4, r4, r5
 800aefc:	10a4      	asrs	r4, r4, #2
 800aefe:	2600      	movs	r6, #0
 800af00:	42a6      	cmp	r6, r4
 800af02:	d109      	bne.n	800af18 <__libc_init_array+0x24>
 800af04:	4d0b      	ldr	r5, [pc, #44]	; (800af34 <__libc_init_array+0x40>)
 800af06:	4c0c      	ldr	r4, [pc, #48]	; (800af38 <__libc_init_array+0x44>)
 800af08:	f004 fc1a 	bl	800f740 <_init>
 800af0c:	1b64      	subs	r4, r4, r5
 800af0e:	10a4      	asrs	r4, r4, #2
 800af10:	2600      	movs	r6, #0
 800af12:	42a6      	cmp	r6, r4
 800af14:	d105      	bne.n	800af22 <__libc_init_array+0x2e>
 800af16:	bd70      	pop	{r4, r5, r6, pc}
 800af18:	f855 3b04 	ldr.w	r3, [r5], #4
 800af1c:	4798      	blx	r3
 800af1e:	3601      	adds	r6, #1
 800af20:	e7ee      	b.n	800af00 <__libc_init_array+0xc>
 800af22:	f855 3b04 	ldr.w	r3, [r5], #4
 800af26:	4798      	blx	r3
 800af28:	3601      	adds	r6, #1
 800af2a:	e7f2      	b.n	800af12 <__libc_init_array+0x1e>
 800af2c:	0800ff54 	.word	0x0800ff54
 800af30:	0800ff54 	.word	0x0800ff54
 800af34:	0800ff54 	.word	0x0800ff54
 800af38:	0800ff58 	.word	0x0800ff58

0800af3c <__retarget_lock_init_recursive>:
 800af3c:	4770      	bx	lr

0800af3e <__retarget_lock_acquire_recursive>:
 800af3e:	4770      	bx	lr

0800af40 <__retarget_lock_release_recursive>:
 800af40:	4770      	bx	lr
	...

0800af44 <malloc>:
 800af44:	4b02      	ldr	r3, [pc, #8]	; (800af50 <malloc+0xc>)
 800af46:	4601      	mov	r1, r0
 800af48:	6818      	ldr	r0, [r3, #0]
 800af4a:	f000 b869 	b.w	800b020 <_malloc_r>
 800af4e:	bf00      	nop
 800af50:	20000070 	.word	0x20000070

0800af54 <memcpy>:
 800af54:	440a      	add	r2, r1
 800af56:	4291      	cmp	r1, r2
 800af58:	f100 33ff 	add.w	r3, r0, #4294967295
 800af5c:	d100      	bne.n	800af60 <memcpy+0xc>
 800af5e:	4770      	bx	lr
 800af60:	b510      	push	{r4, lr}
 800af62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af6a:	4291      	cmp	r1, r2
 800af6c:	d1f9      	bne.n	800af62 <memcpy+0xe>
 800af6e:	bd10      	pop	{r4, pc}

0800af70 <memset>:
 800af70:	4402      	add	r2, r0
 800af72:	4603      	mov	r3, r0
 800af74:	4293      	cmp	r3, r2
 800af76:	d100      	bne.n	800af7a <memset+0xa>
 800af78:	4770      	bx	lr
 800af7a:	f803 1b01 	strb.w	r1, [r3], #1
 800af7e:	e7f9      	b.n	800af74 <memset+0x4>

0800af80 <_free_r>:
 800af80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af82:	2900      	cmp	r1, #0
 800af84:	d048      	beq.n	800b018 <_free_r+0x98>
 800af86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af8a:	9001      	str	r0, [sp, #4]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f1a1 0404 	sub.w	r4, r1, #4
 800af92:	bfb8      	it	lt
 800af94:	18e4      	addlt	r4, r4, r3
 800af96:	f003 fa97 	bl	800e4c8 <__malloc_lock>
 800af9a:	4a20      	ldr	r2, [pc, #128]	; (800b01c <_free_r+0x9c>)
 800af9c:	9801      	ldr	r0, [sp, #4]
 800af9e:	6813      	ldr	r3, [r2, #0]
 800afa0:	4615      	mov	r5, r2
 800afa2:	b933      	cbnz	r3, 800afb2 <_free_r+0x32>
 800afa4:	6063      	str	r3, [r4, #4]
 800afa6:	6014      	str	r4, [r2, #0]
 800afa8:	b003      	add	sp, #12
 800afaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afae:	f003 ba91 	b.w	800e4d4 <__malloc_unlock>
 800afb2:	42a3      	cmp	r3, r4
 800afb4:	d90b      	bls.n	800afce <_free_r+0x4e>
 800afb6:	6821      	ldr	r1, [r4, #0]
 800afb8:	1862      	adds	r2, r4, r1
 800afba:	4293      	cmp	r3, r2
 800afbc:	bf04      	itt	eq
 800afbe:	681a      	ldreq	r2, [r3, #0]
 800afc0:	685b      	ldreq	r3, [r3, #4]
 800afc2:	6063      	str	r3, [r4, #4]
 800afc4:	bf04      	itt	eq
 800afc6:	1852      	addeq	r2, r2, r1
 800afc8:	6022      	streq	r2, [r4, #0]
 800afca:	602c      	str	r4, [r5, #0]
 800afcc:	e7ec      	b.n	800afa8 <_free_r+0x28>
 800afce:	461a      	mov	r2, r3
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	b10b      	cbz	r3, 800afd8 <_free_r+0x58>
 800afd4:	42a3      	cmp	r3, r4
 800afd6:	d9fa      	bls.n	800afce <_free_r+0x4e>
 800afd8:	6811      	ldr	r1, [r2, #0]
 800afda:	1855      	adds	r5, r2, r1
 800afdc:	42a5      	cmp	r5, r4
 800afde:	d10b      	bne.n	800aff8 <_free_r+0x78>
 800afe0:	6824      	ldr	r4, [r4, #0]
 800afe2:	4421      	add	r1, r4
 800afe4:	1854      	adds	r4, r2, r1
 800afe6:	42a3      	cmp	r3, r4
 800afe8:	6011      	str	r1, [r2, #0]
 800afea:	d1dd      	bne.n	800afa8 <_free_r+0x28>
 800afec:	681c      	ldr	r4, [r3, #0]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	6053      	str	r3, [r2, #4]
 800aff2:	4421      	add	r1, r4
 800aff4:	6011      	str	r1, [r2, #0]
 800aff6:	e7d7      	b.n	800afa8 <_free_r+0x28>
 800aff8:	d902      	bls.n	800b000 <_free_r+0x80>
 800affa:	230c      	movs	r3, #12
 800affc:	6003      	str	r3, [r0, #0]
 800affe:	e7d3      	b.n	800afa8 <_free_r+0x28>
 800b000:	6825      	ldr	r5, [r4, #0]
 800b002:	1961      	adds	r1, r4, r5
 800b004:	428b      	cmp	r3, r1
 800b006:	bf04      	itt	eq
 800b008:	6819      	ldreq	r1, [r3, #0]
 800b00a:	685b      	ldreq	r3, [r3, #4]
 800b00c:	6063      	str	r3, [r4, #4]
 800b00e:	bf04      	itt	eq
 800b010:	1949      	addeq	r1, r1, r5
 800b012:	6021      	streq	r1, [r4, #0]
 800b014:	6054      	str	r4, [r2, #4]
 800b016:	e7c7      	b.n	800afa8 <_free_r+0x28>
 800b018:	b003      	add	sp, #12
 800b01a:	bd30      	pop	{r4, r5, pc}
 800b01c:	20004c2c 	.word	0x20004c2c

0800b020 <_malloc_r>:
 800b020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b022:	1ccd      	adds	r5, r1, #3
 800b024:	f025 0503 	bic.w	r5, r5, #3
 800b028:	3508      	adds	r5, #8
 800b02a:	2d0c      	cmp	r5, #12
 800b02c:	bf38      	it	cc
 800b02e:	250c      	movcc	r5, #12
 800b030:	2d00      	cmp	r5, #0
 800b032:	4606      	mov	r6, r0
 800b034:	db01      	blt.n	800b03a <_malloc_r+0x1a>
 800b036:	42a9      	cmp	r1, r5
 800b038:	d903      	bls.n	800b042 <_malloc_r+0x22>
 800b03a:	230c      	movs	r3, #12
 800b03c:	6033      	str	r3, [r6, #0]
 800b03e:	2000      	movs	r0, #0
 800b040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b042:	f003 fa41 	bl	800e4c8 <__malloc_lock>
 800b046:	4921      	ldr	r1, [pc, #132]	; (800b0cc <_malloc_r+0xac>)
 800b048:	680a      	ldr	r2, [r1, #0]
 800b04a:	4614      	mov	r4, r2
 800b04c:	b99c      	cbnz	r4, 800b076 <_malloc_r+0x56>
 800b04e:	4f20      	ldr	r7, [pc, #128]	; (800b0d0 <_malloc_r+0xb0>)
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	b923      	cbnz	r3, 800b05e <_malloc_r+0x3e>
 800b054:	4621      	mov	r1, r4
 800b056:	4630      	mov	r0, r6
 800b058:	f000 ff92 	bl	800bf80 <_sbrk_r>
 800b05c:	6038      	str	r0, [r7, #0]
 800b05e:	4629      	mov	r1, r5
 800b060:	4630      	mov	r0, r6
 800b062:	f000 ff8d 	bl	800bf80 <_sbrk_r>
 800b066:	1c43      	adds	r3, r0, #1
 800b068:	d123      	bne.n	800b0b2 <_malloc_r+0x92>
 800b06a:	230c      	movs	r3, #12
 800b06c:	6033      	str	r3, [r6, #0]
 800b06e:	4630      	mov	r0, r6
 800b070:	f003 fa30 	bl	800e4d4 <__malloc_unlock>
 800b074:	e7e3      	b.n	800b03e <_malloc_r+0x1e>
 800b076:	6823      	ldr	r3, [r4, #0]
 800b078:	1b5b      	subs	r3, r3, r5
 800b07a:	d417      	bmi.n	800b0ac <_malloc_r+0x8c>
 800b07c:	2b0b      	cmp	r3, #11
 800b07e:	d903      	bls.n	800b088 <_malloc_r+0x68>
 800b080:	6023      	str	r3, [r4, #0]
 800b082:	441c      	add	r4, r3
 800b084:	6025      	str	r5, [r4, #0]
 800b086:	e004      	b.n	800b092 <_malloc_r+0x72>
 800b088:	6863      	ldr	r3, [r4, #4]
 800b08a:	42a2      	cmp	r2, r4
 800b08c:	bf0c      	ite	eq
 800b08e:	600b      	streq	r3, [r1, #0]
 800b090:	6053      	strne	r3, [r2, #4]
 800b092:	4630      	mov	r0, r6
 800b094:	f003 fa1e 	bl	800e4d4 <__malloc_unlock>
 800b098:	f104 000b 	add.w	r0, r4, #11
 800b09c:	1d23      	adds	r3, r4, #4
 800b09e:	f020 0007 	bic.w	r0, r0, #7
 800b0a2:	1ac2      	subs	r2, r0, r3
 800b0a4:	d0cc      	beq.n	800b040 <_malloc_r+0x20>
 800b0a6:	1a1b      	subs	r3, r3, r0
 800b0a8:	50a3      	str	r3, [r4, r2]
 800b0aa:	e7c9      	b.n	800b040 <_malloc_r+0x20>
 800b0ac:	4622      	mov	r2, r4
 800b0ae:	6864      	ldr	r4, [r4, #4]
 800b0b0:	e7cc      	b.n	800b04c <_malloc_r+0x2c>
 800b0b2:	1cc4      	adds	r4, r0, #3
 800b0b4:	f024 0403 	bic.w	r4, r4, #3
 800b0b8:	42a0      	cmp	r0, r4
 800b0ba:	d0e3      	beq.n	800b084 <_malloc_r+0x64>
 800b0bc:	1a21      	subs	r1, r4, r0
 800b0be:	4630      	mov	r0, r6
 800b0c0:	f000 ff5e 	bl	800bf80 <_sbrk_r>
 800b0c4:	3001      	adds	r0, #1
 800b0c6:	d1dd      	bne.n	800b084 <_malloc_r+0x64>
 800b0c8:	e7cf      	b.n	800b06a <_malloc_r+0x4a>
 800b0ca:	bf00      	nop
 800b0cc:	20004c2c 	.word	0x20004c2c
 800b0d0:	20004c30 	.word	0x20004c30

0800b0d4 <__cvt>:
 800b0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0d6:	ed2d 8b02 	vpush	{d8}
 800b0da:	eeb0 8b40 	vmov.f64	d8, d0
 800b0de:	b085      	sub	sp, #20
 800b0e0:	4617      	mov	r7, r2
 800b0e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b0e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b0e6:	ee18 2a90 	vmov	r2, s17
 800b0ea:	f025 0520 	bic.w	r5, r5, #32
 800b0ee:	2a00      	cmp	r2, #0
 800b0f0:	bfb6      	itet	lt
 800b0f2:	222d      	movlt	r2, #45	; 0x2d
 800b0f4:	2200      	movge	r2, #0
 800b0f6:	eeb1 8b40 	vneglt.f64	d8, d0
 800b0fa:	2d46      	cmp	r5, #70	; 0x46
 800b0fc:	460c      	mov	r4, r1
 800b0fe:	701a      	strb	r2, [r3, #0]
 800b100:	d004      	beq.n	800b10c <__cvt+0x38>
 800b102:	2d45      	cmp	r5, #69	; 0x45
 800b104:	d100      	bne.n	800b108 <__cvt+0x34>
 800b106:	3401      	adds	r4, #1
 800b108:	2102      	movs	r1, #2
 800b10a:	e000      	b.n	800b10e <__cvt+0x3a>
 800b10c:	2103      	movs	r1, #3
 800b10e:	ab03      	add	r3, sp, #12
 800b110:	9301      	str	r3, [sp, #4]
 800b112:	ab02      	add	r3, sp, #8
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	4622      	mov	r2, r4
 800b118:	4633      	mov	r3, r6
 800b11a:	eeb0 0b48 	vmov.f64	d0, d8
 800b11e:	f001 ff93 	bl	800d048 <_dtoa_r>
 800b122:	2d47      	cmp	r5, #71	; 0x47
 800b124:	d109      	bne.n	800b13a <__cvt+0x66>
 800b126:	07fb      	lsls	r3, r7, #31
 800b128:	d407      	bmi.n	800b13a <__cvt+0x66>
 800b12a:	9b03      	ldr	r3, [sp, #12]
 800b12c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b12e:	1a1b      	subs	r3, r3, r0
 800b130:	6013      	str	r3, [r2, #0]
 800b132:	b005      	add	sp, #20
 800b134:	ecbd 8b02 	vpop	{d8}
 800b138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b13a:	2d46      	cmp	r5, #70	; 0x46
 800b13c:	eb00 0204 	add.w	r2, r0, r4
 800b140:	d10c      	bne.n	800b15c <__cvt+0x88>
 800b142:	7803      	ldrb	r3, [r0, #0]
 800b144:	2b30      	cmp	r3, #48	; 0x30
 800b146:	d107      	bne.n	800b158 <__cvt+0x84>
 800b148:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b150:	bf1c      	itt	ne
 800b152:	f1c4 0401 	rsbne	r4, r4, #1
 800b156:	6034      	strne	r4, [r6, #0]
 800b158:	6833      	ldr	r3, [r6, #0]
 800b15a:	441a      	add	r2, r3
 800b15c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b164:	bf08      	it	eq
 800b166:	9203      	streq	r2, [sp, #12]
 800b168:	2130      	movs	r1, #48	; 0x30
 800b16a:	9b03      	ldr	r3, [sp, #12]
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d2dc      	bcs.n	800b12a <__cvt+0x56>
 800b170:	1c5c      	adds	r4, r3, #1
 800b172:	9403      	str	r4, [sp, #12]
 800b174:	7019      	strb	r1, [r3, #0]
 800b176:	e7f8      	b.n	800b16a <__cvt+0x96>

0800b178 <__exponent>:
 800b178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b17a:	4603      	mov	r3, r0
 800b17c:	2900      	cmp	r1, #0
 800b17e:	bfb8      	it	lt
 800b180:	4249      	neglt	r1, r1
 800b182:	f803 2b02 	strb.w	r2, [r3], #2
 800b186:	bfb4      	ite	lt
 800b188:	222d      	movlt	r2, #45	; 0x2d
 800b18a:	222b      	movge	r2, #43	; 0x2b
 800b18c:	2909      	cmp	r1, #9
 800b18e:	7042      	strb	r2, [r0, #1]
 800b190:	dd2a      	ble.n	800b1e8 <__exponent+0x70>
 800b192:	f10d 0407 	add.w	r4, sp, #7
 800b196:	46a4      	mov	ip, r4
 800b198:	270a      	movs	r7, #10
 800b19a:	46a6      	mov	lr, r4
 800b19c:	460a      	mov	r2, r1
 800b19e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b1a2:	fb07 1516 	mls	r5, r7, r6, r1
 800b1a6:	3530      	adds	r5, #48	; 0x30
 800b1a8:	2a63      	cmp	r2, #99	; 0x63
 800b1aa:	f104 34ff 	add.w	r4, r4, #4294967295
 800b1ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b1b2:	4631      	mov	r1, r6
 800b1b4:	dcf1      	bgt.n	800b19a <__exponent+0x22>
 800b1b6:	3130      	adds	r1, #48	; 0x30
 800b1b8:	f1ae 0502 	sub.w	r5, lr, #2
 800b1bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b1c0:	1c44      	adds	r4, r0, #1
 800b1c2:	4629      	mov	r1, r5
 800b1c4:	4561      	cmp	r1, ip
 800b1c6:	d30a      	bcc.n	800b1de <__exponent+0x66>
 800b1c8:	f10d 0209 	add.w	r2, sp, #9
 800b1cc:	eba2 020e 	sub.w	r2, r2, lr
 800b1d0:	4565      	cmp	r5, ip
 800b1d2:	bf88      	it	hi
 800b1d4:	2200      	movhi	r2, #0
 800b1d6:	4413      	add	r3, r2
 800b1d8:	1a18      	subs	r0, r3, r0
 800b1da:	b003      	add	sp, #12
 800b1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b1e6:	e7ed      	b.n	800b1c4 <__exponent+0x4c>
 800b1e8:	2330      	movs	r3, #48	; 0x30
 800b1ea:	3130      	adds	r1, #48	; 0x30
 800b1ec:	7083      	strb	r3, [r0, #2]
 800b1ee:	70c1      	strb	r1, [r0, #3]
 800b1f0:	1d03      	adds	r3, r0, #4
 800b1f2:	e7f1      	b.n	800b1d8 <__exponent+0x60>
 800b1f4:	0000      	movs	r0, r0
	...

0800b1f8 <_printf_float>:
 800b1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fc:	b08b      	sub	sp, #44	; 0x2c
 800b1fe:	460c      	mov	r4, r1
 800b200:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b204:	4616      	mov	r6, r2
 800b206:	461f      	mov	r7, r3
 800b208:	4605      	mov	r5, r0
 800b20a:	f003 f8d1 	bl	800e3b0 <_localeconv_r>
 800b20e:	f8d0 b000 	ldr.w	fp, [r0]
 800b212:	4658      	mov	r0, fp
 800b214:	f7f5 f814 	bl	8000240 <strlen>
 800b218:	2300      	movs	r3, #0
 800b21a:	9308      	str	r3, [sp, #32]
 800b21c:	f8d8 3000 	ldr.w	r3, [r8]
 800b220:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b224:	6822      	ldr	r2, [r4, #0]
 800b226:	3307      	adds	r3, #7
 800b228:	f023 0307 	bic.w	r3, r3, #7
 800b22c:	f103 0108 	add.w	r1, r3, #8
 800b230:	f8c8 1000 	str.w	r1, [r8]
 800b234:	4682      	mov	sl, r0
 800b236:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b23a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b23e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800b4a0 <_printf_float+0x2a8>
 800b242:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b246:	eeb0 6bc0 	vabs.f64	d6, d0
 800b24a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b252:	dd24      	ble.n	800b29e <_printf_float+0xa6>
 800b254:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b25c:	d502      	bpl.n	800b264 <_printf_float+0x6c>
 800b25e:	232d      	movs	r3, #45	; 0x2d
 800b260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b264:	4b90      	ldr	r3, [pc, #576]	; (800b4a8 <_printf_float+0x2b0>)
 800b266:	4891      	ldr	r0, [pc, #580]	; (800b4ac <_printf_float+0x2b4>)
 800b268:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b26c:	bf94      	ite	ls
 800b26e:	4698      	movls	r8, r3
 800b270:	4680      	movhi	r8, r0
 800b272:	2303      	movs	r3, #3
 800b274:	6123      	str	r3, [r4, #16]
 800b276:	f022 0204 	bic.w	r2, r2, #4
 800b27a:	2300      	movs	r3, #0
 800b27c:	6022      	str	r2, [r4, #0]
 800b27e:	9304      	str	r3, [sp, #16]
 800b280:	9700      	str	r7, [sp, #0]
 800b282:	4633      	mov	r3, r6
 800b284:	aa09      	add	r2, sp, #36	; 0x24
 800b286:	4621      	mov	r1, r4
 800b288:	4628      	mov	r0, r5
 800b28a:	f000 f9d3 	bl	800b634 <_printf_common>
 800b28e:	3001      	adds	r0, #1
 800b290:	f040 808a 	bne.w	800b3a8 <_printf_float+0x1b0>
 800b294:	f04f 30ff 	mov.w	r0, #4294967295
 800b298:	b00b      	add	sp, #44	; 0x2c
 800b29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b29e:	eeb4 0b40 	vcmp.f64	d0, d0
 800b2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2a6:	d709      	bvc.n	800b2bc <_printf_float+0xc4>
 800b2a8:	ee10 3a90 	vmov	r3, s1
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	bfbc      	itt	lt
 800b2b0:	232d      	movlt	r3, #45	; 0x2d
 800b2b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b2b6:	487e      	ldr	r0, [pc, #504]	; (800b4b0 <_printf_float+0x2b8>)
 800b2b8:	4b7e      	ldr	r3, [pc, #504]	; (800b4b4 <_printf_float+0x2bc>)
 800b2ba:	e7d5      	b.n	800b268 <_printf_float+0x70>
 800b2bc:	6863      	ldr	r3, [r4, #4]
 800b2be:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b2c2:	9104      	str	r1, [sp, #16]
 800b2c4:	1c59      	adds	r1, r3, #1
 800b2c6:	d13c      	bne.n	800b342 <_printf_float+0x14a>
 800b2c8:	2306      	movs	r3, #6
 800b2ca:	6063      	str	r3, [r4, #4]
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	9303      	str	r3, [sp, #12]
 800b2d0:	ab08      	add	r3, sp, #32
 800b2d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b2d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b2da:	ab07      	add	r3, sp, #28
 800b2dc:	6861      	ldr	r1, [r4, #4]
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	6022      	str	r2, [r4, #0]
 800b2e2:	f10d 031b 	add.w	r3, sp, #27
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	f7ff fef4 	bl	800b0d4 <__cvt>
 800b2ec:	9b04      	ldr	r3, [sp, #16]
 800b2ee:	9907      	ldr	r1, [sp, #28]
 800b2f0:	2b47      	cmp	r3, #71	; 0x47
 800b2f2:	4680      	mov	r8, r0
 800b2f4:	d108      	bne.n	800b308 <_printf_float+0x110>
 800b2f6:	1cc8      	adds	r0, r1, #3
 800b2f8:	db02      	blt.n	800b300 <_printf_float+0x108>
 800b2fa:	6863      	ldr	r3, [r4, #4]
 800b2fc:	4299      	cmp	r1, r3
 800b2fe:	dd41      	ble.n	800b384 <_printf_float+0x18c>
 800b300:	f1a9 0902 	sub.w	r9, r9, #2
 800b304:	fa5f f989 	uxtb.w	r9, r9
 800b308:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b30c:	d820      	bhi.n	800b350 <_printf_float+0x158>
 800b30e:	3901      	subs	r1, #1
 800b310:	464a      	mov	r2, r9
 800b312:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b316:	9107      	str	r1, [sp, #28]
 800b318:	f7ff ff2e 	bl	800b178 <__exponent>
 800b31c:	9a08      	ldr	r2, [sp, #32]
 800b31e:	9004      	str	r0, [sp, #16]
 800b320:	1813      	adds	r3, r2, r0
 800b322:	2a01      	cmp	r2, #1
 800b324:	6123      	str	r3, [r4, #16]
 800b326:	dc02      	bgt.n	800b32e <_printf_float+0x136>
 800b328:	6822      	ldr	r2, [r4, #0]
 800b32a:	07d2      	lsls	r2, r2, #31
 800b32c:	d501      	bpl.n	800b332 <_printf_float+0x13a>
 800b32e:	3301      	adds	r3, #1
 800b330:	6123      	str	r3, [r4, #16]
 800b332:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d0a2      	beq.n	800b280 <_printf_float+0x88>
 800b33a:	232d      	movs	r3, #45	; 0x2d
 800b33c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b340:	e79e      	b.n	800b280 <_printf_float+0x88>
 800b342:	9904      	ldr	r1, [sp, #16]
 800b344:	2947      	cmp	r1, #71	; 0x47
 800b346:	d1c1      	bne.n	800b2cc <_printf_float+0xd4>
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1bf      	bne.n	800b2cc <_printf_float+0xd4>
 800b34c:	2301      	movs	r3, #1
 800b34e:	e7bc      	b.n	800b2ca <_printf_float+0xd2>
 800b350:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b354:	d118      	bne.n	800b388 <_printf_float+0x190>
 800b356:	2900      	cmp	r1, #0
 800b358:	6863      	ldr	r3, [r4, #4]
 800b35a:	dd0b      	ble.n	800b374 <_printf_float+0x17c>
 800b35c:	6121      	str	r1, [r4, #16]
 800b35e:	b913      	cbnz	r3, 800b366 <_printf_float+0x16e>
 800b360:	6822      	ldr	r2, [r4, #0]
 800b362:	07d0      	lsls	r0, r2, #31
 800b364:	d502      	bpl.n	800b36c <_printf_float+0x174>
 800b366:	3301      	adds	r3, #1
 800b368:	440b      	add	r3, r1
 800b36a:	6123      	str	r3, [r4, #16]
 800b36c:	2300      	movs	r3, #0
 800b36e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b370:	9304      	str	r3, [sp, #16]
 800b372:	e7de      	b.n	800b332 <_printf_float+0x13a>
 800b374:	b913      	cbnz	r3, 800b37c <_printf_float+0x184>
 800b376:	6822      	ldr	r2, [r4, #0]
 800b378:	07d2      	lsls	r2, r2, #31
 800b37a:	d501      	bpl.n	800b380 <_printf_float+0x188>
 800b37c:	3302      	adds	r3, #2
 800b37e:	e7f4      	b.n	800b36a <_printf_float+0x172>
 800b380:	2301      	movs	r3, #1
 800b382:	e7f2      	b.n	800b36a <_printf_float+0x172>
 800b384:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b388:	9b08      	ldr	r3, [sp, #32]
 800b38a:	4299      	cmp	r1, r3
 800b38c:	db05      	blt.n	800b39a <_printf_float+0x1a2>
 800b38e:	6823      	ldr	r3, [r4, #0]
 800b390:	6121      	str	r1, [r4, #16]
 800b392:	07d8      	lsls	r0, r3, #31
 800b394:	d5ea      	bpl.n	800b36c <_printf_float+0x174>
 800b396:	1c4b      	adds	r3, r1, #1
 800b398:	e7e7      	b.n	800b36a <_printf_float+0x172>
 800b39a:	2900      	cmp	r1, #0
 800b39c:	bfd4      	ite	le
 800b39e:	f1c1 0202 	rsble	r2, r1, #2
 800b3a2:	2201      	movgt	r2, #1
 800b3a4:	4413      	add	r3, r2
 800b3a6:	e7e0      	b.n	800b36a <_printf_float+0x172>
 800b3a8:	6823      	ldr	r3, [r4, #0]
 800b3aa:	055a      	lsls	r2, r3, #21
 800b3ac:	d407      	bmi.n	800b3be <_printf_float+0x1c6>
 800b3ae:	6923      	ldr	r3, [r4, #16]
 800b3b0:	4642      	mov	r2, r8
 800b3b2:	4631      	mov	r1, r6
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	47b8      	blx	r7
 800b3b8:	3001      	adds	r0, #1
 800b3ba:	d12a      	bne.n	800b412 <_printf_float+0x21a>
 800b3bc:	e76a      	b.n	800b294 <_printf_float+0x9c>
 800b3be:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b3c2:	f240 80e2 	bls.w	800b58a <_printf_float+0x392>
 800b3c6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b3ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d2:	d133      	bne.n	800b43c <_printf_float+0x244>
 800b3d4:	4a38      	ldr	r2, [pc, #224]	; (800b4b8 <_printf_float+0x2c0>)
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	4631      	mov	r1, r6
 800b3da:	4628      	mov	r0, r5
 800b3dc:	47b8      	blx	r7
 800b3de:	3001      	adds	r0, #1
 800b3e0:	f43f af58 	beq.w	800b294 <_printf_float+0x9c>
 800b3e4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	db02      	blt.n	800b3f2 <_printf_float+0x1fa>
 800b3ec:	6823      	ldr	r3, [r4, #0]
 800b3ee:	07d8      	lsls	r0, r3, #31
 800b3f0:	d50f      	bpl.n	800b412 <_printf_float+0x21a>
 800b3f2:	4653      	mov	r3, sl
 800b3f4:	465a      	mov	r2, fp
 800b3f6:	4631      	mov	r1, r6
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	47b8      	blx	r7
 800b3fc:	3001      	adds	r0, #1
 800b3fe:	f43f af49 	beq.w	800b294 <_printf_float+0x9c>
 800b402:	f04f 0800 	mov.w	r8, #0
 800b406:	f104 091a 	add.w	r9, r4, #26
 800b40a:	9b08      	ldr	r3, [sp, #32]
 800b40c:	3b01      	subs	r3, #1
 800b40e:	4543      	cmp	r3, r8
 800b410:	dc09      	bgt.n	800b426 <_printf_float+0x22e>
 800b412:	6823      	ldr	r3, [r4, #0]
 800b414:	079b      	lsls	r3, r3, #30
 800b416:	f100 8108 	bmi.w	800b62a <_printf_float+0x432>
 800b41a:	68e0      	ldr	r0, [r4, #12]
 800b41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b41e:	4298      	cmp	r0, r3
 800b420:	bfb8      	it	lt
 800b422:	4618      	movlt	r0, r3
 800b424:	e738      	b.n	800b298 <_printf_float+0xa0>
 800b426:	2301      	movs	r3, #1
 800b428:	464a      	mov	r2, r9
 800b42a:	4631      	mov	r1, r6
 800b42c:	4628      	mov	r0, r5
 800b42e:	47b8      	blx	r7
 800b430:	3001      	adds	r0, #1
 800b432:	f43f af2f 	beq.w	800b294 <_printf_float+0x9c>
 800b436:	f108 0801 	add.w	r8, r8, #1
 800b43a:	e7e6      	b.n	800b40a <_printf_float+0x212>
 800b43c:	9b07      	ldr	r3, [sp, #28]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	dc3c      	bgt.n	800b4bc <_printf_float+0x2c4>
 800b442:	4a1d      	ldr	r2, [pc, #116]	; (800b4b8 <_printf_float+0x2c0>)
 800b444:	2301      	movs	r3, #1
 800b446:	4631      	mov	r1, r6
 800b448:	4628      	mov	r0, r5
 800b44a:	47b8      	blx	r7
 800b44c:	3001      	adds	r0, #1
 800b44e:	f43f af21 	beq.w	800b294 <_printf_float+0x9c>
 800b452:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b456:	4313      	orrs	r3, r2
 800b458:	d102      	bne.n	800b460 <_printf_float+0x268>
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	07d9      	lsls	r1, r3, #31
 800b45e:	d5d8      	bpl.n	800b412 <_printf_float+0x21a>
 800b460:	4653      	mov	r3, sl
 800b462:	465a      	mov	r2, fp
 800b464:	4631      	mov	r1, r6
 800b466:	4628      	mov	r0, r5
 800b468:	47b8      	blx	r7
 800b46a:	3001      	adds	r0, #1
 800b46c:	f43f af12 	beq.w	800b294 <_printf_float+0x9c>
 800b470:	f04f 0900 	mov.w	r9, #0
 800b474:	f104 0a1a 	add.w	sl, r4, #26
 800b478:	9b07      	ldr	r3, [sp, #28]
 800b47a:	425b      	negs	r3, r3
 800b47c:	454b      	cmp	r3, r9
 800b47e:	dc01      	bgt.n	800b484 <_printf_float+0x28c>
 800b480:	9b08      	ldr	r3, [sp, #32]
 800b482:	e795      	b.n	800b3b0 <_printf_float+0x1b8>
 800b484:	2301      	movs	r3, #1
 800b486:	4652      	mov	r2, sl
 800b488:	4631      	mov	r1, r6
 800b48a:	4628      	mov	r0, r5
 800b48c:	47b8      	blx	r7
 800b48e:	3001      	adds	r0, #1
 800b490:	f43f af00 	beq.w	800b294 <_printf_float+0x9c>
 800b494:	f109 0901 	add.w	r9, r9, #1
 800b498:	e7ee      	b.n	800b478 <_printf_float+0x280>
 800b49a:	bf00      	nop
 800b49c:	f3af 8000 	nop.w
 800b4a0:	ffffffff 	.word	0xffffffff
 800b4a4:	7fefffff 	.word	0x7fefffff
 800b4a8:	0800fbfc 	.word	0x0800fbfc
 800b4ac:	0800fc00 	.word	0x0800fc00
 800b4b0:	0800fc08 	.word	0x0800fc08
 800b4b4:	0800fc04 	.word	0x0800fc04
 800b4b8:	0800fc0c 	.word	0x0800fc0c
 800b4bc:	9a08      	ldr	r2, [sp, #32]
 800b4be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	bfa8      	it	ge
 800b4c4:	461a      	movge	r2, r3
 800b4c6:	2a00      	cmp	r2, #0
 800b4c8:	4691      	mov	r9, r2
 800b4ca:	dc38      	bgt.n	800b53e <_printf_float+0x346>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	9305      	str	r3, [sp, #20]
 800b4d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4d4:	f104 021a 	add.w	r2, r4, #26
 800b4d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b4da:	9905      	ldr	r1, [sp, #20]
 800b4dc:	9304      	str	r3, [sp, #16]
 800b4de:	eba3 0309 	sub.w	r3, r3, r9
 800b4e2:	428b      	cmp	r3, r1
 800b4e4:	dc33      	bgt.n	800b54e <_printf_float+0x356>
 800b4e6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	db3c      	blt.n	800b568 <_printf_float+0x370>
 800b4ee:	6823      	ldr	r3, [r4, #0]
 800b4f0:	07da      	lsls	r2, r3, #31
 800b4f2:	d439      	bmi.n	800b568 <_printf_float+0x370>
 800b4f4:	9a08      	ldr	r2, [sp, #32]
 800b4f6:	9b04      	ldr	r3, [sp, #16]
 800b4f8:	9907      	ldr	r1, [sp, #28]
 800b4fa:	1ad3      	subs	r3, r2, r3
 800b4fc:	eba2 0901 	sub.w	r9, r2, r1
 800b500:	4599      	cmp	r9, r3
 800b502:	bfa8      	it	ge
 800b504:	4699      	movge	r9, r3
 800b506:	f1b9 0f00 	cmp.w	r9, #0
 800b50a:	dc35      	bgt.n	800b578 <_printf_float+0x380>
 800b50c:	f04f 0800 	mov.w	r8, #0
 800b510:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b514:	f104 0a1a 	add.w	sl, r4, #26
 800b518:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b51c:	1a9b      	subs	r3, r3, r2
 800b51e:	eba3 0309 	sub.w	r3, r3, r9
 800b522:	4543      	cmp	r3, r8
 800b524:	f77f af75 	ble.w	800b412 <_printf_float+0x21a>
 800b528:	2301      	movs	r3, #1
 800b52a:	4652      	mov	r2, sl
 800b52c:	4631      	mov	r1, r6
 800b52e:	4628      	mov	r0, r5
 800b530:	47b8      	blx	r7
 800b532:	3001      	adds	r0, #1
 800b534:	f43f aeae 	beq.w	800b294 <_printf_float+0x9c>
 800b538:	f108 0801 	add.w	r8, r8, #1
 800b53c:	e7ec      	b.n	800b518 <_printf_float+0x320>
 800b53e:	4613      	mov	r3, r2
 800b540:	4631      	mov	r1, r6
 800b542:	4642      	mov	r2, r8
 800b544:	4628      	mov	r0, r5
 800b546:	47b8      	blx	r7
 800b548:	3001      	adds	r0, #1
 800b54a:	d1bf      	bne.n	800b4cc <_printf_float+0x2d4>
 800b54c:	e6a2      	b.n	800b294 <_printf_float+0x9c>
 800b54e:	2301      	movs	r3, #1
 800b550:	4631      	mov	r1, r6
 800b552:	4628      	mov	r0, r5
 800b554:	9204      	str	r2, [sp, #16]
 800b556:	47b8      	blx	r7
 800b558:	3001      	adds	r0, #1
 800b55a:	f43f ae9b 	beq.w	800b294 <_printf_float+0x9c>
 800b55e:	9b05      	ldr	r3, [sp, #20]
 800b560:	9a04      	ldr	r2, [sp, #16]
 800b562:	3301      	adds	r3, #1
 800b564:	9305      	str	r3, [sp, #20]
 800b566:	e7b7      	b.n	800b4d8 <_printf_float+0x2e0>
 800b568:	4653      	mov	r3, sl
 800b56a:	465a      	mov	r2, fp
 800b56c:	4631      	mov	r1, r6
 800b56e:	4628      	mov	r0, r5
 800b570:	47b8      	blx	r7
 800b572:	3001      	adds	r0, #1
 800b574:	d1be      	bne.n	800b4f4 <_printf_float+0x2fc>
 800b576:	e68d      	b.n	800b294 <_printf_float+0x9c>
 800b578:	9a04      	ldr	r2, [sp, #16]
 800b57a:	464b      	mov	r3, r9
 800b57c:	4442      	add	r2, r8
 800b57e:	4631      	mov	r1, r6
 800b580:	4628      	mov	r0, r5
 800b582:	47b8      	blx	r7
 800b584:	3001      	adds	r0, #1
 800b586:	d1c1      	bne.n	800b50c <_printf_float+0x314>
 800b588:	e684      	b.n	800b294 <_printf_float+0x9c>
 800b58a:	9a08      	ldr	r2, [sp, #32]
 800b58c:	2a01      	cmp	r2, #1
 800b58e:	dc01      	bgt.n	800b594 <_printf_float+0x39c>
 800b590:	07db      	lsls	r3, r3, #31
 800b592:	d537      	bpl.n	800b604 <_printf_float+0x40c>
 800b594:	2301      	movs	r3, #1
 800b596:	4642      	mov	r2, r8
 800b598:	4631      	mov	r1, r6
 800b59a:	4628      	mov	r0, r5
 800b59c:	47b8      	blx	r7
 800b59e:	3001      	adds	r0, #1
 800b5a0:	f43f ae78 	beq.w	800b294 <_printf_float+0x9c>
 800b5a4:	4653      	mov	r3, sl
 800b5a6:	465a      	mov	r2, fp
 800b5a8:	4631      	mov	r1, r6
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	47b8      	blx	r7
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	f43f ae70 	beq.w	800b294 <_printf_float+0x9c>
 800b5b4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b5b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c0:	d01b      	beq.n	800b5fa <_printf_float+0x402>
 800b5c2:	9b08      	ldr	r3, [sp, #32]
 800b5c4:	f108 0201 	add.w	r2, r8, #1
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	4631      	mov	r1, r6
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	47b8      	blx	r7
 800b5d0:	3001      	adds	r0, #1
 800b5d2:	d10e      	bne.n	800b5f2 <_printf_float+0x3fa>
 800b5d4:	e65e      	b.n	800b294 <_printf_float+0x9c>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	464a      	mov	r2, r9
 800b5da:	4631      	mov	r1, r6
 800b5dc:	4628      	mov	r0, r5
 800b5de:	47b8      	blx	r7
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	f43f ae57 	beq.w	800b294 <_printf_float+0x9c>
 800b5e6:	f108 0801 	add.w	r8, r8, #1
 800b5ea:	9b08      	ldr	r3, [sp, #32]
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	4543      	cmp	r3, r8
 800b5f0:	dcf1      	bgt.n	800b5d6 <_printf_float+0x3de>
 800b5f2:	9b04      	ldr	r3, [sp, #16]
 800b5f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b5f8:	e6db      	b.n	800b3b2 <_printf_float+0x1ba>
 800b5fa:	f04f 0800 	mov.w	r8, #0
 800b5fe:	f104 091a 	add.w	r9, r4, #26
 800b602:	e7f2      	b.n	800b5ea <_printf_float+0x3f2>
 800b604:	2301      	movs	r3, #1
 800b606:	4642      	mov	r2, r8
 800b608:	e7df      	b.n	800b5ca <_printf_float+0x3d2>
 800b60a:	2301      	movs	r3, #1
 800b60c:	464a      	mov	r2, r9
 800b60e:	4631      	mov	r1, r6
 800b610:	4628      	mov	r0, r5
 800b612:	47b8      	blx	r7
 800b614:	3001      	adds	r0, #1
 800b616:	f43f ae3d 	beq.w	800b294 <_printf_float+0x9c>
 800b61a:	f108 0801 	add.w	r8, r8, #1
 800b61e:	68e3      	ldr	r3, [r4, #12]
 800b620:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b622:	1a5b      	subs	r3, r3, r1
 800b624:	4543      	cmp	r3, r8
 800b626:	dcf0      	bgt.n	800b60a <_printf_float+0x412>
 800b628:	e6f7      	b.n	800b41a <_printf_float+0x222>
 800b62a:	f04f 0800 	mov.w	r8, #0
 800b62e:	f104 0919 	add.w	r9, r4, #25
 800b632:	e7f4      	b.n	800b61e <_printf_float+0x426>

0800b634 <_printf_common>:
 800b634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b638:	4616      	mov	r6, r2
 800b63a:	4699      	mov	r9, r3
 800b63c:	688a      	ldr	r2, [r1, #8]
 800b63e:	690b      	ldr	r3, [r1, #16]
 800b640:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b644:	4293      	cmp	r3, r2
 800b646:	bfb8      	it	lt
 800b648:	4613      	movlt	r3, r2
 800b64a:	6033      	str	r3, [r6, #0]
 800b64c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b650:	4607      	mov	r7, r0
 800b652:	460c      	mov	r4, r1
 800b654:	b10a      	cbz	r2, 800b65a <_printf_common+0x26>
 800b656:	3301      	adds	r3, #1
 800b658:	6033      	str	r3, [r6, #0]
 800b65a:	6823      	ldr	r3, [r4, #0]
 800b65c:	0699      	lsls	r1, r3, #26
 800b65e:	bf42      	ittt	mi
 800b660:	6833      	ldrmi	r3, [r6, #0]
 800b662:	3302      	addmi	r3, #2
 800b664:	6033      	strmi	r3, [r6, #0]
 800b666:	6825      	ldr	r5, [r4, #0]
 800b668:	f015 0506 	ands.w	r5, r5, #6
 800b66c:	d106      	bne.n	800b67c <_printf_common+0x48>
 800b66e:	f104 0a19 	add.w	sl, r4, #25
 800b672:	68e3      	ldr	r3, [r4, #12]
 800b674:	6832      	ldr	r2, [r6, #0]
 800b676:	1a9b      	subs	r3, r3, r2
 800b678:	42ab      	cmp	r3, r5
 800b67a:	dc26      	bgt.n	800b6ca <_printf_common+0x96>
 800b67c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b680:	1e13      	subs	r3, r2, #0
 800b682:	6822      	ldr	r2, [r4, #0]
 800b684:	bf18      	it	ne
 800b686:	2301      	movne	r3, #1
 800b688:	0692      	lsls	r2, r2, #26
 800b68a:	d42b      	bmi.n	800b6e4 <_printf_common+0xb0>
 800b68c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b690:	4649      	mov	r1, r9
 800b692:	4638      	mov	r0, r7
 800b694:	47c0      	blx	r8
 800b696:	3001      	adds	r0, #1
 800b698:	d01e      	beq.n	800b6d8 <_printf_common+0xa4>
 800b69a:	6823      	ldr	r3, [r4, #0]
 800b69c:	68e5      	ldr	r5, [r4, #12]
 800b69e:	6832      	ldr	r2, [r6, #0]
 800b6a0:	f003 0306 	and.w	r3, r3, #6
 800b6a4:	2b04      	cmp	r3, #4
 800b6a6:	bf08      	it	eq
 800b6a8:	1aad      	subeq	r5, r5, r2
 800b6aa:	68a3      	ldr	r3, [r4, #8]
 800b6ac:	6922      	ldr	r2, [r4, #16]
 800b6ae:	bf0c      	ite	eq
 800b6b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6b4:	2500      	movne	r5, #0
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	bfc4      	itt	gt
 800b6ba:	1a9b      	subgt	r3, r3, r2
 800b6bc:	18ed      	addgt	r5, r5, r3
 800b6be:	2600      	movs	r6, #0
 800b6c0:	341a      	adds	r4, #26
 800b6c2:	42b5      	cmp	r5, r6
 800b6c4:	d11a      	bne.n	800b6fc <_printf_common+0xc8>
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	e008      	b.n	800b6dc <_printf_common+0xa8>
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	4652      	mov	r2, sl
 800b6ce:	4649      	mov	r1, r9
 800b6d0:	4638      	mov	r0, r7
 800b6d2:	47c0      	blx	r8
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	d103      	bne.n	800b6e0 <_printf_common+0xac>
 800b6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6e0:	3501      	adds	r5, #1
 800b6e2:	e7c6      	b.n	800b672 <_printf_common+0x3e>
 800b6e4:	18e1      	adds	r1, r4, r3
 800b6e6:	1c5a      	adds	r2, r3, #1
 800b6e8:	2030      	movs	r0, #48	; 0x30
 800b6ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6ee:	4422      	add	r2, r4
 800b6f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6f8:	3302      	adds	r3, #2
 800b6fa:	e7c7      	b.n	800b68c <_printf_common+0x58>
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	4622      	mov	r2, r4
 800b700:	4649      	mov	r1, r9
 800b702:	4638      	mov	r0, r7
 800b704:	47c0      	blx	r8
 800b706:	3001      	adds	r0, #1
 800b708:	d0e6      	beq.n	800b6d8 <_printf_common+0xa4>
 800b70a:	3601      	adds	r6, #1
 800b70c:	e7d9      	b.n	800b6c2 <_printf_common+0x8e>
	...

0800b710 <_printf_i>:
 800b710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b714:	460c      	mov	r4, r1
 800b716:	4691      	mov	r9, r2
 800b718:	7e27      	ldrb	r7, [r4, #24]
 800b71a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b71c:	2f78      	cmp	r7, #120	; 0x78
 800b71e:	4680      	mov	r8, r0
 800b720:	469a      	mov	sl, r3
 800b722:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b726:	d807      	bhi.n	800b738 <_printf_i+0x28>
 800b728:	2f62      	cmp	r7, #98	; 0x62
 800b72a:	d80a      	bhi.n	800b742 <_printf_i+0x32>
 800b72c:	2f00      	cmp	r7, #0
 800b72e:	f000 80d8 	beq.w	800b8e2 <_printf_i+0x1d2>
 800b732:	2f58      	cmp	r7, #88	; 0x58
 800b734:	f000 80a3 	beq.w	800b87e <_printf_i+0x16e>
 800b738:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b73c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b740:	e03a      	b.n	800b7b8 <_printf_i+0xa8>
 800b742:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b746:	2b15      	cmp	r3, #21
 800b748:	d8f6      	bhi.n	800b738 <_printf_i+0x28>
 800b74a:	a001      	add	r0, pc, #4	; (adr r0, 800b750 <_printf_i+0x40>)
 800b74c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b750:	0800b7a9 	.word	0x0800b7a9
 800b754:	0800b7bd 	.word	0x0800b7bd
 800b758:	0800b739 	.word	0x0800b739
 800b75c:	0800b739 	.word	0x0800b739
 800b760:	0800b739 	.word	0x0800b739
 800b764:	0800b739 	.word	0x0800b739
 800b768:	0800b7bd 	.word	0x0800b7bd
 800b76c:	0800b739 	.word	0x0800b739
 800b770:	0800b739 	.word	0x0800b739
 800b774:	0800b739 	.word	0x0800b739
 800b778:	0800b739 	.word	0x0800b739
 800b77c:	0800b8c9 	.word	0x0800b8c9
 800b780:	0800b7ed 	.word	0x0800b7ed
 800b784:	0800b8ab 	.word	0x0800b8ab
 800b788:	0800b739 	.word	0x0800b739
 800b78c:	0800b739 	.word	0x0800b739
 800b790:	0800b8eb 	.word	0x0800b8eb
 800b794:	0800b739 	.word	0x0800b739
 800b798:	0800b7ed 	.word	0x0800b7ed
 800b79c:	0800b739 	.word	0x0800b739
 800b7a0:	0800b739 	.word	0x0800b739
 800b7a4:	0800b8b3 	.word	0x0800b8b3
 800b7a8:	680b      	ldr	r3, [r1, #0]
 800b7aa:	1d1a      	adds	r2, r3, #4
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	600a      	str	r2, [r1, #0]
 800b7b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b7b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e0a3      	b.n	800b904 <_printf_i+0x1f4>
 800b7bc:	6825      	ldr	r5, [r4, #0]
 800b7be:	6808      	ldr	r0, [r1, #0]
 800b7c0:	062e      	lsls	r6, r5, #24
 800b7c2:	f100 0304 	add.w	r3, r0, #4
 800b7c6:	d50a      	bpl.n	800b7de <_printf_i+0xce>
 800b7c8:	6805      	ldr	r5, [r0, #0]
 800b7ca:	600b      	str	r3, [r1, #0]
 800b7cc:	2d00      	cmp	r5, #0
 800b7ce:	da03      	bge.n	800b7d8 <_printf_i+0xc8>
 800b7d0:	232d      	movs	r3, #45	; 0x2d
 800b7d2:	426d      	negs	r5, r5
 800b7d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7d8:	485e      	ldr	r0, [pc, #376]	; (800b954 <_printf_i+0x244>)
 800b7da:	230a      	movs	r3, #10
 800b7dc:	e019      	b.n	800b812 <_printf_i+0x102>
 800b7de:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b7e2:	6805      	ldr	r5, [r0, #0]
 800b7e4:	600b      	str	r3, [r1, #0]
 800b7e6:	bf18      	it	ne
 800b7e8:	b22d      	sxthne	r5, r5
 800b7ea:	e7ef      	b.n	800b7cc <_printf_i+0xbc>
 800b7ec:	680b      	ldr	r3, [r1, #0]
 800b7ee:	6825      	ldr	r5, [r4, #0]
 800b7f0:	1d18      	adds	r0, r3, #4
 800b7f2:	6008      	str	r0, [r1, #0]
 800b7f4:	0628      	lsls	r0, r5, #24
 800b7f6:	d501      	bpl.n	800b7fc <_printf_i+0xec>
 800b7f8:	681d      	ldr	r5, [r3, #0]
 800b7fa:	e002      	b.n	800b802 <_printf_i+0xf2>
 800b7fc:	0669      	lsls	r1, r5, #25
 800b7fe:	d5fb      	bpl.n	800b7f8 <_printf_i+0xe8>
 800b800:	881d      	ldrh	r5, [r3, #0]
 800b802:	4854      	ldr	r0, [pc, #336]	; (800b954 <_printf_i+0x244>)
 800b804:	2f6f      	cmp	r7, #111	; 0x6f
 800b806:	bf0c      	ite	eq
 800b808:	2308      	moveq	r3, #8
 800b80a:	230a      	movne	r3, #10
 800b80c:	2100      	movs	r1, #0
 800b80e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b812:	6866      	ldr	r6, [r4, #4]
 800b814:	60a6      	str	r6, [r4, #8]
 800b816:	2e00      	cmp	r6, #0
 800b818:	bfa2      	ittt	ge
 800b81a:	6821      	ldrge	r1, [r4, #0]
 800b81c:	f021 0104 	bicge.w	r1, r1, #4
 800b820:	6021      	strge	r1, [r4, #0]
 800b822:	b90d      	cbnz	r5, 800b828 <_printf_i+0x118>
 800b824:	2e00      	cmp	r6, #0
 800b826:	d04d      	beq.n	800b8c4 <_printf_i+0x1b4>
 800b828:	4616      	mov	r6, r2
 800b82a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b82e:	fb03 5711 	mls	r7, r3, r1, r5
 800b832:	5dc7      	ldrb	r7, [r0, r7]
 800b834:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b838:	462f      	mov	r7, r5
 800b83a:	42bb      	cmp	r3, r7
 800b83c:	460d      	mov	r5, r1
 800b83e:	d9f4      	bls.n	800b82a <_printf_i+0x11a>
 800b840:	2b08      	cmp	r3, #8
 800b842:	d10b      	bne.n	800b85c <_printf_i+0x14c>
 800b844:	6823      	ldr	r3, [r4, #0]
 800b846:	07df      	lsls	r7, r3, #31
 800b848:	d508      	bpl.n	800b85c <_printf_i+0x14c>
 800b84a:	6923      	ldr	r3, [r4, #16]
 800b84c:	6861      	ldr	r1, [r4, #4]
 800b84e:	4299      	cmp	r1, r3
 800b850:	bfde      	ittt	le
 800b852:	2330      	movle	r3, #48	; 0x30
 800b854:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b858:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b85c:	1b92      	subs	r2, r2, r6
 800b85e:	6122      	str	r2, [r4, #16]
 800b860:	f8cd a000 	str.w	sl, [sp]
 800b864:	464b      	mov	r3, r9
 800b866:	aa03      	add	r2, sp, #12
 800b868:	4621      	mov	r1, r4
 800b86a:	4640      	mov	r0, r8
 800b86c:	f7ff fee2 	bl	800b634 <_printf_common>
 800b870:	3001      	adds	r0, #1
 800b872:	d14c      	bne.n	800b90e <_printf_i+0x1fe>
 800b874:	f04f 30ff 	mov.w	r0, #4294967295
 800b878:	b004      	add	sp, #16
 800b87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b87e:	4835      	ldr	r0, [pc, #212]	; (800b954 <_printf_i+0x244>)
 800b880:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b884:	6823      	ldr	r3, [r4, #0]
 800b886:	680e      	ldr	r6, [r1, #0]
 800b888:	061f      	lsls	r7, r3, #24
 800b88a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b88e:	600e      	str	r6, [r1, #0]
 800b890:	d514      	bpl.n	800b8bc <_printf_i+0x1ac>
 800b892:	07d9      	lsls	r1, r3, #31
 800b894:	bf44      	itt	mi
 800b896:	f043 0320 	orrmi.w	r3, r3, #32
 800b89a:	6023      	strmi	r3, [r4, #0]
 800b89c:	b91d      	cbnz	r5, 800b8a6 <_printf_i+0x196>
 800b89e:	6823      	ldr	r3, [r4, #0]
 800b8a0:	f023 0320 	bic.w	r3, r3, #32
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	2310      	movs	r3, #16
 800b8a8:	e7b0      	b.n	800b80c <_printf_i+0xfc>
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	f043 0320 	orr.w	r3, r3, #32
 800b8b0:	6023      	str	r3, [r4, #0]
 800b8b2:	2378      	movs	r3, #120	; 0x78
 800b8b4:	4828      	ldr	r0, [pc, #160]	; (800b958 <_printf_i+0x248>)
 800b8b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8ba:	e7e3      	b.n	800b884 <_printf_i+0x174>
 800b8bc:	065e      	lsls	r6, r3, #25
 800b8be:	bf48      	it	mi
 800b8c0:	b2ad      	uxthmi	r5, r5
 800b8c2:	e7e6      	b.n	800b892 <_printf_i+0x182>
 800b8c4:	4616      	mov	r6, r2
 800b8c6:	e7bb      	b.n	800b840 <_printf_i+0x130>
 800b8c8:	680b      	ldr	r3, [r1, #0]
 800b8ca:	6826      	ldr	r6, [r4, #0]
 800b8cc:	6960      	ldr	r0, [r4, #20]
 800b8ce:	1d1d      	adds	r5, r3, #4
 800b8d0:	600d      	str	r5, [r1, #0]
 800b8d2:	0635      	lsls	r5, r6, #24
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	d501      	bpl.n	800b8dc <_printf_i+0x1cc>
 800b8d8:	6018      	str	r0, [r3, #0]
 800b8da:	e002      	b.n	800b8e2 <_printf_i+0x1d2>
 800b8dc:	0671      	lsls	r1, r6, #25
 800b8de:	d5fb      	bpl.n	800b8d8 <_printf_i+0x1c8>
 800b8e0:	8018      	strh	r0, [r3, #0]
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	6123      	str	r3, [r4, #16]
 800b8e6:	4616      	mov	r6, r2
 800b8e8:	e7ba      	b.n	800b860 <_printf_i+0x150>
 800b8ea:	680b      	ldr	r3, [r1, #0]
 800b8ec:	1d1a      	adds	r2, r3, #4
 800b8ee:	600a      	str	r2, [r1, #0]
 800b8f0:	681e      	ldr	r6, [r3, #0]
 800b8f2:	6862      	ldr	r2, [r4, #4]
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	f7f4 fcaa 	bl	8000250 <memchr>
 800b8fc:	b108      	cbz	r0, 800b902 <_printf_i+0x1f2>
 800b8fe:	1b80      	subs	r0, r0, r6
 800b900:	6060      	str	r0, [r4, #4]
 800b902:	6863      	ldr	r3, [r4, #4]
 800b904:	6123      	str	r3, [r4, #16]
 800b906:	2300      	movs	r3, #0
 800b908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b90c:	e7a8      	b.n	800b860 <_printf_i+0x150>
 800b90e:	6923      	ldr	r3, [r4, #16]
 800b910:	4632      	mov	r2, r6
 800b912:	4649      	mov	r1, r9
 800b914:	4640      	mov	r0, r8
 800b916:	47d0      	blx	sl
 800b918:	3001      	adds	r0, #1
 800b91a:	d0ab      	beq.n	800b874 <_printf_i+0x164>
 800b91c:	6823      	ldr	r3, [r4, #0]
 800b91e:	079b      	lsls	r3, r3, #30
 800b920:	d413      	bmi.n	800b94a <_printf_i+0x23a>
 800b922:	68e0      	ldr	r0, [r4, #12]
 800b924:	9b03      	ldr	r3, [sp, #12]
 800b926:	4298      	cmp	r0, r3
 800b928:	bfb8      	it	lt
 800b92a:	4618      	movlt	r0, r3
 800b92c:	e7a4      	b.n	800b878 <_printf_i+0x168>
 800b92e:	2301      	movs	r3, #1
 800b930:	4632      	mov	r2, r6
 800b932:	4649      	mov	r1, r9
 800b934:	4640      	mov	r0, r8
 800b936:	47d0      	blx	sl
 800b938:	3001      	adds	r0, #1
 800b93a:	d09b      	beq.n	800b874 <_printf_i+0x164>
 800b93c:	3501      	adds	r5, #1
 800b93e:	68e3      	ldr	r3, [r4, #12]
 800b940:	9903      	ldr	r1, [sp, #12]
 800b942:	1a5b      	subs	r3, r3, r1
 800b944:	42ab      	cmp	r3, r5
 800b946:	dcf2      	bgt.n	800b92e <_printf_i+0x21e>
 800b948:	e7eb      	b.n	800b922 <_printf_i+0x212>
 800b94a:	2500      	movs	r5, #0
 800b94c:	f104 0619 	add.w	r6, r4, #25
 800b950:	e7f5      	b.n	800b93e <_printf_i+0x22e>
 800b952:	bf00      	nop
 800b954:	0800fc0e 	.word	0x0800fc0e
 800b958:	0800fc1f 	.word	0x0800fc1f

0800b95c <_scanf_float>:
 800b95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b960:	b087      	sub	sp, #28
 800b962:	4617      	mov	r7, r2
 800b964:	9303      	str	r3, [sp, #12]
 800b966:	688b      	ldr	r3, [r1, #8]
 800b968:	1e5a      	subs	r2, r3, #1
 800b96a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b96e:	bf83      	ittte	hi
 800b970:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b974:	195b      	addhi	r3, r3, r5
 800b976:	9302      	strhi	r3, [sp, #8]
 800b978:	2300      	movls	r3, #0
 800b97a:	bf86      	itte	hi
 800b97c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b980:	608b      	strhi	r3, [r1, #8]
 800b982:	9302      	strls	r3, [sp, #8]
 800b984:	680b      	ldr	r3, [r1, #0]
 800b986:	468b      	mov	fp, r1
 800b988:	2500      	movs	r5, #0
 800b98a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b98e:	f84b 3b1c 	str.w	r3, [fp], #28
 800b992:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b996:	4680      	mov	r8, r0
 800b998:	460c      	mov	r4, r1
 800b99a:	465e      	mov	r6, fp
 800b99c:	46aa      	mov	sl, r5
 800b99e:	46a9      	mov	r9, r5
 800b9a0:	9501      	str	r5, [sp, #4]
 800b9a2:	68a2      	ldr	r2, [r4, #8]
 800b9a4:	b152      	cbz	r2, 800b9bc <_scanf_float+0x60>
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2b4e      	cmp	r3, #78	; 0x4e
 800b9ac:	d864      	bhi.n	800ba78 <_scanf_float+0x11c>
 800b9ae:	2b40      	cmp	r3, #64	; 0x40
 800b9b0:	d83c      	bhi.n	800ba2c <_scanf_float+0xd0>
 800b9b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b9b6:	b2c8      	uxtb	r0, r1
 800b9b8:	280e      	cmp	r0, #14
 800b9ba:	d93a      	bls.n	800ba32 <_scanf_float+0xd6>
 800b9bc:	f1b9 0f00 	cmp.w	r9, #0
 800b9c0:	d003      	beq.n	800b9ca <_scanf_float+0x6e>
 800b9c2:	6823      	ldr	r3, [r4, #0]
 800b9c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9c8:	6023      	str	r3, [r4, #0]
 800b9ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9ce:	f1ba 0f01 	cmp.w	sl, #1
 800b9d2:	f200 8113 	bhi.w	800bbfc <_scanf_float+0x2a0>
 800b9d6:	455e      	cmp	r6, fp
 800b9d8:	f200 8105 	bhi.w	800bbe6 <_scanf_float+0x28a>
 800b9dc:	2501      	movs	r5, #1
 800b9de:	4628      	mov	r0, r5
 800b9e0:	b007      	add	sp, #28
 800b9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b9ea:	2a0d      	cmp	r2, #13
 800b9ec:	d8e6      	bhi.n	800b9bc <_scanf_float+0x60>
 800b9ee:	a101      	add	r1, pc, #4	; (adr r1, 800b9f4 <_scanf_float+0x98>)
 800b9f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b9f4:	0800bb33 	.word	0x0800bb33
 800b9f8:	0800b9bd 	.word	0x0800b9bd
 800b9fc:	0800b9bd 	.word	0x0800b9bd
 800ba00:	0800b9bd 	.word	0x0800b9bd
 800ba04:	0800bb93 	.word	0x0800bb93
 800ba08:	0800bb6b 	.word	0x0800bb6b
 800ba0c:	0800b9bd 	.word	0x0800b9bd
 800ba10:	0800b9bd 	.word	0x0800b9bd
 800ba14:	0800bb41 	.word	0x0800bb41
 800ba18:	0800b9bd 	.word	0x0800b9bd
 800ba1c:	0800b9bd 	.word	0x0800b9bd
 800ba20:	0800b9bd 	.word	0x0800b9bd
 800ba24:	0800b9bd 	.word	0x0800b9bd
 800ba28:	0800baf9 	.word	0x0800baf9
 800ba2c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ba30:	e7db      	b.n	800b9ea <_scanf_float+0x8e>
 800ba32:	290e      	cmp	r1, #14
 800ba34:	d8c2      	bhi.n	800b9bc <_scanf_float+0x60>
 800ba36:	a001      	add	r0, pc, #4	; (adr r0, 800ba3c <_scanf_float+0xe0>)
 800ba38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ba3c:	0800baeb 	.word	0x0800baeb
 800ba40:	0800b9bd 	.word	0x0800b9bd
 800ba44:	0800baeb 	.word	0x0800baeb
 800ba48:	0800bb7f 	.word	0x0800bb7f
 800ba4c:	0800b9bd 	.word	0x0800b9bd
 800ba50:	0800ba99 	.word	0x0800ba99
 800ba54:	0800bad5 	.word	0x0800bad5
 800ba58:	0800bad5 	.word	0x0800bad5
 800ba5c:	0800bad5 	.word	0x0800bad5
 800ba60:	0800bad5 	.word	0x0800bad5
 800ba64:	0800bad5 	.word	0x0800bad5
 800ba68:	0800bad5 	.word	0x0800bad5
 800ba6c:	0800bad5 	.word	0x0800bad5
 800ba70:	0800bad5 	.word	0x0800bad5
 800ba74:	0800bad5 	.word	0x0800bad5
 800ba78:	2b6e      	cmp	r3, #110	; 0x6e
 800ba7a:	d809      	bhi.n	800ba90 <_scanf_float+0x134>
 800ba7c:	2b60      	cmp	r3, #96	; 0x60
 800ba7e:	d8b2      	bhi.n	800b9e6 <_scanf_float+0x8a>
 800ba80:	2b54      	cmp	r3, #84	; 0x54
 800ba82:	d077      	beq.n	800bb74 <_scanf_float+0x218>
 800ba84:	2b59      	cmp	r3, #89	; 0x59
 800ba86:	d199      	bne.n	800b9bc <_scanf_float+0x60>
 800ba88:	2d07      	cmp	r5, #7
 800ba8a:	d197      	bne.n	800b9bc <_scanf_float+0x60>
 800ba8c:	2508      	movs	r5, #8
 800ba8e:	e029      	b.n	800bae4 <_scanf_float+0x188>
 800ba90:	2b74      	cmp	r3, #116	; 0x74
 800ba92:	d06f      	beq.n	800bb74 <_scanf_float+0x218>
 800ba94:	2b79      	cmp	r3, #121	; 0x79
 800ba96:	e7f6      	b.n	800ba86 <_scanf_float+0x12a>
 800ba98:	6821      	ldr	r1, [r4, #0]
 800ba9a:	05c8      	lsls	r0, r1, #23
 800ba9c:	d51a      	bpl.n	800bad4 <_scanf_float+0x178>
 800ba9e:	9b02      	ldr	r3, [sp, #8]
 800baa0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800baa4:	6021      	str	r1, [r4, #0]
 800baa6:	f109 0901 	add.w	r9, r9, #1
 800baaa:	b11b      	cbz	r3, 800bab4 <_scanf_float+0x158>
 800baac:	3b01      	subs	r3, #1
 800baae:	3201      	adds	r2, #1
 800bab0:	9302      	str	r3, [sp, #8]
 800bab2:	60a2      	str	r2, [r4, #8]
 800bab4:	68a3      	ldr	r3, [r4, #8]
 800bab6:	3b01      	subs	r3, #1
 800bab8:	60a3      	str	r3, [r4, #8]
 800baba:	6923      	ldr	r3, [r4, #16]
 800babc:	3301      	adds	r3, #1
 800babe:	6123      	str	r3, [r4, #16]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	3b01      	subs	r3, #1
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	607b      	str	r3, [r7, #4]
 800bac8:	f340 8084 	ble.w	800bbd4 <_scanf_float+0x278>
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	3301      	adds	r3, #1
 800bad0:	603b      	str	r3, [r7, #0]
 800bad2:	e766      	b.n	800b9a2 <_scanf_float+0x46>
 800bad4:	eb1a 0f05 	cmn.w	sl, r5
 800bad8:	f47f af70 	bne.w	800b9bc <_scanf_float+0x60>
 800badc:	6822      	ldr	r2, [r4, #0]
 800bade:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bae2:	6022      	str	r2, [r4, #0]
 800bae4:	f806 3b01 	strb.w	r3, [r6], #1
 800bae8:	e7e4      	b.n	800bab4 <_scanf_float+0x158>
 800baea:	6822      	ldr	r2, [r4, #0]
 800baec:	0610      	lsls	r0, r2, #24
 800baee:	f57f af65 	bpl.w	800b9bc <_scanf_float+0x60>
 800baf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800baf6:	e7f4      	b.n	800bae2 <_scanf_float+0x186>
 800baf8:	f1ba 0f00 	cmp.w	sl, #0
 800bafc:	d10e      	bne.n	800bb1c <_scanf_float+0x1c0>
 800bafe:	f1b9 0f00 	cmp.w	r9, #0
 800bb02:	d10e      	bne.n	800bb22 <_scanf_float+0x1c6>
 800bb04:	6822      	ldr	r2, [r4, #0]
 800bb06:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bb0a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bb0e:	d108      	bne.n	800bb22 <_scanf_float+0x1c6>
 800bb10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bb14:	6022      	str	r2, [r4, #0]
 800bb16:	f04f 0a01 	mov.w	sl, #1
 800bb1a:	e7e3      	b.n	800bae4 <_scanf_float+0x188>
 800bb1c:	f1ba 0f02 	cmp.w	sl, #2
 800bb20:	d055      	beq.n	800bbce <_scanf_float+0x272>
 800bb22:	2d01      	cmp	r5, #1
 800bb24:	d002      	beq.n	800bb2c <_scanf_float+0x1d0>
 800bb26:	2d04      	cmp	r5, #4
 800bb28:	f47f af48 	bne.w	800b9bc <_scanf_float+0x60>
 800bb2c:	3501      	adds	r5, #1
 800bb2e:	b2ed      	uxtb	r5, r5
 800bb30:	e7d8      	b.n	800bae4 <_scanf_float+0x188>
 800bb32:	f1ba 0f01 	cmp.w	sl, #1
 800bb36:	f47f af41 	bne.w	800b9bc <_scanf_float+0x60>
 800bb3a:	f04f 0a02 	mov.w	sl, #2
 800bb3e:	e7d1      	b.n	800bae4 <_scanf_float+0x188>
 800bb40:	b97d      	cbnz	r5, 800bb62 <_scanf_float+0x206>
 800bb42:	f1b9 0f00 	cmp.w	r9, #0
 800bb46:	f47f af3c 	bne.w	800b9c2 <_scanf_float+0x66>
 800bb4a:	6822      	ldr	r2, [r4, #0]
 800bb4c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bb50:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bb54:	f47f af39 	bne.w	800b9ca <_scanf_float+0x6e>
 800bb58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bb5c:	6022      	str	r2, [r4, #0]
 800bb5e:	2501      	movs	r5, #1
 800bb60:	e7c0      	b.n	800bae4 <_scanf_float+0x188>
 800bb62:	2d03      	cmp	r5, #3
 800bb64:	d0e2      	beq.n	800bb2c <_scanf_float+0x1d0>
 800bb66:	2d05      	cmp	r5, #5
 800bb68:	e7de      	b.n	800bb28 <_scanf_float+0x1cc>
 800bb6a:	2d02      	cmp	r5, #2
 800bb6c:	f47f af26 	bne.w	800b9bc <_scanf_float+0x60>
 800bb70:	2503      	movs	r5, #3
 800bb72:	e7b7      	b.n	800bae4 <_scanf_float+0x188>
 800bb74:	2d06      	cmp	r5, #6
 800bb76:	f47f af21 	bne.w	800b9bc <_scanf_float+0x60>
 800bb7a:	2507      	movs	r5, #7
 800bb7c:	e7b2      	b.n	800bae4 <_scanf_float+0x188>
 800bb7e:	6822      	ldr	r2, [r4, #0]
 800bb80:	0591      	lsls	r1, r2, #22
 800bb82:	f57f af1b 	bpl.w	800b9bc <_scanf_float+0x60>
 800bb86:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bb8a:	6022      	str	r2, [r4, #0]
 800bb8c:	f8cd 9004 	str.w	r9, [sp, #4]
 800bb90:	e7a8      	b.n	800bae4 <_scanf_float+0x188>
 800bb92:	6822      	ldr	r2, [r4, #0]
 800bb94:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bb98:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bb9c:	d006      	beq.n	800bbac <_scanf_float+0x250>
 800bb9e:	0550      	lsls	r0, r2, #21
 800bba0:	f57f af0c 	bpl.w	800b9bc <_scanf_float+0x60>
 800bba4:	f1b9 0f00 	cmp.w	r9, #0
 800bba8:	f43f af0f 	beq.w	800b9ca <_scanf_float+0x6e>
 800bbac:	0591      	lsls	r1, r2, #22
 800bbae:	bf58      	it	pl
 800bbb0:	9901      	ldrpl	r1, [sp, #4]
 800bbb2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bbb6:	bf58      	it	pl
 800bbb8:	eba9 0101 	subpl.w	r1, r9, r1
 800bbbc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bbc0:	bf58      	it	pl
 800bbc2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bbc6:	6022      	str	r2, [r4, #0]
 800bbc8:	f04f 0900 	mov.w	r9, #0
 800bbcc:	e78a      	b.n	800bae4 <_scanf_float+0x188>
 800bbce:	f04f 0a03 	mov.w	sl, #3
 800bbd2:	e787      	b.n	800bae4 <_scanf_float+0x188>
 800bbd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bbd8:	4639      	mov	r1, r7
 800bbda:	4640      	mov	r0, r8
 800bbdc:	4798      	blx	r3
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	f43f aedf 	beq.w	800b9a2 <_scanf_float+0x46>
 800bbe4:	e6ea      	b.n	800b9bc <_scanf_float+0x60>
 800bbe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bbea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bbee:	463a      	mov	r2, r7
 800bbf0:	4640      	mov	r0, r8
 800bbf2:	4798      	blx	r3
 800bbf4:	6923      	ldr	r3, [r4, #16]
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	6123      	str	r3, [r4, #16]
 800bbfa:	e6ec      	b.n	800b9d6 <_scanf_float+0x7a>
 800bbfc:	1e6b      	subs	r3, r5, #1
 800bbfe:	2b06      	cmp	r3, #6
 800bc00:	d825      	bhi.n	800bc4e <_scanf_float+0x2f2>
 800bc02:	2d02      	cmp	r5, #2
 800bc04:	d836      	bhi.n	800bc74 <_scanf_float+0x318>
 800bc06:	455e      	cmp	r6, fp
 800bc08:	f67f aee8 	bls.w	800b9dc <_scanf_float+0x80>
 800bc0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc10:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc14:	463a      	mov	r2, r7
 800bc16:	4640      	mov	r0, r8
 800bc18:	4798      	blx	r3
 800bc1a:	6923      	ldr	r3, [r4, #16]
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	6123      	str	r3, [r4, #16]
 800bc20:	e7f1      	b.n	800bc06 <_scanf_float+0x2aa>
 800bc22:	9802      	ldr	r0, [sp, #8]
 800bc24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc28:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bc2c:	9002      	str	r0, [sp, #8]
 800bc2e:	463a      	mov	r2, r7
 800bc30:	4640      	mov	r0, r8
 800bc32:	4798      	blx	r3
 800bc34:	6923      	ldr	r3, [r4, #16]
 800bc36:	3b01      	subs	r3, #1
 800bc38:	6123      	str	r3, [r4, #16]
 800bc3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc3e:	fa5f fa8a 	uxtb.w	sl, sl
 800bc42:	f1ba 0f02 	cmp.w	sl, #2
 800bc46:	d1ec      	bne.n	800bc22 <_scanf_float+0x2c6>
 800bc48:	3d03      	subs	r5, #3
 800bc4a:	b2ed      	uxtb	r5, r5
 800bc4c:	1b76      	subs	r6, r6, r5
 800bc4e:	6823      	ldr	r3, [r4, #0]
 800bc50:	05da      	lsls	r2, r3, #23
 800bc52:	d52f      	bpl.n	800bcb4 <_scanf_float+0x358>
 800bc54:	055b      	lsls	r3, r3, #21
 800bc56:	d510      	bpl.n	800bc7a <_scanf_float+0x31e>
 800bc58:	455e      	cmp	r6, fp
 800bc5a:	f67f aebf 	bls.w	800b9dc <_scanf_float+0x80>
 800bc5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc66:	463a      	mov	r2, r7
 800bc68:	4640      	mov	r0, r8
 800bc6a:	4798      	blx	r3
 800bc6c:	6923      	ldr	r3, [r4, #16]
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	6123      	str	r3, [r4, #16]
 800bc72:	e7f1      	b.n	800bc58 <_scanf_float+0x2fc>
 800bc74:	46aa      	mov	sl, r5
 800bc76:	9602      	str	r6, [sp, #8]
 800bc78:	e7df      	b.n	800bc3a <_scanf_float+0x2de>
 800bc7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bc7e:	6923      	ldr	r3, [r4, #16]
 800bc80:	2965      	cmp	r1, #101	; 0x65
 800bc82:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc86:	f106 35ff 	add.w	r5, r6, #4294967295
 800bc8a:	6123      	str	r3, [r4, #16]
 800bc8c:	d00c      	beq.n	800bca8 <_scanf_float+0x34c>
 800bc8e:	2945      	cmp	r1, #69	; 0x45
 800bc90:	d00a      	beq.n	800bca8 <_scanf_float+0x34c>
 800bc92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc96:	463a      	mov	r2, r7
 800bc98:	4640      	mov	r0, r8
 800bc9a:	4798      	blx	r3
 800bc9c:	6923      	ldr	r3, [r4, #16]
 800bc9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bca2:	3b01      	subs	r3, #1
 800bca4:	1eb5      	subs	r5, r6, #2
 800bca6:	6123      	str	r3, [r4, #16]
 800bca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bcac:	463a      	mov	r2, r7
 800bcae:	4640      	mov	r0, r8
 800bcb0:	4798      	blx	r3
 800bcb2:	462e      	mov	r6, r5
 800bcb4:	6825      	ldr	r5, [r4, #0]
 800bcb6:	f015 0510 	ands.w	r5, r5, #16
 800bcba:	d14d      	bne.n	800bd58 <_scanf_float+0x3fc>
 800bcbc:	7035      	strb	r5, [r6, #0]
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bcc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcc8:	d11a      	bne.n	800bd00 <_scanf_float+0x3a4>
 800bcca:	9b01      	ldr	r3, [sp, #4]
 800bccc:	454b      	cmp	r3, r9
 800bcce:	eba3 0209 	sub.w	r2, r3, r9
 800bcd2:	d122      	bne.n	800bd1a <_scanf_float+0x3be>
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	4659      	mov	r1, fp
 800bcd8:	4640      	mov	r0, r8
 800bcda:	f000 ffbb 	bl	800cc54 <_strtod_r>
 800bcde:	9b03      	ldr	r3, [sp, #12]
 800bce0:	6821      	ldr	r1, [r4, #0]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f011 0f02 	tst.w	r1, #2
 800bce8:	f103 0204 	add.w	r2, r3, #4
 800bcec:	d020      	beq.n	800bd30 <_scanf_float+0x3d4>
 800bcee:	9903      	ldr	r1, [sp, #12]
 800bcf0:	600a      	str	r2, [r1, #0]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	ed83 0b00 	vstr	d0, [r3]
 800bcf8:	68e3      	ldr	r3, [r4, #12]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	60e3      	str	r3, [r4, #12]
 800bcfe:	e66e      	b.n	800b9de <_scanf_float+0x82>
 800bd00:	9b04      	ldr	r3, [sp, #16]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d0e6      	beq.n	800bcd4 <_scanf_float+0x378>
 800bd06:	9905      	ldr	r1, [sp, #20]
 800bd08:	230a      	movs	r3, #10
 800bd0a:	462a      	mov	r2, r5
 800bd0c:	3101      	adds	r1, #1
 800bd0e:	4640      	mov	r0, r8
 800bd10:	f001 f82a 	bl	800cd68 <_strtol_r>
 800bd14:	9b04      	ldr	r3, [sp, #16]
 800bd16:	9e05      	ldr	r6, [sp, #20]
 800bd18:	1ac2      	subs	r2, r0, r3
 800bd1a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bd1e:	429e      	cmp	r6, r3
 800bd20:	bf28      	it	cs
 800bd22:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bd26:	490d      	ldr	r1, [pc, #52]	; (800bd5c <_scanf_float+0x400>)
 800bd28:	4630      	mov	r0, r6
 800bd2a:	f000 f93f 	bl	800bfac <siprintf>
 800bd2e:	e7d1      	b.n	800bcd4 <_scanf_float+0x378>
 800bd30:	f011 0f04 	tst.w	r1, #4
 800bd34:	9903      	ldr	r1, [sp, #12]
 800bd36:	600a      	str	r2, [r1, #0]
 800bd38:	d1db      	bne.n	800bcf2 <_scanf_float+0x396>
 800bd3a:	eeb4 0b40 	vcmp.f64	d0, d0
 800bd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd42:	681e      	ldr	r6, [r3, #0]
 800bd44:	d705      	bvc.n	800bd52 <_scanf_float+0x3f6>
 800bd46:	4806      	ldr	r0, [pc, #24]	; (800bd60 <_scanf_float+0x404>)
 800bd48:	f000 f92a 	bl	800bfa0 <nanf>
 800bd4c:	ed86 0a00 	vstr	s0, [r6]
 800bd50:	e7d2      	b.n	800bcf8 <_scanf_float+0x39c>
 800bd52:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bd56:	e7f9      	b.n	800bd4c <_scanf_float+0x3f0>
 800bd58:	2500      	movs	r5, #0
 800bd5a:	e640      	b.n	800b9de <_scanf_float+0x82>
 800bd5c:	0800fc30 	.word	0x0800fc30
 800bd60:	0800ff48 	.word	0x0800ff48

0800bd64 <iprintf>:
 800bd64:	b40f      	push	{r0, r1, r2, r3}
 800bd66:	4b0a      	ldr	r3, [pc, #40]	; (800bd90 <iprintf+0x2c>)
 800bd68:	b513      	push	{r0, r1, r4, lr}
 800bd6a:	681c      	ldr	r4, [r3, #0]
 800bd6c:	b124      	cbz	r4, 800bd78 <iprintf+0x14>
 800bd6e:	69a3      	ldr	r3, [r4, #24]
 800bd70:	b913      	cbnz	r3, 800bd78 <iprintf+0x14>
 800bd72:	4620      	mov	r0, r4
 800bd74:	f7ff f820 	bl	800adb8 <__sinit>
 800bd78:	ab05      	add	r3, sp, #20
 800bd7a:	9a04      	ldr	r2, [sp, #16]
 800bd7c:	68a1      	ldr	r1, [r4, #8]
 800bd7e:	9301      	str	r3, [sp, #4]
 800bd80:	4620      	mov	r0, r4
 800bd82:	f003 f9fd 	bl	800f180 <_vfiprintf_r>
 800bd86:	b002      	add	sp, #8
 800bd88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd8c:	b004      	add	sp, #16
 800bd8e:	4770      	bx	lr
 800bd90:	20000070 	.word	0x20000070

0800bd94 <putchar>:
 800bd94:	4b09      	ldr	r3, [pc, #36]	; (800bdbc <putchar+0x28>)
 800bd96:	b513      	push	{r0, r1, r4, lr}
 800bd98:	681c      	ldr	r4, [r3, #0]
 800bd9a:	4601      	mov	r1, r0
 800bd9c:	b134      	cbz	r4, 800bdac <putchar+0x18>
 800bd9e:	69a3      	ldr	r3, [r4, #24]
 800bda0:	b923      	cbnz	r3, 800bdac <putchar+0x18>
 800bda2:	9001      	str	r0, [sp, #4]
 800bda4:	4620      	mov	r0, r4
 800bda6:	f7ff f807 	bl	800adb8 <__sinit>
 800bdaa:	9901      	ldr	r1, [sp, #4]
 800bdac:	68a2      	ldr	r2, [r4, #8]
 800bdae:	4620      	mov	r0, r4
 800bdb0:	b002      	add	sp, #8
 800bdb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdb6:	f003 bb13 	b.w	800f3e0 <_putc_r>
 800bdba:	bf00      	nop
 800bdbc:	20000070 	.word	0x20000070

0800bdc0 <_puts_r>:
 800bdc0:	b570      	push	{r4, r5, r6, lr}
 800bdc2:	460e      	mov	r6, r1
 800bdc4:	4605      	mov	r5, r0
 800bdc6:	b118      	cbz	r0, 800bdd0 <_puts_r+0x10>
 800bdc8:	6983      	ldr	r3, [r0, #24]
 800bdca:	b90b      	cbnz	r3, 800bdd0 <_puts_r+0x10>
 800bdcc:	f7fe fff4 	bl	800adb8 <__sinit>
 800bdd0:	69ab      	ldr	r3, [r5, #24]
 800bdd2:	68ac      	ldr	r4, [r5, #8]
 800bdd4:	b913      	cbnz	r3, 800bddc <_puts_r+0x1c>
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	f7fe ffee 	bl	800adb8 <__sinit>
 800bddc:	4b2c      	ldr	r3, [pc, #176]	; (800be90 <_puts_r+0xd0>)
 800bdde:	429c      	cmp	r4, r3
 800bde0:	d120      	bne.n	800be24 <_puts_r+0x64>
 800bde2:	686c      	ldr	r4, [r5, #4]
 800bde4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bde6:	07db      	lsls	r3, r3, #31
 800bde8:	d405      	bmi.n	800bdf6 <_puts_r+0x36>
 800bdea:	89a3      	ldrh	r3, [r4, #12]
 800bdec:	0598      	lsls	r0, r3, #22
 800bdee:	d402      	bmi.n	800bdf6 <_puts_r+0x36>
 800bdf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdf2:	f7ff f8a4 	bl	800af3e <__retarget_lock_acquire_recursive>
 800bdf6:	89a3      	ldrh	r3, [r4, #12]
 800bdf8:	0719      	lsls	r1, r3, #28
 800bdfa:	d51d      	bpl.n	800be38 <_puts_r+0x78>
 800bdfc:	6923      	ldr	r3, [r4, #16]
 800bdfe:	b1db      	cbz	r3, 800be38 <_puts_r+0x78>
 800be00:	3e01      	subs	r6, #1
 800be02:	68a3      	ldr	r3, [r4, #8]
 800be04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800be08:	3b01      	subs	r3, #1
 800be0a:	60a3      	str	r3, [r4, #8]
 800be0c:	bb39      	cbnz	r1, 800be5e <_puts_r+0x9e>
 800be0e:	2b00      	cmp	r3, #0
 800be10:	da38      	bge.n	800be84 <_puts_r+0xc4>
 800be12:	4622      	mov	r2, r4
 800be14:	210a      	movs	r1, #10
 800be16:	4628      	mov	r0, r5
 800be18:	f000 ffa8 	bl	800cd6c <__swbuf_r>
 800be1c:	3001      	adds	r0, #1
 800be1e:	d011      	beq.n	800be44 <_puts_r+0x84>
 800be20:	250a      	movs	r5, #10
 800be22:	e011      	b.n	800be48 <_puts_r+0x88>
 800be24:	4b1b      	ldr	r3, [pc, #108]	; (800be94 <_puts_r+0xd4>)
 800be26:	429c      	cmp	r4, r3
 800be28:	d101      	bne.n	800be2e <_puts_r+0x6e>
 800be2a:	68ac      	ldr	r4, [r5, #8]
 800be2c:	e7da      	b.n	800bde4 <_puts_r+0x24>
 800be2e:	4b1a      	ldr	r3, [pc, #104]	; (800be98 <_puts_r+0xd8>)
 800be30:	429c      	cmp	r4, r3
 800be32:	bf08      	it	eq
 800be34:	68ec      	ldreq	r4, [r5, #12]
 800be36:	e7d5      	b.n	800bde4 <_puts_r+0x24>
 800be38:	4621      	mov	r1, r4
 800be3a:	4628      	mov	r0, r5
 800be3c:	f000 fffa 	bl	800ce34 <__swsetup_r>
 800be40:	2800      	cmp	r0, #0
 800be42:	d0dd      	beq.n	800be00 <_puts_r+0x40>
 800be44:	f04f 35ff 	mov.w	r5, #4294967295
 800be48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be4a:	07da      	lsls	r2, r3, #31
 800be4c:	d405      	bmi.n	800be5a <_puts_r+0x9a>
 800be4e:	89a3      	ldrh	r3, [r4, #12]
 800be50:	059b      	lsls	r3, r3, #22
 800be52:	d402      	bmi.n	800be5a <_puts_r+0x9a>
 800be54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be56:	f7ff f873 	bl	800af40 <__retarget_lock_release_recursive>
 800be5a:	4628      	mov	r0, r5
 800be5c:	bd70      	pop	{r4, r5, r6, pc}
 800be5e:	2b00      	cmp	r3, #0
 800be60:	da04      	bge.n	800be6c <_puts_r+0xac>
 800be62:	69a2      	ldr	r2, [r4, #24]
 800be64:	429a      	cmp	r2, r3
 800be66:	dc06      	bgt.n	800be76 <_puts_r+0xb6>
 800be68:	290a      	cmp	r1, #10
 800be6a:	d004      	beq.n	800be76 <_puts_r+0xb6>
 800be6c:	6823      	ldr	r3, [r4, #0]
 800be6e:	1c5a      	adds	r2, r3, #1
 800be70:	6022      	str	r2, [r4, #0]
 800be72:	7019      	strb	r1, [r3, #0]
 800be74:	e7c5      	b.n	800be02 <_puts_r+0x42>
 800be76:	4622      	mov	r2, r4
 800be78:	4628      	mov	r0, r5
 800be7a:	f000 ff77 	bl	800cd6c <__swbuf_r>
 800be7e:	3001      	adds	r0, #1
 800be80:	d1bf      	bne.n	800be02 <_puts_r+0x42>
 800be82:	e7df      	b.n	800be44 <_puts_r+0x84>
 800be84:	6823      	ldr	r3, [r4, #0]
 800be86:	250a      	movs	r5, #10
 800be88:	1c5a      	adds	r2, r3, #1
 800be8a:	6022      	str	r2, [r4, #0]
 800be8c:	701d      	strb	r5, [r3, #0]
 800be8e:	e7db      	b.n	800be48 <_puts_r+0x88>
 800be90:	0800fbb8 	.word	0x0800fbb8
 800be94:	0800fbd8 	.word	0x0800fbd8
 800be98:	0800fb98 	.word	0x0800fb98

0800be9c <puts>:
 800be9c:	4b02      	ldr	r3, [pc, #8]	; (800bea8 <puts+0xc>)
 800be9e:	4601      	mov	r1, r0
 800bea0:	6818      	ldr	r0, [r3, #0]
 800bea2:	f7ff bf8d 	b.w	800bdc0 <_puts_r>
 800bea6:	bf00      	nop
 800bea8:	20000070 	.word	0x20000070

0800beac <cleanup_glue>:
 800beac:	b538      	push	{r3, r4, r5, lr}
 800beae:	460c      	mov	r4, r1
 800beb0:	6809      	ldr	r1, [r1, #0]
 800beb2:	4605      	mov	r5, r0
 800beb4:	b109      	cbz	r1, 800beba <cleanup_glue+0xe>
 800beb6:	f7ff fff9 	bl	800beac <cleanup_glue>
 800beba:	4621      	mov	r1, r4
 800bebc:	4628      	mov	r0, r5
 800bebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bec2:	f7ff b85d 	b.w	800af80 <_free_r>
	...

0800bec8 <_reclaim_reent>:
 800bec8:	4b2c      	ldr	r3, [pc, #176]	; (800bf7c <_reclaim_reent+0xb4>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4283      	cmp	r3, r0
 800bece:	b570      	push	{r4, r5, r6, lr}
 800bed0:	4604      	mov	r4, r0
 800bed2:	d051      	beq.n	800bf78 <_reclaim_reent+0xb0>
 800bed4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bed6:	b143      	cbz	r3, 800beea <_reclaim_reent+0x22>
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d14a      	bne.n	800bf74 <_reclaim_reent+0xac>
 800bede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bee0:	6819      	ldr	r1, [r3, #0]
 800bee2:	b111      	cbz	r1, 800beea <_reclaim_reent+0x22>
 800bee4:	4620      	mov	r0, r4
 800bee6:	f7ff f84b 	bl	800af80 <_free_r>
 800beea:	6961      	ldr	r1, [r4, #20]
 800beec:	b111      	cbz	r1, 800bef4 <_reclaim_reent+0x2c>
 800beee:	4620      	mov	r0, r4
 800bef0:	f7ff f846 	bl	800af80 <_free_r>
 800bef4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bef6:	b111      	cbz	r1, 800befe <_reclaim_reent+0x36>
 800bef8:	4620      	mov	r0, r4
 800befa:	f7ff f841 	bl	800af80 <_free_r>
 800befe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bf00:	b111      	cbz	r1, 800bf08 <_reclaim_reent+0x40>
 800bf02:	4620      	mov	r0, r4
 800bf04:	f7ff f83c 	bl	800af80 <_free_r>
 800bf08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bf0a:	b111      	cbz	r1, 800bf12 <_reclaim_reent+0x4a>
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f7ff f837 	bl	800af80 <_free_r>
 800bf12:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bf14:	b111      	cbz	r1, 800bf1c <_reclaim_reent+0x54>
 800bf16:	4620      	mov	r0, r4
 800bf18:	f7ff f832 	bl	800af80 <_free_r>
 800bf1c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bf1e:	b111      	cbz	r1, 800bf26 <_reclaim_reent+0x5e>
 800bf20:	4620      	mov	r0, r4
 800bf22:	f7ff f82d 	bl	800af80 <_free_r>
 800bf26:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bf28:	b111      	cbz	r1, 800bf30 <_reclaim_reent+0x68>
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f7ff f828 	bl	800af80 <_free_r>
 800bf30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf32:	b111      	cbz	r1, 800bf3a <_reclaim_reent+0x72>
 800bf34:	4620      	mov	r0, r4
 800bf36:	f7ff f823 	bl	800af80 <_free_r>
 800bf3a:	69a3      	ldr	r3, [r4, #24]
 800bf3c:	b1e3      	cbz	r3, 800bf78 <_reclaim_reent+0xb0>
 800bf3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bf40:	4620      	mov	r0, r4
 800bf42:	4798      	blx	r3
 800bf44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bf46:	b1b9      	cbz	r1, 800bf78 <_reclaim_reent+0xb0>
 800bf48:	4620      	mov	r0, r4
 800bf4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf4e:	f7ff bfad 	b.w	800beac <cleanup_glue>
 800bf52:	5949      	ldr	r1, [r1, r5]
 800bf54:	b941      	cbnz	r1, 800bf68 <_reclaim_reent+0xa0>
 800bf56:	3504      	adds	r5, #4
 800bf58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf5a:	2d80      	cmp	r5, #128	; 0x80
 800bf5c:	68d9      	ldr	r1, [r3, #12]
 800bf5e:	d1f8      	bne.n	800bf52 <_reclaim_reent+0x8a>
 800bf60:	4620      	mov	r0, r4
 800bf62:	f7ff f80d 	bl	800af80 <_free_r>
 800bf66:	e7ba      	b.n	800bede <_reclaim_reent+0x16>
 800bf68:	680e      	ldr	r6, [r1, #0]
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f7ff f808 	bl	800af80 <_free_r>
 800bf70:	4631      	mov	r1, r6
 800bf72:	e7ef      	b.n	800bf54 <_reclaim_reent+0x8c>
 800bf74:	2500      	movs	r5, #0
 800bf76:	e7ef      	b.n	800bf58 <_reclaim_reent+0x90>
 800bf78:	bd70      	pop	{r4, r5, r6, pc}
 800bf7a:	bf00      	nop
 800bf7c:	20000070 	.word	0x20000070

0800bf80 <_sbrk_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	4d06      	ldr	r5, [pc, #24]	; (800bf9c <_sbrk_r+0x1c>)
 800bf84:	2300      	movs	r3, #0
 800bf86:	4604      	mov	r4, r0
 800bf88:	4608      	mov	r0, r1
 800bf8a:	602b      	str	r3, [r5, #0]
 800bf8c:	f7f6 fab6 	bl	80024fc <_sbrk>
 800bf90:	1c43      	adds	r3, r0, #1
 800bf92:	d102      	bne.n	800bf9a <_sbrk_r+0x1a>
 800bf94:	682b      	ldr	r3, [r5, #0]
 800bf96:	b103      	cbz	r3, 800bf9a <_sbrk_r+0x1a>
 800bf98:	6023      	str	r3, [r4, #0]
 800bf9a:	bd38      	pop	{r3, r4, r5, pc}
 800bf9c:	2000505c 	.word	0x2000505c

0800bfa0 <nanf>:
 800bfa0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bfa8 <nanf+0x8>
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	7fc00000 	.word	0x7fc00000

0800bfac <siprintf>:
 800bfac:	b40e      	push	{r1, r2, r3}
 800bfae:	b500      	push	{lr}
 800bfb0:	b09c      	sub	sp, #112	; 0x70
 800bfb2:	ab1d      	add	r3, sp, #116	; 0x74
 800bfb4:	9002      	str	r0, [sp, #8]
 800bfb6:	9006      	str	r0, [sp, #24]
 800bfb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bfbc:	4809      	ldr	r0, [pc, #36]	; (800bfe4 <siprintf+0x38>)
 800bfbe:	9107      	str	r1, [sp, #28]
 800bfc0:	9104      	str	r1, [sp, #16]
 800bfc2:	4909      	ldr	r1, [pc, #36]	; (800bfe8 <siprintf+0x3c>)
 800bfc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfc8:	9105      	str	r1, [sp, #20]
 800bfca:	6800      	ldr	r0, [r0, #0]
 800bfcc:	9301      	str	r3, [sp, #4]
 800bfce:	a902      	add	r1, sp, #8
 800bfd0:	f002 ffac 	bl	800ef2c <_svfiprintf_r>
 800bfd4:	9b02      	ldr	r3, [sp, #8]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	701a      	strb	r2, [r3, #0]
 800bfda:	b01c      	add	sp, #112	; 0x70
 800bfdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfe0:	b003      	add	sp, #12
 800bfe2:	4770      	bx	lr
 800bfe4:	20000070 	.word	0x20000070
 800bfe8:	ffff0208 	.word	0xffff0208

0800bfec <__sread>:
 800bfec:	b510      	push	{r4, lr}
 800bfee:	460c      	mov	r4, r1
 800bff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff4:	f003 fa3c 	bl	800f470 <_read_r>
 800bff8:	2800      	cmp	r0, #0
 800bffa:	bfab      	itete	ge
 800bffc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bffe:	89a3      	ldrhlt	r3, [r4, #12]
 800c000:	181b      	addge	r3, r3, r0
 800c002:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c006:	bfac      	ite	ge
 800c008:	6563      	strge	r3, [r4, #84]	; 0x54
 800c00a:	81a3      	strhlt	r3, [r4, #12]
 800c00c:	bd10      	pop	{r4, pc}

0800c00e <__swrite>:
 800c00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c012:	461f      	mov	r7, r3
 800c014:	898b      	ldrh	r3, [r1, #12]
 800c016:	05db      	lsls	r3, r3, #23
 800c018:	4605      	mov	r5, r0
 800c01a:	460c      	mov	r4, r1
 800c01c:	4616      	mov	r6, r2
 800c01e:	d505      	bpl.n	800c02c <__swrite+0x1e>
 800c020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c024:	2302      	movs	r3, #2
 800c026:	2200      	movs	r2, #0
 800c028:	f002 f9c6 	bl	800e3b8 <_lseek_r>
 800c02c:	89a3      	ldrh	r3, [r4, #12]
 800c02e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c032:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c036:	81a3      	strh	r3, [r4, #12]
 800c038:	4632      	mov	r2, r6
 800c03a:	463b      	mov	r3, r7
 800c03c:	4628      	mov	r0, r5
 800c03e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c042:	f000 bee5 	b.w	800ce10 <_write_r>

0800c046 <__sseek>:
 800c046:	b510      	push	{r4, lr}
 800c048:	460c      	mov	r4, r1
 800c04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c04e:	f002 f9b3 	bl	800e3b8 <_lseek_r>
 800c052:	1c43      	adds	r3, r0, #1
 800c054:	89a3      	ldrh	r3, [r4, #12]
 800c056:	bf15      	itete	ne
 800c058:	6560      	strne	r0, [r4, #84]	; 0x54
 800c05a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c05e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c062:	81a3      	strheq	r3, [r4, #12]
 800c064:	bf18      	it	ne
 800c066:	81a3      	strhne	r3, [r4, #12]
 800c068:	bd10      	pop	{r4, pc}

0800c06a <__sclose>:
 800c06a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c06e:	f000 bf4f 	b.w	800cf10 <_close_r>

0800c072 <sulp>:
 800c072:	b570      	push	{r4, r5, r6, lr}
 800c074:	4604      	mov	r4, r0
 800c076:	460d      	mov	r5, r1
 800c078:	4616      	mov	r6, r2
 800c07a:	ec45 4b10 	vmov	d0, r4, r5
 800c07e:	f002 fd9b 	bl	800ebb8 <__ulp>
 800c082:	b17e      	cbz	r6, 800c0a4 <sulp+0x32>
 800c084:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c088:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	dd09      	ble.n	800c0a4 <sulp+0x32>
 800c090:	051b      	lsls	r3, r3, #20
 800c092:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800c096:	2000      	movs	r0, #0
 800c098:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800c09c:	ec41 0b17 	vmov	d7, r0, r1
 800c0a0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c0a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c0a8 <_strtod_l>:
 800c0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ac:	ed2d 8b0c 	vpush	{d8-d13}
 800c0b0:	b09d      	sub	sp, #116	; 0x74
 800c0b2:	461f      	mov	r7, r3
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	9318      	str	r3, [sp, #96]	; 0x60
 800c0b8:	4ba6      	ldr	r3, [pc, #664]	; (800c354 <_strtod_l+0x2ac>)
 800c0ba:	9213      	str	r2, [sp, #76]	; 0x4c
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	9308      	str	r3, [sp, #32]
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	468a      	mov	sl, r1
 800c0c6:	f7f4 f8bb 	bl	8000240 <strlen>
 800c0ca:	f04f 0800 	mov.w	r8, #0
 800c0ce:	4605      	mov	r5, r0
 800c0d0:	f04f 0900 	mov.w	r9, #0
 800c0d4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800c0d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0da:	781a      	ldrb	r2, [r3, #0]
 800c0dc:	2a2b      	cmp	r2, #43	; 0x2b
 800c0de:	d04d      	beq.n	800c17c <_strtod_l+0xd4>
 800c0e0:	d83a      	bhi.n	800c158 <_strtod_l+0xb0>
 800c0e2:	2a0d      	cmp	r2, #13
 800c0e4:	d833      	bhi.n	800c14e <_strtod_l+0xa6>
 800c0e6:	2a08      	cmp	r2, #8
 800c0e8:	d833      	bhi.n	800c152 <_strtod_l+0xaa>
 800c0ea:	2a00      	cmp	r2, #0
 800c0ec:	d03d      	beq.n	800c16a <_strtod_l+0xc2>
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c0f4:	7833      	ldrb	r3, [r6, #0]
 800c0f6:	2b30      	cmp	r3, #48	; 0x30
 800c0f8:	f040 80b6 	bne.w	800c268 <_strtod_l+0x1c0>
 800c0fc:	7873      	ldrb	r3, [r6, #1]
 800c0fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c102:	2b58      	cmp	r3, #88	; 0x58
 800c104:	d16d      	bne.n	800c1e2 <_strtod_l+0x13a>
 800c106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c108:	9301      	str	r3, [sp, #4]
 800c10a:	ab18      	add	r3, sp, #96	; 0x60
 800c10c:	9702      	str	r7, [sp, #8]
 800c10e:	9300      	str	r3, [sp, #0]
 800c110:	4a91      	ldr	r2, [pc, #580]	; (800c358 <_strtod_l+0x2b0>)
 800c112:	ab19      	add	r3, sp, #100	; 0x64
 800c114:	a917      	add	r1, sp, #92	; 0x5c
 800c116:	4620      	mov	r0, r4
 800c118:	f001 fe42 	bl	800dda0 <__gethex>
 800c11c:	f010 0507 	ands.w	r5, r0, #7
 800c120:	4607      	mov	r7, r0
 800c122:	d005      	beq.n	800c130 <_strtod_l+0x88>
 800c124:	2d06      	cmp	r5, #6
 800c126:	d12b      	bne.n	800c180 <_strtod_l+0xd8>
 800c128:	3601      	adds	r6, #1
 800c12a:	2300      	movs	r3, #0
 800c12c:	9617      	str	r6, [sp, #92]	; 0x5c
 800c12e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c130:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c132:	2b00      	cmp	r3, #0
 800c134:	f040 856e 	bne.w	800cc14 <_strtod_l+0xb6c>
 800c138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c13a:	b1e3      	cbz	r3, 800c176 <_strtod_l+0xce>
 800c13c:	ec49 8b17 	vmov	d7, r8, r9
 800c140:	eeb1 0b47 	vneg.f64	d0, d7
 800c144:	b01d      	add	sp, #116	; 0x74
 800c146:	ecbd 8b0c 	vpop	{d8-d13}
 800c14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c14e:	2a20      	cmp	r2, #32
 800c150:	d1cd      	bne.n	800c0ee <_strtod_l+0x46>
 800c152:	3301      	adds	r3, #1
 800c154:	9317      	str	r3, [sp, #92]	; 0x5c
 800c156:	e7bf      	b.n	800c0d8 <_strtod_l+0x30>
 800c158:	2a2d      	cmp	r2, #45	; 0x2d
 800c15a:	d1c8      	bne.n	800c0ee <_strtod_l+0x46>
 800c15c:	2201      	movs	r2, #1
 800c15e:	920b      	str	r2, [sp, #44]	; 0x2c
 800c160:	1c5a      	adds	r2, r3, #1
 800c162:	9217      	str	r2, [sp, #92]	; 0x5c
 800c164:	785b      	ldrb	r3, [r3, #1]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d1c3      	bne.n	800c0f2 <_strtod_l+0x4a>
 800c16a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c16c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800c170:	2b00      	cmp	r3, #0
 800c172:	f040 854d 	bne.w	800cc10 <_strtod_l+0xb68>
 800c176:	ec49 8b10 	vmov	d0, r8, r9
 800c17a:	e7e3      	b.n	800c144 <_strtod_l+0x9c>
 800c17c:	2200      	movs	r2, #0
 800c17e:	e7ee      	b.n	800c15e <_strtod_l+0xb6>
 800c180:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c182:	b13a      	cbz	r2, 800c194 <_strtod_l+0xec>
 800c184:	2135      	movs	r1, #53	; 0x35
 800c186:	a81a      	add	r0, sp, #104	; 0x68
 800c188:	f002 fe22 	bl	800edd0 <__copybits>
 800c18c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c18e:	4620      	mov	r0, r4
 800c190:	f002 f9e6 	bl	800e560 <_Bfree>
 800c194:	3d01      	subs	r5, #1
 800c196:	2d05      	cmp	r5, #5
 800c198:	d807      	bhi.n	800c1aa <_strtod_l+0x102>
 800c19a:	e8df f005 	tbb	[pc, r5]
 800c19e:	0b0e      	.short	0x0b0e
 800c1a0:	030e1d18 	.word	0x030e1d18
 800c1a4:	f04f 0900 	mov.w	r9, #0
 800c1a8:	46c8      	mov	r8, r9
 800c1aa:	073b      	lsls	r3, r7, #28
 800c1ac:	d5c0      	bpl.n	800c130 <_strtod_l+0x88>
 800c1ae:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800c1b2:	e7bd      	b.n	800c130 <_strtod_l+0x88>
 800c1b4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 800c1b8:	e7f7      	b.n	800c1aa <_strtod_l+0x102>
 800c1ba:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800c1be:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c1c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c1c4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c1c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c1cc:	e7ed      	b.n	800c1aa <_strtod_l+0x102>
 800c1ce:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800c35c <_strtod_l+0x2b4>
 800c1d2:	f04f 0800 	mov.w	r8, #0
 800c1d6:	e7e8      	b.n	800c1aa <_strtod_l+0x102>
 800c1d8:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c1dc:	f04f 38ff 	mov.w	r8, #4294967295
 800c1e0:	e7e3      	b.n	800c1aa <_strtod_l+0x102>
 800c1e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1e4:	1c5a      	adds	r2, r3, #1
 800c1e6:	9217      	str	r2, [sp, #92]	; 0x5c
 800c1e8:	785b      	ldrb	r3, [r3, #1]
 800c1ea:	2b30      	cmp	r3, #48	; 0x30
 800c1ec:	d0f9      	beq.n	800c1e2 <_strtod_l+0x13a>
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d09e      	beq.n	800c130 <_strtod_l+0x88>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	9306      	str	r3, [sp, #24]
 800c1f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1f8:	930c      	str	r3, [sp, #48]	; 0x30
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	9304      	str	r3, [sp, #16]
 800c1fe:	930a      	str	r3, [sp, #40]	; 0x28
 800c200:	461e      	mov	r6, r3
 800c202:	220a      	movs	r2, #10
 800c204:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c206:	f890 b000 	ldrb.w	fp, [r0]
 800c20a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800c20e:	b2d9      	uxtb	r1, r3
 800c210:	2909      	cmp	r1, #9
 800c212:	d92b      	bls.n	800c26c <_strtod_l+0x1c4>
 800c214:	9908      	ldr	r1, [sp, #32]
 800c216:	462a      	mov	r2, r5
 800c218:	f003 f946 	bl	800f4a8 <strncmp>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	d035      	beq.n	800c28c <_strtod_l+0x1e4>
 800c220:	2000      	movs	r0, #0
 800c222:	465a      	mov	r2, fp
 800c224:	4633      	mov	r3, r6
 800c226:	4683      	mov	fp, r0
 800c228:	4601      	mov	r1, r0
 800c22a:	2a65      	cmp	r2, #101	; 0x65
 800c22c:	d001      	beq.n	800c232 <_strtod_l+0x18a>
 800c22e:	2a45      	cmp	r2, #69	; 0x45
 800c230:	d118      	bne.n	800c264 <_strtod_l+0x1bc>
 800c232:	b91b      	cbnz	r3, 800c23c <_strtod_l+0x194>
 800c234:	9b06      	ldr	r3, [sp, #24]
 800c236:	4303      	orrs	r3, r0
 800c238:	d097      	beq.n	800c16a <_strtod_l+0xc2>
 800c23a:	2300      	movs	r3, #0
 800c23c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 800c240:	f10a 0201 	add.w	r2, sl, #1
 800c244:	9217      	str	r2, [sp, #92]	; 0x5c
 800c246:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800c24a:	2a2b      	cmp	r2, #43	; 0x2b
 800c24c:	d077      	beq.n	800c33e <_strtod_l+0x296>
 800c24e:	2a2d      	cmp	r2, #45	; 0x2d
 800c250:	d07d      	beq.n	800c34e <_strtod_l+0x2a6>
 800c252:	f04f 0e00 	mov.w	lr, #0
 800c256:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800c25a:	2d09      	cmp	r5, #9
 800c25c:	f240 8084 	bls.w	800c368 <_strtod_l+0x2c0>
 800c260:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800c264:	2500      	movs	r5, #0
 800c266:	e09f      	b.n	800c3a8 <_strtod_l+0x300>
 800c268:	2300      	movs	r3, #0
 800c26a:	e7c3      	b.n	800c1f4 <_strtod_l+0x14c>
 800c26c:	2e08      	cmp	r6, #8
 800c26e:	bfd5      	itete	le
 800c270:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800c272:	9904      	ldrgt	r1, [sp, #16]
 800c274:	fb02 3301 	mlale	r3, r2, r1, r3
 800c278:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c27c:	f100 0001 	add.w	r0, r0, #1
 800c280:	bfd4      	ite	le
 800c282:	930a      	strle	r3, [sp, #40]	; 0x28
 800c284:	9304      	strgt	r3, [sp, #16]
 800c286:	3601      	adds	r6, #1
 800c288:	9017      	str	r0, [sp, #92]	; 0x5c
 800c28a:	e7bb      	b.n	800c204 <_strtod_l+0x15c>
 800c28c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c28e:	195a      	adds	r2, r3, r5
 800c290:	9217      	str	r2, [sp, #92]	; 0x5c
 800c292:	5d5a      	ldrb	r2, [r3, r5]
 800c294:	b3ae      	cbz	r6, 800c302 <_strtod_l+0x25a>
 800c296:	4683      	mov	fp, r0
 800c298:	4633      	mov	r3, r6
 800c29a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c29e:	2909      	cmp	r1, #9
 800c2a0:	d912      	bls.n	800c2c8 <_strtod_l+0x220>
 800c2a2:	2101      	movs	r1, #1
 800c2a4:	e7c1      	b.n	800c22a <_strtod_l+0x182>
 800c2a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2a8:	1c5a      	adds	r2, r3, #1
 800c2aa:	9217      	str	r2, [sp, #92]	; 0x5c
 800c2ac:	785a      	ldrb	r2, [r3, #1]
 800c2ae:	3001      	adds	r0, #1
 800c2b0:	2a30      	cmp	r2, #48	; 0x30
 800c2b2:	d0f8      	beq.n	800c2a6 <_strtod_l+0x1fe>
 800c2b4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c2b8:	2b08      	cmp	r3, #8
 800c2ba:	f200 84b0 	bhi.w	800cc1e <_strtod_l+0xb76>
 800c2be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2c0:	930c      	str	r3, [sp, #48]	; 0x30
 800c2c2:	4683      	mov	fp, r0
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	3a30      	subs	r2, #48	; 0x30
 800c2ca:	f100 0101 	add.w	r1, r0, #1
 800c2ce:	d012      	beq.n	800c2f6 <_strtod_l+0x24e>
 800c2d0:	448b      	add	fp, r1
 800c2d2:	eb00 0c03 	add.w	ip, r0, r3
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	250a      	movs	r5, #10
 800c2da:	4561      	cmp	r1, ip
 800c2dc:	d113      	bne.n	800c306 <_strtod_l+0x25e>
 800c2de:	1819      	adds	r1, r3, r0
 800c2e0:	2908      	cmp	r1, #8
 800c2e2:	f103 0301 	add.w	r3, r3, #1
 800c2e6:	4403      	add	r3, r0
 800c2e8:	dc1d      	bgt.n	800c326 <_strtod_l+0x27e>
 800c2ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c2ec:	210a      	movs	r1, #10
 800c2ee:	fb01 2200 	mla	r2, r1, r0, r2
 800c2f2:	920a      	str	r2, [sp, #40]	; 0x28
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c2f8:	1c50      	adds	r0, r2, #1
 800c2fa:	9017      	str	r0, [sp, #92]	; 0x5c
 800c2fc:	7852      	ldrb	r2, [r2, #1]
 800c2fe:	4608      	mov	r0, r1
 800c300:	e7cb      	b.n	800c29a <_strtod_l+0x1f2>
 800c302:	4630      	mov	r0, r6
 800c304:	e7d4      	b.n	800c2b0 <_strtod_l+0x208>
 800c306:	2908      	cmp	r1, #8
 800c308:	dc04      	bgt.n	800c314 <_strtod_l+0x26c>
 800c30a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c30c:	436f      	muls	r7, r5
 800c30e:	970a      	str	r7, [sp, #40]	; 0x28
 800c310:	3101      	adds	r1, #1
 800c312:	e7e2      	b.n	800c2da <_strtod_l+0x232>
 800c314:	f101 0e01 	add.w	lr, r1, #1
 800c318:	f1be 0f10 	cmp.w	lr, #16
 800c31c:	bfde      	ittt	le
 800c31e:	9f04      	ldrle	r7, [sp, #16]
 800c320:	436f      	mulle	r7, r5
 800c322:	9704      	strle	r7, [sp, #16]
 800c324:	e7f4      	b.n	800c310 <_strtod_l+0x268>
 800c326:	2b10      	cmp	r3, #16
 800c328:	bfdf      	itttt	le
 800c32a:	9804      	ldrle	r0, [sp, #16]
 800c32c:	210a      	movle	r1, #10
 800c32e:	fb01 2200 	mlale	r2, r1, r0, r2
 800c332:	9204      	strle	r2, [sp, #16]
 800c334:	e7de      	b.n	800c2f4 <_strtod_l+0x24c>
 800c336:	f04f 0b00 	mov.w	fp, #0
 800c33a:	2101      	movs	r1, #1
 800c33c:	e77a      	b.n	800c234 <_strtod_l+0x18c>
 800c33e:	f04f 0e00 	mov.w	lr, #0
 800c342:	f10a 0202 	add.w	r2, sl, #2
 800c346:	9217      	str	r2, [sp, #92]	; 0x5c
 800c348:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800c34c:	e783      	b.n	800c256 <_strtod_l+0x1ae>
 800c34e:	f04f 0e01 	mov.w	lr, #1
 800c352:	e7f6      	b.n	800c342 <_strtod_l+0x29a>
 800c354:	0800fd88 	.word	0x0800fd88
 800c358:	0800fc38 	.word	0x0800fc38
 800c35c:	7ff00000 	.word	0x7ff00000
 800c360:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c362:	1c55      	adds	r5, r2, #1
 800c364:	9517      	str	r5, [sp, #92]	; 0x5c
 800c366:	7852      	ldrb	r2, [r2, #1]
 800c368:	2a30      	cmp	r2, #48	; 0x30
 800c36a:	d0f9      	beq.n	800c360 <_strtod_l+0x2b8>
 800c36c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800c370:	2d08      	cmp	r5, #8
 800c372:	f63f af77 	bhi.w	800c264 <_strtod_l+0x1bc>
 800c376:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800c37a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c37c:	9208      	str	r2, [sp, #32]
 800c37e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c380:	1c55      	adds	r5, r2, #1
 800c382:	9517      	str	r5, [sp, #92]	; 0x5c
 800c384:	7852      	ldrb	r2, [r2, #1]
 800c386:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800c38a:	2f09      	cmp	r7, #9
 800c38c:	d937      	bls.n	800c3fe <_strtod_l+0x356>
 800c38e:	9f08      	ldr	r7, [sp, #32]
 800c390:	1bed      	subs	r5, r5, r7
 800c392:	2d08      	cmp	r5, #8
 800c394:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c398:	dc02      	bgt.n	800c3a0 <_strtod_l+0x2f8>
 800c39a:	4565      	cmp	r5, ip
 800c39c:	bfa8      	it	ge
 800c39e:	4665      	movge	r5, ip
 800c3a0:	f1be 0f00 	cmp.w	lr, #0
 800c3a4:	d000      	beq.n	800c3a8 <_strtod_l+0x300>
 800c3a6:	426d      	negs	r5, r5
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d14f      	bne.n	800c44c <_strtod_l+0x3a4>
 800c3ac:	9b06      	ldr	r3, [sp, #24]
 800c3ae:	4303      	orrs	r3, r0
 800c3b0:	f47f aebe 	bne.w	800c130 <_strtod_l+0x88>
 800c3b4:	2900      	cmp	r1, #0
 800c3b6:	f47f aed8 	bne.w	800c16a <_strtod_l+0xc2>
 800c3ba:	2a69      	cmp	r2, #105	; 0x69
 800c3bc:	d027      	beq.n	800c40e <_strtod_l+0x366>
 800c3be:	dc24      	bgt.n	800c40a <_strtod_l+0x362>
 800c3c0:	2a49      	cmp	r2, #73	; 0x49
 800c3c2:	d024      	beq.n	800c40e <_strtod_l+0x366>
 800c3c4:	2a4e      	cmp	r2, #78	; 0x4e
 800c3c6:	f47f aed0 	bne.w	800c16a <_strtod_l+0xc2>
 800c3ca:	499b      	ldr	r1, [pc, #620]	; (800c638 <_strtod_l+0x590>)
 800c3cc:	a817      	add	r0, sp, #92	; 0x5c
 800c3ce:	f001 ff3f 	bl	800e250 <__match>
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	f43f aec9 	beq.w	800c16a <_strtod_l+0xc2>
 800c3d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	2b28      	cmp	r3, #40	; 0x28
 800c3de:	d12d      	bne.n	800c43c <_strtod_l+0x394>
 800c3e0:	4996      	ldr	r1, [pc, #600]	; (800c63c <_strtod_l+0x594>)
 800c3e2:	aa1a      	add	r2, sp, #104	; 0x68
 800c3e4:	a817      	add	r0, sp, #92	; 0x5c
 800c3e6:	f001 ff47 	bl	800e278 <__hexnan>
 800c3ea:	2805      	cmp	r0, #5
 800c3ec:	d126      	bne.n	800c43c <_strtod_l+0x394>
 800c3ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c3f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c3f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c3fc:	e698      	b.n	800c130 <_strtod_l+0x88>
 800c3fe:	250a      	movs	r5, #10
 800c400:	fb05 250c 	mla	r5, r5, ip, r2
 800c404:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800c408:	e7b9      	b.n	800c37e <_strtod_l+0x2d6>
 800c40a:	2a6e      	cmp	r2, #110	; 0x6e
 800c40c:	e7db      	b.n	800c3c6 <_strtod_l+0x31e>
 800c40e:	498c      	ldr	r1, [pc, #560]	; (800c640 <_strtod_l+0x598>)
 800c410:	a817      	add	r0, sp, #92	; 0x5c
 800c412:	f001 ff1d 	bl	800e250 <__match>
 800c416:	2800      	cmp	r0, #0
 800c418:	f43f aea7 	beq.w	800c16a <_strtod_l+0xc2>
 800c41c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c41e:	4989      	ldr	r1, [pc, #548]	; (800c644 <_strtod_l+0x59c>)
 800c420:	3b01      	subs	r3, #1
 800c422:	a817      	add	r0, sp, #92	; 0x5c
 800c424:	9317      	str	r3, [sp, #92]	; 0x5c
 800c426:	f001 ff13 	bl	800e250 <__match>
 800c42a:	b910      	cbnz	r0, 800c432 <_strtod_l+0x38a>
 800c42c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c42e:	3301      	adds	r3, #1
 800c430:	9317      	str	r3, [sp, #92]	; 0x5c
 800c432:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800c658 <_strtod_l+0x5b0>
 800c436:	f04f 0800 	mov.w	r8, #0
 800c43a:	e679      	b.n	800c130 <_strtod_l+0x88>
 800c43c:	4882      	ldr	r0, [pc, #520]	; (800c648 <_strtod_l+0x5a0>)
 800c43e:	f003 f82b 	bl	800f498 <nan>
 800c442:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c446:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c44a:	e671      	b.n	800c130 <_strtod_l+0x88>
 800c44c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800c450:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c454:	eba5 020b 	sub.w	r2, r5, fp
 800c458:	2e00      	cmp	r6, #0
 800c45a:	bf08      	it	eq
 800c45c:	461e      	moveq	r6, r3
 800c45e:	2b10      	cmp	r3, #16
 800c460:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c464:	9206      	str	r2, [sp, #24]
 800c466:	461a      	mov	r2, r3
 800c468:	bfa8      	it	ge
 800c46a:	2210      	movge	r2, #16
 800c46c:	2b09      	cmp	r3, #9
 800c46e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800c472:	dd0e      	ble.n	800c492 <_strtod_l+0x3ea>
 800c474:	4975      	ldr	r1, [pc, #468]	; (800c64c <_strtod_l+0x5a4>)
 800c476:	eddd 7a04 	vldr	s15, [sp, #16]
 800c47a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c47e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800c482:	ed9d 5b08 	vldr	d5, [sp, #32]
 800c486:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c48a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c48e:	ec59 8b17 	vmov	r8, r9, d7
 800c492:	2b0f      	cmp	r3, #15
 800c494:	dc37      	bgt.n	800c506 <_strtod_l+0x45e>
 800c496:	9906      	ldr	r1, [sp, #24]
 800c498:	2900      	cmp	r1, #0
 800c49a:	f43f ae49 	beq.w	800c130 <_strtod_l+0x88>
 800c49e:	dd23      	ble.n	800c4e8 <_strtod_l+0x440>
 800c4a0:	2916      	cmp	r1, #22
 800c4a2:	dc0b      	bgt.n	800c4bc <_strtod_l+0x414>
 800c4a4:	4b69      	ldr	r3, [pc, #420]	; (800c64c <_strtod_l+0x5a4>)
 800c4a6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800c4aa:	ed93 7b00 	vldr	d7, [r3]
 800c4ae:	ec49 8b16 	vmov	d6, r8, r9
 800c4b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c4b6:	ec59 8b17 	vmov	r8, r9, d7
 800c4ba:	e639      	b.n	800c130 <_strtod_l+0x88>
 800c4bc:	9806      	ldr	r0, [sp, #24]
 800c4be:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800c4c2:	4281      	cmp	r1, r0
 800c4c4:	db1f      	blt.n	800c506 <_strtod_l+0x45e>
 800c4c6:	4a61      	ldr	r2, [pc, #388]	; (800c64c <_strtod_l+0x5a4>)
 800c4c8:	f1c3 030f 	rsb	r3, r3, #15
 800c4cc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c4d0:	ed91 7b00 	vldr	d7, [r1]
 800c4d4:	ec49 8b16 	vmov	d6, r8, r9
 800c4d8:	1ac3      	subs	r3, r0, r3
 800c4da:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c4de:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c4e2:	ed92 6b00 	vldr	d6, [r2]
 800c4e6:	e7e4      	b.n	800c4b2 <_strtod_l+0x40a>
 800c4e8:	9906      	ldr	r1, [sp, #24]
 800c4ea:	3116      	adds	r1, #22
 800c4ec:	db0b      	blt.n	800c506 <_strtod_l+0x45e>
 800c4ee:	4b57      	ldr	r3, [pc, #348]	; (800c64c <_strtod_l+0x5a4>)
 800c4f0:	ebab 0505 	sub.w	r5, fp, r5
 800c4f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c4f8:	ed95 7b00 	vldr	d7, [r5]
 800c4fc:	ec49 8b16 	vmov	d6, r8, r9
 800c500:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c504:	e7d7      	b.n	800c4b6 <_strtod_l+0x40e>
 800c506:	9906      	ldr	r1, [sp, #24]
 800c508:	1a9a      	subs	r2, r3, r2
 800c50a:	440a      	add	r2, r1
 800c50c:	2a00      	cmp	r2, #0
 800c50e:	dd74      	ble.n	800c5fa <_strtod_l+0x552>
 800c510:	f012 000f 	ands.w	r0, r2, #15
 800c514:	d00a      	beq.n	800c52c <_strtod_l+0x484>
 800c516:	494d      	ldr	r1, [pc, #308]	; (800c64c <_strtod_l+0x5a4>)
 800c518:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c51c:	ed91 7b00 	vldr	d7, [r1]
 800c520:	ec49 8b16 	vmov	d6, r8, r9
 800c524:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c528:	ec59 8b17 	vmov	r8, r9, d7
 800c52c:	f032 020f 	bics.w	r2, r2, #15
 800c530:	d04f      	beq.n	800c5d2 <_strtod_l+0x52a>
 800c532:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800c536:	dd22      	ble.n	800c57e <_strtod_l+0x4d6>
 800c538:	2500      	movs	r5, #0
 800c53a:	462e      	mov	r6, r5
 800c53c:	950a      	str	r5, [sp, #40]	; 0x28
 800c53e:	462f      	mov	r7, r5
 800c540:	2322      	movs	r3, #34	; 0x22
 800c542:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800c658 <_strtod_l+0x5b0>
 800c546:	6023      	str	r3, [r4, #0]
 800c548:	f04f 0800 	mov.w	r8, #0
 800c54c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c54e:	2b00      	cmp	r3, #0
 800c550:	f43f adee 	beq.w	800c130 <_strtod_l+0x88>
 800c554:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c556:	4620      	mov	r0, r4
 800c558:	f002 f802 	bl	800e560 <_Bfree>
 800c55c:	4639      	mov	r1, r7
 800c55e:	4620      	mov	r0, r4
 800c560:	f001 fffe 	bl	800e560 <_Bfree>
 800c564:	4631      	mov	r1, r6
 800c566:	4620      	mov	r0, r4
 800c568:	f001 fffa 	bl	800e560 <_Bfree>
 800c56c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c56e:	4620      	mov	r0, r4
 800c570:	f001 fff6 	bl	800e560 <_Bfree>
 800c574:	4629      	mov	r1, r5
 800c576:	4620      	mov	r0, r4
 800c578:	f001 fff2 	bl	800e560 <_Bfree>
 800c57c:	e5d8      	b.n	800c130 <_strtod_l+0x88>
 800c57e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800c582:	2000      	movs	r0, #0
 800c584:	4f32      	ldr	r7, [pc, #200]	; (800c650 <_strtod_l+0x5a8>)
 800c586:	1112      	asrs	r2, r2, #4
 800c588:	4601      	mov	r1, r0
 800c58a:	2a01      	cmp	r2, #1
 800c58c:	dc24      	bgt.n	800c5d8 <_strtod_l+0x530>
 800c58e:	b108      	cbz	r0, 800c594 <_strtod_l+0x4ec>
 800c590:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c594:	4a2e      	ldr	r2, [pc, #184]	; (800c650 <_strtod_l+0x5a8>)
 800c596:	482f      	ldr	r0, [pc, #188]	; (800c654 <_strtod_l+0x5ac>)
 800c598:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800c59c:	ed91 7b00 	vldr	d7, [r1]
 800c5a0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c5a4:	ec49 8b16 	vmov	d6, r8, r9
 800c5a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c5ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c5b0:	9905      	ldr	r1, [sp, #20]
 800c5b2:	4a29      	ldr	r2, [pc, #164]	; (800c658 <_strtod_l+0x5b0>)
 800c5b4:	400a      	ands	r2, r1
 800c5b6:	4282      	cmp	r2, r0
 800c5b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c5bc:	d8bc      	bhi.n	800c538 <_strtod_l+0x490>
 800c5be:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c5c2:	4282      	cmp	r2, r0
 800c5c4:	bf86      	itte	hi
 800c5c6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800c65c <_strtod_l+0x5b4>
 800c5ca:	f04f 38ff 	movhi.w	r8, #4294967295
 800c5ce:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	9204      	str	r2, [sp, #16]
 800c5d6:	e07f      	b.n	800c6d8 <_strtod_l+0x630>
 800c5d8:	f012 0f01 	tst.w	r2, #1
 800c5dc:	d00a      	beq.n	800c5f4 <_strtod_l+0x54c>
 800c5de:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 800c5e2:	ed90 7b00 	vldr	d7, [r0]
 800c5e6:	ed9d 6b04 	vldr	d6, [sp, #16]
 800c5ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c5ee:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c5f2:	2001      	movs	r0, #1
 800c5f4:	3101      	adds	r1, #1
 800c5f6:	1052      	asrs	r2, r2, #1
 800c5f8:	e7c7      	b.n	800c58a <_strtod_l+0x4e2>
 800c5fa:	d0ea      	beq.n	800c5d2 <_strtod_l+0x52a>
 800c5fc:	4252      	negs	r2, r2
 800c5fe:	f012 000f 	ands.w	r0, r2, #15
 800c602:	d00a      	beq.n	800c61a <_strtod_l+0x572>
 800c604:	4911      	ldr	r1, [pc, #68]	; (800c64c <_strtod_l+0x5a4>)
 800c606:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c60a:	ed91 7b00 	vldr	d7, [r1]
 800c60e:	ec49 8b16 	vmov	d6, r8, r9
 800c612:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c616:	ec59 8b17 	vmov	r8, r9, d7
 800c61a:	1112      	asrs	r2, r2, #4
 800c61c:	d0d9      	beq.n	800c5d2 <_strtod_l+0x52a>
 800c61e:	2a1f      	cmp	r2, #31
 800c620:	dd1e      	ble.n	800c660 <_strtod_l+0x5b8>
 800c622:	2500      	movs	r5, #0
 800c624:	462e      	mov	r6, r5
 800c626:	950a      	str	r5, [sp, #40]	; 0x28
 800c628:	462f      	mov	r7, r5
 800c62a:	2322      	movs	r3, #34	; 0x22
 800c62c:	f04f 0800 	mov.w	r8, #0
 800c630:	f04f 0900 	mov.w	r9, #0
 800c634:	6023      	str	r3, [r4, #0]
 800c636:	e789      	b.n	800c54c <_strtod_l+0x4a4>
 800c638:	0800fc09 	.word	0x0800fc09
 800c63c:	0800fc4c 	.word	0x0800fc4c
 800c640:	0800fc01 	.word	0x0800fc01
 800c644:	0800fc8b 	.word	0x0800fc8b
 800c648:	0800ff48 	.word	0x0800ff48
 800c64c:	0800fe28 	.word	0x0800fe28
 800c650:	0800fe00 	.word	0x0800fe00
 800c654:	7ca00000 	.word	0x7ca00000
 800c658:	7ff00000 	.word	0x7ff00000
 800c65c:	7fefffff 	.word	0x7fefffff
 800c660:	f012 0110 	ands.w	r1, r2, #16
 800c664:	bf18      	it	ne
 800c666:	216a      	movne	r1, #106	; 0x6a
 800c668:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800c66c:	9104      	str	r1, [sp, #16]
 800c66e:	49c0      	ldr	r1, [pc, #768]	; (800c970 <_strtod_l+0x8c8>)
 800c670:	2000      	movs	r0, #0
 800c672:	07d7      	lsls	r7, r2, #31
 800c674:	d508      	bpl.n	800c688 <_strtod_l+0x5e0>
 800c676:	ed9d 6b08 	vldr	d6, [sp, #32]
 800c67a:	ed91 7b00 	vldr	d7, [r1]
 800c67e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c682:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c686:	2001      	movs	r0, #1
 800c688:	1052      	asrs	r2, r2, #1
 800c68a:	f101 0108 	add.w	r1, r1, #8
 800c68e:	d1f0      	bne.n	800c672 <_strtod_l+0x5ca>
 800c690:	b108      	cbz	r0, 800c696 <_strtod_l+0x5ee>
 800c692:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800c696:	9a04      	ldr	r2, [sp, #16]
 800c698:	b1ba      	cbz	r2, 800c6ca <_strtod_l+0x622>
 800c69a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c69e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800c6a2:	2a00      	cmp	r2, #0
 800c6a4:	4649      	mov	r1, r9
 800c6a6:	dd10      	ble.n	800c6ca <_strtod_l+0x622>
 800c6a8:	2a1f      	cmp	r2, #31
 800c6aa:	f340 8132 	ble.w	800c912 <_strtod_l+0x86a>
 800c6ae:	2a34      	cmp	r2, #52	; 0x34
 800c6b0:	bfde      	ittt	le
 800c6b2:	3a20      	suble	r2, #32
 800c6b4:	f04f 30ff 	movle.w	r0, #4294967295
 800c6b8:	fa00 f202 	lslle.w	r2, r0, r2
 800c6bc:	f04f 0800 	mov.w	r8, #0
 800c6c0:	bfcc      	ite	gt
 800c6c2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c6c6:	ea02 0901 	andle.w	r9, r2, r1
 800c6ca:	ec49 8b17 	vmov	d7, r8, r9
 800c6ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6d6:	d0a4      	beq.n	800c622 <_strtod_l+0x57a>
 800c6d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6da:	9200      	str	r2, [sp, #0]
 800c6dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c6de:	4632      	mov	r2, r6
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f001 ffa9 	bl	800e638 <__s2b>
 800c6e6:	900a      	str	r0, [sp, #40]	; 0x28
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	f43f af25 	beq.w	800c538 <_strtod_l+0x490>
 800c6ee:	9b06      	ldr	r3, [sp, #24]
 800c6f0:	ebab 0505 	sub.w	r5, fp, r5
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	bfb4      	ite	lt
 800c6f8:	462b      	movlt	r3, r5
 800c6fa:	2300      	movge	r3, #0
 800c6fc:	930c      	str	r3, [sp, #48]	; 0x30
 800c6fe:	9b06      	ldr	r3, [sp, #24]
 800c700:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800c958 <_strtod_l+0x8b0>
 800c704:	ed9f ab96 	vldr	d10, [pc, #600]	; 800c960 <_strtod_l+0x8b8>
 800c708:	ed9f bb97 	vldr	d11, [pc, #604]	; 800c968 <_strtod_l+0x8c0>
 800c70c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c710:	2500      	movs	r5, #0
 800c712:	9312      	str	r3, [sp, #72]	; 0x48
 800c714:	462e      	mov	r6, r5
 800c716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c718:	4620      	mov	r0, r4
 800c71a:	6859      	ldr	r1, [r3, #4]
 800c71c:	f001 fee0 	bl	800e4e0 <_Balloc>
 800c720:	4607      	mov	r7, r0
 800c722:	2800      	cmp	r0, #0
 800c724:	f43f af0c 	beq.w	800c540 <_strtod_l+0x498>
 800c728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c72a:	691a      	ldr	r2, [r3, #16]
 800c72c:	3202      	adds	r2, #2
 800c72e:	f103 010c 	add.w	r1, r3, #12
 800c732:	0092      	lsls	r2, r2, #2
 800c734:	300c      	adds	r0, #12
 800c736:	f7fe fc0d 	bl	800af54 <memcpy>
 800c73a:	ec49 8b10 	vmov	d0, r8, r9
 800c73e:	aa1a      	add	r2, sp, #104	; 0x68
 800c740:	a919      	add	r1, sp, #100	; 0x64
 800c742:	4620      	mov	r0, r4
 800c744:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800c748:	f002 fab2 	bl	800ecb0 <__d2b>
 800c74c:	9018      	str	r0, [sp, #96]	; 0x60
 800c74e:	2800      	cmp	r0, #0
 800c750:	f43f aef6 	beq.w	800c540 <_strtod_l+0x498>
 800c754:	2101      	movs	r1, #1
 800c756:	4620      	mov	r0, r4
 800c758:	f002 f808 	bl	800e76c <__i2b>
 800c75c:	4606      	mov	r6, r0
 800c75e:	2800      	cmp	r0, #0
 800c760:	f43f aeee 	beq.w	800c540 <_strtod_l+0x498>
 800c764:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c766:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c768:	2b00      	cmp	r3, #0
 800c76a:	bfab      	itete	ge
 800c76c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c76e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c770:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800c774:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 800c778:	bfac      	ite	ge
 800c77a:	eb03 0b02 	addge.w	fp, r3, r2
 800c77e:	eba2 0a03 	sublt.w	sl, r2, r3
 800c782:	9a04      	ldr	r2, [sp, #16]
 800c784:	1a9b      	subs	r3, r3, r2
 800c786:	440b      	add	r3, r1
 800c788:	4a7a      	ldr	r2, [pc, #488]	; (800c974 <_strtod_l+0x8cc>)
 800c78a:	3b01      	subs	r3, #1
 800c78c:	4293      	cmp	r3, r2
 800c78e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800c792:	f280 80d1 	bge.w	800c938 <_strtod_l+0x890>
 800c796:	1ad2      	subs	r2, r2, r3
 800c798:	2a1f      	cmp	r2, #31
 800c79a:	eba1 0102 	sub.w	r1, r1, r2
 800c79e:	f04f 0001 	mov.w	r0, #1
 800c7a2:	f300 80bd 	bgt.w	800c920 <_strtod_l+0x878>
 800c7a6:	fa00 f302 	lsl.w	r3, r0, r2
 800c7aa:	930e      	str	r3, [sp, #56]	; 0x38
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	930d      	str	r3, [sp, #52]	; 0x34
 800c7b0:	eb0b 0301 	add.w	r3, fp, r1
 800c7b4:	9a04      	ldr	r2, [sp, #16]
 800c7b6:	459b      	cmp	fp, r3
 800c7b8:	448a      	add	sl, r1
 800c7ba:	4492      	add	sl, r2
 800c7bc:	465a      	mov	r2, fp
 800c7be:	bfa8      	it	ge
 800c7c0:	461a      	movge	r2, r3
 800c7c2:	4552      	cmp	r2, sl
 800c7c4:	bfa8      	it	ge
 800c7c6:	4652      	movge	r2, sl
 800c7c8:	2a00      	cmp	r2, #0
 800c7ca:	bfc2      	ittt	gt
 800c7cc:	1a9b      	subgt	r3, r3, r2
 800c7ce:	ebaa 0a02 	subgt.w	sl, sl, r2
 800c7d2:	ebab 0b02 	subgt.w	fp, fp, r2
 800c7d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7d8:	2a00      	cmp	r2, #0
 800c7da:	dd18      	ble.n	800c80e <_strtod_l+0x766>
 800c7dc:	4631      	mov	r1, r6
 800c7de:	4620      	mov	r0, r4
 800c7e0:	9315      	str	r3, [sp, #84]	; 0x54
 800c7e2:	f002 f87f 	bl	800e8e4 <__pow5mult>
 800c7e6:	4606      	mov	r6, r0
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	f43f aea9 	beq.w	800c540 <_strtod_l+0x498>
 800c7ee:	4601      	mov	r1, r0
 800c7f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c7f2:	4620      	mov	r0, r4
 800c7f4:	f001 ffd0 	bl	800e798 <__multiply>
 800c7f8:	9014      	str	r0, [sp, #80]	; 0x50
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	f43f aea0 	beq.w	800c540 <_strtod_l+0x498>
 800c800:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c802:	4620      	mov	r0, r4
 800c804:	f001 feac 	bl	800e560 <_Bfree>
 800c808:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c80a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c80c:	9218      	str	r2, [sp, #96]	; 0x60
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f300 8097 	bgt.w	800c942 <_strtod_l+0x89a>
 800c814:	9b06      	ldr	r3, [sp, #24]
 800c816:	2b00      	cmp	r3, #0
 800c818:	dd08      	ble.n	800c82c <_strtod_l+0x784>
 800c81a:	4639      	mov	r1, r7
 800c81c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c81e:	4620      	mov	r0, r4
 800c820:	f002 f860 	bl	800e8e4 <__pow5mult>
 800c824:	4607      	mov	r7, r0
 800c826:	2800      	cmp	r0, #0
 800c828:	f43f ae8a 	beq.w	800c540 <_strtod_l+0x498>
 800c82c:	f1ba 0f00 	cmp.w	sl, #0
 800c830:	dd08      	ble.n	800c844 <_strtod_l+0x79c>
 800c832:	4639      	mov	r1, r7
 800c834:	4652      	mov	r2, sl
 800c836:	4620      	mov	r0, r4
 800c838:	f002 f8ae 	bl	800e998 <__lshift>
 800c83c:	4607      	mov	r7, r0
 800c83e:	2800      	cmp	r0, #0
 800c840:	f43f ae7e 	beq.w	800c540 <_strtod_l+0x498>
 800c844:	f1bb 0f00 	cmp.w	fp, #0
 800c848:	dd08      	ble.n	800c85c <_strtod_l+0x7b4>
 800c84a:	4631      	mov	r1, r6
 800c84c:	465a      	mov	r2, fp
 800c84e:	4620      	mov	r0, r4
 800c850:	f002 f8a2 	bl	800e998 <__lshift>
 800c854:	4606      	mov	r6, r0
 800c856:	2800      	cmp	r0, #0
 800c858:	f43f ae72 	beq.w	800c540 <_strtod_l+0x498>
 800c85c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c85e:	463a      	mov	r2, r7
 800c860:	4620      	mov	r0, r4
 800c862:	f002 f921 	bl	800eaa8 <__mdiff>
 800c866:	4605      	mov	r5, r0
 800c868:	2800      	cmp	r0, #0
 800c86a:	f43f ae69 	beq.w	800c540 <_strtod_l+0x498>
 800c86e:	2300      	movs	r3, #0
 800c870:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800c874:	60c3      	str	r3, [r0, #12]
 800c876:	4631      	mov	r1, r6
 800c878:	f002 f8fa 	bl	800ea70 <__mcmp>
 800c87c:	2800      	cmp	r0, #0
 800c87e:	da7f      	bge.n	800c980 <_strtod_l+0x8d8>
 800c880:	ea5a 0308 	orrs.w	r3, sl, r8
 800c884:	f040 80a5 	bne.w	800c9d2 <_strtod_l+0x92a>
 800c888:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f040 80a0 	bne.w	800c9d2 <_strtod_l+0x92a>
 800c892:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c896:	0d1b      	lsrs	r3, r3, #20
 800c898:	051b      	lsls	r3, r3, #20
 800c89a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c89e:	f240 8098 	bls.w	800c9d2 <_strtod_l+0x92a>
 800c8a2:	696b      	ldr	r3, [r5, #20]
 800c8a4:	b91b      	cbnz	r3, 800c8ae <_strtod_l+0x806>
 800c8a6:	692b      	ldr	r3, [r5, #16]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	f340 8092 	ble.w	800c9d2 <_strtod_l+0x92a>
 800c8ae:	4629      	mov	r1, r5
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	f002 f870 	bl	800e998 <__lshift>
 800c8b8:	4631      	mov	r1, r6
 800c8ba:	4605      	mov	r5, r0
 800c8bc:	f002 f8d8 	bl	800ea70 <__mcmp>
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	f340 8086 	ble.w	800c9d2 <_strtod_l+0x92a>
 800c8c6:	9904      	ldr	r1, [sp, #16]
 800c8c8:	4a2b      	ldr	r2, [pc, #172]	; (800c978 <_strtod_l+0x8d0>)
 800c8ca:	464b      	mov	r3, r9
 800c8cc:	2900      	cmp	r1, #0
 800c8ce:	f000 80a1 	beq.w	800ca14 <_strtod_l+0x96c>
 800c8d2:	ea02 0109 	and.w	r1, r2, r9
 800c8d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c8da:	f300 809b 	bgt.w	800ca14 <_strtod_l+0x96c>
 800c8de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c8e2:	f77f aea2 	ble.w	800c62a <_strtod_l+0x582>
 800c8e6:	4a25      	ldr	r2, [pc, #148]	; (800c97c <_strtod_l+0x8d4>)
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800c8ee:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800c8f2:	ec49 8b17 	vmov	d7, r8, r9
 800c8f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c8fa:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c8fe:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800c902:	4313      	orrs	r3, r2
 800c904:	bf08      	it	eq
 800c906:	2322      	moveq	r3, #34	; 0x22
 800c908:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c90c:	bf08      	it	eq
 800c90e:	6023      	streq	r3, [r4, #0]
 800c910:	e620      	b.n	800c554 <_strtod_l+0x4ac>
 800c912:	f04f 31ff 	mov.w	r1, #4294967295
 800c916:	fa01 f202 	lsl.w	r2, r1, r2
 800c91a:	ea02 0808 	and.w	r8, r2, r8
 800c91e:	e6d4      	b.n	800c6ca <_strtod_l+0x622>
 800c920:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800c924:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c928:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800c92c:	33e2      	adds	r3, #226	; 0xe2
 800c92e:	fa00 f303 	lsl.w	r3, r0, r3
 800c932:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800c936:	e73b      	b.n	800c7b0 <_strtod_l+0x708>
 800c938:	2000      	movs	r0, #0
 800c93a:	2301      	movs	r3, #1
 800c93c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 800c940:	e736      	b.n	800c7b0 <_strtod_l+0x708>
 800c942:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c944:	461a      	mov	r2, r3
 800c946:	4620      	mov	r0, r4
 800c948:	f002 f826 	bl	800e998 <__lshift>
 800c94c:	9018      	str	r0, [sp, #96]	; 0x60
 800c94e:	2800      	cmp	r0, #0
 800c950:	f47f af60 	bne.w	800c814 <_strtod_l+0x76c>
 800c954:	e5f4      	b.n	800c540 <_strtod_l+0x498>
 800c956:	bf00      	nop
 800c958:	94a03595 	.word	0x94a03595
 800c95c:	3fcfffff 	.word	0x3fcfffff
 800c960:	94a03595 	.word	0x94a03595
 800c964:	3fdfffff 	.word	0x3fdfffff
 800c968:	35afe535 	.word	0x35afe535
 800c96c:	3fe00000 	.word	0x3fe00000
 800c970:	0800fc60 	.word	0x0800fc60
 800c974:	fffffc02 	.word	0xfffffc02
 800c978:	7ff00000 	.word	0x7ff00000
 800c97c:	39500000 	.word	0x39500000
 800c980:	46cb      	mov	fp, r9
 800c982:	d165      	bne.n	800ca50 <_strtod_l+0x9a8>
 800c984:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c988:	f1ba 0f00 	cmp.w	sl, #0
 800c98c:	d02a      	beq.n	800c9e4 <_strtod_l+0x93c>
 800c98e:	4aaa      	ldr	r2, [pc, #680]	; (800cc38 <_strtod_l+0xb90>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d12b      	bne.n	800c9ec <_strtod_l+0x944>
 800c994:	9b04      	ldr	r3, [sp, #16]
 800c996:	4641      	mov	r1, r8
 800c998:	b1fb      	cbz	r3, 800c9da <_strtod_l+0x932>
 800c99a:	4aa8      	ldr	r2, [pc, #672]	; (800cc3c <_strtod_l+0xb94>)
 800c99c:	ea09 0202 	and.w	r2, r9, r2
 800c9a0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a8:	d81a      	bhi.n	800c9e0 <_strtod_l+0x938>
 800c9aa:	0d12      	lsrs	r2, r2, #20
 800c9ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c9b0:	fa00 f303 	lsl.w	r3, r0, r3
 800c9b4:	4299      	cmp	r1, r3
 800c9b6:	d119      	bne.n	800c9ec <_strtod_l+0x944>
 800c9b8:	4ba1      	ldr	r3, [pc, #644]	; (800cc40 <_strtod_l+0xb98>)
 800c9ba:	459b      	cmp	fp, r3
 800c9bc:	d102      	bne.n	800c9c4 <_strtod_l+0x91c>
 800c9be:	3101      	adds	r1, #1
 800c9c0:	f43f adbe 	beq.w	800c540 <_strtod_l+0x498>
 800c9c4:	4b9d      	ldr	r3, [pc, #628]	; (800cc3c <_strtod_l+0xb94>)
 800c9c6:	ea0b 0303 	and.w	r3, fp, r3
 800c9ca:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c9ce:	f04f 0800 	mov.w	r8, #0
 800c9d2:	9b04      	ldr	r3, [sp, #16]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d186      	bne.n	800c8e6 <_strtod_l+0x83e>
 800c9d8:	e5bc      	b.n	800c554 <_strtod_l+0x4ac>
 800c9da:	f04f 33ff 	mov.w	r3, #4294967295
 800c9de:	e7e9      	b.n	800c9b4 <_strtod_l+0x90c>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	e7e7      	b.n	800c9b4 <_strtod_l+0x90c>
 800c9e4:	ea53 0308 	orrs.w	r3, r3, r8
 800c9e8:	f43f af6d 	beq.w	800c8c6 <_strtod_l+0x81e>
 800c9ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9ee:	b1db      	cbz	r3, 800ca28 <_strtod_l+0x980>
 800c9f0:	ea13 0f0b 	tst.w	r3, fp
 800c9f4:	d0ed      	beq.n	800c9d2 <_strtod_l+0x92a>
 800c9f6:	9a04      	ldr	r2, [sp, #16]
 800c9f8:	4640      	mov	r0, r8
 800c9fa:	4649      	mov	r1, r9
 800c9fc:	f1ba 0f00 	cmp.w	sl, #0
 800ca00:	d016      	beq.n	800ca30 <_strtod_l+0x988>
 800ca02:	f7ff fb36 	bl	800c072 <sulp>
 800ca06:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ca0a:	ee37 7b00 	vadd.f64	d7, d7, d0
 800ca0e:	ec59 8b17 	vmov	r8, r9, d7
 800ca12:	e7de      	b.n	800c9d2 <_strtod_l+0x92a>
 800ca14:	4013      	ands	r3, r2
 800ca16:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ca1a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ca1e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ca22:	f04f 38ff 	mov.w	r8, #4294967295
 800ca26:	e7d4      	b.n	800c9d2 <_strtod_l+0x92a>
 800ca28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca2a:	ea13 0f08 	tst.w	r3, r8
 800ca2e:	e7e1      	b.n	800c9f4 <_strtod_l+0x94c>
 800ca30:	f7ff fb1f 	bl	800c072 <sulp>
 800ca34:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ca38:	ee37 7b40 	vsub.f64	d7, d7, d0
 800ca3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ca40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ca44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca48:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800ca4c:	d1c1      	bne.n	800c9d2 <_strtod_l+0x92a>
 800ca4e:	e5ec      	b.n	800c62a <_strtod_l+0x582>
 800ca50:	4631      	mov	r1, r6
 800ca52:	4628      	mov	r0, r5
 800ca54:	f002 f988 	bl	800ed68 <__ratio>
 800ca58:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ca5c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ca60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca64:	d867      	bhi.n	800cb36 <_strtod_l+0xa8e>
 800ca66:	f1ba 0f00 	cmp.w	sl, #0
 800ca6a:	d044      	beq.n	800caf6 <_strtod_l+0xa4e>
 800ca6c:	4b75      	ldr	r3, [pc, #468]	; (800cc44 <_strtod_l+0xb9c>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800ca74:	4971      	ldr	r1, [pc, #452]	; (800cc3c <_strtod_l+0xb94>)
 800ca76:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800cc50 <_strtod_l+0xba8>
 800ca7a:	ea0b 0001 	and.w	r0, fp, r1
 800ca7e:	4560      	cmp	r0, ip
 800ca80:	900d      	str	r0, [sp, #52]	; 0x34
 800ca82:	f040 808b 	bne.w	800cb9c <_strtod_l+0xaf4>
 800ca86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca8a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800ca8e:	ec49 8b10 	vmov	d0, r8, r9
 800ca92:	ec43 2b1c 	vmov	d12, r2, r3
 800ca96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ca9a:	f002 f88d 	bl	800ebb8 <__ulp>
 800ca9e:	ec49 8b1d 	vmov	d13, r8, r9
 800caa2:	eeac db00 	vfma.f64	d13, d12, d0
 800caa6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800caaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800caac:	4963      	ldr	r1, [pc, #396]	; (800cc3c <_strtod_l+0xb94>)
 800caae:	4a66      	ldr	r2, [pc, #408]	; (800cc48 <_strtod_l+0xba0>)
 800cab0:	4019      	ands	r1, r3
 800cab2:	4291      	cmp	r1, r2
 800cab4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800cab8:	d947      	bls.n	800cb4a <_strtod_l+0xaa2>
 800caba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cabc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d103      	bne.n	800cacc <_strtod_l+0xa24>
 800cac4:	9b08      	ldr	r3, [sp, #32]
 800cac6:	3301      	adds	r3, #1
 800cac8:	f43f ad3a 	beq.w	800c540 <_strtod_l+0x498>
 800cacc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800cc40 <_strtod_l+0xb98>
 800cad0:	f04f 38ff 	mov.w	r8, #4294967295
 800cad4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cad6:	4620      	mov	r0, r4
 800cad8:	f001 fd42 	bl	800e560 <_Bfree>
 800cadc:	4639      	mov	r1, r7
 800cade:	4620      	mov	r0, r4
 800cae0:	f001 fd3e 	bl	800e560 <_Bfree>
 800cae4:	4631      	mov	r1, r6
 800cae6:	4620      	mov	r0, r4
 800cae8:	f001 fd3a 	bl	800e560 <_Bfree>
 800caec:	4629      	mov	r1, r5
 800caee:	4620      	mov	r0, r4
 800caf0:	f001 fd36 	bl	800e560 <_Bfree>
 800caf4:	e60f      	b.n	800c716 <_strtod_l+0x66e>
 800caf6:	f1b8 0f00 	cmp.w	r8, #0
 800cafa:	d112      	bne.n	800cb22 <_strtod_l+0xa7a>
 800cafc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb00:	b9b3      	cbnz	r3, 800cb30 <_strtod_l+0xa88>
 800cb02:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800cb06:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cb0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb0e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800cb12:	d401      	bmi.n	800cb18 <_strtod_l+0xa70>
 800cb14:	ee20 8b08 	vmul.f64	d8, d0, d8
 800cb18:	eeb1 7b48 	vneg.f64	d7, d8
 800cb1c:	ec53 2b17 	vmov	r2, r3, d7
 800cb20:	e7a8      	b.n	800ca74 <_strtod_l+0x9cc>
 800cb22:	f1b8 0f01 	cmp.w	r8, #1
 800cb26:	d103      	bne.n	800cb30 <_strtod_l+0xa88>
 800cb28:	f1b9 0f00 	cmp.w	r9, #0
 800cb2c:	f43f ad7d 	beq.w	800c62a <_strtod_l+0x582>
 800cb30:	4b46      	ldr	r3, [pc, #280]	; (800cc4c <_strtod_l+0xba4>)
 800cb32:	2200      	movs	r2, #0
 800cb34:	e79c      	b.n	800ca70 <_strtod_l+0x9c8>
 800cb36:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800cb3a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800cb3e:	f1ba 0f00 	cmp.w	sl, #0
 800cb42:	d0e9      	beq.n	800cb18 <_strtod_l+0xa70>
 800cb44:	ec53 2b18 	vmov	r2, r3, d8
 800cb48:	e794      	b.n	800ca74 <_strtod_l+0x9cc>
 800cb4a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800cb4e:	9b04      	ldr	r3, [sp, #16]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d1bf      	bne.n	800cad4 <_strtod_l+0xa2c>
 800cb54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cb58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb5a:	0d1b      	lsrs	r3, r3, #20
 800cb5c:	051b      	lsls	r3, r3, #20
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d1b8      	bne.n	800cad4 <_strtod_l+0xa2c>
 800cb62:	ec51 0b18 	vmov	r0, r1, d8
 800cb66:	f7f3 fd97 	bl	8000698 <__aeabi_d2lz>
 800cb6a:	f7f3 fd4f 	bl	800060c <__aeabi_l2d>
 800cb6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb72:	ec41 0b17 	vmov	d7, r0, r1
 800cb76:	ea43 0308 	orr.w	r3, r3, r8
 800cb7a:	ea53 030a 	orrs.w	r3, r3, sl
 800cb7e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800cb82:	d03e      	beq.n	800cc02 <_strtod_l+0xb5a>
 800cb84:	eeb4 8bca 	vcmpe.f64	d8, d10
 800cb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb8c:	f53f ace2 	bmi.w	800c554 <_strtod_l+0x4ac>
 800cb90:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800cb94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb98:	dd9c      	ble.n	800cad4 <_strtod_l+0xa2c>
 800cb9a:	e4db      	b.n	800c554 <_strtod_l+0x4ac>
 800cb9c:	9904      	ldr	r1, [sp, #16]
 800cb9e:	b301      	cbz	r1, 800cbe2 <_strtod_l+0xb3a>
 800cba0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cba2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800cba6:	d81c      	bhi.n	800cbe2 <_strtod_l+0xb3a>
 800cba8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800cc30 <_strtod_l+0xb88>
 800cbac:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cbb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbb4:	d811      	bhi.n	800cbda <_strtod_l+0xb32>
 800cbb6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800cbba:	ee18 3a10 	vmov	r3, s16
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	bf38      	it	cc
 800cbc2:	2301      	movcc	r3, #1
 800cbc4:	ee08 3a10 	vmov	s16, r3
 800cbc8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800cbcc:	f1ba 0f00 	cmp.w	sl, #0
 800cbd0:	d114      	bne.n	800cbfc <_strtod_l+0xb54>
 800cbd2:	eeb1 7b48 	vneg.f64	d7, d8
 800cbd6:	ec53 2b17 	vmov	r2, r3, d7
 800cbda:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cbdc:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800cbe0:	1a0b      	subs	r3, r1, r0
 800cbe2:	ed9d 0b08 	vldr	d0, [sp, #32]
 800cbe6:	ec43 2b1c 	vmov	d12, r2, r3
 800cbea:	f001 ffe5 	bl	800ebb8 <__ulp>
 800cbee:	ed9d 7b08 	vldr	d7, [sp, #32]
 800cbf2:	eeac 7b00 	vfma.f64	d7, d12, d0
 800cbf6:	ec59 8b17 	vmov	r8, r9, d7
 800cbfa:	e7a8      	b.n	800cb4e <_strtod_l+0xaa6>
 800cbfc:	ec53 2b18 	vmov	r2, r3, d8
 800cc00:	e7eb      	b.n	800cbda <_strtod_l+0xb32>
 800cc02:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800cc06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc0a:	f57f af63 	bpl.w	800cad4 <_strtod_l+0xa2c>
 800cc0e:	e4a1      	b.n	800c554 <_strtod_l+0x4ac>
 800cc10:	2300      	movs	r3, #0
 800cc12:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cc16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc18:	6013      	str	r3, [r2, #0]
 800cc1a:	f7ff ba8d 	b.w	800c138 <_strtod_l+0x90>
 800cc1e:	2a65      	cmp	r2, #101	; 0x65
 800cc20:	f43f ab89 	beq.w	800c336 <_strtod_l+0x28e>
 800cc24:	2a45      	cmp	r2, #69	; 0x45
 800cc26:	f43f ab86 	beq.w	800c336 <_strtod_l+0x28e>
 800cc2a:	2101      	movs	r1, #1
 800cc2c:	f7ff bbbe 	b.w	800c3ac <_strtod_l+0x304>
 800cc30:	ffc00000 	.word	0xffc00000
 800cc34:	41dfffff 	.word	0x41dfffff
 800cc38:	000fffff 	.word	0x000fffff
 800cc3c:	7ff00000 	.word	0x7ff00000
 800cc40:	7fefffff 	.word	0x7fefffff
 800cc44:	3ff00000 	.word	0x3ff00000
 800cc48:	7c9fffff 	.word	0x7c9fffff
 800cc4c:	bff00000 	.word	0xbff00000
 800cc50:	7fe00000 	.word	0x7fe00000

0800cc54 <_strtod_r>:
 800cc54:	4b01      	ldr	r3, [pc, #4]	; (800cc5c <_strtod_r+0x8>)
 800cc56:	f7ff ba27 	b.w	800c0a8 <_strtod_l>
 800cc5a:	bf00      	nop
 800cc5c:	200000d8 	.word	0x200000d8

0800cc60 <_strtol_l.isra.0>:
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc66:	d001      	beq.n	800cc6c <_strtol_l.isra.0+0xc>
 800cc68:	2b24      	cmp	r3, #36	; 0x24
 800cc6a:	d906      	bls.n	800cc7a <_strtol_l.isra.0+0x1a>
 800cc6c:	f7fe f846 	bl	800acfc <__errno>
 800cc70:	2316      	movs	r3, #22
 800cc72:	6003      	str	r3, [r0, #0]
 800cc74:	2000      	movs	r0, #0
 800cc76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc7a:	4f3a      	ldr	r7, [pc, #232]	; (800cd64 <_strtol_l.isra.0+0x104>)
 800cc7c:	468e      	mov	lr, r1
 800cc7e:	4676      	mov	r6, lr
 800cc80:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800cc84:	5de5      	ldrb	r5, [r4, r7]
 800cc86:	f015 0508 	ands.w	r5, r5, #8
 800cc8a:	d1f8      	bne.n	800cc7e <_strtol_l.isra.0+0x1e>
 800cc8c:	2c2d      	cmp	r4, #45	; 0x2d
 800cc8e:	d134      	bne.n	800ccfa <_strtol_l.isra.0+0x9a>
 800cc90:	f89e 4000 	ldrb.w	r4, [lr]
 800cc94:	f04f 0801 	mov.w	r8, #1
 800cc98:	f106 0e02 	add.w	lr, r6, #2
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d05c      	beq.n	800cd5a <_strtol_l.isra.0+0xfa>
 800cca0:	2b10      	cmp	r3, #16
 800cca2:	d10c      	bne.n	800ccbe <_strtol_l.isra.0+0x5e>
 800cca4:	2c30      	cmp	r4, #48	; 0x30
 800cca6:	d10a      	bne.n	800ccbe <_strtol_l.isra.0+0x5e>
 800cca8:	f89e 4000 	ldrb.w	r4, [lr]
 800ccac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ccb0:	2c58      	cmp	r4, #88	; 0x58
 800ccb2:	d14d      	bne.n	800cd50 <_strtol_l.isra.0+0xf0>
 800ccb4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ccb8:	2310      	movs	r3, #16
 800ccba:	f10e 0e02 	add.w	lr, lr, #2
 800ccbe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ccc2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ccc6:	2600      	movs	r6, #0
 800ccc8:	fbbc f9f3 	udiv	r9, ip, r3
 800cccc:	4635      	mov	r5, r6
 800ccce:	fb03 ca19 	mls	sl, r3, r9, ip
 800ccd2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ccd6:	2f09      	cmp	r7, #9
 800ccd8:	d818      	bhi.n	800cd0c <_strtol_l.isra.0+0xac>
 800ccda:	463c      	mov	r4, r7
 800ccdc:	42a3      	cmp	r3, r4
 800ccde:	dd24      	ble.n	800cd2a <_strtol_l.isra.0+0xca>
 800cce0:	2e00      	cmp	r6, #0
 800cce2:	db1f      	blt.n	800cd24 <_strtol_l.isra.0+0xc4>
 800cce4:	45a9      	cmp	r9, r5
 800cce6:	d31d      	bcc.n	800cd24 <_strtol_l.isra.0+0xc4>
 800cce8:	d101      	bne.n	800ccee <_strtol_l.isra.0+0x8e>
 800ccea:	45a2      	cmp	sl, r4
 800ccec:	db1a      	blt.n	800cd24 <_strtol_l.isra.0+0xc4>
 800ccee:	fb05 4503 	mla	r5, r5, r3, r4
 800ccf2:	2601      	movs	r6, #1
 800ccf4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ccf8:	e7eb      	b.n	800ccd2 <_strtol_l.isra.0+0x72>
 800ccfa:	2c2b      	cmp	r4, #43	; 0x2b
 800ccfc:	bf08      	it	eq
 800ccfe:	f89e 4000 	ldrbeq.w	r4, [lr]
 800cd02:	46a8      	mov	r8, r5
 800cd04:	bf08      	it	eq
 800cd06:	f106 0e02 	addeq.w	lr, r6, #2
 800cd0a:	e7c7      	b.n	800cc9c <_strtol_l.isra.0+0x3c>
 800cd0c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800cd10:	2f19      	cmp	r7, #25
 800cd12:	d801      	bhi.n	800cd18 <_strtol_l.isra.0+0xb8>
 800cd14:	3c37      	subs	r4, #55	; 0x37
 800cd16:	e7e1      	b.n	800ccdc <_strtol_l.isra.0+0x7c>
 800cd18:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800cd1c:	2f19      	cmp	r7, #25
 800cd1e:	d804      	bhi.n	800cd2a <_strtol_l.isra.0+0xca>
 800cd20:	3c57      	subs	r4, #87	; 0x57
 800cd22:	e7db      	b.n	800ccdc <_strtol_l.isra.0+0x7c>
 800cd24:	f04f 36ff 	mov.w	r6, #4294967295
 800cd28:	e7e4      	b.n	800ccf4 <_strtol_l.isra.0+0x94>
 800cd2a:	2e00      	cmp	r6, #0
 800cd2c:	da05      	bge.n	800cd3a <_strtol_l.isra.0+0xda>
 800cd2e:	2322      	movs	r3, #34	; 0x22
 800cd30:	6003      	str	r3, [r0, #0]
 800cd32:	4665      	mov	r5, ip
 800cd34:	b942      	cbnz	r2, 800cd48 <_strtol_l.isra.0+0xe8>
 800cd36:	4628      	mov	r0, r5
 800cd38:	e79d      	b.n	800cc76 <_strtol_l.isra.0+0x16>
 800cd3a:	f1b8 0f00 	cmp.w	r8, #0
 800cd3e:	d000      	beq.n	800cd42 <_strtol_l.isra.0+0xe2>
 800cd40:	426d      	negs	r5, r5
 800cd42:	2a00      	cmp	r2, #0
 800cd44:	d0f7      	beq.n	800cd36 <_strtol_l.isra.0+0xd6>
 800cd46:	b10e      	cbz	r6, 800cd4c <_strtol_l.isra.0+0xec>
 800cd48:	f10e 31ff 	add.w	r1, lr, #4294967295
 800cd4c:	6011      	str	r1, [r2, #0]
 800cd4e:	e7f2      	b.n	800cd36 <_strtol_l.isra.0+0xd6>
 800cd50:	2430      	movs	r4, #48	; 0x30
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d1b3      	bne.n	800ccbe <_strtol_l.isra.0+0x5e>
 800cd56:	2308      	movs	r3, #8
 800cd58:	e7b1      	b.n	800ccbe <_strtol_l.isra.0+0x5e>
 800cd5a:	2c30      	cmp	r4, #48	; 0x30
 800cd5c:	d0a4      	beq.n	800cca8 <_strtol_l.isra.0+0x48>
 800cd5e:	230a      	movs	r3, #10
 800cd60:	e7ad      	b.n	800ccbe <_strtol_l.isra.0+0x5e>
 800cd62:	bf00      	nop
 800cd64:	0800fa95 	.word	0x0800fa95

0800cd68 <_strtol_r>:
 800cd68:	f7ff bf7a 	b.w	800cc60 <_strtol_l.isra.0>

0800cd6c <__swbuf_r>:
 800cd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd6e:	460e      	mov	r6, r1
 800cd70:	4614      	mov	r4, r2
 800cd72:	4605      	mov	r5, r0
 800cd74:	b118      	cbz	r0, 800cd7e <__swbuf_r+0x12>
 800cd76:	6983      	ldr	r3, [r0, #24]
 800cd78:	b90b      	cbnz	r3, 800cd7e <__swbuf_r+0x12>
 800cd7a:	f7fe f81d 	bl	800adb8 <__sinit>
 800cd7e:	4b21      	ldr	r3, [pc, #132]	; (800ce04 <__swbuf_r+0x98>)
 800cd80:	429c      	cmp	r4, r3
 800cd82:	d12b      	bne.n	800cddc <__swbuf_r+0x70>
 800cd84:	686c      	ldr	r4, [r5, #4]
 800cd86:	69a3      	ldr	r3, [r4, #24]
 800cd88:	60a3      	str	r3, [r4, #8]
 800cd8a:	89a3      	ldrh	r3, [r4, #12]
 800cd8c:	071a      	lsls	r2, r3, #28
 800cd8e:	d52f      	bpl.n	800cdf0 <__swbuf_r+0x84>
 800cd90:	6923      	ldr	r3, [r4, #16]
 800cd92:	b36b      	cbz	r3, 800cdf0 <__swbuf_r+0x84>
 800cd94:	6923      	ldr	r3, [r4, #16]
 800cd96:	6820      	ldr	r0, [r4, #0]
 800cd98:	1ac0      	subs	r0, r0, r3
 800cd9a:	6963      	ldr	r3, [r4, #20]
 800cd9c:	b2f6      	uxtb	r6, r6
 800cd9e:	4283      	cmp	r3, r0
 800cda0:	4637      	mov	r7, r6
 800cda2:	dc04      	bgt.n	800cdae <__swbuf_r+0x42>
 800cda4:	4621      	mov	r1, r4
 800cda6:	4628      	mov	r0, r5
 800cda8:	f000 ff56 	bl	800dc58 <_fflush_r>
 800cdac:	bb30      	cbnz	r0, 800cdfc <__swbuf_r+0x90>
 800cdae:	68a3      	ldr	r3, [r4, #8]
 800cdb0:	3b01      	subs	r3, #1
 800cdb2:	60a3      	str	r3, [r4, #8]
 800cdb4:	6823      	ldr	r3, [r4, #0]
 800cdb6:	1c5a      	adds	r2, r3, #1
 800cdb8:	6022      	str	r2, [r4, #0]
 800cdba:	701e      	strb	r6, [r3, #0]
 800cdbc:	6963      	ldr	r3, [r4, #20]
 800cdbe:	3001      	adds	r0, #1
 800cdc0:	4283      	cmp	r3, r0
 800cdc2:	d004      	beq.n	800cdce <__swbuf_r+0x62>
 800cdc4:	89a3      	ldrh	r3, [r4, #12]
 800cdc6:	07db      	lsls	r3, r3, #31
 800cdc8:	d506      	bpl.n	800cdd8 <__swbuf_r+0x6c>
 800cdca:	2e0a      	cmp	r6, #10
 800cdcc:	d104      	bne.n	800cdd8 <__swbuf_r+0x6c>
 800cdce:	4621      	mov	r1, r4
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	f000 ff41 	bl	800dc58 <_fflush_r>
 800cdd6:	b988      	cbnz	r0, 800cdfc <__swbuf_r+0x90>
 800cdd8:	4638      	mov	r0, r7
 800cdda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cddc:	4b0a      	ldr	r3, [pc, #40]	; (800ce08 <__swbuf_r+0x9c>)
 800cdde:	429c      	cmp	r4, r3
 800cde0:	d101      	bne.n	800cde6 <__swbuf_r+0x7a>
 800cde2:	68ac      	ldr	r4, [r5, #8]
 800cde4:	e7cf      	b.n	800cd86 <__swbuf_r+0x1a>
 800cde6:	4b09      	ldr	r3, [pc, #36]	; (800ce0c <__swbuf_r+0xa0>)
 800cde8:	429c      	cmp	r4, r3
 800cdea:	bf08      	it	eq
 800cdec:	68ec      	ldreq	r4, [r5, #12]
 800cdee:	e7ca      	b.n	800cd86 <__swbuf_r+0x1a>
 800cdf0:	4621      	mov	r1, r4
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	f000 f81e 	bl	800ce34 <__swsetup_r>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d0cb      	beq.n	800cd94 <__swbuf_r+0x28>
 800cdfc:	f04f 37ff 	mov.w	r7, #4294967295
 800ce00:	e7ea      	b.n	800cdd8 <__swbuf_r+0x6c>
 800ce02:	bf00      	nop
 800ce04:	0800fbb8 	.word	0x0800fbb8
 800ce08:	0800fbd8 	.word	0x0800fbd8
 800ce0c:	0800fb98 	.word	0x0800fb98

0800ce10 <_write_r>:
 800ce10:	b538      	push	{r3, r4, r5, lr}
 800ce12:	4d07      	ldr	r5, [pc, #28]	; (800ce30 <_write_r+0x20>)
 800ce14:	4604      	mov	r4, r0
 800ce16:	4608      	mov	r0, r1
 800ce18:	4611      	mov	r1, r2
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	602a      	str	r2, [r5, #0]
 800ce1e:	461a      	mov	r2, r3
 800ce20:	f7f5 fb1b 	bl	800245a <_write>
 800ce24:	1c43      	adds	r3, r0, #1
 800ce26:	d102      	bne.n	800ce2e <_write_r+0x1e>
 800ce28:	682b      	ldr	r3, [r5, #0]
 800ce2a:	b103      	cbz	r3, 800ce2e <_write_r+0x1e>
 800ce2c:	6023      	str	r3, [r4, #0]
 800ce2e:	bd38      	pop	{r3, r4, r5, pc}
 800ce30:	2000505c 	.word	0x2000505c

0800ce34 <__swsetup_r>:
 800ce34:	4b32      	ldr	r3, [pc, #200]	; (800cf00 <__swsetup_r+0xcc>)
 800ce36:	b570      	push	{r4, r5, r6, lr}
 800ce38:	681d      	ldr	r5, [r3, #0]
 800ce3a:	4606      	mov	r6, r0
 800ce3c:	460c      	mov	r4, r1
 800ce3e:	b125      	cbz	r5, 800ce4a <__swsetup_r+0x16>
 800ce40:	69ab      	ldr	r3, [r5, #24]
 800ce42:	b913      	cbnz	r3, 800ce4a <__swsetup_r+0x16>
 800ce44:	4628      	mov	r0, r5
 800ce46:	f7fd ffb7 	bl	800adb8 <__sinit>
 800ce4a:	4b2e      	ldr	r3, [pc, #184]	; (800cf04 <__swsetup_r+0xd0>)
 800ce4c:	429c      	cmp	r4, r3
 800ce4e:	d10f      	bne.n	800ce70 <__swsetup_r+0x3c>
 800ce50:	686c      	ldr	r4, [r5, #4]
 800ce52:	89a3      	ldrh	r3, [r4, #12]
 800ce54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce58:	0719      	lsls	r1, r3, #28
 800ce5a:	d42c      	bmi.n	800ceb6 <__swsetup_r+0x82>
 800ce5c:	06dd      	lsls	r5, r3, #27
 800ce5e:	d411      	bmi.n	800ce84 <__swsetup_r+0x50>
 800ce60:	2309      	movs	r3, #9
 800ce62:	6033      	str	r3, [r6, #0]
 800ce64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce68:	81a3      	strh	r3, [r4, #12]
 800ce6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce6e:	e03e      	b.n	800ceee <__swsetup_r+0xba>
 800ce70:	4b25      	ldr	r3, [pc, #148]	; (800cf08 <__swsetup_r+0xd4>)
 800ce72:	429c      	cmp	r4, r3
 800ce74:	d101      	bne.n	800ce7a <__swsetup_r+0x46>
 800ce76:	68ac      	ldr	r4, [r5, #8]
 800ce78:	e7eb      	b.n	800ce52 <__swsetup_r+0x1e>
 800ce7a:	4b24      	ldr	r3, [pc, #144]	; (800cf0c <__swsetup_r+0xd8>)
 800ce7c:	429c      	cmp	r4, r3
 800ce7e:	bf08      	it	eq
 800ce80:	68ec      	ldreq	r4, [r5, #12]
 800ce82:	e7e6      	b.n	800ce52 <__swsetup_r+0x1e>
 800ce84:	0758      	lsls	r0, r3, #29
 800ce86:	d512      	bpl.n	800ceae <__swsetup_r+0x7a>
 800ce88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce8a:	b141      	cbz	r1, 800ce9e <__swsetup_r+0x6a>
 800ce8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce90:	4299      	cmp	r1, r3
 800ce92:	d002      	beq.n	800ce9a <__swsetup_r+0x66>
 800ce94:	4630      	mov	r0, r6
 800ce96:	f7fe f873 	bl	800af80 <_free_r>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	6363      	str	r3, [r4, #52]	; 0x34
 800ce9e:	89a3      	ldrh	r3, [r4, #12]
 800cea0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cea4:	81a3      	strh	r3, [r4, #12]
 800cea6:	2300      	movs	r3, #0
 800cea8:	6063      	str	r3, [r4, #4]
 800ceaa:	6923      	ldr	r3, [r4, #16]
 800ceac:	6023      	str	r3, [r4, #0]
 800ceae:	89a3      	ldrh	r3, [r4, #12]
 800ceb0:	f043 0308 	orr.w	r3, r3, #8
 800ceb4:	81a3      	strh	r3, [r4, #12]
 800ceb6:	6923      	ldr	r3, [r4, #16]
 800ceb8:	b94b      	cbnz	r3, 800cece <__swsetup_r+0x9a>
 800ceba:	89a3      	ldrh	r3, [r4, #12]
 800cebc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cec4:	d003      	beq.n	800cece <__swsetup_r+0x9a>
 800cec6:	4621      	mov	r1, r4
 800cec8:	4630      	mov	r0, r6
 800ceca:	f001 faab 	bl	800e424 <__smakebuf_r>
 800cece:	89a0      	ldrh	r0, [r4, #12]
 800ced0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ced4:	f010 0301 	ands.w	r3, r0, #1
 800ced8:	d00a      	beq.n	800cef0 <__swsetup_r+0xbc>
 800ceda:	2300      	movs	r3, #0
 800cedc:	60a3      	str	r3, [r4, #8]
 800cede:	6963      	ldr	r3, [r4, #20]
 800cee0:	425b      	negs	r3, r3
 800cee2:	61a3      	str	r3, [r4, #24]
 800cee4:	6923      	ldr	r3, [r4, #16]
 800cee6:	b943      	cbnz	r3, 800cefa <__swsetup_r+0xc6>
 800cee8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ceec:	d1ba      	bne.n	800ce64 <__swsetup_r+0x30>
 800ceee:	bd70      	pop	{r4, r5, r6, pc}
 800cef0:	0781      	lsls	r1, r0, #30
 800cef2:	bf58      	it	pl
 800cef4:	6963      	ldrpl	r3, [r4, #20]
 800cef6:	60a3      	str	r3, [r4, #8]
 800cef8:	e7f4      	b.n	800cee4 <__swsetup_r+0xb0>
 800cefa:	2000      	movs	r0, #0
 800cefc:	e7f7      	b.n	800ceee <__swsetup_r+0xba>
 800cefe:	bf00      	nop
 800cf00:	20000070 	.word	0x20000070
 800cf04:	0800fbb8 	.word	0x0800fbb8
 800cf08:	0800fbd8 	.word	0x0800fbd8
 800cf0c:	0800fb98 	.word	0x0800fb98

0800cf10 <_close_r>:
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	4d06      	ldr	r5, [pc, #24]	; (800cf2c <_close_r+0x1c>)
 800cf14:	2300      	movs	r3, #0
 800cf16:	4604      	mov	r4, r0
 800cf18:	4608      	mov	r0, r1
 800cf1a:	602b      	str	r3, [r5, #0]
 800cf1c:	f7f5 fab9 	bl	8002492 <_close>
 800cf20:	1c43      	adds	r3, r0, #1
 800cf22:	d102      	bne.n	800cf2a <_close_r+0x1a>
 800cf24:	682b      	ldr	r3, [r5, #0]
 800cf26:	b103      	cbz	r3, 800cf2a <_close_r+0x1a>
 800cf28:	6023      	str	r3, [r4, #0]
 800cf2a:	bd38      	pop	{r3, r4, r5, pc}
 800cf2c:	2000505c 	.word	0x2000505c

0800cf30 <quorem>:
 800cf30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf34:	6903      	ldr	r3, [r0, #16]
 800cf36:	690c      	ldr	r4, [r1, #16]
 800cf38:	42a3      	cmp	r3, r4
 800cf3a:	4607      	mov	r7, r0
 800cf3c:	f2c0 8081 	blt.w	800d042 <quorem+0x112>
 800cf40:	3c01      	subs	r4, #1
 800cf42:	f101 0814 	add.w	r8, r1, #20
 800cf46:	f100 0514 	add.w	r5, r0, #20
 800cf4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf4e:	9301      	str	r3, [sp, #4]
 800cf50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cf54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf58:	3301      	adds	r3, #1
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cf60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cf64:	fbb2 f6f3 	udiv	r6, r2, r3
 800cf68:	d331      	bcc.n	800cfce <quorem+0x9e>
 800cf6a:	f04f 0e00 	mov.w	lr, #0
 800cf6e:	4640      	mov	r0, r8
 800cf70:	46ac      	mov	ip, r5
 800cf72:	46f2      	mov	sl, lr
 800cf74:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf78:	b293      	uxth	r3, r2
 800cf7a:	fb06 e303 	mla	r3, r6, r3, lr
 800cf7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	ebaa 0303 	sub.w	r3, sl, r3
 800cf88:	0c12      	lsrs	r2, r2, #16
 800cf8a:	f8dc a000 	ldr.w	sl, [ip]
 800cf8e:	fb06 e202 	mla	r2, r6, r2, lr
 800cf92:	fa13 f38a 	uxtah	r3, r3, sl
 800cf96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf9a:	fa1f fa82 	uxth.w	sl, r2
 800cf9e:	f8dc 2000 	ldr.w	r2, [ip]
 800cfa2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800cfa6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfb0:	4581      	cmp	r9, r0
 800cfb2:	f84c 3b04 	str.w	r3, [ip], #4
 800cfb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cfba:	d2db      	bcs.n	800cf74 <quorem+0x44>
 800cfbc:	f855 300b 	ldr.w	r3, [r5, fp]
 800cfc0:	b92b      	cbnz	r3, 800cfce <quorem+0x9e>
 800cfc2:	9b01      	ldr	r3, [sp, #4]
 800cfc4:	3b04      	subs	r3, #4
 800cfc6:	429d      	cmp	r5, r3
 800cfc8:	461a      	mov	r2, r3
 800cfca:	d32e      	bcc.n	800d02a <quorem+0xfa>
 800cfcc:	613c      	str	r4, [r7, #16]
 800cfce:	4638      	mov	r0, r7
 800cfd0:	f001 fd4e 	bl	800ea70 <__mcmp>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	db24      	blt.n	800d022 <quorem+0xf2>
 800cfd8:	3601      	adds	r6, #1
 800cfda:	4628      	mov	r0, r5
 800cfdc:	f04f 0c00 	mov.w	ip, #0
 800cfe0:	f858 2b04 	ldr.w	r2, [r8], #4
 800cfe4:	f8d0 e000 	ldr.w	lr, [r0]
 800cfe8:	b293      	uxth	r3, r2
 800cfea:	ebac 0303 	sub.w	r3, ip, r3
 800cfee:	0c12      	lsrs	r2, r2, #16
 800cff0:	fa13 f38e 	uxtah	r3, r3, lr
 800cff4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cff8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d002:	45c1      	cmp	r9, r8
 800d004:	f840 3b04 	str.w	r3, [r0], #4
 800d008:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d00c:	d2e8      	bcs.n	800cfe0 <quorem+0xb0>
 800d00e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d016:	b922      	cbnz	r2, 800d022 <quorem+0xf2>
 800d018:	3b04      	subs	r3, #4
 800d01a:	429d      	cmp	r5, r3
 800d01c:	461a      	mov	r2, r3
 800d01e:	d30a      	bcc.n	800d036 <quorem+0x106>
 800d020:	613c      	str	r4, [r7, #16]
 800d022:	4630      	mov	r0, r6
 800d024:	b003      	add	sp, #12
 800d026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d02a:	6812      	ldr	r2, [r2, #0]
 800d02c:	3b04      	subs	r3, #4
 800d02e:	2a00      	cmp	r2, #0
 800d030:	d1cc      	bne.n	800cfcc <quorem+0x9c>
 800d032:	3c01      	subs	r4, #1
 800d034:	e7c7      	b.n	800cfc6 <quorem+0x96>
 800d036:	6812      	ldr	r2, [r2, #0]
 800d038:	3b04      	subs	r3, #4
 800d03a:	2a00      	cmp	r2, #0
 800d03c:	d1f0      	bne.n	800d020 <quorem+0xf0>
 800d03e:	3c01      	subs	r4, #1
 800d040:	e7eb      	b.n	800d01a <quorem+0xea>
 800d042:	2000      	movs	r0, #0
 800d044:	e7ee      	b.n	800d024 <quorem+0xf4>
	...

0800d048 <_dtoa_r>:
 800d048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d04c:	ec59 8b10 	vmov	r8, r9, d0
 800d050:	b095      	sub	sp, #84	; 0x54
 800d052:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d054:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d056:	9107      	str	r1, [sp, #28]
 800d058:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d05c:	4606      	mov	r6, r0
 800d05e:	9209      	str	r2, [sp, #36]	; 0x24
 800d060:	9310      	str	r3, [sp, #64]	; 0x40
 800d062:	b975      	cbnz	r5, 800d082 <_dtoa_r+0x3a>
 800d064:	2010      	movs	r0, #16
 800d066:	f7fd ff6d 	bl	800af44 <malloc>
 800d06a:	4602      	mov	r2, r0
 800d06c:	6270      	str	r0, [r6, #36]	; 0x24
 800d06e:	b920      	cbnz	r0, 800d07a <_dtoa_r+0x32>
 800d070:	4bab      	ldr	r3, [pc, #684]	; (800d320 <_dtoa_r+0x2d8>)
 800d072:	21ea      	movs	r1, #234	; 0xea
 800d074:	48ab      	ldr	r0, [pc, #684]	; (800d324 <_dtoa_r+0x2dc>)
 800d076:	f002 fa37 	bl	800f4e8 <__assert_func>
 800d07a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d07e:	6005      	str	r5, [r0, #0]
 800d080:	60c5      	str	r5, [r0, #12]
 800d082:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d084:	6819      	ldr	r1, [r3, #0]
 800d086:	b151      	cbz	r1, 800d09e <_dtoa_r+0x56>
 800d088:	685a      	ldr	r2, [r3, #4]
 800d08a:	604a      	str	r2, [r1, #4]
 800d08c:	2301      	movs	r3, #1
 800d08e:	4093      	lsls	r3, r2
 800d090:	608b      	str	r3, [r1, #8]
 800d092:	4630      	mov	r0, r6
 800d094:	f001 fa64 	bl	800e560 <_Bfree>
 800d098:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d09a:	2200      	movs	r2, #0
 800d09c:	601a      	str	r2, [r3, #0]
 800d09e:	f1b9 0300 	subs.w	r3, r9, #0
 800d0a2:	bfbb      	ittet	lt
 800d0a4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d0a8:	9303      	strlt	r3, [sp, #12]
 800d0aa:	2300      	movge	r3, #0
 800d0ac:	2201      	movlt	r2, #1
 800d0ae:	bfac      	ite	ge
 800d0b0:	6023      	strge	r3, [r4, #0]
 800d0b2:	6022      	strlt	r2, [r4, #0]
 800d0b4:	4b9c      	ldr	r3, [pc, #624]	; (800d328 <_dtoa_r+0x2e0>)
 800d0b6:	9c03      	ldr	r4, [sp, #12]
 800d0b8:	43a3      	bics	r3, r4
 800d0ba:	d11a      	bne.n	800d0f2 <_dtoa_r+0xaa>
 800d0bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d0be:	f242 730f 	movw	r3, #9999	; 0x270f
 800d0c2:	6013      	str	r3, [r2, #0]
 800d0c4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d0c8:	ea53 0308 	orrs.w	r3, r3, r8
 800d0cc:	f000 8512 	beq.w	800daf4 <_dtoa_r+0xaac>
 800d0d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d0d2:	b953      	cbnz	r3, 800d0ea <_dtoa_r+0xa2>
 800d0d4:	4b95      	ldr	r3, [pc, #596]	; (800d32c <_dtoa_r+0x2e4>)
 800d0d6:	e01f      	b.n	800d118 <_dtoa_r+0xd0>
 800d0d8:	4b95      	ldr	r3, [pc, #596]	; (800d330 <_dtoa_r+0x2e8>)
 800d0da:	9300      	str	r3, [sp, #0]
 800d0dc:	3308      	adds	r3, #8
 800d0de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d0e0:	6013      	str	r3, [r2, #0]
 800d0e2:	9800      	ldr	r0, [sp, #0]
 800d0e4:	b015      	add	sp, #84	; 0x54
 800d0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ea:	4b90      	ldr	r3, [pc, #576]	; (800d32c <_dtoa_r+0x2e4>)
 800d0ec:	9300      	str	r3, [sp, #0]
 800d0ee:	3303      	adds	r3, #3
 800d0f0:	e7f5      	b.n	800d0de <_dtoa_r+0x96>
 800d0f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d0f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0fe:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d102:	d10b      	bne.n	800d11c <_dtoa_r+0xd4>
 800d104:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d106:	2301      	movs	r3, #1
 800d108:	6013      	str	r3, [r2, #0]
 800d10a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	f000 84ee 	beq.w	800daee <_dtoa_r+0xaa6>
 800d112:	4888      	ldr	r0, [pc, #544]	; (800d334 <_dtoa_r+0x2ec>)
 800d114:	6018      	str	r0, [r3, #0]
 800d116:	1e43      	subs	r3, r0, #1
 800d118:	9300      	str	r3, [sp, #0]
 800d11a:	e7e2      	b.n	800d0e2 <_dtoa_r+0x9a>
 800d11c:	a913      	add	r1, sp, #76	; 0x4c
 800d11e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d122:	aa12      	add	r2, sp, #72	; 0x48
 800d124:	4630      	mov	r0, r6
 800d126:	f001 fdc3 	bl	800ecb0 <__d2b>
 800d12a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d12e:	4605      	mov	r5, r0
 800d130:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d132:	2900      	cmp	r1, #0
 800d134:	d047      	beq.n	800d1c6 <_dtoa_r+0x17e>
 800d136:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d138:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d13c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d140:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d144:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d148:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d14c:	2400      	movs	r4, #0
 800d14e:	ec43 2b16 	vmov	d6, r2, r3
 800d152:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d156:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d308 <_dtoa_r+0x2c0>
 800d15a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d15e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d310 <_dtoa_r+0x2c8>
 800d162:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d166:	eeb0 7b46 	vmov.f64	d7, d6
 800d16a:	ee06 1a90 	vmov	s13, r1
 800d16e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d172:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d318 <_dtoa_r+0x2d0>
 800d176:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d17a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d17e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d186:	ee16 ba90 	vmov	fp, s13
 800d18a:	9411      	str	r4, [sp, #68]	; 0x44
 800d18c:	d508      	bpl.n	800d1a0 <_dtoa_r+0x158>
 800d18e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d192:	eeb4 6b47 	vcmp.f64	d6, d7
 800d196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d19a:	bf18      	it	ne
 800d19c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d1a0:	f1bb 0f16 	cmp.w	fp, #22
 800d1a4:	d832      	bhi.n	800d20c <_dtoa_r+0x1c4>
 800d1a6:	4b64      	ldr	r3, [pc, #400]	; (800d338 <_dtoa_r+0x2f0>)
 800d1a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d1ac:	ed93 7b00 	vldr	d7, [r3]
 800d1b0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d1b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1bc:	d501      	bpl.n	800d1c2 <_dtoa_r+0x17a>
 800d1be:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	e023      	b.n	800d20e <_dtoa_r+0x1c6>
 800d1c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d1c8:	4401      	add	r1, r0
 800d1ca:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d1ce:	2b20      	cmp	r3, #32
 800d1d0:	bfc3      	ittte	gt
 800d1d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d1d6:	fa04 f303 	lslgt.w	r3, r4, r3
 800d1da:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d1de:	f1c3 0320 	rsble	r3, r3, #32
 800d1e2:	bfc6      	itte	gt
 800d1e4:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d1e8:	ea43 0308 	orrgt.w	r3, r3, r8
 800d1ec:	fa08 f303 	lslle.w	r3, r8, r3
 800d1f0:	ee07 3a90 	vmov	s15, r3
 800d1f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d1f8:	3901      	subs	r1, #1
 800d1fa:	ed8d 7b00 	vstr	d7, [sp]
 800d1fe:	9c01      	ldr	r4, [sp, #4]
 800d200:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d204:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d208:	2401      	movs	r4, #1
 800d20a:	e7a0      	b.n	800d14e <_dtoa_r+0x106>
 800d20c:	2301      	movs	r3, #1
 800d20e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d210:	1a43      	subs	r3, r0, r1
 800d212:	1e5a      	subs	r2, r3, #1
 800d214:	bf45      	ittet	mi
 800d216:	f1c3 0301 	rsbmi	r3, r3, #1
 800d21a:	9305      	strmi	r3, [sp, #20]
 800d21c:	2300      	movpl	r3, #0
 800d21e:	2300      	movmi	r3, #0
 800d220:	9206      	str	r2, [sp, #24]
 800d222:	bf54      	ite	pl
 800d224:	9305      	strpl	r3, [sp, #20]
 800d226:	9306      	strmi	r3, [sp, #24]
 800d228:	f1bb 0f00 	cmp.w	fp, #0
 800d22c:	db18      	blt.n	800d260 <_dtoa_r+0x218>
 800d22e:	9b06      	ldr	r3, [sp, #24]
 800d230:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d234:	445b      	add	r3, fp
 800d236:	9306      	str	r3, [sp, #24]
 800d238:	2300      	movs	r3, #0
 800d23a:	9a07      	ldr	r2, [sp, #28]
 800d23c:	2a09      	cmp	r2, #9
 800d23e:	d849      	bhi.n	800d2d4 <_dtoa_r+0x28c>
 800d240:	2a05      	cmp	r2, #5
 800d242:	bfc4      	itt	gt
 800d244:	3a04      	subgt	r2, #4
 800d246:	9207      	strgt	r2, [sp, #28]
 800d248:	9a07      	ldr	r2, [sp, #28]
 800d24a:	f1a2 0202 	sub.w	r2, r2, #2
 800d24e:	bfcc      	ite	gt
 800d250:	2400      	movgt	r4, #0
 800d252:	2401      	movle	r4, #1
 800d254:	2a03      	cmp	r2, #3
 800d256:	d848      	bhi.n	800d2ea <_dtoa_r+0x2a2>
 800d258:	e8df f002 	tbb	[pc, r2]
 800d25c:	3a2c2e0b 	.word	0x3a2c2e0b
 800d260:	9b05      	ldr	r3, [sp, #20]
 800d262:	2200      	movs	r2, #0
 800d264:	eba3 030b 	sub.w	r3, r3, fp
 800d268:	9305      	str	r3, [sp, #20]
 800d26a:	920e      	str	r2, [sp, #56]	; 0x38
 800d26c:	f1cb 0300 	rsb	r3, fp, #0
 800d270:	e7e3      	b.n	800d23a <_dtoa_r+0x1f2>
 800d272:	2200      	movs	r2, #0
 800d274:	9208      	str	r2, [sp, #32]
 800d276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d278:	2a00      	cmp	r2, #0
 800d27a:	dc39      	bgt.n	800d2f0 <_dtoa_r+0x2a8>
 800d27c:	f04f 0a01 	mov.w	sl, #1
 800d280:	46d1      	mov	r9, sl
 800d282:	4652      	mov	r2, sl
 800d284:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d288:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d28a:	2100      	movs	r1, #0
 800d28c:	6079      	str	r1, [r7, #4]
 800d28e:	2004      	movs	r0, #4
 800d290:	f100 0c14 	add.w	ip, r0, #20
 800d294:	4594      	cmp	ip, r2
 800d296:	6879      	ldr	r1, [r7, #4]
 800d298:	d92f      	bls.n	800d2fa <_dtoa_r+0x2b2>
 800d29a:	4630      	mov	r0, r6
 800d29c:	930c      	str	r3, [sp, #48]	; 0x30
 800d29e:	f001 f91f 	bl	800e4e0 <_Balloc>
 800d2a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2a4:	9000      	str	r0, [sp, #0]
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d149      	bne.n	800d340 <_dtoa_r+0x2f8>
 800d2ac:	4b23      	ldr	r3, [pc, #140]	; (800d33c <_dtoa_r+0x2f4>)
 800d2ae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d2b2:	e6df      	b.n	800d074 <_dtoa_r+0x2c>
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	e7dd      	b.n	800d274 <_dtoa_r+0x22c>
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	9208      	str	r2, [sp, #32]
 800d2bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2be:	eb0b 0a02 	add.w	sl, fp, r2
 800d2c2:	f10a 0901 	add.w	r9, sl, #1
 800d2c6:	464a      	mov	r2, r9
 800d2c8:	2a01      	cmp	r2, #1
 800d2ca:	bfb8      	it	lt
 800d2cc:	2201      	movlt	r2, #1
 800d2ce:	e7db      	b.n	800d288 <_dtoa_r+0x240>
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	e7f2      	b.n	800d2ba <_dtoa_r+0x272>
 800d2d4:	2401      	movs	r4, #1
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d2dc:	f04f 3aff 	mov.w	sl, #4294967295
 800d2e0:	2100      	movs	r1, #0
 800d2e2:	46d1      	mov	r9, sl
 800d2e4:	2212      	movs	r2, #18
 800d2e6:	9109      	str	r1, [sp, #36]	; 0x24
 800d2e8:	e7ce      	b.n	800d288 <_dtoa_r+0x240>
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	9208      	str	r2, [sp, #32]
 800d2ee:	e7f5      	b.n	800d2dc <_dtoa_r+0x294>
 800d2f0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d2f4:	46d1      	mov	r9, sl
 800d2f6:	4652      	mov	r2, sl
 800d2f8:	e7c6      	b.n	800d288 <_dtoa_r+0x240>
 800d2fa:	3101      	adds	r1, #1
 800d2fc:	6079      	str	r1, [r7, #4]
 800d2fe:	0040      	lsls	r0, r0, #1
 800d300:	e7c6      	b.n	800d290 <_dtoa_r+0x248>
 800d302:	bf00      	nop
 800d304:	f3af 8000 	nop.w
 800d308:	636f4361 	.word	0x636f4361
 800d30c:	3fd287a7 	.word	0x3fd287a7
 800d310:	8b60c8b3 	.word	0x8b60c8b3
 800d314:	3fc68a28 	.word	0x3fc68a28
 800d318:	509f79fb 	.word	0x509f79fb
 800d31c:	3fd34413 	.word	0x3fd34413
 800d320:	0800fc95 	.word	0x0800fc95
 800d324:	0800fcac 	.word	0x0800fcac
 800d328:	7ff00000 	.word	0x7ff00000
 800d32c:	0800fc91 	.word	0x0800fc91
 800d330:	0800fc88 	.word	0x0800fc88
 800d334:	0800fc0d 	.word	0x0800fc0d
 800d338:	0800fe28 	.word	0x0800fe28
 800d33c:	0800fd0b 	.word	0x0800fd0b
 800d340:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d342:	9900      	ldr	r1, [sp, #0]
 800d344:	6011      	str	r1, [r2, #0]
 800d346:	f1b9 0f0e 	cmp.w	r9, #14
 800d34a:	d872      	bhi.n	800d432 <_dtoa_r+0x3ea>
 800d34c:	2c00      	cmp	r4, #0
 800d34e:	d070      	beq.n	800d432 <_dtoa_r+0x3ea>
 800d350:	f1bb 0f00 	cmp.w	fp, #0
 800d354:	f340 80a6 	ble.w	800d4a4 <_dtoa_r+0x45c>
 800d358:	49ca      	ldr	r1, [pc, #808]	; (800d684 <_dtoa_r+0x63c>)
 800d35a:	f00b 020f 	and.w	r2, fp, #15
 800d35e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d362:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d366:	ed92 7b00 	vldr	d7, [r2]
 800d36a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d36e:	f000 808d 	beq.w	800d48c <_dtoa_r+0x444>
 800d372:	4ac5      	ldr	r2, [pc, #788]	; (800d688 <_dtoa_r+0x640>)
 800d374:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d378:	ed92 6b08 	vldr	d6, [r2, #32]
 800d37c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d380:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d384:	f001 010f 	and.w	r1, r1, #15
 800d388:	2203      	movs	r2, #3
 800d38a:	48bf      	ldr	r0, [pc, #764]	; (800d688 <_dtoa_r+0x640>)
 800d38c:	2900      	cmp	r1, #0
 800d38e:	d17f      	bne.n	800d490 <_dtoa_r+0x448>
 800d390:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d394:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d398:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d39c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d39e:	2900      	cmp	r1, #0
 800d3a0:	f000 80b2 	beq.w	800d508 <_dtoa_r+0x4c0>
 800d3a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d3a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d3ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3b4:	f140 80a8 	bpl.w	800d508 <_dtoa_r+0x4c0>
 800d3b8:	f1b9 0f00 	cmp.w	r9, #0
 800d3bc:	f000 80a4 	beq.w	800d508 <_dtoa_r+0x4c0>
 800d3c0:	f1ba 0f00 	cmp.w	sl, #0
 800d3c4:	dd31      	ble.n	800d42a <_dtoa_r+0x3e2>
 800d3c6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d3ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d3ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d3d2:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d3d6:	3201      	adds	r2, #1
 800d3d8:	4650      	mov	r0, sl
 800d3da:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d3de:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d3e2:	ee07 2a90 	vmov	s15, r2
 800d3e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d3ea:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d3ee:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d3f2:	9c03      	ldr	r4, [sp, #12]
 800d3f4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d3f8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	f040 8086 	bne.w	800d50e <_dtoa_r+0x4c6>
 800d402:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d406:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d40a:	ec42 1b17 	vmov	d7, r1, r2
 800d40e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d416:	f300 8272 	bgt.w	800d8fe <_dtoa_r+0x8b6>
 800d41a:	eeb1 7b47 	vneg.f64	d7, d7
 800d41e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d426:	f100 8267 	bmi.w	800d8f8 <_dtoa_r+0x8b0>
 800d42a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800d42e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d432:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d434:	2a00      	cmp	r2, #0
 800d436:	f2c0 8129 	blt.w	800d68c <_dtoa_r+0x644>
 800d43a:	f1bb 0f0e 	cmp.w	fp, #14
 800d43e:	f300 8125 	bgt.w	800d68c <_dtoa_r+0x644>
 800d442:	4b90      	ldr	r3, [pc, #576]	; (800d684 <_dtoa_r+0x63c>)
 800d444:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d448:	ed93 6b00 	vldr	d6, [r3]
 800d44c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d44e:	2b00      	cmp	r3, #0
 800d450:	f280 80c3 	bge.w	800d5da <_dtoa_r+0x592>
 800d454:	f1b9 0f00 	cmp.w	r9, #0
 800d458:	f300 80bf 	bgt.w	800d5da <_dtoa_r+0x592>
 800d45c:	f040 824c 	bne.w	800d8f8 <_dtoa_r+0x8b0>
 800d460:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d464:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d468:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d46c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d474:	464c      	mov	r4, r9
 800d476:	464f      	mov	r7, r9
 800d478:	f280 8222 	bge.w	800d8c0 <_dtoa_r+0x878>
 800d47c:	f8dd 8000 	ldr.w	r8, [sp]
 800d480:	2331      	movs	r3, #49	; 0x31
 800d482:	f808 3b01 	strb.w	r3, [r8], #1
 800d486:	f10b 0b01 	add.w	fp, fp, #1
 800d48a:	e21e      	b.n	800d8ca <_dtoa_r+0x882>
 800d48c:	2202      	movs	r2, #2
 800d48e:	e77c      	b.n	800d38a <_dtoa_r+0x342>
 800d490:	07cc      	lsls	r4, r1, #31
 800d492:	d504      	bpl.n	800d49e <_dtoa_r+0x456>
 800d494:	ed90 6b00 	vldr	d6, [r0]
 800d498:	3201      	adds	r2, #1
 800d49a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d49e:	1049      	asrs	r1, r1, #1
 800d4a0:	3008      	adds	r0, #8
 800d4a2:	e773      	b.n	800d38c <_dtoa_r+0x344>
 800d4a4:	d02e      	beq.n	800d504 <_dtoa_r+0x4bc>
 800d4a6:	f1cb 0100 	rsb	r1, fp, #0
 800d4aa:	4a76      	ldr	r2, [pc, #472]	; (800d684 <_dtoa_r+0x63c>)
 800d4ac:	f001 000f 	and.w	r0, r1, #15
 800d4b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d4b4:	ed92 7b00 	vldr	d7, [r2]
 800d4b8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d4bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d4c0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d4c4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800d4c8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d4cc:	486e      	ldr	r0, [pc, #440]	; (800d688 <_dtoa_r+0x640>)
 800d4ce:	1109      	asrs	r1, r1, #4
 800d4d0:	2400      	movs	r4, #0
 800d4d2:	2202      	movs	r2, #2
 800d4d4:	b939      	cbnz	r1, 800d4e6 <_dtoa_r+0x49e>
 800d4d6:	2c00      	cmp	r4, #0
 800d4d8:	f43f af60 	beq.w	800d39c <_dtoa_r+0x354>
 800d4dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d4e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4e4:	e75a      	b.n	800d39c <_dtoa_r+0x354>
 800d4e6:	07cf      	lsls	r7, r1, #31
 800d4e8:	d509      	bpl.n	800d4fe <_dtoa_r+0x4b6>
 800d4ea:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d4ee:	ed90 7b00 	vldr	d7, [r0]
 800d4f2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d4f6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d4fa:	3201      	adds	r2, #1
 800d4fc:	2401      	movs	r4, #1
 800d4fe:	1049      	asrs	r1, r1, #1
 800d500:	3008      	adds	r0, #8
 800d502:	e7e7      	b.n	800d4d4 <_dtoa_r+0x48c>
 800d504:	2202      	movs	r2, #2
 800d506:	e749      	b.n	800d39c <_dtoa_r+0x354>
 800d508:	465f      	mov	r7, fp
 800d50a:	4648      	mov	r0, r9
 800d50c:	e765      	b.n	800d3da <_dtoa_r+0x392>
 800d50e:	ec42 1b17 	vmov	d7, r1, r2
 800d512:	4a5c      	ldr	r2, [pc, #368]	; (800d684 <_dtoa_r+0x63c>)
 800d514:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d518:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d51c:	9a00      	ldr	r2, [sp, #0]
 800d51e:	1814      	adds	r4, r2, r0
 800d520:	9a08      	ldr	r2, [sp, #32]
 800d522:	b352      	cbz	r2, 800d57a <_dtoa_r+0x532>
 800d524:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d528:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d52c:	f8dd 8000 	ldr.w	r8, [sp]
 800d530:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d534:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d538:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d53c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d540:	ee14 2a90 	vmov	r2, s9
 800d544:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d548:	3230      	adds	r2, #48	; 0x30
 800d54a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d54e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d556:	f808 2b01 	strb.w	r2, [r8], #1
 800d55a:	d439      	bmi.n	800d5d0 <_dtoa_r+0x588>
 800d55c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d560:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d568:	d472      	bmi.n	800d650 <_dtoa_r+0x608>
 800d56a:	45a0      	cmp	r8, r4
 800d56c:	f43f af5d 	beq.w	800d42a <_dtoa_r+0x3e2>
 800d570:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d574:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d578:	e7e0      	b.n	800d53c <_dtoa_r+0x4f4>
 800d57a:	f8dd 8000 	ldr.w	r8, [sp]
 800d57e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d582:	4621      	mov	r1, r4
 800d584:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d588:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d58c:	ee14 2a90 	vmov	r2, s9
 800d590:	3230      	adds	r2, #48	; 0x30
 800d592:	f808 2b01 	strb.w	r2, [r8], #1
 800d596:	45a0      	cmp	r8, r4
 800d598:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d59c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d5a0:	d118      	bne.n	800d5d4 <_dtoa_r+0x58c>
 800d5a2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d5a6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d5aa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5b2:	dc4d      	bgt.n	800d650 <_dtoa_r+0x608>
 800d5b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d5b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5c0:	f57f af33 	bpl.w	800d42a <_dtoa_r+0x3e2>
 800d5c4:	4688      	mov	r8, r1
 800d5c6:	3901      	subs	r1, #1
 800d5c8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d5cc:	2b30      	cmp	r3, #48	; 0x30
 800d5ce:	d0f9      	beq.n	800d5c4 <_dtoa_r+0x57c>
 800d5d0:	46bb      	mov	fp, r7
 800d5d2:	e02a      	b.n	800d62a <_dtoa_r+0x5e2>
 800d5d4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d5d8:	e7d6      	b.n	800d588 <_dtoa_r+0x540>
 800d5da:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5de:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d5e2:	f8dd 8000 	ldr.w	r8, [sp]
 800d5e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d5ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d5ee:	ee15 3a10 	vmov	r3, s10
 800d5f2:	3330      	adds	r3, #48	; 0x30
 800d5f4:	f808 3b01 	strb.w	r3, [r8], #1
 800d5f8:	9b00      	ldr	r3, [sp, #0]
 800d5fa:	eba8 0303 	sub.w	r3, r8, r3
 800d5fe:	4599      	cmp	r9, r3
 800d600:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d604:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d608:	d133      	bne.n	800d672 <_dtoa_r+0x62a>
 800d60a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d60e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d616:	dc1a      	bgt.n	800d64e <_dtoa_r+0x606>
 800d618:	eeb4 7b46 	vcmp.f64	d7, d6
 800d61c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d620:	d103      	bne.n	800d62a <_dtoa_r+0x5e2>
 800d622:	ee15 3a10 	vmov	r3, s10
 800d626:	07d9      	lsls	r1, r3, #31
 800d628:	d411      	bmi.n	800d64e <_dtoa_r+0x606>
 800d62a:	4629      	mov	r1, r5
 800d62c:	4630      	mov	r0, r6
 800d62e:	f000 ff97 	bl	800e560 <_Bfree>
 800d632:	2300      	movs	r3, #0
 800d634:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d636:	f888 3000 	strb.w	r3, [r8]
 800d63a:	f10b 0301 	add.w	r3, fp, #1
 800d63e:	6013      	str	r3, [r2, #0]
 800d640:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d642:	2b00      	cmp	r3, #0
 800d644:	f43f ad4d 	beq.w	800d0e2 <_dtoa_r+0x9a>
 800d648:	f8c3 8000 	str.w	r8, [r3]
 800d64c:	e549      	b.n	800d0e2 <_dtoa_r+0x9a>
 800d64e:	465f      	mov	r7, fp
 800d650:	4643      	mov	r3, r8
 800d652:	4698      	mov	r8, r3
 800d654:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d658:	2a39      	cmp	r2, #57	; 0x39
 800d65a:	d106      	bne.n	800d66a <_dtoa_r+0x622>
 800d65c:	9a00      	ldr	r2, [sp, #0]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d1f7      	bne.n	800d652 <_dtoa_r+0x60a>
 800d662:	9900      	ldr	r1, [sp, #0]
 800d664:	2230      	movs	r2, #48	; 0x30
 800d666:	3701      	adds	r7, #1
 800d668:	700a      	strb	r2, [r1, #0]
 800d66a:	781a      	ldrb	r2, [r3, #0]
 800d66c:	3201      	adds	r2, #1
 800d66e:	701a      	strb	r2, [r3, #0]
 800d670:	e7ae      	b.n	800d5d0 <_dtoa_r+0x588>
 800d672:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d676:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d67e:	d1b2      	bne.n	800d5e6 <_dtoa_r+0x59e>
 800d680:	e7d3      	b.n	800d62a <_dtoa_r+0x5e2>
 800d682:	bf00      	nop
 800d684:	0800fe28 	.word	0x0800fe28
 800d688:	0800fe00 	.word	0x0800fe00
 800d68c:	9908      	ldr	r1, [sp, #32]
 800d68e:	2900      	cmp	r1, #0
 800d690:	f000 80d1 	beq.w	800d836 <_dtoa_r+0x7ee>
 800d694:	9907      	ldr	r1, [sp, #28]
 800d696:	2901      	cmp	r1, #1
 800d698:	f300 80b4 	bgt.w	800d804 <_dtoa_r+0x7bc>
 800d69c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d69e:	2900      	cmp	r1, #0
 800d6a0:	f000 80ac 	beq.w	800d7fc <_dtoa_r+0x7b4>
 800d6a4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d6a8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d6ac:	461c      	mov	r4, r3
 800d6ae:	930a      	str	r3, [sp, #40]	; 0x28
 800d6b0:	9b05      	ldr	r3, [sp, #20]
 800d6b2:	4413      	add	r3, r2
 800d6b4:	9305      	str	r3, [sp, #20]
 800d6b6:	9b06      	ldr	r3, [sp, #24]
 800d6b8:	2101      	movs	r1, #1
 800d6ba:	4413      	add	r3, r2
 800d6bc:	4630      	mov	r0, r6
 800d6be:	9306      	str	r3, [sp, #24]
 800d6c0:	f001 f854 	bl	800e76c <__i2b>
 800d6c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6c6:	4607      	mov	r7, r0
 800d6c8:	f1b8 0f00 	cmp.w	r8, #0
 800d6cc:	dd0d      	ble.n	800d6ea <_dtoa_r+0x6a2>
 800d6ce:	9a06      	ldr	r2, [sp, #24]
 800d6d0:	2a00      	cmp	r2, #0
 800d6d2:	dd0a      	ble.n	800d6ea <_dtoa_r+0x6a2>
 800d6d4:	4542      	cmp	r2, r8
 800d6d6:	9905      	ldr	r1, [sp, #20]
 800d6d8:	bfa8      	it	ge
 800d6da:	4642      	movge	r2, r8
 800d6dc:	1a89      	subs	r1, r1, r2
 800d6de:	9105      	str	r1, [sp, #20]
 800d6e0:	9906      	ldr	r1, [sp, #24]
 800d6e2:	eba8 0802 	sub.w	r8, r8, r2
 800d6e6:	1a8a      	subs	r2, r1, r2
 800d6e8:	9206      	str	r2, [sp, #24]
 800d6ea:	b303      	cbz	r3, 800d72e <_dtoa_r+0x6e6>
 800d6ec:	9a08      	ldr	r2, [sp, #32]
 800d6ee:	2a00      	cmp	r2, #0
 800d6f0:	f000 80a6 	beq.w	800d840 <_dtoa_r+0x7f8>
 800d6f4:	2c00      	cmp	r4, #0
 800d6f6:	dd13      	ble.n	800d720 <_dtoa_r+0x6d8>
 800d6f8:	4639      	mov	r1, r7
 800d6fa:	4622      	mov	r2, r4
 800d6fc:	4630      	mov	r0, r6
 800d6fe:	930c      	str	r3, [sp, #48]	; 0x30
 800d700:	f001 f8f0 	bl	800e8e4 <__pow5mult>
 800d704:	462a      	mov	r2, r5
 800d706:	4601      	mov	r1, r0
 800d708:	4607      	mov	r7, r0
 800d70a:	4630      	mov	r0, r6
 800d70c:	f001 f844 	bl	800e798 <__multiply>
 800d710:	4629      	mov	r1, r5
 800d712:	900a      	str	r0, [sp, #40]	; 0x28
 800d714:	4630      	mov	r0, r6
 800d716:	f000 ff23 	bl	800e560 <_Bfree>
 800d71a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d71c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d71e:	4615      	mov	r5, r2
 800d720:	1b1a      	subs	r2, r3, r4
 800d722:	d004      	beq.n	800d72e <_dtoa_r+0x6e6>
 800d724:	4629      	mov	r1, r5
 800d726:	4630      	mov	r0, r6
 800d728:	f001 f8dc 	bl	800e8e4 <__pow5mult>
 800d72c:	4605      	mov	r5, r0
 800d72e:	2101      	movs	r1, #1
 800d730:	4630      	mov	r0, r6
 800d732:	f001 f81b 	bl	800e76c <__i2b>
 800d736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d738:	2b00      	cmp	r3, #0
 800d73a:	4604      	mov	r4, r0
 800d73c:	f340 8082 	ble.w	800d844 <_dtoa_r+0x7fc>
 800d740:	461a      	mov	r2, r3
 800d742:	4601      	mov	r1, r0
 800d744:	4630      	mov	r0, r6
 800d746:	f001 f8cd 	bl	800e8e4 <__pow5mult>
 800d74a:	9b07      	ldr	r3, [sp, #28]
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	4604      	mov	r4, r0
 800d750:	dd7b      	ble.n	800d84a <_dtoa_r+0x802>
 800d752:	2300      	movs	r3, #0
 800d754:	930a      	str	r3, [sp, #40]	; 0x28
 800d756:	6922      	ldr	r2, [r4, #16]
 800d758:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d75c:	6910      	ldr	r0, [r2, #16]
 800d75e:	f000 ffb5 	bl	800e6cc <__hi0bits>
 800d762:	f1c0 0020 	rsb	r0, r0, #32
 800d766:	9b06      	ldr	r3, [sp, #24]
 800d768:	4418      	add	r0, r3
 800d76a:	f010 001f 	ands.w	r0, r0, #31
 800d76e:	f000 808d 	beq.w	800d88c <_dtoa_r+0x844>
 800d772:	f1c0 0220 	rsb	r2, r0, #32
 800d776:	2a04      	cmp	r2, #4
 800d778:	f340 8086 	ble.w	800d888 <_dtoa_r+0x840>
 800d77c:	f1c0 001c 	rsb	r0, r0, #28
 800d780:	9b05      	ldr	r3, [sp, #20]
 800d782:	4403      	add	r3, r0
 800d784:	9305      	str	r3, [sp, #20]
 800d786:	9b06      	ldr	r3, [sp, #24]
 800d788:	4403      	add	r3, r0
 800d78a:	4480      	add	r8, r0
 800d78c:	9306      	str	r3, [sp, #24]
 800d78e:	9b05      	ldr	r3, [sp, #20]
 800d790:	2b00      	cmp	r3, #0
 800d792:	dd05      	ble.n	800d7a0 <_dtoa_r+0x758>
 800d794:	4629      	mov	r1, r5
 800d796:	461a      	mov	r2, r3
 800d798:	4630      	mov	r0, r6
 800d79a:	f001 f8fd 	bl	800e998 <__lshift>
 800d79e:	4605      	mov	r5, r0
 800d7a0:	9b06      	ldr	r3, [sp, #24]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	dd05      	ble.n	800d7b2 <_dtoa_r+0x76a>
 800d7a6:	4621      	mov	r1, r4
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	f001 f8f4 	bl	800e998 <__lshift>
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d06b      	beq.n	800d890 <_dtoa_r+0x848>
 800d7b8:	4621      	mov	r1, r4
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	f001 f958 	bl	800ea70 <__mcmp>
 800d7c0:	2800      	cmp	r0, #0
 800d7c2:	da65      	bge.n	800d890 <_dtoa_r+0x848>
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	4629      	mov	r1, r5
 800d7c8:	220a      	movs	r2, #10
 800d7ca:	4630      	mov	r0, r6
 800d7cc:	f000 feea 	bl	800e5a4 <__multadd>
 800d7d0:	9b08      	ldr	r3, [sp, #32]
 800d7d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d7d6:	4605      	mov	r5, r0
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	f000 8192 	beq.w	800db02 <_dtoa_r+0xaba>
 800d7de:	4639      	mov	r1, r7
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	220a      	movs	r2, #10
 800d7e4:	4630      	mov	r0, r6
 800d7e6:	f000 fedd 	bl	800e5a4 <__multadd>
 800d7ea:	f1ba 0f00 	cmp.w	sl, #0
 800d7ee:	4607      	mov	r7, r0
 800d7f0:	f300 808e 	bgt.w	800d910 <_dtoa_r+0x8c8>
 800d7f4:	9b07      	ldr	r3, [sp, #28]
 800d7f6:	2b02      	cmp	r3, #2
 800d7f8:	dc51      	bgt.n	800d89e <_dtoa_r+0x856>
 800d7fa:	e089      	b.n	800d910 <_dtoa_r+0x8c8>
 800d7fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d7fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d802:	e751      	b.n	800d6a8 <_dtoa_r+0x660>
 800d804:	f109 34ff 	add.w	r4, r9, #4294967295
 800d808:	42a3      	cmp	r3, r4
 800d80a:	bfbf      	itttt	lt
 800d80c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800d80e:	1ae3      	sublt	r3, r4, r3
 800d810:	18d2      	addlt	r2, r2, r3
 800d812:	4613      	movlt	r3, r2
 800d814:	bfb7      	itett	lt
 800d816:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d818:	1b1c      	subge	r4, r3, r4
 800d81a:	4623      	movlt	r3, r4
 800d81c:	2400      	movlt	r4, #0
 800d81e:	f1b9 0f00 	cmp.w	r9, #0
 800d822:	bfb5      	itete	lt
 800d824:	9a05      	ldrlt	r2, [sp, #20]
 800d826:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800d82a:	eba2 0809 	sublt.w	r8, r2, r9
 800d82e:	464a      	movge	r2, r9
 800d830:	bfb8      	it	lt
 800d832:	2200      	movlt	r2, #0
 800d834:	e73b      	b.n	800d6ae <_dtoa_r+0x666>
 800d836:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d83a:	9f08      	ldr	r7, [sp, #32]
 800d83c:	461c      	mov	r4, r3
 800d83e:	e743      	b.n	800d6c8 <_dtoa_r+0x680>
 800d840:	461a      	mov	r2, r3
 800d842:	e76f      	b.n	800d724 <_dtoa_r+0x6dc>
 800d844:	9b07      	ldr	r3, [sp, #28]
 800d846:	2b01      	cmp	r3, #1
 800d848:	dc18      	bgt.n	800d87c <_dtoa_r+0x834>
 800d84a:	9b02      	ldr	r3, [sp, #8]
 800d84c:	b9b3      	cbnz	r3, 800d87c <_dtoa_r+0x834>
 800d84e:	9b03      	ldr	r3, [sp, #12]
 800d850:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d854:	b9a2      	cbnz	r2, 800d880 <_dtoa_r+0x838>
 800d856:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d85a:	0d12      	lsrs	r2, r2, #20
 800d85c:	0512      	lsls	r2, r2, #20
 800d85e:	b18a      	cbz	r2, 800d884 <_dtoa_r+0x83c>
 800d860:	9b05      	ldr	r3, [sp, #20]
 800d862:	3301      	adds	r3, #1
 800d864:	9305      	str	r3, [sp, #20]
 800d866:	9b06      	ldr	r3, [sp, #24]
 800d868:	3301      	adds	r3, #1
 800d86a:	9306      	str	r3, [sp, #24]
 800d86c:	2301      	movs	r3, #1
 800d86e:	930a      	str	r3, [sp, #40]	; 0x28
 800d870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d872:	2b00      	cmp	r3, #0
 800d874:	f47f af6f 	bne.w	800d756 <_dtoa_r+0x70e>
 800d878:	2001      	movs	r0, #1
 800d87a:	e774      	b.n	800d766 <_dtoa_r+0x71e>
 800d87c:	2300      	movs	r3, #0
 800d87e:	e7f6      	b.n	800d86e <_dtoa_r+0x826>
 800d880:	9b02      	ldr	r3, [sp, #8]
 800d882:	e7f4      	b.n	800d86e <_dtoa_r+0x826>
 800d884:	920a      	str	r2, [sp, #40]	; 0x28
 800d886:	e7f3      	b.n	800d870 <_dtoa_r+0x828>
 800d888:	d081      	beq.n	800d78e <_dtoa_r+0x746>
 800d88a:	4610      	mov	r0, r2
 800d88c:	301c      	adds	r0, #28
 800d88e:	e777      	b.n	800d780 <_dtoa_r+0x738>
 800d890:	f1b9 0f00 	cmp.w	r9, #0
 800d894:	dc37      	bgt.n	800d906 <_dtoa_r+0x8be>
 800d896:	9b07      	ldr	r3, [sp, #28]
 800d898:	2b02      	cmp	r3, #2
 800d89a:	dd34      	ble.n	800d906 <_dtoa_r+0x8be>
 800d89c:	46ca      	mov	sl, r9
 800d89e:	f1ba 0f00 	cmp.w	sl, #0
 800d8a2:	d10d      	bne.n	800d8c0 <_dtoa_r+0x878>
 800d8a4:	4621      	mov	r1, r4
 800d8a6:	4653      	mov	r3, sl
 800d8a8:	2205      	movs	r2, #5
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	f000 fe7a 	bl	800e5a4 <__multadd>
 800d8b0:	4601      	mov	r1, r0
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	f001 f8db 	bl	800ea70 <__mcmp>
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	f73f adde 	bgt.w	800d47c <_dtoa_r+0x434>
 800d8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8c2:	f8dd 8000 	ldr.w	r8, [sp]
 800d8c6:	ea6f 0b03 	mvn.w	fp, r3
 800d8ca:	f04f 0900 	mov.w	r9, #0
 800d8ce:	4621      	mov	r1, r4
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	f000 fe45 	bl	800e560 <_Bfree>
 800d8d6:	2f00      	cmp	r7, #0
 800d8d8:	f43f aea7 	beq.w	800d62a <_dtoa_r+0x5e2>
 800d8dc:	f1b9 0f00 	cmp.w	r9, #0
 800d8e0:	d005      	beq.n	800d8ee <_dtoa_r+0x8a6>
 800d8e2:	45b9      	cmp	r9, r7
 800d8e4:	d003      	beq.n	800d8ee <_dtoa_r+0x8a6>
 800d8e6:	4649      	mov	r1, r9
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	f000 fe39 	bl	800e560 <_Bfree>
 800d8ee:	4639      	mov	r1, r7
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	f000 fe35 	bl	800e560 <_Bfree>
 800d8f6:	e698      	b.n	800d62a <_dtoa_r+0x5e2>
 800d8f8:	2400      	movs	r4, #0
 800d8fa:	4627      	mov	r7, r4
 800d8fc:	e7e0      	b.n	800d8c0 <_dtoa_r+0x878>
 800d8fe:	46bb      	mov	fp, r7
 800d900:	4604      	mov	r4, r0
 800d902:	4607      	mov	r7, r0
 800d904:	e5ba      	b.n	800d47c <_dtoa_r+0x434>
 800d906:	9b08      	ldr	r3, [sp, #32]
 800d908:	46ca      	mov	sl, r9
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	f000 8100 	beq.w	800db10 <_dtoa_r+0xac8>
 800d910:	f1b8 0f00 	cmp.w	r8, #0
 800d914:	dd05      	ble.n	800d922 <_dtoa_r+0x8da>
 800d916:	4639      	mov	r1, r7
 800d918:	4642      	mov	r2, r8
 800d91a:	4630      	mov	r0, r6
 800d91c:	f001 f83c 	bl	800e998 <__lshift>
 800d920:	4607      	mov	r7, r0
 800d922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d924:	2b00      	cmp	r3, #0
 800d926:	d05d      	beq.n	800d9e4 <_dtoa_r+0x99c>
 800d928:	6879      	ldr	r1, [r7, #4]
 800d92a:	4630      	mov	r0, r6
 800d92c:	f000 fdd8 	bl	800e4e0 <_Balloc>
 800d930:	4680      	mov	r8, r0
 800d932:	b928      	cbnz	r0, 800d940 <_dtoa_r+0x8f8>
 800d934:	4b82      	ldr	r3, [pc, #520]	; (800db40 <_dtoa_r+0xaf8>)
 800d936:	4602      	mov	r2, r0
 800d938:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d93c:	f7ff bb9a 	b.w	800d074 <_dtoa_r+0x2c>
 800d940:	693a      	ldr	r2, [r7, #16]
 800d942:	3202      	adds	r2, #2
 800d944:	0092      	lsls	r2, r2, #2
 800d946:	f107 010c 	add.w	r1, r7, #12
 800d94a:	300c      	adds	r0, #12
 800d94c:	f7fd fb02 	bl	800af54 <memcpy>
 800d950:	2201      	movs	r2, #1
 800d952:	4641      	mov	r1, r8
 800d954:	4630      	mov	r0, r6
 800d956:	f001 f81f 	bl	800e998 <__lshift>
 800d95a:	9b00      	ldr	r3, [sp, #0]
 800d95c:	3301      	adds	r3, #1
 800d95e:	9305      	str	r3, [sp, #20]
 800d960:	9b00      	ldr	r3, [sp, #0]
 800d962:	4453      	add	r3, sl
 800d964:	9309      	str	r3, [sp, #36]	; 0x24
 800d966:	9b02      	ldr	r3, [sp, #8]
 800d968:	f003 0301 	and.w	r3, r3, #1
 800d96c:	46b9      	mov	r9, r7
 800d96e:	9308      	str	r3, [sp, #32]
 800d970:	4607      	mov	r7, r0
 800d972:	9b05      	ldr	r3, [sp, #20]
 800d974:	4621      	mov	r1, r4
 800d976:	3b01      	subs	r3, #1
 800d978:	4628      	mov	r0, r5
 800d97a:	9302      	str	r3, [sp, #8]
 800d97c:	f7ff fad8 	bl	800cf30 <quorem>
 800d980:	4603      	mov	r3, r0
 800d982:	3330      	adds	r3, #48	; 0x30
 800d984:	9006      	str	r0, [sp, #24]
 800d986:	4649      	mov	r1, r9
 800d988:	4628      	mov	r0, r5
 800d98a:	930a      	str	r3, [sp, #40]	; 0x28
 800d98c:	f001 f870 	bl	800ea70 <__mcmp>
 800d990:	463a      	mov	r2, r7
 800d992:	4682      	mov	sl, r0
 800d994:	4621      	mov	r1, r4
 800d996:	4630      	mov	r0, r6
 800d998:	f001 f886 	bl	800eaa8 <__mdiff>
 800d99c:	68c2      	ldr	r2, [r0, #12]
 800d99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9a0:	4680      	mov	r8, r0
 800d9a2:	bb0a      	cbnz	r2, 800d9e8 <_dtoa_r+0x9a0>
 800d9a4:	4601      	mov	r1, r0
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	f001 f862 	bl	800ea70 <__mcmp>
 800d9ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	4641      	mov	r1, r8
 800d9b2:	4630      	mov	r0, r6
 800d9b4:	920e      	str	r2, [sp, #56]	; 0x38
 800d9b6:	930a      	str	r3, [sp, #40]	; 0x28
 800d9b8:	f000 fdd2 	bl	800e560 <_Bfree>
 800d9bc:	9b07      	ldr	r3, [sp, #28]
 800d9be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9c0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d9c4:	ea43 0102 	orr.w	r1, r3, r2
 800d9c8:	9b08      	ldr	r3, [sp, #32]
 800d9ca:	430b      	orrs	r3, r1
 800d9cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9ce:	d10d      	bne.n	800d9ec <_dtoa_r+0x9a4>
 800d9d0:	2b39      	cmp	r3, #57	; 0x39
 800d9d2:	d029      	beq.n	800da28 <_dtoa_r+0x9e0>
 800d9d4:	f1ba 0f00 	cmp.w	sl, #0
 800d9d8:	dd01      	ble.n	800d9de <_dtoa_r+0x996>
 800d9da:	9b06      	ldr	r3, [sp, #24]
 800d9dc:	3331      	adds	r3, #49	; 0x31
 800d9de:	9a02      	ldr	r2, [sp, #8]
 800d9e0:	7013      	strb	r3, [r2, #0]
 800d9e2:	e774      	b.n	800d8ce <_dtoa_r+0x886>
 800d9e4:	4638      	mov	r0, r7
 800d9e6:	e7b8      	b.n	800d95a <_dtoa_r+0x912>
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	e7e1      	b.n	800d9b0 <_dtoa_r+0x968>
 800d9ec:	f1ba 0f00 	cmp.w	sl, #0
 800d9f0:	db06      	blt.n	800da00 <_dtoa_r+0x9b8>
 800d9f2:	9907      	ldr	r1, [sp, #28]
 800d9f4:	ea41 0a0a 	orr.w	sl, r1, sl
 800d9f8:	9908      	ldr	r1, [sp, #32]
 800d9fa:	ea5a 0101 	orrs.w	r1, sl, r1
 800d9fe:	d120      	bne.n	800da42 <_dtoa_r+0x9fa>
 800da00:	2a00      	cmp	r2, #0
 800da02:	ddec      	ble.n	800d9de <_dtoa_r+0x996>
 800da04:	4629      	mov	r1, r5
 800da06:	2201      	movs	r2, #1
 800da08:	4630      	mov	r0, r6
 800da0a:	9305      	str	r3, [sp, #20]
 800da0c:	f000 ffc4 	bl	800e998 <__lshift>
 800da10:	4621      	mov	r1, r4
 800da12:	4605      	mov	r5, r0
 800da14:	f001 f82c 	bl	800ea70 <__mcmp>
 800da18:	2800      	cmp	r0, #0
 800da1a:	9b05      	ldr	r3, [sp, #20]
 800da1c:	dc02      	bgt.n	800da24 <_dtoa_r+0x9dc>
 800da1e:	d1de      	bne.n	800d9de <_dtoa_r+0x996>
 800da20:	07da      	lsls	r2, r3, #31
 800da22:	d5dc      	bpl.n	800d9de <_dtoa_r+0x996>
 800da24:	2b39      	cmp	r3, #57	; 0x39
 800da26:	d1d8      	bne.n	800d9da <_dtoa_r+0x992>
 800da28:	9a02      	ldr	r2, [sp, #8]
 800da2a:	2339      	movs	r3, #57	; 0x39
 800da2c:	7013      	strb	r3, [r2, #0]
 800da2e:	4643      	mov	r3, r8
 800da30:	4698      	mov	r8, r3
 800da32:	3b01      	subs	r3, #1
 800da34:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800da38:	2a39      	cmp	r2, #57	; 0x39
 800da3a:	d051      	beq.n	800dae0 <_dtoa_r+0xa98>
 800da3c:	3201      	adds	r2, #1
 800da3e:	701a      	strb	r2, [r3, #0]
 800da40:	e745      	b.n	800d8ce <_dtoa_r+0x886>
 800da42:	2a00      	cmp	r2, #0
 800da44:	dd03      	ble.n	800da4e <_dtoa_r+0xa06>
 800da46:	2b39      	cmp	r3, #57	; 0x39
 800da48:	d0ee      	beq.n	800da28 <_dtoa_r+0x9e0>
 800da4a:	3301      	adds	r3, #1
 800da4c:	e7c7      	b.n	800d9de <_dtoa_r+0x996>
 800da4e:	9a05      	ldr	r2, [sp, #20]
 800da50:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da52:	f802 3c01 	strb.w	r3, [r2, #-1]
 800da56:	428a      	cmp	r2, r1
 800da58:	d02b      	beq.n	800dab2 <_dtoa_r+0xa6a>
 800da5a:	4629      	mov	r1, r5
 800da5c:	2300      	movs	r3, #0
 800da5e:	220a      	movs	r2, #10
 800da60:	4630      	mov	r0, r6
 800da62:	f000 fd9f 	bl	800e5a4 <__multadd>
 800da66:	45b9      	cmp	r9, r7
 800da68:	4605      	mov	r5, r0
 800da6a:	f04f 0300 	mov.w	r3, #0
 800da6e:	f04f 020a 	mov.w	r2, #10
 800da72:	4649      	mov	r1, r9
 800da74:	4630      	mov	r0, r6
 800da76:	d107      	bne.n	800da88 <_dtoa_r+0xa40>
 800da78:	f000 fd94 	bl	800e5a4 <__multadd>
 800da7c:	4681      	mov	r9, r0
 800da7e:	4607      	mov	r7, r0
 800da80:	9b05      	ldr	r3, [sp, #20]
 800da82:	3301      	adds	r3, #1
 800da84:	9305      	str	r3, [sp, #20]
 800da86:	e774      	b.n	800d972 <_dtoa_r+0x92a>
 800da88:	f000 fd8c 	bl	800e5a4 <__multadd>
 800da8c:	4639      	mov	r1, r7
 800da8e:	4681      	mov	r9, r0
 800da90:	2300      	movs	r3, #0
 800da92:	220a      	movs	r2, #10
 800da94:	4630      	mov	r0, r6
 800da96:	f000 fd85 	bl	800e5a4 <__multadd>
 800da9a:	4607      	mov	r7, r0
 800da9c:	e7f0      	b.n	800da80 <_dtoa_r+0xa38>
 800da9e:	f1ba 0f00 	cmp.w	sl, #0
 800daa2:	9a00      	ldr	r2, [sp, #0]
 800daa4:	bfcc      	ite	gt
 800daa6:	46d0      	movgt	r8, sl
 800daa8:	f04f 0801 	movle.w	r8, #1
 800daac:	4490      	add	r8, r2
 800daae:	f04f 0900 	mov.w	r9, #0
 800dab2:	4629      	mov	r1, r5
 800dab4:	2201      	movs	r2, #1
 800dab6:	4630      	mov	r0, r6
 800dab8:	9302      	str	r3, [sp, #8]
 800daba:	f000 ff6d 	bl	800e998 <__lshift>
 800dabe:	4621      	mov	r1, r4
 800dac0:	4605      	mov	r5, r0
 800dac2:	f000 ffd5 	bl	800ea70 <__mcmp>
 800dac6:	2800      	cmp	r0, #0
 800dac8:	dcb1      	bgt.n	800da2e <_dtoa_r+0x9e6>
 800daca:	d102      	bne.n	800dad2 <_dtoa_r+0xa8a>
 800dacc:	9b02      	ldr	r3, [sp, #8]
 800dace:	07db      	lsls	r3, r3, #31
 800dad0:	d4ad      	bmi.n	800da2e <_dtoa_r+0x9e6>
 800dad2:	4643      	mov	r3, r8
 800dad4:	4698      	mov	r8, r3
 800dad6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dada:	2a30      	cmp	r2, #48	; 0x30
 800dadc:	d0fa      	beq.n	800dad4 <_dtoa_r+0xa8c>
 800dade:	e6f6      	b.n	800d8ce <_dtoa_r+0x886>
 800dae0:	9a00      	ldr	r2, [sp, #0]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d1a4      	bne.n	800da30 <_dtoa_r+0x9e8>
 800dae6:	f10b 0b01 	add.w	fp, fp, #1
 800daea:	2331      	movs	r3, #49	; 0x31
 800daec:	e778      	b.n	800d9e0 <_dtoa_r+0x998>
 800daee:	4b15      	ldr	r3, [pc, #84]	; (800db44 <_dtoa_r+0xafc>)
 800daf0:	f7ff bb12 	b.w	800d118 <_dtoa_r+0xd0>
 800daf4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	f47f aaee 	bne.w	800d0d8 <_dtoa_r+0x90>
 800dafc:	4b12      	ldr	r3, [pc, #72]	; (800db48 <_dtoa_r+0xb00>)
 800dafe:	f7ff bb0b 	b.w	800d118 <_dtoa_r+0xd0>
 800db02:	f1ba 0f00 	cmp.w	sl, #0
 800db06:	dc03      	bgt.n	800db10 <_dtoa_r+0xac8>
 800db08:	9b07      	ldr	r3, [sp, #28]
 800db0a:	2b02      	cmp	r3, #2
 800db0c:	f73f aec7 	bgt.w	800d89e <_dtoa_r+0x856>
 800db10:	f8dd 8000 	ldr.w	r8, [sp]
 800db14:	4621      	mov	r1, r4
 800db16:	4628      	mov	r0, r5
 800db18:	f7ff fa0a 	bl	800cf30 <quorem>
 800db1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800db20:	f808 3b01 	strb.w	r3, [r8], #1
 800db24:	9a00      	ldr	r2, [sp, #0]
 800db26:	eba8 0202 	sub.w	r2, r8, r2
 800db2a:	4592      	cmp	sl, r2
 800db2c:	ddb7      	ble.n	800da9e <_dtoa_r+0xa56>
 800db2e:	4629      	mov	r1, r5
 800db30:	2300      	movs	r3, #0
 800db32:	220a      	movs	r2, #10
 800db34:	4630      	mov	r0, r6
 800db36:	f000 fd35 	bl	800e5a4 <__multadd>
 800db3a:	4605      	mov	r5, r0
 800db3c:	e7ea      	b.n	800db14 <_dtoa_r+0xacc>
 800db3e:	bf00      	nop
 800db40:	0800fd0b 	.word	0x0800fd0b
 800db44:	0800fc0c 	.word	0x0800fc0c
 800db48:	0800fc88 	.word	0x0800fc88

0800db4c <__sflush_r>:
 800db4c:	898a      	ldrh	r2, [r1, #12]
 800db4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db52:	4605      	mov	r5, r0
 800db54:	0710      	lsls	r0, r2, #28
 800db56:	460c      	mov	r4, r1
 800db58:	d458      	bmi.n	800dc0c <__sflush_r+0xc0>
 800db5a:	684b      	ldr	r3, [r1, #4]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	dc05      	bgt.n	800db6c <__sflush_r+0x20>
 800db60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800db62:	2b00      	cmp	r3, #0
 800db64:	dc02      	bgt.n	800db6c <__sflush_r+0x20>
 800db66:	2000      	movs	r0, #0
 800db68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db6e:	2e00      	cmp	r6, #0
 800db70:	d0f9      	beq.n	800db66 <__sflush_r+0x1a>
 800db72:	2300      	movs	r3, #0
 800db74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db78:	682f      	ldr	r7, [r5, #0]
 800db7a:	602b      	str	r3, [r5, #0]
 800db7c:	d032      	beq.n	800dbe4 <__sflush_r+0x98>
 800db7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db80:	89a3      	ldrh	r3, [r4, #12]
 800db82:	075a      	lsls	r2, r3, #29
 800db84:	d505      	bpl.n	800db92 <__sflush_r+0x46>
 800db86:	6863      	ldr	r3, [r4, #4]
 800db88:	1ac0      	subs	r0, r0, r3
 800db8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db8c:	b10b      	cbz	r3, 800db92 <__sflush_r+0x46>
 800db8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db90:	1ac0      	subs	r0, r0, r3
 800db92:	2300      	movs	r3, #0
 800db94:	4602      	mov	r2, r0
 800db96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db98:	6a21      	ldr	r1, [r4, #32]
 800db9a:	4628      	mov	r0, r5
 800db9c:	47b0      	blx	r6
 800db9e:	1c43      	adds	r3, r0, #1
 800dba0:	89a3      	ldrh	r3, [r4, #12]
 800dba2:	d106      	bne.n	800dbb2 <__sflush_r+0x66>
 800dba4:	6829      	ldr	r1, [r5, #0]
 800dba6:	291d      	cmp	r1, #29
 800dba8:	d82c      	bhi.n	800dc04 <__sflush_r+0xb8>
 800dbaa:	4a2a      	ldr	r2, [pc, #168]	; (800dc54 <__sflush_r+0x108>)
 800dbac:	40ca      	lsrs	r2, r1
 800dbae:	07d6      	lsls	r6, r2, #31
 800dbb0:	d528      	bpl.n	800dc04 <__sflush_r+0xb8>
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	6062      	str	r2, [r4, #4]
 800dbb6:	04d9      	lsls	r1, r3, #19
 800dbb8:	6922      	ldr	r2, [r4, #16]
 800dbba:	6022      	str	r2, [r4, #0]
 800dbbc:	d504      	bpl.n	800dbc8 <__sflush_r+0x7c>
 800dbbe:	1c42      	adds	r2, r0, #1
 800dbc0:	d101      	bne.n	800dbc6 <__sflush_r+0x7a>
 800dbc2:	682b      	ldr	r3, [r5, #0]
 800dbc4:	b903      	cbnz	r3, 800dbc8 <__sflush_r+0x7c>
 800dbc6:	6560      	str	r0, [r4, #84]	; 0x54
 800dbc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbca:	602f      	str	r7, [r5, #0]
 800dbcc:	2900      	cmp	r1, #0
 800dbce:	d0ca      	beq.n	800db66 <__sflush_r+0x1a>
 800dbd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbd4:	4299      	cmp	r1, r3
 800dbd6:	d002      	beq.n	800dbde <__sflush_r+0x92>
 800dbd8:	4628      	mov	r0, r5
 800dbda:	f7fd f9d1 	bl	800af80 <_free_r>
 800dbde:	2000      	movs	r0, #0
 800dbe0:	6360      	str	r0, [r4, #52]	; 0x34
 800dbe2:	e7c1      	b.n	800db68 <__sflush_r+0x1c>
 800dbe4:	6a21      	ldr	r1, [r4, #32]
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	4628      	mov	r0, r5
 800dbea:	47b0      	blx	r6
 800dbec:	1c41      	adds	r1, r0, #1
 800dbee:	d1c7      	bne.n	800db80 <__sflush_r+0x34>
 800dbf0:	682b      	ldr	r3, [r5, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d0c4      	beq.n	800db80 <__sflush_r+0x34>
 800dbf6:	2b1d      	cmp	r3, #29
 800dbf8:	d001      	beq.n	800dbfe <__sflush_r+0xb2>
 800dbfa:	2b16      	cmp	r3, #22
 800dbfc:	d101      	bne.n	800dc02 <__sflush_r+0xb6>
 800dbfe:	602f      	str	r7, [r5, #0]
 800dc00:	e7b1      	b.n	800db66 <__sflush_r+0x1a>
 800dc02:	89a3      	ldrh	r3, [r4, #12]
 800dc04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc08:	81a3      	strh	r3, [r4, #12]
 800dc0a:	e7ad      	b.n	800db68 <__sflush_r+0x1c>
 800dc0c:	690f      	ldr	r7, [r1, #16]
 800dc0e:	2f00      	cmp	r7, #0
 800dc10:	d0a9      	beq.n	800db66 <__sflush_r+0x1a>
 800dc12:	0793      	lsls	r3, r2, #30
 800dc14:	680e      	ldr	r6, [r1, #0]
 800dc16:	bf08      	it	eq
 800dc18:	694b      	ldreq	r3, [r1, #20]
 800dc1a:	600f      	str	r7, [r1, #0]
 800dc1c:	bf18      	it	ne
 800dc1e:	2300      	movne	r3, #0
 800dc20:	eba6 0807 	sub.w	r8, r6, r7
 800dc24:	608b      	str	r3, [r1, #8]
 800dc26:	f1b8 0f00 	cmp.w	r8, #0
 800dc2a:	dd9c      	ble.n	800db66 <__sflush_r+0x1a>
 800dc2c:	6a21      	ldr	r1, [r4, #32]
 800dc2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc30:	4643      	mov	r3, r8
 800dc32:	463a      	mov	r2, r7
 800dc34:	4628      	mov	r0, r5
 800dc36:	47b0      	blx	r6
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	dc06      	bgt.n	800dc4a <__sflush_r+0xfe>
 800dc3c:	89a3      	ldrh	r3, [r4, #12]
 800dc3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc42:	81a3      	strh	r3, [r4, #12]
 800dc44:	f04f 30ff 	mov.w	r0, #4294967295
 800dc48:	e78e      	b.n	800db68 <__sflush_r+0x1c>
 800dc4a:	4407      	add	r7, r0
 800dc4c:	eba8 0800 	sub.w	r8, r8, r0
 800dc50:	e7e9      	b.n	800dc26 <__sflush_r+0xda>
 800dc52:	bf00      	nop
 800dc54:	20400001 	.word	0x20400001

0800dc58 <_fflush_r>:
 800dc58:	b538      	push	{r3, r4, r5, lr}
 800dc5a:	690b      	ldr	r3, [r1, #16]
 800dc5c:	4605      	mov	r5, r0
 800dc5e:	460c      	mov	r4, r1
 800dc60:	b913      	cbnz	r3, 800dc68 <_fflush_r+0x10>
 800dc62:	2500      	movs	r5, #0
 800dc64:	4628      	mov	r0, r5
 800dc66:	bd38      	pop	{r3, r4, r5, pc}
 800dc68:	b118      	cbz	r0, 800dc72 <_fflush_r+0x1a>
 800dc6a:	6983      	ldr	r3, [r0, #24]
 800dc6c:	b90b      	cbnz	r3, 800dc72 <_fflush_r+0x1a>
 800dc6e:	f7fd f8a3 	bl	800adb8 <__sinit>
 800dc72:	4b14      	ldr	r3, [pc, #80]	; (800dcc4 <_fflush_r+0x6c>)
 800dc74:	429c      	cmp	r4, r3
 800dc76:	d11b      	bne.n	800dcb0 <_fflush_r+0x58>
 800dc78:	686c      	ldr	r4, [r5, #4]
 800dc7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d0ef      	beq.n	800dc62 <_fflush_r+0xa>
 800dc82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc84:	07d0      	lsls	r0, r2, #31
 800dc86:	d404      	bmi.n	800dc92 <_fflush_r+0x3a>
 800dc88:	0599      	lsls	r1, r3, #22
 800dc8a:	d402      	bmi.n	800dc92 <_fflush_r+0x3a>
 800dc8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc8e:	f7fd f956 	bl	800af3e <__retarget_lock_acquire_recursive>
 800dc92:	4628      	mov	r0, r5
 800dc94:	4621      	mov	r1, r4
 800dc96:	f7ff ff59 	bl	800db4c <__sflush_r>
 800dc9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc9c:	07da      	lsls	r2, r3, #31
 800dc9e:	4605      	mov	r5, r0
 800dca0:	d4e0      	bmi.n	800dc64 <_fflush_r+0xc>
 800dca2:	89a3      	ldrh	r3, [r4, #12]
 800dca4:	059b      	lsls	r3, r3, #22
 800dca6:	d4dd      	bmi.n	800dc64 <_fflush_r+0xc>
 800dca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcaa:	f7fd f949 	bl	800af40 <__retarget_lock_release_recursive>
 800dcae:	e7d9      	b.n	800dc64 <_fflush_r+0xc>
 800dcb0:	4b05      	ldr	r3, [pc, #20]	; (800dcc8 <_fflush_r+0x70>)
 800dcb2:	429c      	cmp	r4, r3
 800dcb4:	d101      	bne.n	800dcba <_fflush_r+0x62>
 800dcb6:	68ac      	ldr	r4, [r5, #8]
 800dcb8:	e7df      	b.n	800dc7a <_fflush_r+0x22>
 800dcba:	4b04      	ldr	r3, [pc, #16]	; (800dccc <_fflush_r+0x74>)
 800dcbc:	429c      	cmp	r4, r3
 800dcbe:	bf08      	it	eq
 800dcc0:	68ec      	ldreq	r4, [r5, #12]
 800dcc2:	e7da      	b.n	800dc7a <_fflush_r+0x22>
 800dcc4:	0800fbb8 	.word	0x0800fbb8
 800dcc8:	0800fbd8 	.word	0x0800fbd8
 800dccc:	0800fb98 	.word	0x0800fb98

0800dcd0 <rshift>:
 800dcd0:	6903      	ldr	r3, [r0, #16]
 800dcd2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dcd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcda:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dcde:	f100 0414 	add.w	r4, r0, #20
 800dce2:	dd45      	ble.n	800dd70 <rshift+0xa0>
 800dce4:	f011 011f 	ands.w	r1, r1, #31
 800dce8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dcec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dcf0:	d10c      	bne.n	800dd0c <rshift+0x3c>
 800dcf2:	f100 0710 	add.w	r7, r0, #16
 800dcf6:	4629      	mov	r1, r5
 800dcf8:	42b1      	cmp	r1, r6
 800dcfa:	d334      	bcc.n	800dd66 <rshift+0x96>
 800dcfc:	1a9b      	subs	r3, r3, r2
 800dcfe:	009b      	lsls	r3, r3, #2
 800dd00:	1eea      	subs	r2, r5, #3
 800dd02:	4296      	cmp	r6, r2
 800dd04:	bf38      	it	cc
 800dd06:	2300      	movcc	r3, #0
 800dd08:	4423      	add	r3, r4
 800dd0a:	e015      	b.n	800dd38 <rshift+0x68>
 800dd0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dd10:	f1c1 0820 	rsb	r8, r1, #32
 800dd14:	40cf      	lsrs	r7, r1
 800dd16:	f105 0e04 	add.w	lr, r5, #4
 800dd1a:	46a1      	mov	r9, r4
 800dd1c:	4576      	cmp	r6, lr
 800dd1e:	46f4      	mov	ip, lr
 800dd20:	d815      	bhi.n	800dd4e <rshift+0x7e>
 800dd22:	1a9b      	subs	r3, r3, r2
 800dd24:	009a      	lsls	r2, r3, #2
 800dd26:	3a04      	subs	r2, #4
 800dd28:	3501      	adds	r5, #1
 800dd2a:	42ae      	cmp	r6, r5
 800dd2c:	bf38      	it	cc
 800dd2e:	2200      	movcc	r2, #0
 800dd30:	18a3      	adds	r3, r4, r2
 800dd32:	50a7      	str	r7, [r4, r2]
 800dd34:	b107      	cbz	r7, 800dd38 <rshift+0x68>
 800dd36:	3304      	adds	r3, #4
 800dd38:	1b1a      	subs	r2, r3, r4
 800dd3a:	42a3      	cmp	r3, r4
 800dd3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dd40:	bf08      	it	eq
 800dd42:	2300      	moveq	r3, #0
 800dd44:	6102      	str	r2, [r0, #16]
 800dd46:	bf08      	it	eq
 800dd48:	6143      	streq	r3, [r0, #20]
 800dd4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd4e:	f8dc c000 	ldr.w	ip, [ip]
 800dd52:	fa0c fc08 	lsl.w	ip, ip, r8
 800dd56:	ea4c 0707 	orr.w	r7, ip, r7
 800dd5a:	f849 7b04 	str.w	r7, [r9], #4
 800dd5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dd62:	40cf      	lsrs	r7, r1
 800dd64:	e7da      	b.n	800dd1c <rshift+0x4c>
 800dd66:	f851 cb04 	ldr.w	ip, [r1], #4
 800dd6a:	f847 cf04 	str.w	ip, [r7, #4]!
 800dd6e:	e7c3      	b.n	800dcf8 <rshift+0x28>
 800dd70:	4623      	mov	r3, r4
 800dd72:	e7e1      	b.n	800dd38 <rshift+0x68>

0800dd74 <__hexdig_fun>:
 800dd74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dd78:	2b09      	cmp	r3, #9
 800dd7a:	d802      	bhi.n	800dd82 <__hexdig_fun+0xe>
 800dd7c:	3820      	subs	r0, #32
 800dd7e:	b2c0      	uxtb	r0, r0
 800dd80:	4770      	bx	lr
 800dd82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dd86:	2b05      	cmp	r3, #5
 800dd88:	d801      	bhi.n	800dd8e <__hexdig_fun+0x1a>
 800dd8a:	3847      	subs	r0, #71	; 0x47
 800dd8c:	e7f7      	b.n	800dd7e <__hexdig_fun+0xa>
 800dd8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dd92:	2b05      	cmp	r3, #5
 800dd94:	d801      	bhi.n	800dd9a <__hexdig_fun+0x26>
 800dd96:	3827      	subs	r0, #39	; 0x27
 800dd98:	e7f1      	b.n	800dd7e <__hexdig_fun+0xa>
 800dd9a:	2000      	movs	r0, #0
 800dd9c:	4770      	bx	lr
	...

0800dda0 <__gethex>:
 800dda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda4:	ed2d 8b02 	vpush	{d8}
 800dda8:	b089      	sub	sp, #36	; 0x24
 800ddaa:	ee08 0a10 	vmov	s16, r0
 800ddae:	9304      	str	r3, [sp, #16]
 800ddb0:	4bbc      	ldr	r3, [pc, #752]	; (800e0a4 <__gethex+0x304>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	9301      	str	r3, [sp, #4]
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	468b      	mov	fp, r1
 800ddba:	4690      	mov	r8, r2
 800ddbc:	f7f2 fa40 	bl	8000240 <strlen>
 800ddc0:	9b01      	ldr	r3, [sp, #4]
 800ddc2:	f8db 2000 	ldr.w	r2, [fp]
 800ddc6:	4403      	add	r3, r0
 800ddc8:	4682      	mov	sl, r0
 800ddca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ddce:	9305      	str	r3, [sp, #20]
 800ddd0:	1c93      	adds	r3, r2, #2
 800ddd2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ddd6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ddda:	32fe      	adds	r2, #254	; 0xfe
 800dddc:	18d1      	adds	r1, r2, r3
 800ddde:	461f      	mov	r7, r3
 800dde0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dde4:	9100      	str	r1, [sp, #0]
 800dde6:	2830      	cmp	r0, #48	; 0x30
 800dde8:	d0f8      	beq.n	800dddc <__gethex+0x3c>
 800ddea:	f7ff ffc3 	bl	800dd74 <__hexdig_fun>
 800ddee:	4604      	mov	r4, r0
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d13a      	bne.n	800de6a <__gethex+0xca>
 800ddf4:	9901      	ldr	r1, [sp, #4]
 800ddf6:	4652      	mov	r2, sl
 800ddf8:	4638      	mov	r0, r7
 800ddfa:	f001 fb55 	bl	800f4a8 <strncmp>
 800ddfe:	4605      	mov	r5, r0
 800de00:	2800      	cmp	r0, #0
 800de02:	d168      	bne.n	800ded6 <__gethex+0x136>
 800de04:	f817 000a 	ldrb.w	r0, [r7, sl]
 800de08:	eb07 060a 	add.w	r6, r7, sl
 800de0c:	f7ff ffb2 	bl	800dd74 <__hexdig_fun>
 800de10:	2800      	cmp	r0, #0
 800de12:	d062      	beq.n	800deda <__gethex+0x13a>
 800de14:	4633      	mov	r3, r6
 800de16:	7818      	ldrb	r0, [r3, #0]
 800de18:	2830      	cmp	r0, #48	; 0x30
 800de1a:	461f      	mov	r7, r3
 800de1c:	f103 0301 	add.w	r3, r3, #1
 800de20:	d0f9      	beq.n	800de16 <__gethex+0x76>
 800de22:	f7ff ffa7 	bl	800dd74 <__hexdig_fun>
 800de26:	2301      	movs	r3, #1
 800de28:	fab0 f480 	clz	r4, r0
 800de2c:	0964      	lsrs	r4, r4, #5
 800de2e:	4635      	mov	r5, r6
 800de30:	9300      	str	r3, [sp, #0]
 800de32:	463a      	mov	r2, r7
 800de34:	4616      	mov	r6, r2
 800de36:	3201      	adds	r2, #1
 800de38:	7830      	ldrb	r0, [r6, #0]
 800de3a:	f7ff ff9b 	bl	800dd74 <__hexdig_fun>
 800de3e:	2800      	cmp	r0, #0
 800de40:	d1f8      	bne.n	800de34 <__gethex+0x94>
 800de42:	9901      	ldr	r1, [sp, #4]
 800de44:	4652      	mov	r2, sl
 800de46:	4630      	mov	r0, r6
 800de48:	f001 fb2e 	bl	800f4a8 <strncmp>
 800de4c:	b980      	cbnz	r0, 800de70 <__gethex+0xd0>
 800de4e:	b94d      	cbnz	r5, 800de64 <__gethex+0xc4>
 800de50:	eb06 050a 	add.w	r5, r6, sl
 800de54:	462a      	mov	r2, r5
 800de56:	4616      	mov	r6, r2
 800de58:	3201      	adds	r2, #1
 800de5a:	7830      	ldrb	r0, [r6, #0]
 800de5c:	f7ff ff8a 	bl	800dd74 <__hexdig_fun>
 800de60:	2800      	cmp	r0, #0
 800de62:	d1f8      	bne.n	800de56 <__gethex+0xb6>
 800de64:	1bad      	subs	r5, r5, r6
 800de66:	00ad      	lsls	r5, r5, #2
 800de68:	e004      	b.n	800de74 <__gethex+0xd4>
 800de6a:	2400      	movs	r4, #0
 800de6c:	4625      	mov	r5, r4
 800de6e:	e7e0      	b.n	800de32 <__gethex+0x92>
 800de70:	2d00      	cmp	r5, #0
 800de72:	d1f7      	bne.n	800de64 <__gethex+0xc4>
 800de74:	7833      	ldrb	r3, [r6, #0]
 800de76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800de7a:	2b50      	cmp	r3, #80	; 0x50
 800de7c:	d13b      	bne.n	800def6 <__gethex+0x156>
 800de7e:	7873      	ldrb	r3, [r6, #1]
 800de80:	2b2b      	cmp	r3, #43	; 0x2b
 800de82:	d02c      	beq.n	800dede <__gethex+0x13e>
 800de84:	2b2d      	cmp	r3, #45	; 0x2d
 800de86:	d02e      	beq.n	800dee6 <__gethex+0x146>
 800de88:	1c71      	adds	r1, r6, #1
 800de8a:	f04f 0900 	mov.w	r9, #0
 800de8e:	7808      	ldrb	r0, [r1, #0]
 800de90:	f7ff ff70 	bl	800dd74 <__hexdig_fun>
 800de94:	1e43      	subs	r3, r0, #1
 800de96:	b2db      	uxtb	r3, r3
 800de98:	2b18      	cmp	r3, #24
 800de9a:	d82c      	bhi.n	800def6 <__gethex+0x156>
 800de9c:	f1a0 0210 	sub.w	r2, r0, #16
 800dea0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dea4:	f7ff ff66 	bl	800dd74 <__hexdig_fun>
 800dea8:	1e43      	subs	r3, r0, #1
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	2b18      	cmp	r3, #24
 800deae:	d91d      	bls.n	800deec <__gethex+0x14c>
 800deb0:	f1b9 0f00 	cmp.w	r9, #0
 800deb4:	d000      	beq.n	800deb8 <__gethex+0x118>
 800deb6:	4252      	negs	r2, r2
 800deb8:	4415      	add	r5, r2
 800deba:	f8cb 1000 	str.w	r1, [fp]
 800debe:	b1e4      	cbz	r4, 800defa <__gethex+0x15a>
 800dec0:	9b00      	ldr	r3, [sp, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	bf14      	ite	ne
 800dec6:	2700      	movne	r7, #0
 800dec8:	2706      	moveq	r7, #6
 800deca:	4638      	mov	r0, r7
 800decc:	b009      	add	sp, #36	; 0x24
 800dece:	ecbd 8b02 	vpop	{d8}
 800ded2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded6:	463e      	mov	r6, r7
 800ded8:	4625      	mov	r5, r4
 800deda:	2401      	movs	r4, #1
 800dedc:	e7ca      	b.n	800de74 <__gethex+0xd4>
 800dede:	f04f 0900 	mov.w	r9, #0
 800dee2:	1cb1      	adds	r1, r6, #2
 800dee4:	e7d3      	b.n	800de8e <__gethex+0xee>
 800dee6:	f04f 0901 	mov.w	r9, #1
 800deea:	e7fa      	b.n	800dee2 <__gethex+0x142>
 800deec:	230a      	movs	r3, #10
 800deee:	fb03 0202 	mla	r2, r3, r2, r0
 800def2:	3a10      	subs	r2, #16
 800def4:	e7d4      	b.n	800dea0 <__gethex+0x100>
 800def6:	4631      	mov	r1, r6
 800def8:	e7df      	b.n	800deba <__gethex+0x11a>
 800defa:	1bf3      	subs	r3, r6, r7
 800defc:	3b01      	subs	r3, #1
 800defe:	4621      	mov	r1, r4
 800df00:	2b07      	cmp	r3, #7
 800df02:	dc0b      	bgt.n	800df1c <__gethex+0x17c>
 800df04:	ee18 0a10 	vmov	r0, s16
 800df08:	f000 faea 	bl	800e4e0 <_Balloc>
 800df0c:	4604      	mov	r4, r0
 800df0e:	b940      	cbnz	r0, 800df22 <__gethex+0x182>
 800df10:	4b65      	ldr	r3, [pc, #404]	; (800e0a8 <__gethex+0x308>)
 800df12:	4602      	mov	r2, r0
 800df14:	21de      	movs	r1, #222	; 0xde
 800df16:	4865      	ldr	r0, [pc, #404]	; (800e0ac <__gethex+0x30c>)
 800df18:	f001 fae6 	bl	800f4e8 <__assert_func>
 800df1c:	3101      	adds	r1, #1
 800df1e:	105b      	asrs	r3, r3, #1
 800df20:	e7ee      	b.n	800df00 <__gethex+0x160>
 800df22:	f100 0914 	add.w	r9, r0, #20
 800df26:	f04f 0b00 	mov.w	fp, #0
 800df2a:	f1ca 0301 	rsb	r3, sl, #1
 800df2e:	f8cd 9008 	str.w	r9, [sp, #8]
 800df32:	f8cd b000 	str.w	fp, [sp]
 800df36:	9306      	str	r3, [sp, #24]
 800df38:	42b7      	cmp	r7, r6
 800df3a:	d340      	bcc.n	800dfbe <__gethex+0x21e>
 800df3c:	9802      	ldr	r0, [sp, #8]
 800df3e:	9b00      	ldr	r3, [sp, #0]
 800df40:	f840 3b04 	str.w	r3, [r0], #4
 800df44:	eba0 0009 	sub.w	r0, r0, r9
 800df48:	1080      	asrs	r0, r0, #2
 800df4a:	0146      	lsls	r6, r0, #5
 800df4c:	6120      	str	r0, [r4, #16]
 800df4e:	4618      	mov	r0, r3
 800df50:	f000 fbbc 	bl	800e6cc <__hi0bits>
 800df54:	1a30      	subs	r0, r6, r0
 800df56:	f8d8 6000 	ldr.w	r6, [r8]
 800df5a:	42b0      	cmp	r0, r6
 800df5c:	dd63      	ble.n	800e026 <__gethex+0x286>
 800df5e:	1b87      	subs	r7, r0, r6
 800df60:	4639      	mov	r1, r7
 800df62:	4620      	mov	r0, r4
 800df64:	f000 ff57 	bl	800ee16 <__any_on>
 800df68:	4682      	mov	sl, r0
 800df6a:	b1a8      	cbz	r0, 800df98 <__gethex+0x1f8>
 800df6c:	1e7b      	subs	r3, r7, #1
 800df6e:	1159      	asrs	r1, r3, #5
 800df70:	f003 021f 	and.w	r2, r3, #31
 800df74:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800df78:	f04f 0a01 	mov.w	sl, #1
 800df7c:	fa0a f202 	lsl.w	r2, sl, r2
 800df80:	420a      	tst	r2, r1
 800df82:	d009      	beq.n	800df98 <__gethex+0x1f8>
 800df84:	4553      	cmp	r3, sl
 800df86:	dd05      	ble.n	800df94 <__gethex+0x1f4>
 800df88:	1eb9      	subs	r1, r7, #2
 800df8a:	4620      	mov	r0, r4
 800df8c:	f000 ff43 	bl	800ee16 <__any_on>
 800df90:	2800      	cmp	r0, #0
 800df92:	d145      	bne.n	800e020 <__gethex+0x280>
 800df94:	f04f 0a02 	mov.w	sl, #2
 800df98:	4639      	mov	r1, r7
 800df9a:	4620      	mov	r0, r4
 800df9c:	f7ff fe98 	bl	800dcd0 <rshift>
 800dfa0:	443d      	add	r5, r7
 800dfa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfa6:	42ab      	cmp	r3, r5
 800dfa8:	da4c      	bge.n	800e044 <__gethex+0x2a4>
 800dfaa:	ee18 0a10 	vmov	r0, s16
 800dfae:	4621      	mov	r1, r4
 800dfb0:	f000 fad6 	bl	800e560 <_Bfree>
 800dfb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	6013      	str	r3, [r2, #0]
 800dfba:	27a3      	movs	r7, #163	; 0xa3
 800dfbc:	e785      	b.n	800deca <__gethex+0x12a>
 800dfbe:	1e73      	subs	r3, r6, #1
 800dfc0:	9a05      	ldr	r2, [sp, #20]
 800dfc2:	9303      	str	r3, [sp, #12]
 800dfc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	d019      	beq.n	800e000 <__gethex+0x260>
 800dfcc:	f1bb 0f20 	cmp.w	fp, #32
 800dfd0:	d107      	bne.n	800dfe2 <__gethex+0x242>
 800dfd2:	9b02      	ldr	r3, [sp, #8]
 800dfd4:	9a00      	ldr	r2, [sp, #0]
 800dfd6:	f843 2b04 	str.w	r2, [r3], #4
 800dfda:	9302      	str	r3, [sp, #8]
 800dfdc:	2300      	movs	r3, #0
 800dfde:	9300      	str	r3, [sp, #0]
 800dfe0:	469b      	mov	fp, r3
 800dfe2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dfe6:	f7ff fec5 	bl	800dd74 <__hexdig_fun>
 800dfea:	9b00      	ldr	r3, [sp, #0]
 800dfec:	f000 000f 	and.w	r0, r0, #15
 800dff0:	fa00 f00b 	lsl.w	r0, r0, fp
 800dff4:	4303      	orrs	r3, r0
 800dff6:	9300      	str	r3, [sp, #0]
 800dff8:	f10b 0b04 	add.w	fp, fp, #4
 800dffc:	9b03      	ldr	r3, [sp, #12]
 800dffe:	e00d      	b.n	800e01c <__gethex+0x27c>
 800e000:	9b03      	ldr	r3, [sp, #12]
 800e002:	9a06      	ldr	r2, [sp, #24]
 800e004:	4413      	add	r3, r2
 800e006:	42bb      	cmp	r3, r7
 800e008:	d3e0      	bcc.n	800dfcc <__gethex+0x22c>
 800e00a:	4618      	mov	r0, r3
 800e00c:	9901      	ldr	r1, [sp, #4]
 800e00e:	9307      	str	r3, [sp, #28]
 800e010:	4652      	mov	r2, sl
 800e012:	f001 fa49 	bl	800f4a8 <strncmp>
 800e016:	9b07      	ldr	r3, [sp, #28]
 800e018:	2800      	cmp	r0, #0
 800e01a:	d1d7      	bne.n	800dfcc <__gethex+0x22c>
 800e01c:	461e      	mov	r6, r3
 800e01e:	e78b      	b.n	800df38 <__gethex+0x198>
 800e020:	f04f 0a03 	mov.w	sl, #3
 800e024:	e7b8      	b.n	800df98 <__gethex+0x1f8>
 800e026:	da0a      	bge.n	800e03e <__gethex+0x29e>
 800e028:	1a37      	subs	r7, r6, r0
 800e02a:	4621      	mov	r1, r4
 800e02c:	ee18 0a10 	vmov	r0, s16
 800e030:	463a      	mov	r2, r7
 800e032:	f000 fcb1 	bl	800e998 <__lshift>
 800e036:	1bed      	subs	r5, r5, r7
 800e038:	4604      	mov	r4, r0
 800e03a:	f100 0914 	add.w	r9, r0, #20
 800e03e:	f04f 0a00 	mov.w	sl, #0
 800e042:	e7ae      	b.n	800dfa2 <__gethex+0x202>
 800e044:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e048:	42a8      	cmp	r0, r5
 800e04a:	dd72      	ble.n	800e132 <__gethex+0x392>
 800e04c:	1b45      	subs	r5, r0, r5
 800e04e:	42ae      	cmp	r6, r5
 800e050:	dc36      	bgt.n	800e0c0 <__gethex+0x320>
 800e052:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e056:	2b02      	cmp	r3, #2
 800e058:	d02a      	beq.n	800e0b0 <__gethex+0x310>
 800e05a:	2b03      	cmp	r3, #3
 800e05c:	d02c      	beq.n	800e0b8 <__gethex+0x318>
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d115      	bne.n	800e08e <__gethex+0x2ee>
 800e062:	42ae      	cmp	r6, r5
 800e064:	d113      	bne.n	800e08e <__gethex+0x2ee>
 800e066:	2e01      	cmp	r6, #1
 800e068:	d10b      	bne.n	800e082 <__gethex+0x2e2>
 800e06a:	9a04      	ldr	r2, [sp, #16]
 800e06c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e070:	6013      	str	r3, [r2, #0]
 800e072:	2301      	movs	r3, #1
 800e074:	6123      	str	r3, [r4, #16]
 800e076:	f8c9 3000 	str.w	r3, [r9]
 800e07a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e07c:	2762      	movs	r7, #98	; 0x62
 800e07e:	601c      	str	r4, [r3, #0]
 800e080:	e723      	b.n	800deca <__gethex+0x12a>
 800e082:	1e71      	subs	r1, r6, #1
 800e084:	4620      	mov	r0, r4
 800e086:	f000 fec6 	bl	800ee16 <__any_on>
 800e08a:	2800      	cmp	r0, #0
 800e08c:	d1ed      	bne.n	800e06a <__gethex+0x2ca>
 800e08e:	ee18 0a10 	vmov	r0, s16
 800e092:	4621      	mov	r1, r4
 800e094:	f000 fa64 	bl	800e560 <_Bfree>
 800e098:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e09a:	2300      	movs	r3, #0
 800e09c:	6013      	str	r3, [r2, #0]
 800e09e:	2750      	movs	r7, #80	; 0x50
 800e0a0:	e713      	b.n	800deca <__gethex+0x12a>
 800e0a2:	bf00      	nop
 800e0a4:	0800fd88 	.word	0x0800fd88
 800e0a8:	0800fd0b 	.word	0x0800fd0b
 800e0ac:	0800fd1c 	.word	0x0800fd1c
 800e0b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d1eb      	bne.n	800e08e <__gethex+0x2ee>
 800e0b6:	e7d8      	b.n	800e06a <__gethex+0x2ca>
 800e0b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d1d5      	bne.n	800e06a <__gethex+0x2ca>
 800e0be:	e7e6      	b.n	800e08e <__gethex+0x2ee>
 800e0c0:	1e6f      	subs	r7, r5, #1
 800e0c2:	f1ba 0f00 	cmp.w	sl, #0
 800e0c6:	d131      	bne.n	800e12c <__gethex+0x38c>
 800e0c8:	b127      	cbz	r7, 800e0d4 <__gethex+0x334>
 800e0ca:	4639      	mov	r1, r7
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	f000 fea2 	bl	800ee16 <__any_on>
 800e0d2:	4682      	mov	sl, r0
 800e0d4:	117b      	asrs	r3, r7, #5
 800e0d6:	2101      	movs	r1, #1
 800e0d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e0dc:	f007 071f 	and.w	r7, r7, #31
 800e0e0:	fa01 f707 	lsl.w	r7, r1, r7
 800e0e4:	421f      	tst	r7, r3
 800e0e6:	4629      	mov	r1, r5
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	bf18      	it	ne
 800e0ec:	f04a 0a02 	orrne.w	sl, sl, #2
 800e0f0:	1b76      	subs	r6, r6, r5
 800e0f2:	f7ff fded 	bl	800dcd0 <rshift>
 800e0f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e0fa:	2702      	movs	r7, #2
 800e0fc:	f1ba 0f00 	cmp.w	sl, #0
 800e100:	d048      	beq.n	800e194 <__gethex+0x3f4>
 800e102:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e106:	2b02      	cmp	r3, #2
 800e108:	d015      	beq.n	800e136 <__gethex+0x396>
 800e10a:	2b03      	cmp	r3, #3
 800e10c:	d017      	beq.n	800e13e <__gethex+0x39e>
 800e10e:	2b01      	cmp	r3, #1
 800e110:	d109      	bne.n	800e126 <__gethex+0x386>
 800e112:	f01a 0f02 	tst.w	sl, #2
 800e116:	d006      	beq.n	800e126 <__gethex+0x386>
 800e118:	f8d9 0000 	ldr.w	r0, [r9]
 800e11c:	ea4a 0a00 	orr.w	sl, sl, r0
 800e120:	f01a 0f01 	tst.w	sl, #1
 800e124:	d10e      	bne.n	800e144 <__gethex+0x3a4>
 800e126:	f047 0710 	orr.w	r7, r7, #16
 800e12a:	e033      	b.n	800e194 <__gethex+0x3f4>
 800e12c:	f04f 0a01 	mov.w	sl, #1
 800e130:	e7d0      	b.n	800e0d4 <__gethex+0x334>
 800e132:	2701      	movs	r7, #1
 800e134:	e7e2      	b.n	800e0fc <__gethex+0x35c>
 800e136:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e138:	f1c3 0301 	rsb	r3, r3, #1
 800e13c:	9315      	str	r3, [sp, #84]	; 0x54
 800e13e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e140:	2b00      	cmp	r3, #0
 800e142:	d0f0      	beq.n	800e126 <__gethex+0x386>
 800e144:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e148:	f104 0314 	add.w	r3, r4, #20
 800e14c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e150:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e154:	f04f 0c00 	mov.w	ip, #0
 800e158:	4618      	mov	r0, r3
 800e15a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e15e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e162:	d01c      	beq.n	800e19e <__gethex+0x3fe>
 800e164:	3201      	adds	r2, #1
 800e166:	6002      	str	r2, [r0, #0]
 800e168:	2f02      	cmp	r7, #2
 800e16a:	f104 0314 	add.w	r3, r4, #20
 800e16e:	d13f      	bne.n	800e1f0 <__gethex+0x450>
 800e170:	f8d8 2000 	ldr.w	r2, [r8]
 800e174:	3a01      	subs	r2, #1
 800e176:	42b2      	cmp	r2, r6
 800e178:	d10a      	bne.n	800e190 <__gethex+0x3f0>
 800e17a:	1171      	asrs	r1, r6, #5
 800e17c:	2201      	movs	r2, #1
 800e17e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e182:	f006 061f 	and.w	r6, r6, #31
 800e186:	fa02 f606 	lsl.w	r6, r2, r6
 800e18a:	421e      	tst	r6, r3
 800e18c:	bf18      	it	ne
 800e18e:	4617      	movne	r7, r2
 800e190:	f047 0720 	orr.w	r7, r7, #32
 800e194:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e196:	601c      	str	r4, [r3, #0]
 800e198:	9b04      	ldr	r3, [sp, #16]
 800e19a:	601d      	str	r5, [r3, #0]
 800e19c:	e695      	b.n	800deca <__gethex+0x12a>
 800e19e:	4299      	cmp	r1, r3
 800e1a0:	f843 cc04 	str.w	ip, [r3, #-4]
 800e1a4:	d8d8      	bhi.n	800e158 <__gethex+0x3b8>
 800e1a6:	68a3      	ldr	r3, [r4, #8]
 800e1a8:	459b      	cmp	fp, r3
 800e1aa:	db19      	blt.n	800e1e0 <__gethex+0x440>
 800e1ac:	6861      	ldr	r1, [r4, #4]
 800e1ae:	ee18 0a10 	vmov	r0, s16
 800e1b2:	3101      	adds	r1, #1
 800e1b4:	f000 f994 	bl	800e4e0 <_Balloc>
 800e1b8:	4681      	mov	r9, r0
 800e1ba:	b918      	cbnz	r0, 800e1c4 <__gethex+0x424>
 800e1bc:	4b1a      	ldr	r3, [pc, #104]	; (800e228 <__gethex+0x488>)
 800e1be:	4602      	mov	r2, r0
 800e1c0:	2184      	movs	r1, #132	; 0x84
 800e1c2:	e6a8      	b.n	800df16 <__gethex+0x176>
 800e1c4:	6922      	ldr	r2, [r4, #16]
 800e1c6:	3202      	adds	r2, #2
 800e1c8:	f104 010c 	add.w	r1, r4, #12
 800e1cc:	0092      	lsls	r2, r2, #2
 800e1ce:	300c      	adds	r0, #12
 800e1d0:	f7fc fec0 	bl	800af54 <memcpy>
 800e1d4:	4621      	mov	r1, r4
 800e1d6:	ee18 0a10 	vmov	r0, s16
 800e1da:	f000 f9c1 	bl	800e560 <_Bfree>
 800e1de:	464c      	mov	r4, r9
 800e1e0:	6923      	ldr	r3, [r4, #16]
 800e1e2:	1c5a      	adds	r2, r3, #1
 800e1e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e1e8:	6122      	str	r2, [r4, #16]
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	615a      	str	r2, [r3, #20]
 800e1ee:	e7bb      	b.n	800e168 <__gethex+0x3c8>
 800e1f0:	6922      	ldr	r2, [r4, #16]
 800e1f2:	455a      	cmp	r2, fp
 800e1f4:	dd0b      	ble.n	800e20e <__gethex+0x46e>
 800e1f6:	2101      	movs	r1, #1
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	f7ff fd69 	bl	800dcd0 <rshift>
 800e1fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e202:	3501      	adds	r5, #1
 800e204:	42ab      	cmp	r3, r5
 800e206:	f6ff aed0 	blt.w	800dfaa <__gethex+0x20a>
 800e20a:	2701      	movs	r7, #1
 800e20c:	e7c0      	b.n	800e190 <__gethex+0x3f0>
 800e20e:	f016 061f 	ands.w	r6, r6, #31
 800e212:	d0fa      	beq.n	800e20a <__gethex+0x46a>
 800e214:	449a      	add	sl, r3
 800e216:	f1c6 0620 	rsb	r6, r6, #32
 800e21a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e21e:	f000 fa55 	bl	800e6cc <__hi0bits>
 800e222:	42b0      	cmp	r0, r6
 800e224:	dbe7      	blt.n	800e1f6 <__gethex+0x456>
 800e226:	e7f0      	b.n	800e20a <__gethex+0x46a>
 800e228:	0800fd0b 	.word	0x0800fd0b

0800e22c <L_shift>:
 800e22c:	f1c2 0208 	rsb	r2, r2, #8
 800e230:	0092      	lsls	r2, r2, #2
 800e232:	b570      	push	{r4, r5, r6, lr}
 800e234:	f1c2 0620 	rsb	r6, r2, #32
 800e238:	6843      	ldr	r3, [r0, #4]
 800e23a:	6804      	ldr	r4, [r0, #0]
 800e23c:	fa03 f506 	lsl.w	r5, r3, r6
 800e240:	432c      	orrs	r4, r5
 800e242:	40d3      	lsrs	r3, r2
 800e244:	6004      	str	r4, [r0, #0]
 800e246:	f840 3f04 	str.w	r3, [r0, #4]!
 800e24a:	4288      	cmp	r0, r1
 800e24c:	d3f4      	bcc.n	800e238 <L_shift+0xc>
 800e24e:	bd70      	pop	{r4, r5, r6, pc}

0800e250 <__match>:
 800e250:	b530      	push	{r4, r5, lr}
 800e252:	6803      	ldr	r3, [r0, #0]
 800e254:	3301      	adds	r3, #1
 800e256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e25a:	b914      	cbnz	r4, 800e262 <__match+0x12>
 800e25c:	6003      	str	r3, [r0, #0]
 800e25e:	2001      	movs	r0, #1
 800e260:	bd30      	pop	{r4, r5, pc}
 800e262:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e266:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e26a:	2d19      	cmp	r5, #25
 800e26c:	bf98      	it	ls
 800e26e:	3220      	addls	r2, #32
 800e270:	42a2      	cmp	r2, r4
 800e272:	d0f0      	beq.n	800e256 <__match+0x6>
 800e274:	2000      	movs	r0, #0
 800e276:	e7f3      	b.n	800e260 <__match+0x10>

0800e278 <__hexnan>:
 800e278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e27c:	680b      	ldr	r3, [r1, #0]
 800e27e:	6801      	ldr	r1, [r0, #0]
 800e280:	115e      	asrs	r6, r3, #5
 800e282:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e286:	f013 031f 	ands.w	r3, r3, #31
 800e28a:	b087      	sub	sp, #28
 800e28c:	bf18      	it	ne
 800e28e:	3604      	addne	r6, #4
 800e290:	2500      	movs	r5, #0
 800e292:	1f37      	subs	r7, r6, #4
 800e294:	4682      	mov	sl, r0
 800e296:	4690      	mov	r8, r2
 800e298:	9301      	str	r3, [sp, #4]
 800e29a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e29e:	46b9      	mov	r9, r7
 800e2a0:	463c      	mov	r4, r7
 800e2a2:	9502      	str	r5, [sp, #8]
 800e2a4:	46ab      	mov	fp, r5
 800e2a6:	784a      	ldrb	r2, [r1, #1]
 800e2a8:	1c4b      	adds	r3, r1, #1
 800e2aa:	9303      	str	r3, [sp, #12]
 800e2ac:	b342      	cbz	r2, 800e300 <__hexnan+0x88>
 800e2ae:	4610      	mov	r0, r2
 800e2b0:	9105      	str	r1, [sp, #20]
 800e2b2:	9204      	str	r2, [sp, #16]
 800e2b4:	f7ff fd5e 	bl	800dd74 <__hexdig_fun>
 800e2b8:	2800      	cmp	r0, #0
 800e2ba:	d14f      	bne.n	800e35c <__hexnan+0xe4>
 800e2bc:	9a04      	ldr	r2, [sp, #16]
 800e2be:	9905      	ldr	r1, [sp, #20]
 800e2c0:	2a20      	cmp	r2, #32
 800e2c2:	d818      	bhi.n	800e2f6 <__hexnan+0x7e>
 800e2c4:	9b02      	ldr	r3, [sp, #8]
 800e2c6:	459b      	cmp	fp, r3
 800e2c8:	dd13      	ble.n	800e2f2 <__hexnan+0x7a>
 800e2ca:	454c      	cmp	r4, r9
 800e2cc:	d206      	bcs.n	800e2dc <__hexnan+0x64>
 800e2ce:	2d07      	cmp	r5, #7
 800e2d0:	dc04      	bgt.n	800e2dc <__hexnan+0x64>
 800e2d2:	462a      	mov	r2, r5
 800e2d4:	4649      	mov	r1, r9
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f7ff ffa8 	bl	800e22c <L_shift>
 800e2dc:	4544      	cmp	r4, r8
 800e2de:	d950      	bls.n	800e382 <__hexnan+0x10a>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	f1a4 0904 	sub.w	r9, r4, #4
 800e2e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e2ea:	f8cd b008 	str.w	fp, [sp, #8]
 800e2ee:	464c      	mov	r4, r9
 800e2f0:	461d      	mov	r5, r3
 800e2f2:	9903      	ldr	r1, [sp, #12]
 800e2f4:	e7d7      	b.n	800e2a6 <__hexnan+0x2e>
 800e2f6:	2a29      	cmp	r2, #41	; 0x29
 800e2f8:	d156      	bne.n	800e3a8 <__hexnan+0x130>
 800e2fa:	3102      	adds	r1, #2
 800e2fc:	f8ca 1000 	str.w	r1, [sl]
 800e300:	f1bb 0f00 	cmp.w	fp, #0
 800e304:	d050      	beq.n	800e3a8 <__hexnan+0x130>
 800e306:	454c      	cmp	r4, r9
 800e308:	d206      	bcs.n	800e318 <__hexnan+0xa0>
 800e30a:	2d07      	cmp	r5, #7
 800e30c:	dc04      	bgt.n	800e318 <__hexnan+0xa0>
 800e30e:	462a      	mov	r2, r5
 800e310:	4649      	mov	r1, r9
 800e312:	4620      	mov	r0, r4
 800e314:	f7ff ff8a 	bl	800e22c <L_shift>
 800e318:	4544      	cmp	r4, r8
 800e31a:	d934      	bls.n	800e386 <__hexnan+0x10e>
 800e31c:	f1a8 0204 	sub.w	r2, r8, #4
 800e320:	4623      	mov	r3, r4
 800e322:	f853 1b04 	ldr.w	r1, [r3], #4
 800e326:	f842 1f04 	str.w	r1, [r2, #4]!
 800e32a:	429f      	cmp	r7, r3
 800e32c:	d2f9      	bcs.n	800e322 <__hexnan+0xaa>
 800e32e:	1b3b      	subs	r3, r7, r4
 800e330:	f023 0303 	bic.w	r3, r3, #3
 800e334:	3304      	adds	r3, #4
 800e336:	3401      	adds	r4, #1
 800e338:	3e03      	subs	r6, #3
 800e33a:	42b4      	cmp	r4, r6
 800e33c:	bf88      	it	hi
 800e33e:	2304      	movhi	r3, #4
 800e340:	4443      	add	r3, r8
 800e342:	2200      	movs	r2, #0
 800e344:	f843 2b04 	str.w	r2, [r3], #4
 800e348:	429f      	cmp	r7, r3
 800e34a:	d2fb      	bcs.n	800e344 <__hexnan+0xcc>
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	b91b      	cbnz	r3, 800e358 <__hexnan+0xe0>
 800e350:	4547      	cmp	r7, r8
 800e352:	d127      	bne.n	800e3a4 <__hexnan+0x12c>
 800e354:	2301      	movs	r3, #1
 800e356:	603b      	str	r3, [r7, #0]
 800e358:	2005      	movs	r0, #5
 800e35a:	e026      	b.n	800e3aa <__hexnan+0x132>
 800e35c:	3501      	adds	r5, #1
 800e35e:	2d08      	cmp	r5, #8
 800e360:	f10b 0b01 	add.w	fp, fp, #1
 800e364:	dd06      	ble.n	800e374 <__hexnan+0xfc>
 800e366:	4544      	cmp	r4, r8
 800e368:	d9c3      	bls.n	800e2f2 <__hexnan+0x7a>
 800e36a:	2300      	movs	r3, #0
 800e36c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e370:	2501      	movs	r5, #1
 800e372:	3c04      	subs	r4, #4
 800e374:	6822      	ldr	r2, [r4, #0]
 800e376:	f000 000f 	and.w	r0, r0, #15
 800e37a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e37e:	6022      	str	r2, [r4, #0]
 800e380:	e7b7      	b.n	800e2f2 <__hexnan+0x7a>
 800e382:	2508      	movs	r5, #8
 800e384:	e7b5      	b.n	800e2f2 <__hexnan+0x7a>
 800e386:	9b01      	ldr	r3, [sp, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d0df      	beq.n	800e34c <__hexnan+0xd4>
 800e38c:	f04f 32ff 	mov.w	r2, #4294967295
 800e390:	f1c3 0320 	rsb	r3, r3, #32
 800e394:	fa22 f303 	lsr.w	r3, r2, r3
 800e398:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e39c:	401a      	ands	r2, r3
 800e39e:	f846 2c04 	str.w	r2, [r6, #-4]
 800e3a2:	e7d3      	b.n	800e34c <__hexnan+0xd4>
 800e3a4:	3f04      	subs	r7, #4
 800e3a6:	e7d1      	b.n	800e34c <__hexnan+0xd4>
 800e3a8:	2004      	movs	r0, #4
 800e3aa:	b007      	add	sp, #28
 800e3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e3b0 <_localeconv_r>:
 800e3b0:	4800      	ldr	r0, [pc, #0]	; (800e3b4 <_localeconv_r+0x4>)
 800e3b2:	4770      	bx	lr
 800e3b4:	200001c8 	.word	0x200001c8

0800e3b8 <_lseek_r>:
 800e3b8:	b538      	push	{r3, r4, r5, lr}
 800e3ba:	4d07      	ldr	r5, [pc, #28]	; (800e3d8 <_lseek_r+0x20>)
 800e3bc:	4604      	mov	r4, r0
 800e3be:	4608      	mov	r0, r1
 800e3c0:	4611      	mov	r1, r2
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	602a      	str	r2, [r5, #0]
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	f7f4 f88a 	bl	80024e0 <_lseek>
 800e3cc:	1c43      	adds	r3, r0, #1
 800e3ce:	d102      	bne.n	800e3d6 <_lseek_r+0x1e>
 800e3d0:	682b      	ldr	r3, [r5, #0]
 800e3d2:	b103      	cbz	r3, 800e3d6 <_lseek_r+0x1e>
 800e3d4:	6023      	str	r3, [r4, #0]
 800e3d6:	bd38      	pop	{r3, r4, r5, pc}
 800e3d8:	2000505c 	.word	0x2000505c

0800e3dc <__swhatbuf_r>:
 800e3dc:	b570      	push	{r4, r5, r6, lr}
 800e3de:	460e      	mov	r6, r1
 800e3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3e4:	2900      	cmp	r1, #0
 800e3e6:	b096      	sub	sp, #88	; 0x58
 800e3e8:	4614      	mov	r4, r2
 800e3ea:	461d      	mov	r5, r3
 800e3ec:	da07      	bge.n	800e3fe <__swhatbuf_r+0x22>
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	602b      	str	r3, [r5, #0]
 800e3f2:	89b3      	ldrh	r3, [r6, #12]
 800e3f4:	061a      	lsls	r2, r3, #24
 800e3f6:	d410      	bmi.n	800e41a <__swhatbuf_r+0x3e>
 800e3f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3fc:	e00e      	b.n	800e41c <__swhatbuf_r+0x40>
 800e3fe:	466a      	mov	r2, sp
 800e400:	f001 f8a2 	bl	800f548 <_fstat_r>
 800e404:	2800      	cmp	r0, #0
 800e406:	dbf2      	blt.n	800e3ee <__swhatbuf_r+0x12>
 800e408:	9a01      	ldr	r2, [sp, #4]
 800e40a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e40e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e412:	425a      	negs	r2, r3
 800e414:	415a      	adcs	r2, r3
 800e416:	602a      	str	r2, [r5, #0]
 800e418:	e7ee      	b.n	800e3f8 <__swhatbuf_r+0x1c>
 800e41a:	2340      	movs	r3, #64	; 0x40
 800e41c:	2000      	movs	r0, #0
 800e41e:	6023      	str	r3, [r4, #0]
 800e420:	b016      	add	sp, #88	; 0x58
 800e422:	bd70      	pop	{r4, r5, r6, pc}

0800e424 <__smakebuf_r>:
 800e424:	898b      	ldrh	r3, [r1, #12]
 800e426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e428:	079d      	lsls	r5, r3, #30
 800e42a:	4606      	mov	r6, r0
 800e42c:	460c      	mov	r4, r1
 800e42e:	d507      	bpl.n	800e440 <__smakebuf_r+0x1c>
 800e430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e434:	6023      	str	r3, [r4, #0]
 800e436:	6123      	str	r3, [r4, #16]
 800e438:	2301      	movs	r3, #1
 800e43a:	6163      	str	r3, [r4, #20]
 800e43c:	b002      	add	sp, #8
 800e43e:	bd70      	pop	{r4, r5, r6, pc}
 800e440:	ab01      	add	r3, sp, #4
 800e442:	466a      	mov	r2, sp
 800e444:	f7ff ffca 	bl	800e3dc <__swhatbuf_r>
 800e448:	9900      	ldr	r1, [sp, #0]
 800e44a:	4605      	mov	r5, r0
 800e44c:	4630      	mov	r0, r6
 800e44e:	f7fc fde7 	bl	800b020 <_malloc_r>
 800e452:	b948      	cbnz	r0, 800e468 <__smakebuf_r+0x44>
 800e454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e458:	059a      	lsls	r2, r3, #22
 800e45a:	d4ef      	bmi.n	800e43c <__smakebuf_r+0x18>
 800e45c:	f023 0303 	bic.w	r3, r3, #3
 800e460:	f043 0302 	orr.w	r3, r3, #2
 800e464:	81a3      	strh	r3, [r4, #12]
 800e466:	e7e3      	b.n	800e430 <__smakebuf_r+0xc>
 800e468:	4b0d      	ldr	r3, [pc, #52]	; (800e4a0 <__smakebuf_r+0x7c>)
 800e46a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e46c:	89a3      	ldrh	r3, [r4, #12]
 800e46e:	6020      	str	r0, [r4, #0]
 800e470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e474:	81a3      	strh	r3, [r4, #12]
 800e476:	9b00      	ldr	r3, [sp, #0]
 800e478:	6163      	str	r3, [r4, #20]
 800e47a:	9b01      	ldr	r3, [sp, #4]
 800e47c:	6120      	str	r0, [r4, #16]
 800e47e:	b15b      	cbz	r3, 800e498 <__smakebuf_r+0x74>
 800e480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e484:	4630      	mov	r0, r6
 800e486:	f001 f871 	bl	800f56c <_isatty_r>
 800e48a:	b128      	cbz	r0, 800e498 <__smakebuf_r+0x74>
 800e48c:	89a3      	ldrh	r3, [r4, #12]
 800e48e:	f023 0303 	bic.w	r3, r3, #3
 800e492:	f043 0301 	orr.w	r3, r3, #1
 800e496:	81a3      	strh	r3, [r4, #12]
 800e498:	89a0      	ldrh	r0, [r4, #12]
 800e49a:	4305      	orrs	r5, r0
 800e49c:	81a5      	strh	r5, [r4, #12]
 800e49e:	e7cd      	b.n	800e43c <__smakebuf_r+0x18>
 800e4a0:	0800ad51 	.word	0x0800ad51

0800e4a4 <__ascii_mbtowc>:
 800e4a4:	b082      	sub	sp, #8
 800e4a6:	b901      	cbnz	r1, 800e4aa <__ascii_mbtowc+0x6>
 800e4a8:	a901      	add	r1, sp, #4
 800e4aa:	b142      	cbz	r2, 800e4be <__ascii_mbtowc+0x1a>
 800e4ac:	b14b      	cbz	r3, 800e4c2 <__ascii_mbtowc+0x1e>
 800e4ae:	7813      	ldrb	r3, [r2, #0]
 800e4b0:	600b      	str	r3, [r1, #0]
 800e4b2:	7812      	ldrb	r2, [r2, #0]
 800e4b4:	1e10      	subs	r0, r2, #0
 800e4b6:	bf18      	it	ne
 800e4b8:	2001      	movne	r0, #1
 800e4ba:	b002      	add	sp, #8
 800e4bc:	4770      	bx	lr
 800e4be:	4610      	mov	r0, r2
 800e4c0:	e7fb      	b.n	800e4ba <__ascii_mbtowc+0x16>
 800e4c2:	f06f 0001 	mvn.w	r0, #1
 800e4c6:	e7f8      	b.n	800e4ba <__ascii_mbtowc+0x16>

0800e4c8 <__malloc_lock>:
 800e4c8:	4801      	ldr	r0, [pc, #4]	; (800e4d0 <__malloc_lock+0x8>)
 800e4ca:	f7fc bd38 	b.w	800af3e <__retarget_lock_acquire_recursive>
 800e4ce:	bf00      	nop
 800e4d0:	20005054 	.word	0x20005054

0800e4d4 <__malloc_unlock>:
 800e4d4:	4801      	ldr	r0, [pc, #4]	; (800e4dc <__malloc_unlock+0x8>)
 800e4d6:	f7fc bd33 	b.w	800af40 <__retarget_lock_release_recursive>
 800e4da:	bf00      	nop
 800e4dc:	20005054 	.word	0x20005054

0800e4e0 <_Balloc>:
 800e4e0:	b570      	push	{r4, r5, r6, lr}
 800e4e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	460d      	mov	r5, r1
 800e4e8:	b976      	cbnz	r6, 800e508 <_Balloc+0x28>
 800e4ea:	2010      	movs	r0, #16
 800e4ec:	f7fc fd2a 	bl	800af44 <malloc>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	6260      	str	r0, [r4, #36]	; 0x24
 800e4f4:	b920      	cbnz	r0, 800e500 <_Balloc+0x20>
 800e4f6:	4b18      	ldr	r3, [pc, #96]	; (800e558 <_Balloc+0x78>)
 800e4f8:	4818      	ldr	r0, [pc, #96]	; (800e55c <_Balloc+0x7c>)
 800e4fa:	2166      	movs	r1, #102	; 0x66
 800e4fc:	f000 fff4 	bl	800f4e8 <__assert_func>
 800e500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e504:	6006      	str	r6, [r0, #0]
 800e506:	60c6      	str	r6, [r0, #12]
 800e508:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e50a:	68f3      	ldr	r3, [r6, #12]
 800e50c:	b183      	cbz	r3, 800e530 <_Balloc+0x50>
 800e50e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e516:	b9b8      	cbnz	r0, 800e548 <_Balloc+0x68>
 800e518:	2101      	movs	r1, #1
 800e51a:	fa01 f605 	lsl.w	r6, r1, r5
 800e51e:	1d72      	adds	r2, r6, #5
 800e520:	0092      	lsls	r2, r2, #2
 800e522:	4620      	mov	r0, r4
 800e524:	f000 fc98 	bl	800ee58 <_calloc_r>
 800e528:	b160      	cbz	r0, 800e544 <_Balloc+0x64>
 800e52a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e52e:	e00e      	b.n	800e54e <_Balloc+0x6e>
 800e530:	2221      	movs	r2, #33	; 0x21
 800e532:	2104      	movs	r1, #4
 800e534:	4620      	mov	r0, r4
 800e536:	f000 fc8f 	bl	800ee58 <_calloc_r>
 800e53a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e53c:	60f0      	str	r0, [r6, #12]
 800e53e:	68db      	ldr	r3, [r3, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d1e4      	bne.n	800e50e <_Balloc+0x2e>
 800e544:	2000      	movs	r0, #0
 800e546:	bd70      	pop	{r4, r5, r6, pc}
 800e548:	6802      	ldr	r2, [r0, #0]
 800e54a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e54e:	2300      	movs	r3, #0
 800e550:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e554:	e7f7      	b.n	800e546 <_Balloc+0x66>
 800e556:	bf00      	nop
 800e558:	0800fc95 	.word	0x0800fc95
 800e55c:	0800fd9c 	.word	0x0800fd9c

0800e560 <_Bfree>:
 800e560:	b570      	push	{r4, r5, r6, lr}
 800e562:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e564:	4605      	mov	r5, r0
 800e566:	460c      	mov	r4, r1
 800e568:	b976      	cbnz	r6, 800e588 <_Bfree+0x28>
 800e56a:	2010      	movs	r0, #16
 800e56c:	f7fc fcea 	bl	800af44 <malloc>
 800e570:	4602      	mov	r2, r0
 800e572:	6268      	str	r0, [r5, #36]	; 0x24
 800e574:	b920      	cbnz	r0, 800e580 <_Bfree+0x20>
 800e576:	4b09      	ldr	r3, [pc, #36]	; (800e59c <_Bfree+0x3c>)
 800e578:	4809      	ldr	r0, [pc, #36]	; (800e5a0 <_Bfree+0x40>)
 800e57a:	218a      	movs	r1, #138	; 0x8a
 800e57c:	f000 ffb4 	bl	800f4e8 <__assert_func>
 800e580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e584:	6006      	str	r6, [r0, #0]
 800e586:	60c6      	str	r6, [r0, #12]
 800e588:	b13c      	cbz	r4, 800e59a <_Bfree+0x3a>
 800e58a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e58c:	6862      	ldr	r2, [r4, #4]
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e594:	6021      	str	r1, [r4, #0]
 800e596:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e59a:	bd70      	pop	{r4, r5, r6, pc}
 800e59c:	0800fc95 	.word	0x0800fc95
 800e5a0:	0800fd9c 	.word	0x0800fd9c

0800e5a4 <__multadd>:
 800e5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a8:	690e      	ldr	r6, [r1, #16]
 800e5aa:	4607      	mov	r7, r0
 800e5ac:	4698      	mov	r8, r3
 800e5ae:	460c      	mov	r4, r1
 800e5b0:	f101 0014 	add.w	r0, r1, #20
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	6805      	ldr	r5, [r0, #0]
 800e5b8:	b2a9      	uxth	r1, r5
 800e5ba:	fb02 8101 	mla	r1, r2, r1, r8
 800e5be:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e5c2:	0c2d      	lsrs	r5, r5, #16
 800e5c4:	fb02 c505 	mla	r5, r2, r5, ip
 800e5c8:	b289      	uxth	r1, r1
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e5d0:	429e      	cmp	r6, r3
 800e5d2:	f840 1b04 	str.w	r1, [r0], #4
 800e5d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e5da:	dcec      	bgt.n	800e5b6 <__multadd+0x12>
 800e5dc:	f1b8 0f00 	cmp.w	r8, #0
 800e5e0:	d022      	beq.n	800e628 <__multadd+0x84>
 800e5e2:	68a3      	ldr	r3, [r4, #8]
 800e5e4:	42b3      	cmp	r3, r6
 800e5e6:	dc19      	bgt.n	800e61c <__multadd+0x78>
 800e5e8:	6861      	ldr	r1, [r4, #4]
 800e5ea:	4638      	mov	r0, r7
 800e5ec:	3101      	adds	r1, #1
 800e5ee:	f7ff ff77 	bl	800e4e0 <_Balloc>
 800e5f2:	4605      	mov	r5, r0
 800e5f4:	b928      	cbnz	r0, 800e602 <__multadd+0x5e>
 800e5f6:	4602      	mov	r2, r0
 800e5f8:	4b0d      	ldr	r3, [pc, #52]	; (800e630 <__multadd+0x8c>)
 800e5fa:	480e      	ldr	r0, [pc, #56]	; (800e634 <__multadd+0x90>)
 800e5fc:	21b5      	movs	r1, #181	; 0xb5
 800e5fe:	f000 ff73 	bl	800f4e8 <__assert_func>
 800e602:	6922      	ldr	r2, [r4, #16]
 800e604:	3202      	adds	r2, #2
 800e606:	f104 010c 	add.w	r1, r4, #12
 800e60a:	0092      	lsls	r2, r2, #2
 800e60c:	300c      	adds	r0, #12
 800e60e:	f7fc fca1 	bl	800af54 <memcpy>
 800e612:	4621      	mov	r1, r4
 800e614:	4638      	mov	r0, r7
 800e616:	f7ff ffa3 	bl	800e560 <_Bfree>
 800e61a:	462c      	mov	r4, r5
 800e61c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e620:	3601      	adds	r6, #1
 800e622:	f8c3 8014 	str.w	r8, [r3, #20]
 800e626:	6126      	str	r6, [r4, #16]
 800e628:	4620      	mov	r0, r4
 800e62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e62e:	bf00      	nop
 800e630:	0800fd0b 	.word	0x0800fd0b
 800e634:	0800fd9c 	.word	0x0800fd9c

0800e638 <__s2b>:
 800e638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e63c:	460c      	mov	r4, r1
 800e63e:	4615      	mov	r5, r2
 800e640:	461f      	mov	r7, r3
 800e642:	2209      	movs	r2, #9
 800e644:	3308      	adds	r3, #8
 800e646:	4606      	mov	r6, r0
 800e648:	fb93 f3f2 	sdiv	r3, r3, r2
 800e64c:	2100      	movs	r1, #0
 800e64e:	2201      	movs	r2, #1
 800e650:	429a      	cmp	r2, r3
 800e652:	db09      	blt.n	800e668 <__s2b+0x30>
 800e654:	4630      	mov	r0, r6
 800e656:	f7ff ff43 	bl	800e4e0 <_Balloc>
 800e65a:	b940      	cbnz	r0, 800e66e <__s2b+0x36>
 800e65c:	4602      	mov	r2, r0
 800e65e:	4b19      	ldr	r3, [pc, #100]	; (800e6c4 <__s2b+0x8c>)
 800e660:	4819      	ldr	r0, [pc, #100]	; (800e6c8 <__s2b+0x90>)
 800e662:	21ce      	movs	r1, #206	; 0xce
 800e664:	f000 ff40 	bl	800f4e8 <__assert_func>
 800e668:	0052      	lsls	r2, r2, #1
 800e66a:	3101      	adds	r1, #1
 800e66c:	e7f0      	b.n	800e650 <__s2b+0x18>
 800e66e:	9b08      	ldr	r3, [sp, #32]
 800e670:	6143      	str	r3, [r0, #20]
 800e672:	2d09      	cmp	r5, #9
 800e674:	f04f 0301 	mov.w	r3, #1
 800e678:	6103      	str	r3, [r0, #16]
 800e67a:	dd16      	ble.n	800e6aa <__s2b+0x72>
 800e67c:	f104 0909 	add.w	r9, r4, #9
 800e680:	46c8      	mov	r8, r9
 800e682:	442c      	add	r4, r5
 800e684:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e688:	4601      	mov	r1, r0
 800e68a:	3b30      	subs	r3, #48	; 0x30
 800e68c:	220a      	movs	r2, #10
 800e68e:	4630      	mov	r0, r6
 800e690:	f7ff ff88 	bl	800e5a4 <__multadd>
 800e694:	45a0      	cmp	r8, r4
 800e696:	d1f5      	bne.n	800e684 <__s2b+0x4c>
 800e698:	f1a5 0408 	sub.w	r4, r5, #8
 800e69c:	444c      	add	r4, r9
 800e69e:	1b2d      	subs	r5, r5, r4
 800e6a0:	1963      	adds	r3, r4, r5
 800e6a2:	42bb      	cmp	r3, r7
 800e6a4:	db04      	blt.n	800e6b0 <__s2b+0x78>
 800e6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6aa:	340a      	adds	r4, #10
 800e6ac:	2509      	movs	r5, #9
 800e6ae:	e7f6      	b.n	800e69e <__s2b+0x66>
 800e6b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e6b4:	4601      	mov	r1, r0
 800e6b6:	3b30      	subs	r3, #48	; 0x30
 800e6b8:	220a      	movs	r2, #10
 800e6ba:	4630      	mov	r0, r6
 800e6bc:	f7ff ff72 	bl	800e5a4 <__multadd>
 800e6c0:	e7ee      	b.n	800e6a0 <__s2b+0x68>
 800e6c2:	bf00      	nop
 800e6c4:	0800fd0b 	.word	0x0800fd0b
 800e6c8:	0800fd9c 	.word	0x0800fd9c

0800e6cc <__hi0bits>:
 800e6cc:	0c03      	lsrs	r3, r0, #16
 800e6ce:	041b      	lsls	r3, r3, #16
 800e6d0:	b9d3      	cbnz	r3, 800e708 <__hi0bits+0x3c>
 800e6d2:	0400      	lsls	r0, r0, #16
 800e6d4:	2310      	movs	r3, #16
 800e6d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e6da:	bf04      	itt	eq
 800e6dc:	0200      	lsleq	r0, r0, #8
 800e6de:	3308      	addeq	r3, #8
 800e6e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e6e4:	bf04      	itt	eq
 800e6e6:	0100      	lsleq	r0, r0, #4
 800e6e8:	3304      	addeq	r3, #4
 800e6ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e6ee:	bf04      	itt	eq
 800e6f0:	0080      	lsleq	r0, r0, #2
 800e6f2:	3302      	addeq	r3, #2
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	db05      	blt.n	800e704 <__hi0bits+0x38>
 800e6f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e6fc:	f103 0301 	add.w	r3, r3, #1
 800e700:	bf08      	it	eq
 800e702:	2320      	moveq	r3, #32
 800e704:	4618      	mov	r0, r3
 800e706:	4770      	bx	lr
 800e708:	2300      	movs	r3, #0
 800e70a:	e7e4      	b.n	800e6d6 <__hi0bits+0xa>

0800e70c <__lo0bits>:
 800e70c:	6803      	ldr	r3, [r0, #0]
 800e70e:	f013 0207 	ands.w	r2, r3, #7
 800e712:	4601      	mov	r1, r0
 800e714:	d00b      	beq.n	800e72e <__lo0bits+0x22>
 800e716:	07da      	lsls	r2, r3, #31
 800e718:	d424      	bmi.n	800e764 <__lo0bits+0x58>
 800e71a:	0798      	lsls	r0, r3, #30
 800e71c:	bf49      	itett	mi
 800e71e:	085b      	lsrmi	r3, r3, #1
 800e720:	089b      	lsrpl	r3, r3, #2
 800e722:	2001      	movmi	r0, #1
 800e724:	600b      	strmi	r3, [r1, #0]
 800e726:	bf5c      	itt	pl
 800e728:	600b      	strpl	r3, [r1, #0]
 800e72a:	2002      	movpl	r0, #2
 800e72c:	4770      	bx	lr
 800e72e:	b298      	uxth	r0, r3
 800e730:	b9b0      	cbnz	r0, 800e760 <__lo0bits+0x54>
 800e732:	0c1b      	lsrs	r3, r3, #16
 800e734:	2010      	movs	r0, #16
 800e736:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e73a:	bf04      	itt	eq
 800e73c:	0a1b      	lsreq	r3, r3, #8
 800e73e:	3008      	addeq	r0, #8
 800e740:	071a      	lsls	r2, r3, #28
 800e742:	bf04      	itt	eq
 800e744:	091b      	lsreq	r3, r3, #4
 800e746:	3004      	addeq	r0, #4
 800e748:	079a      	lsls	r2, r3, #30
 800e74a:	bf04      	itt	eq
 800e74c:	089b      	lsreq	r3, r3, #2
 800e74e:	3002      	addeq	r0, #2
 800e750:	07da      	lsls	r2, r3, #31
 800e752:	d403      	bmi.n	800e75c <__lo0bits+0x50>
 800e754:	085b      	lsrs	r3, r3, #1
 800e756:	f100 0001 	add.w	r0, r0, #1
 800e75a:	d005      	beq.n	800e768 <__lo0bits+0x5c>
 800e75c:	600b      	str	r3, [r1, #0]
 800e75e:	4770      	bx	lr
 800e760:	4610      	mov	r0, r2
 800e762:	e7e8      	b.n	800e736 <__lo0bits+0x2a>
 800e764:	2000      	movs	r0, #0
 800e766:	4770      	bx	lr
 800e768:	2020      	movs	r0, #32
 800e76a:	4770      	bx	lr

0800e76c <__i2b>:
 800e76c:	b510      	push	{r4, lr}
 800e76e:	460c      	mov	r4, r1
 800e770:	2101      	movs	r1, #1
 800e772:	f7ff feb5 	bl	800e4e0 <_Balloc>
 800e776:	4602      	mov	r2, r0
 800e778:	b928      	cbnz	r0, 800e786 <__i2b+0x1a>
 800e77a:	4b05      	ldr	r3, [pc, #20]	; (800e790 <__i2b+0x24>)
 800e77c:	4805      	ldr	r0, [pc, #20]	; (800e794 <__i2b+0x28>)
 800e77e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e782:	f000 feb1 	bl	800f4e8 <__assert_func>
 800e786:	2301      	movs	r3, #1
 800e788:	6144      	str	r4, [r0, #20]
 800e78a:	6103      	str	r3, [r0, #16]
 800e78c:	bd10      	pop	{r4, pc}
 800e78e:	bf00      	nop
 800e790:	0800fd0b 	.word	0x0800fd0b
 800e794:	0800fd9c 	.word	0x0800fd9c

0800e798 <__multiply>:
 800e798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79c:	4614      	mov	r4, r2
 800e79e:	690a      	ldr	r2, [r1, #16]
 800e7a0:	6923      	ldr	r3, [r4, #16]
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	bfb8      	it	lt
 800e7a6:	460b      	movlt	r3, r1
 800e7a8:	460d      	mov	r5, r1
 800e7aa:	bfbc      	itt	lt
 800e7ac:	4625      	movlt	r5, r4
 800e7ae:	461c      	movlt	r4, r3
 800e7b0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e7b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e7b8:	68ab      	ldr	r3, [r5, #8]
 800e7ba:	6869      	ldr	r1, [r5, #4]
 800e7bc:	eb0a 0709 	add.w	r7, sl, r9
 800e7c0:	42bb      	cmp	r3, r7
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	bfb8      	it	lt
 800e7c6:	3101      	addlt	r1, #1
 800e7c8:	f7ff fe8a 	bl	800e4e0 <_Balloc>
 800e7cc:	b930      	cbnz	r0, 800e7dc <__multiply+0x44>
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	4b42      	ldr	r3, [pc, #264]	; (800e8dc <__multiply+0x144>)
 800e7d2:	4843      	ldr	r0, [pc, #268]	; (800e8e0 <__multiply+0x148>)
 800e7d4:	f240 115d 	movw	r1, #349	; 0x15d
 800e7d8:	f000 fe86 	bl	800f4e8 <__assert_func>
 800e7dc:	f100 0614 	add.w	r6, r0, #20
 800e7e0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e7e4:	4633      	mov	r3, r6
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	4543      	cmp	r3, r8
 800e7ea:	d31e      	bcc.n	800e82a <__multiply+0x92>
 800e7ec:	f105 0c14 	add.w	ip, r5, #20
 800e7f0:	f104 0314 	add.w	r3, r4, #20
 800e7f4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e7f8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e7fc:	9202      	str	r2, [sp, #8]
 800e7fe:	ebac 0205 	sub.w	r2, ip, r5
 800e802:	3a15      	subs	r2, #21
 800e804:	f022 0203 	bic.w	r2, r2, #3
 800e808:	3204      	adds	r2, #4
 800e80a:	f105 0115 	add.w	r1, r5, #21
 800e80e:	458c      	cmp	ip, r1
 800e810:	bf38      	it	cc
 800e812:	2204      	movcc	r2, #4
 800e814:	9201      	str	r2, [sp, #4]
 800e816:	9a02      	ldr	r2, [sp, #8]
 800e818:	9303      	str	r3, [sp, #12]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d808      	bhi.n	800e830 <__multiply+0x98>
 800e81e:	2f00      	cmp	r7, #0
 800e820:	dc55      	bgt.n	800e8ce <__multiply+0x136>
 800e822:	6107      	str	r7, [r0, #16]
 800e824:	b005      	add	sp, #20
 800e826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e82a:	f843 2b04 	str.w	r2, [r3], #4
 800e82e:	e7db      	b.n	800e7e8 <__multiply+0x50>
 800e830:	f8b3 a000 	ldrh.w	sl, [r3]
 800e834:	f1ba 0f00 	cmp.w	sl, #0
 800e838:	d020      	beq.n	800e87c <__multiply+0xe4>
 800e83a:	f105 0e14 	add.w	lr, r5, #20
 800e83e:	46b1      	mov	r9, r6
 800e840:	2200      	movs	r2, #0
 800e842:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e846:	f8d9 b000 	ldr.w	fp, [r9]
 800e84a:	b2a1      	uxth	r1, r4
 800e84c:	fa1f fb8b 	uxth.w	fp, fp
 800e850:	fb0a b101 	mla	r1, sl, r1, fp
 800e854:	4411      	add	r1, r2
 800e856:	f8d9 2000 	ldr.w	r2, [r9]
 800e85a:	0c24      	lsrs	r4, r4, #16
 800e85c:	0c12      	lsrs	r2, r2, #16
 800e85e:	fb0a 2404 	mla	r4, sl, r4, r2
 800e862:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e866:	b289      	uxth	r1, r1
 800e868:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e86c:	45f4      	cmp	ip, lr
 800e86e:	f849 1b04 	str.w	r1, [r9], #4
 800e872:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e876:	d8e4      	bhi.n	800e842 <__multiply+0xaa>
 800e878:	9901      	ldr	r1, [sp, #4]
 800e87a:	5072      	str	r2, [r6, r1]
 800e87c:	9a03      	ldr	r2, [sp, #12]
 800e87e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e882:	3304      	adds	r3, #4
 800e884:	f1b9 0f00 	cmp.w	r9, #0
 800e888:	d01f      	beq.n	800e8ca <__multiply+0x132>
 800e88a:	6834      	ldr	r4, [r6, #0]
 800e88c:	f105 0114 	add.w	r1, r5, #20
 800e890:	46b6      	mov	lr, r6
 800e892:	f04f 0a00 	mov.w	sl, #0
 800e896:	880a      	ldrh	r2, [r1, #0]
 800e898:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e89c:	fb09 b202 	mla	r2, r9, r2, fp
 800e8a0:	4492      	add	sl, r2
 800e8a2:	b2a4      	uxth	r4, r4
 800e8a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e8a8:	f84e 4b04 	str.w	r4, [lr], #4
 800e8ac:	f851 4b04 	ldr.w	r4, [r1], #4
 800e8b0:	f8be 2000 	ldrh.w	r2, [lr]
 800e8b4:	0c24      	lsrs	r4, r4, #16
 800e8b6:	fb09 2404 	mla	r4, r9, r4, r2
 800e8ba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e8be:	458c      	cmp	ip, r1
 800e8c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e8c4:	d8e7      	bhi.n	800e896 <__multiply+0xfe>
 800e8c6:	9a01      	ldr	r2, [sp, #4]
 800e8c8:	50b4      	str	r4, [r6, r2]
 800e8ca:	3604      	adds	r6, #4
 800e8cc:	e7a3      	b.n	800e816 <__multiply+0x7e>
 800e8ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d1a5      	bne.n	800e822 <__multiply+0x8a>
 800e8d6:	3f01      	subs	r7, #1
 800e8d8:	e7a1      	b.n	800e81e <__multiply+0x86>
 800e8da:	bf00      	nop
 800e8dc:	0800fd0b 	.word	0x0800fd0b
 800e8e0:	0800fd9c 	.word	0x0800fd9c

0800e8e4 <__pow5mult>:
 800e8e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8e8:	4615      	mov	r5, r2
 800e8ea:	f012 0203 	ands.w	r2, r2, #3
 800e8ee:	4606      	mov	r6, r0
 800e8f0:	460f      	mov	r7, r1
 800e8f2:	d007      	beq.n	800e904 <__pow5mult+0x20>
 800e8f4:	4c25      	ldr	r4, [pc, #148]	; (800e98c <__pow5mult+0xa8>)
 800e8f6:	3a01      	subs	r2, #1
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e8fe:	f7ff fe51 	bl	800e5a4 <__multadd>
 800e902:	4607      	mov	r7, r0
 800e904:	10ad      	asrs	r5, r5, #2
 800e906:	d03d      	beq.n	800e984 <__pow5mult+0xa0>
 800e908:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e90a:	b97c      	cbnz	r4, 800e92c <__pow5mult+0x48>
 800e90c:	2010      	movs	r0, #16
 800e90e:	f7fc fb19 	bl	800af44 <malloc>
 800e912:	4602      	mov	r2, r0
 800e914:	6270      	str	r0, [r6, #36]	; 0x24
 800e916:	b928      	cbnz	r0, 800e924 <__pow5mult+0x40>
 800e918:	4b1d      	ldr	r3, [pc, #116]	; (800e990 <__pow5mult+0xac>)
 800e91a:	481e      	ldr	r0, [pc, #120]	; (800e994 <__pow5mult+0xb0>)
 800e91c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e920:	f000 fde2 	bl	800f4e8 <__assert_func>
 800e924:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e928:	6004      	str	r4, [r0, #0]
 800e92a:	60c4      	str	r4, [r0, #12]
 800e92c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e930:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e934:	b94c      	cbnz	r4, 800e94a <__pow5mult+0x66>
 800e936:	f240 2171 	movw	r1, #625	; 0x271
 800e93a:	4630      	mov	r0, r6
 800e93c:	f7ff ff16 	bl	800e76c <__i2b>
 800e940:	2300      	movs	r3, #0
 800e942:	f8c8 0008 	str.w	r0, [r8, #8]
 800e946:	4604      	mov	r4, r0
 800e948:	6003      	str	r3, [r0, #0]
 800e94a:	f04f 0900 	mov.w	r9, #0
 800e94e:	07eb      	lsls	r3, r5, #31
 800e950:	d50a      	bpl.n	800e968 <__pow5mult+0x84>
 800e952:	4639      	mov	r1, r7
 800e954:	4622      	mov	r2, r4
 800e956:	4630      	mov	r0, r6
 800e958:	f7ff ff1e 	bl	800e798 <__multiply>
 800e95c:	4639      	mov	r1, r7
 800e95e:	4680      	mov	r8, r0
 800e960:	4630      	mov	r0, r6
 800e962:	f7ff fdfd 	bl	800e560 <_Bfree>
 800e966:	4647      	mov	r7, r8
 800e968:	106d      	asrs	r5, r5, #1
 800e96a:	d00b      	beq.n	800e984 <__pow5mult+0xa0>
 800e96c:	6820      	ldr	r0, [r4, #0]
 800e96e:	b938      	cbnz	r0, 800e980 <__pow5mult+0x9c>
 800e970:	4622      	mov	r2, r4
 800e972:	4621      	mov	r1, r4
 800e974:	4630      	mov	r0, r6
 800e976:	f7ff ff0f 	bl	800e798 <__multiply>
 800e97a:	6020      	str	r0, [r4, #0]
 800e97c:	f8c0 9000 	str.w	r9, [r0]
 800e980:	4604      	mov	r4, r0
 800e982:	e7e4      	b.n	800e94e <__pow5mult+0x6a>
 800e984:	4638      	mov	r0, r7
 800e986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e98a:	bf00      	nop
 800e98c:	0800fef0 	.word	0x0800fef0
 800e990:	0800fc95 	.word	0x0800fc95
 800e994:	0800fd9c 	.word	0x0800fd9c

0800e998 <__lshift>:
 800e998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e99c:	460c      	mov	r4, r1
 800e99e:	6849      	ldr	r1, [r1, #4]
 800e9a0:	6923      	ldr	r3, [r4, #16]
 800e9a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e9a6:	68a3      	ldr	r3, [r4, #8]
 800e9a8:	4607      	mov	r7, r0
 800e9aa:	4691      	mov	r9, r2
 800e9ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e9b0:	f108 0601 	add.w	r6, r8, #1
 800e9b4:	42b3      	cmp	r3, r6
 800e9b6:	db0b      	blt.n	800e9d0 <__lshift+0x38>
 800e9b8:	4638      	mov	r0, r7
 800e9ba:	f7ff fd91 	bl	800e4e0 <_Balloc>
 800e9be:	4605      	mov	r5, r0
 800e9c0:	b948      	cbnz	r0, 800e9d6 <__lshift+0x3e>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	4b28      	ldr	r3, [pc, #160]	; (800ea68 <__lshift+0xd0>)
 800e9c6:	4829      	ldr	r0, [pc, #164]	; (800ea6c <__lshift+0xd4>)
 800e9c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e9cc:	f000 fd8c 	bl	800f4e8 <__assert_func>
 800e9d0:	3101      	adds	r1, #1
 800e9d2:	005b      	lsls	r3, r3, #1
 800e9d4:	e7ee      	b.n	800e9b4 <__lshift+0x1c>
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	f100 0114 	add.w	r1, r0, #20
 800e9dc:	f100 0210 	add.w	r2, r0, #16
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	4553      	cmp	r3, sl
 800e9e4:	db33      	blt.n	800ea4e <__lshift+0xb6>
 800e9e6:	6920      	ldr	r0, [r4, #16]
 800e9e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e9ec:	f104 0314 	add.w	r3, r4, #20
 800e9f0:	f019 091f 	ands.w	r9, r9, #31
 800e9f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e9f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e9fc:	d02b      	beq.n	800ea56 <__lshift+0xbe>
 800e9fe:	f1c9 0e20 	rsb	lr, r9, #32
 800ea02:	468a      	mov	sl, r1
 800ea04:	2200      	movs	r2, #0
 800ea06:	6818      	ldr	r0, [r3, #0]
 800ea08:	fa00 f009 	lsl.w	r0, r0, r9
 800ea0c:	4302      	orrs	r2, r0
 800ea0e:	f84a 2b04 	str.w	r2, [sl], #4
 800ea12:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea16:	459c      	cmp	ip, r3
 800ea18:	fa22 f20e 	lsr.w	r2, r2, lr
 800ea1c:	d8f3      	bhi.n	800ea06 <__lshift+0x6e>
 800ea1e:	ebac 0304 	sub.w	r3, ip, r4
 800ea22:	3b15      	subs	r3, #21
 800ea24:	f023 0303 	bic.w	r3, r3, #3
 800ea28:	3304      	adds	r3, #4
 800ea2a:	f104 0015 	add.w	r0, r4, #21
 800ea2e:	4584      	cmp	ip, r0
 800ea30:	bf38      	it	cc
 800ea32:	2304      	movcc	r3, #4
 800ea34:	50ca      	str	r2, [r1, r3]
 800ea36:	b10a      	cbz	r2, 800ea3c <__lshift+0xa4>
 800ea38:	f108 0602 	add.w	r6, r8, #2
 800ea3c:	3e01      	subs	r6, #1
 800ea3e:	4638      	mov	r0, r7
 800ea40:	612e      	str	r6, [r5, #16]
 800ea42:	4621      	mov	r1, r4
 800ea44:	f7ff fd8c 	bl	800e560 <_Bfree>
 800ea48:	4628      	mov	r0, r5
 800ea4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ea52:	3301      	adds	r3, #1
 800ea54:	e7c5      	b.n	800e9e2 <__lshift+0x4a>
 800ea56:	3904      	subs	r1, #4
 800ea58:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ea60:	459c      	cmp	ip, r3
 800ea62:	d8f9      	bhi.n	800ea58 <__lshift+0xc0>
 800ea64:	e7ea      	b.n	800ea3c <__lshift+0xa4>
 800ea66:	bf00      	nop
 800ea68:	0800fd0b 	.word	0x0800fd0b
 800ea6c:	0800fd9c 	.word	0x0800fd9c

0800ea70 <__mcmp>:
 800ea70:	b530      	push	{r4, r5, lr}
 800ea72:	6902      	ldr	r2, [r0, #16]
 800ea74:	690c      	ldr	r4, [r1, #16]
 800ea76:	1b12      	subs	r2, r2, r4
 800ea78:	d10e      	bne.n	800ea98 <__mcmp+0x28>
 800ea7a:	f100 0314 	add.w	r3, r0, #20
 800ea7e:	3114      	adds	r1, #20
 800ea80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ea84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ea88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ea8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ea90:	42a5      	cmp	r5, r4
 800ea92:	d003      	beq.n	800ea9c <__mcmp+0x2c>
 800ea94:	d305      	bcc.n	800eaa2 <__mcmp+0x32>
 800ea96:	2201      	movs	r2, #1
 800ea98:	4610      	mov	r0, r2
 800ea9a:	bd30      	pop	{r4, r5, pc}
 800ea9c:	4283      	cmp	r3, r0
 800ea9e:	d3f3      	bcc.n	800ea88 <__mcmp+0x18>
 800eaa0:	e7fa      	b.n	800ea98 <__mcmp+0x28>
 800eaa2:	f04f 32ff 	mov.w	r2, #4294967295
 800eaa6:	e7f7      	b.n	800ea98 <__mcmp+0x28>

0800eaa8 <__mdiff>:
 800eaa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaac:	460c      	mov	r4, r1
 800eaae:	4606      	mov	r6, r0
 800eab0:	4611      	mov	r1, r2
 800eab2:	4620      	mov	r0, r4
 800eab4:	4617      	mov	r7, r2
 800eab6:	f7ff ffdb 	bl	800ea70 <__mcmp>
 800eaba:	1e05      	subs	r5, r0, #0
 800eabc:	d110      	bne.n	800eae0 <__mdiff+0x38>
 800eabe:	4629      	mov	r1, r5
 800eac0:	4630      	mov	r0, r6
 800eac2:	f7ff fd0d 	bl	800e4e0 <_Balloc>
 800eac6:	b930      	cbnz	r0, 800ead6 <__mdiff+0x2e>
 800eac8:	4b39      	ldr	r3, [pc, #228]	; (800ebb0 <__mdiff+0x108>)
 800eaca:	4602      	mov	r2, r0
 800eacc:	f240 2132 	movw	r1, #562	; 0x232
 800ead0:	4838      	ldr	r0, [pc, #224]	; (800ebb4 <__mdiff+0x10c>)
 800ead2:	f000 fd09 	bl	800f4e8 <__assert_func>
 800ead6:	2301      	movs	r3, #1
 800ead8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eadc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eae0:	bfa4      	itt	ge
 800eae2:	463b      	movge	r3, r7
 800eae4:	4627      	movge	r7, r4
 800eae6:	4630      	mov	r0, r6
 800eae8:	6879      	ldr	r1, [r7, #4]
 800eaea:	bfa6      	itte	ge
 800eaec:	461c      	movge	r4, r3
 800eaee:	2500      	movge	r5, #0
 800eaf0:	2501      	movlt	r5, #1
 800eaf2:	f7ff fcf5 	bl	800e4e0 <_Balloc>
 800eaf6:	b920      	cbnz	r0, 800eb02 <__mdiff+0x5a>
 800eaf8:	4b2d      	ldr	r3, [pc, #180]	; (800ebb0 <__mdiff+0x108>)
 800eafa:	4602      	mov	r2, r0
 800eafc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800eb00:	e7e6      	b.n	800ead0 <__mdiff+0x28>
 800eb02:	693e      	ldr	r6, [r7, #16]
 800eb04:	60c5      	str	r5, [r0, #12]
 800eb06:	6925      	ldr	r5, [r4, #16]
 800eb08:	f107 0114 	add.w	r1, r7, #20
 800eb0c:	f104 0914 	add.w	r9, r4, #20
 800eb10:	f100 0e14 	add.w	lr, r0, #20
 800eb14:	f107 0210 	add.w	r2, r7, #16
 800eb18:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800eb1c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800eb20:	46f2      	mov	sl, lr
 800eb22:	2700      	movs	r7, #0
 800eb24:	f859 3b04 	ldr.w	r3, [r9], #4
 800eb28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eb2c:	fa1f f883 	uxth.w	r8, r3
 800eb30:	fa17 f78b 	uxtah	r7, r7, fp
 800eb34:	0c1b      	lsrs	r3, r3, #16
 800eb36:	eba7 0808 	sub.w	r8, r7, r8
 800eb3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eb3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eb42:	fa1f f888 	uxth.w	r8, r8
 800eb46:	141f      	asrs	r7, r3, #16
 800eb48:	454d      	cmp	r5, r9
 800eb4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eb4e:	f84a 3b04 	str.w	r3, [sl], #4
 800eb52:	d8e7      	bhi.n	800eb24 <__mdiff+0x7c>
 800eb54:	1b2b      	subs	r3, r5, r4
 800eb56:	3b15      	subs	r3, #21
 800eb58:	f023 0303 	bic.w	r3, r3, #3
 800eb5c:	3304      	adds	r3, #4
 800eb5e:	3415      	adds	r4, #21
 800eb60:	42a5      	cmp	r5, r4
 800eb62:	bf38      	it	cc
 800eb64:	2304      	movcc	r3, #4
 800eb66:	4419      	add	r1, r3
 800eb68:	4473      	add	r3, lr
 800eb6a:	469e      	mov	lr, r3
 800eb6c:	460d      	mov	r5, r1
 800eb6e:	4565      	cmp	r5, ip
 800eb70:	d30e      	bcc.n	800eb90 <__mdiff+0xe8>
 800eb72:	f10c 0203 	add.w	r2, ip, #3
 800eb76:	1a52      	subs	r2, r2, r1
 800eb78:	f022 0203 	bic.w	r2, r2, #3
 800eb7c:	3903      	subs	r1, #3
 800eb7e:	458c      	cmp	ip, r1
 800eb80:	bf38      	it	cc
 800eb82:	2200      	movcc	r2, #0
 800eb84:	441a      	add	r2, r3
 800eb86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eb8a:	b17b      	cbz	r3, 800ebac <__mdiff+0x104>
 800eb8c:	6106      	str	r6, [r0, #16]
 800eb8e:	e7a5      	b.n	800eadc <__mdiff+0x34>
 800eb90:	f855 8b04 	ldr.w	r8, [r5], #4
 800eb94:	fa17 f488 	uxtah	r4, r7, r8
 800eb98:	1422      	asrs	r2, r4, #16
 800eb9a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800eb9e:	b2a4      	uxth	r4, r4
 800eba0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800eba4:	f84e 4b04 	str.w	r4, [lr], #4
 800eba8:	1417      	asrs	r7, r2, #16
 800ebaa:	e7e0      	b.n	800eb6e <__mdiff+0xc6>
 800ebac:	3e01      	subs	r6, #1
 800ebae:	e7ea      	b.n	800eb86 <__mdiff+0xde>
 800ebb0:	0800fd0b 	.word	0x0800fd0b
 800ebb4:	0800fd9c 	.word	0x0800fd9c

0800ebb8 <__ulp>:
 800ebb8:	b082      	sub	sp, #8
 800ebba:	ed8d 0b00 	vstr	d0, [sp]
 800ebbe:	9b01      	ldr	r3, [sp, #4]
 800ebc0:	4912      	ldr	r1, [pc, #72]	; (800ec0c <__ulp+0x54>)
 800ebc2:	4019      	ands	r1, r3
 800ebc4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ebc8:	2900      	cmp	r1, #0
 800ebca:	dd05      	ble.n	800ebd8 <__ulp+0x20>
 800ebcc:	2200      	movs	r2, #0
 800ebce:	460b      	mov	r3, r1
 800ebd0:	ec43 2b10 	vmov	d0, r2, r3
 800ebd4:	b002      	add	sp, #8
 800ebd6:	4770      	bx	lr
 800ebd8:	4249      	negs	r1, r1
 800ebda:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ebde:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ebe2:	f04f 0200 	mov.w	r2, #0
 800ebe6:	f04f 0300 	mov.w	r3, #0
 800ebea:	da04      	bge.n	800ebf6 <__ulp+0x3e>
 800ebec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ebf0:	fa41 f300 	asr.w	r3, r1, r0
 800ebf4:	e7ec      	b.n	800ebd0 <__ulp+0x18>
 800ebf6:	f1a0 0114 	sub.w	r1, r0, #20
 800ebfa:	291e      	cmp	r1, #30
 800ebfc:	bfda      	itte	le
 800ebfe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ec02:	fa20 f101 	lsrle.w	r1, r0, r1
 800ec06:	2101      	movgt	r1, #1
 800ec08:	460a      	mov	r2, r1
 800ec0a:	e7e1      	b.n	800ebd0 <__ulp+0x18>
 800ec0c:	7ff00000 	.word	0x7ff00000

0800ec10 <__b2d>:
 800ec10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec12:	6905      	ldr	r5, [r0, #16]
 800ec14:	f100 0714 	add.w	r7, r0, #20
 800ec18:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ec1c:	1f2e      	subs	r6, r5, #4
 800ec1e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ec22:	4620      	mov	r0, r4
 800ec24:	f7ff fd52 	bl	800e6cc <__hi0bits>
 800ec28:	f1c0 0320 	rsb	r3, r0, #32
 800ec2c:	280a      	cmp	r0, #10
 800ec2e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ecac <__b2d+0x9c>
 800ec32:	600b      	str	r3, [r1, #0]
 800ec34:	dc14      	bgt.n	800ec60 <__b2d+0x50>
 800ec36:	f1c0 0e0b 	rsb	lr, r0, #11
 800ec3a:	fa24 f10e 	lsr.w	r1, r4, lr
 800ec3e:	42b7      	cmp	r7, r6
 800ec40:	ea41 030c 	orr.w	r3, r1, ip
 800ec44:	bf34      	ite	cc
 800ec46:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ec4a:	2100      	movcs	r1, #0
 800ec4c:	3015      	adds	r0, #21
 800ec4e:	fa04 f000 	lsl.w	r0, r4, r0
 800ec52:	fa21 f10e 	lsr.w	r1, r1, lr
 800ec56:	ea40 0201 	orr.w	r2, r0, r1
 800ec5a:	ec43 2b10 	vmov	d0, r2, r3
 800ec5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec60:	42b7      	cmp	r7, r6
 800ec62:	bf3a      	itte	cc
 800ec64:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ec68:	f1a5 0608 	subcc.w	r6, r5, #8
 800ec6c:	2100      	movcs	r1, #0
 800ec6e:	380b      	subs	r0, #11
 800ec70:	d017      	beq.n	800eca2 <__b2d+0x92>
 800ec72:	f1c0 0c20 	rsb	ip, r0, #32
 800ec76:	fa04 f500 	lsl.w	r5, r4, r0
 800ec7a:	42be      	cmp	r6, r7
 800ec7c:	fa21 f40c 	lsr.w	r4, r1, ip
 800ec80:	ea45 0504 	orr.w	r5, r5, r4
 800ec84:	bf8c      	ite	hi
 800ec86:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ec8a:	2400      	movls	r4, #0
 800ec8c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ec90:	fa01 f000 	lsl.w	r0, r1, r0
 800ec94:	fa24 f40c 	lsr.w	r4, r4, ip
 800ec98:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ec9c:	ea40 0204 	orr.w	r2, r0, r4
 800eca0:	e7db      	b.n	800ec5a <__b2d+0x4a>
 800eca2:	ea44 030c 	orr.w	r3, r4, ip
 800eca6:	460a      	mov	r2, r1
 800eca8:	e7d7      	b.n	800ec5a <__b2d+0x4a>
 800ecaa:	bf00      	nop
 800ecac:	3ff00000 	.word	0x3ff00000

0800ecb0 <__d2b>:
 800ecb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ecb4:	4689      	mov	r9, r1
 800ecb6:	2101      	movs	r1, #1
 800ecb8:	ec57 6b10 	vmov	r6, r7, d0
 800ecbc:	4690      	mov	r8, r2
 800ecbe:	f7ff fc0f 	bl	800e4e0 <_Balloc>
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	b930      	cbnz	r0, 800ecd4 <__d2b+0x24>
 800ecc6:	4602      	mov	r2, r0
 800ecc8:	4b25      	ldr	r3, [pc, #148]	; (800ed60 <__d2b+0xb0>)
 800ecca:	4826      	ldr	r0, [pc, #152]	; (800ed64 <__d2b+0xb4>)
 800eccc:	f240 310a 	movw	r1, #778	; 0x30a
 800ecd0:	f000 fc0a 	bl	800f4e8 <__assert_func>
 800ecd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ecd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ecdc:	bb35      	cbnz	r5, 800ed2c <__d2b+0x7c>
 800ecde:	2e00      	cmp	r6, #0
 800ece0:	9301      	str	r3, [sp, #4]
 800ece2:	d028      	beq.n	800ed36 <__d2b+0x86>
 800ece4:	4668      	mov	r0, sp
 800ece6:	9600      	str	r6, [sp, #0]
 800ece8:	f7ff fd10 	bl	800e70c <__lo0bits>
 800ecec:	9900      	ldr	r1, [sp, #0]
 800ecee:	b300      	cbz	r0, 800ed32 <__d2b+0x82>
 800ecf0:	9a01      	ldr	r2, [sp, #4]
 800ecf2:	f1c0 0320 	rsb	r3, r0, #32
 800ecf6:	fa02 f303 	lsl.w	r3, r2, r3
 800ecfa:	430b      	orrs	r3, r1
 800ecfc:	40c2      	lsrs	r2, r0
 800ecfe:	6163      	str	r3, [r4, #20]
 800ed00:	9201      	str	r2, [sp, #4]
 800ed02:	9b01      	ldr	r3, [sp, #4]
 800ed04:	61a3      	str	r3, [r4, #24]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	bf14      	ite	ne
 800ed0a:	2202      	movne	r2, #2
 800ed0c:	2201      	moveq	r2, #1
 800ed0e:	6122      	str	r2, [r4, #16]
 800ed10:	b1d5      	cbz	r5, 800ed48 <__d2b+0x98>
 800ed12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ed16:	4405      	add	r5, r0
 800ed18:	f8c9 5000 	str.w	r5, [r9]
 800ed1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ed20:	f8c8 0000 	str.w	r0, [r8]
 800ed24:	4620      	mov	r0, r4
 800ed26:	b003      	add	sp, #12
 800ed28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed30:	e7d5      	b.n	800ecde <__d2b+0x2e>
 800ed32:	6161      	str	r1, [r4, #20]
 800ed34:	e7e5      	b.n	800ed02 <__d2b+0x52>
 800ed36:	a801      	add	r0, sp, #4
 800ed38:	f7ff fce8 	bl	800e70c <__lo0bits>
 800ed3c:	9b01      	ldr	r3, [sp, #4]
 800ed3e:	6163      	str	r3, [r4, #20]
 800ed40:	2201      	movs	r2, #1
 800ed42:	6122      	str	r2, [r4, #16]
 800ed44:	3020      	adds	r0, #32
 800ed46:	e7e3      	b.n	800ed10 <__d2b+0x60>
 800ed48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ed50:	f8c9 0000 	str.w	r0, [r9]
 800ed54:	6918      	ldr	r0, [r3, #16]
 800ed56:	f7ff fcb9 	bl	800e6cc <__hi0bits>
 800ed5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed5e:	e7df      	b.n	800ed20 <__d2b+0x70>
 800ed60:	0800fd0b 	.word	0x0800fd0b
 800ed64:	0800fd9c 	.word	0x0800fd9c

0800ed68 <__ratio>:
 800ed68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed6c:	468a      	mov	sl, r1
 800ed6e:	4669      	mov	r1, sp
 800ed70:	4683      	mov	fp, r0
 800ed72:	f7ff ff4d 	bl	800ec10 <__b2d>
 800ed76:	a901      	add	r1, sp, #4
 800ed78:	4650      	mov	r0, sl
 800ed7a:	ec59 8b10 	vmov	r8, r9, d0
 800ed7e:	ee10 6a10 	vmov	r6, s0
 800ed82:	f7ff ff45 	bl	800ec10 <__b2d>
 800ed86:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ed8a:	f8da 2010 	ldr.w	r2, [sl, #16]
 800ed8e:	eba3 0c02 	sub.w	ip, r3, r2
 800ed92:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ed96:	1a9b      	subs	r3, r3, r2
 800ed98:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ed9c:	ec55 4b10 	vmov	r4, r5, d0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	ee10 0a10 	vmov	r0, s0
 800eda6:	bfce      	itee	gt
 800eda8:	464a      	movgt	r2, r9
 800edaa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800edae:	462a      	movle	r2, r5
 800edb0:	464f      	mov	r7, r9
 800edb2:	4629      	mov	r1, r5
 800edb4:	bfcc      	ite	gt
 800edb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800edba:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800edbe:	ec47 6b17 	vmov	d7, r6, r7
 800edc2:	ec41 0b16 	vmov	d6, r0, r1
 800edc6:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800edca:	b003      	add	sp, #12
 800edcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800edd0 <__copybits>:
 800edd0:	3901      	subs	r1, #1
 800edd2:	b570      	push	{r4, r5, r6, lr}
 800edd4:	1149      	asrs	r1, r1, #5
 800edd6:	6914      	ldr	r4, [r2, #16]
 800edd8:	3101      	adds	r1, #1
 800edda:	f102 0314 	add.w	r3, r2, #20
 800edde:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ede2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ede6:	1f05      	subs	r5, r0, #4
 800ede8:	42a3      	cmp	r3, r4
 800edea:	d30c      	bcc.n	800ee06 <__copybits+0x36>
 800edec:	1aa3      	subs	r3, r4, r2
 800edee:	3b11      	subs	r3, #17
 800edf0:	f023 0303 	bic.w	r3, r3, #3
 800edf4:	3211      	adds	r2, #17
 800edf6:	42a2      	cmp	r2, r4
 800edf8:	bf88      	it	hi
 800edfa:	2300      	movhi	r3, #0
 800edfc:	4418      	add	r0, r3
 800edfe:	2300      	movs	r3, #0
 800ee00:	4288      	cmp	r0, r1
 800ee02:	d305      	bcc.n	800ee10 <__copybits+0x40>
 800ee04:	bd70      	pop	{r4, r5, r6, pc}
 800ee06:	f853 6b04 	ldr.w	r6, [r3], #4
 800ee0a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ee0e:	e7eb      	b.n	800ede8 <__copybits+0x18>
 800ee10:	f840 3b04 	str.w	r3, [r0], #4
 800ee14:	e7f4      	b.n	800ee00 <__copybits+0x30>

0800ee16 <__any_on>:
 800ee16:	f100 0214 	add.w	r2, r0, #20
 800ee1a:	6900      	ldr	r0, [r0, #16]
 800ee1c:	114b      	asrs	r3, r1, #5
 800ee1e:	4298      	cmp	r0, r3
 800ee20:	b510      	push	{r4, lr}
 800ee22:	db11      	blt.n	800ee48 <__any_on+0x32>
 800ee24:	dd0a      	ble.n	800ee3c <__any_on+0x26>
 800ee26:	f011 011f 	ands.w	r1, r1, #31
 800ee2a:	d007      	beq.n	800ee3c <__any_on+0x26>
 800ee2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ee30:	fa24 f001 	lsr.w	r0, r4, r1
 800ee34:	fa00 f101 	lsl.w	r1, r0, r1
 800ee38:	428c      	cmp	r4, r1
 800ee3a:	d10b      	bne.n	800ee54 <__any_on+0x3e>
 800ee3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d803      	bhi.n	800ee4c <__any_on+0x36>
 800ee44:	2000      	movs	r0, #0
 800ee46:	bd10      	pop	{r4, pc}
 800ee48:	4603      	mov	r3, r0
 800ee4a:	e7f7      	b.n	800ee3c <__any_on+0x26>
 800ee4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee50:	2900      	cmp	r1, #0
 800ee52:	d0f5      	beq.n	800ee40 <__any_on+0x2a>
 800ee54:	2001      	movs	r0, #1
 800ee56:	e7f6      	b.n	800ee46 <__any_on+0x30>

0800ee58 <_calloc_r>:
 800ee58:	b513      	push	{r0, r1, r4, lr}
 800ee5a:	434a      	muls	r2, r1
 800ee5c:	4611      	mov	r1, r2
 800ee5e:	9201      	str	r2, [sp, #4]
 800ee60:	f7fc f8de 	bl	800b020 <_malloc_r>
 800ee64:	4604      	mov	r4, r0
 800ee66:	b118      	cbz	r0, 800ee70 <_calloc_r+0x18>
 800ee68:	9a01      	ldr	r2, [sp, #4]
 800ee6a:	2100      	movs	r1, #0
 800ee6c:	f7fc f880 	bl	800af70 <memset>
 800ee70:	4620      	mov	r0, r4
 800ee72:	b002      	add	sp, #8
 800ee74:	bd10      	pop	{r4, pc}

0800ee76 <__ssputs_r>:
 800ee76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee7a:	688e      	ldr	r6, [r1, #8]
 800ee7c:	429e      	cmp	r6, r3
 800ee7e:	4682      	mov	sl, r0
 800ee80:	460c      	mov	r4, r1
 800ee82:	4690      	mov	r8, r2
 800ee84:	461f      	mov	r7, r3
 800ee86:	d838      	bhi.n	800eefa <__ssputs_r+0x84>
 800ee88:	898a      	ldrh	r2, [r1, #12]
 800ee8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee8e:	d032      	beq.n	800eef6 <__ssputs_r+0x80>
 800ee90:	6825      	ldr	r5, [r4, #0]
 800ee92:	6909      	ldr	r1, [r1, #16]
 800ee94:	eba5 0901 	sub.w	r9, r5, r1
 800ee98:	6965      	ldr	r5, [r4, #20]
 800ee9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eea2:	3301      	adds	r3, #1
 800eea4:	444b      	add	r3, r9
 800eea6:	106d      	asrs	r5, r5, #1
 800eea8:	429d      	cmp	r5, r3
 800eeaa:	bf38      	it	cc
 800eeac:	461d      	movcc	r5, r3
 800eeae:	0553      	lsls	r3, r2, #21
 800eeb0:	d531      	bpl.n	800ef16 <__ssputs_r+0xa0>
 800eeb2:	4629      	mov	r1, r5
 800eeb4:	f7fc f8b4 	bl	800b020 <_malloc_r>
 800eeb8:	4606      	mov	r6, r0
 800eeba:	b950      	cbnz	r0, 800eed2 <__ssputs_r+0x5c>
 800eebc:	230c      	movs	r3, #12
 800eebe:	f8ca 3000 	str.w	r3, [sl]
 800eec2:	89a3      	ldrh	r3, [r4, #12]
 800eec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eec8:	81a3      	strh	r3, [r4, #12]
 800eeca:	f04f 30ff 	mov.w	r0, #4294967295
 800eece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eed2:	6921      	ldr	r1, [r4, #16]
 800eed4:	464a      	mov	r2, r9
 800eed6:	f7fc f83d 	bl	800af54 <memcpy>
 800eeda:	89a3      	ldrh	r3, [r4, #12]
 800eedc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eee4:	81a3      	strh	r3, [r4, #12]
 800eee6:	6126      	str	r6, [r4, #16]
 800eee8:	6165      	str	r5, [r4, #20]
 800eeea:	444e      	add	r6, r9
 800eeec:	eba5 0509 	sub.w	r5, r5, r9
 800eef0:	6026      	str	r6, [r4, #0]
 800eef2:	60a5      	str	r5, [r4, #8]
 800eef4:	463e      	mov	r6, r7
 800eef6:	42be      	cmp	r6, r7
 800eef8:	d900      	bls.n	800eefc <__ssputs_r+0x86>
 800eefa:	463e      	mov	r6, r7
 800eefc:	4632      	mov	r2, r6
 800eefe:	6820      	ldr	r0, [r4, #0]
 800ef00:	4641      	mov	r1, r8
 800ef02:	f000 fb43 	bl	800f58c <memmove>
 800ef06:	68a3      	ldr	r3, [r4, #8]
 800ef08:	6822      	ldr	r2, [r4, #0]
 800ef0a:	1b9b      	subs	r3, r3, r6
 800ef0c:	4432      	add	r2, r6
 800ef0e:	60a3      	str	r3, [r4, #8]
 800ef10:	6022      	str	r2, [r4, #0]
 800ef12:	2000      	movs	r0, #0
 800ef14:	e7db      	b.n	800eece <__ssputs_r+0x58>
 800ef16:	462a      	mov	r2, r5
 800ef18:	f000 fb52 	bl	800f5c0 <_realloc_r>
 800ef1c:	4606      	mov	r6, r0
 800ef1e:	2800      	cmp	r0, #0
 800ef20:	d1e1      	bne.n	800eee6 <__ssputs_r+0x70>
 800ef22:	6921      	ldr	r1, [r4, #16]
 800ef24:	4650      	mov	r0, sl
 800ef26:	f7fc f82b 	bl	800af80 <_free_r>
 800ef2a:	e7c7      	b.n	800eebc <__ssputs_r+0x46>

0800ef2c <_svfiprintf_r>:
 800ef2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef30:	4698      	mov	r8, r3
 800ef32:	898b      	ldrh	r3, [r1, #12]
 800ef34:	061b      	lsls	r3, r3, #24
 800ef36:	b09d      	sub	sp, #116	; 0x74
 800ef38:	4607      	mov	r7, r0
 800ef3a:	460d      	mov	r5, r1
 800ef3c:	4614      	mov	r4, r2
 800ef3e:	d50e      	bpl.n	800ef5e <_svfiprintf_r+0x32>
 800ef40:	690b      	ldr	r3, [r1, #16]
 800ef42:	b963      	cbnz	r3, 800ef5e <_svfiprintf_r+0x32>
 800ef44:	2140      	movs	r1, #64	; 0x40
 800ef46:	f7fc f86b 	bl	800b020 <_malloc_r>
 800ef4a:	6028      	str	r0, [r5, #0]
 800ef4c:	6128      	str	r0, [r5, #16]
 800ef4e:	b920      	cbnz	r0, 800ef5a <_svfiprintf_r+0x2e>
 800ef50:	230c      	movs	r3, #12
 800ef52:	603b      	str	r3, [r7, #0]
 800ef54:	f04f 30ff 	mov.w	r0, #4294967295
 800ef58:	e0d1      	b.n	800f0fe <_svfiprintf_r+0x1d2>
 800ef5a:	2340      	movs	r3, #64	; 0x40
 800ef5c:	616b      	str	r3, [r5, #20]
 800ef5e:	2300      	movs	r3, #0
 800ef60:	9309      	str	r3, [sp, #36]	; 0x24
 800ef62:	2320      	movs	r3, #32
 800ef64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef68:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef6c:	2330      	movs	r3, #48	; 0x30
 800ef6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f118 <_svfiprintf_r+0x1ec>
 800ef72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef76:	f04f 0901 	mov.w	r9, #1
 800ef7a:	4623      	mov	r3, r4
 800ef7c:	469a      	mov	sl, r3
 800ef7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef82:	b10a      	cbz	r2, 800ef88 <_svfiprintf_r+0x5c>
 800ef84:	2a25      	cmp	r2, #37	; 0x25
 800ef86:	d1f9      	bne.n	800ef7c <_svfiprintf_r+0x50>
 800ef88:	ebba 0b04 	subs.w	fp, sl, r4
 800ef8c:	d00b      	beq.n	800efa6 <_svfiprintf_r+0x7a>
 800ef8e:	465b      	mov	r3, fp
 800ef90:	4622      	mov	r2, r4
 800ef92:	4629      	mov	r1, r5
 800ef94:	4638      	mov	r0, r7
 800ef96:	f7ff ff6e 	bl	800ee76 <__ssputs_r>
 800ef9a:	3001      	adds	r0, #1
 800ef9c:	f000 80aa 	beq.w	800f0f4 <_svfiprintf_r+0x1c8>
 800efa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efa2:	445a      	add	r2, fp
 800efa4:	9209      	str	r2, [sp, #36]	; 0x24
 800efa6:	f89a 3000 	ldrb.w	r3, [sl]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	f000 80a2 	beq.w	800f0f4 <_svfiprintf_r+0x1c8>
 800efb0:	2300      	movs	r3, #0
 800efb2:	f04f 32ff 	mov.w	r2, #4294967295
 800efb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efba:	f10a 0a01 	add.w	sl, sl, #1
 800efbe:	9304      	str	r3, [sp, #16]
 800efc0:	9307      	str	r3, [sp, #28]
 800efc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efc6:	931a      	str	r3, [sp, #104]	; 0x68
 800efc8:	4654      	mov	r4, sl
 800efca:	2205      	movs	r2, #5
 800efcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efd0:	4851      	ldr	r0, [pc, #324]	; (800f118 <_svfiprintf_r+0x1ec>)
 800efd2:	f7f1 f93d 	bl	8000250 <memchr>
 800efd6:	9a04      	ldr	r2, [sp, #16]
 800efd8:	b9d8      	cbnz	r0, 800f012 <_svfiprintf_r+0xe6>
 800efda:	06d0      	lsls	r0, r2, #27
 800efdc:	bf44      	itt	mi
 800efde:	2320      	movmi	r3, #32
 800efe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efe4:	0711      	lsls	r1, r2, #28
 800efe6:	bf44      	itt	mi
 800efe8:	232b      	movmi	r3, #43	; 0x2b
 800efea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efee:	f89a 3000 	ldrb.w	r3, [sl]
 800eff2:	2b2a      	cmp	r3, #42	; 0x2a
 800eff4:	d015      	beq.n	800f022 <_svfiprintf_r+0xf6>
 800eff6:	9a07      	ldr	r2, [sp, #28]
 800eff8:	4654      	mov	r4, sl
 800effa:	2000      	movs	r0, #0
 800effc:	f04f 0c0a 	mov.w	ip, #10
 800f000:	4621      	mov	r1, r4
 800f002:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f006:	3b30      	subs	r3, #48	; 0x30
 800f008:	2b09      	cmp	r3, #9
 800f00a:	d94e      	bls.n	800f0aa <_svfiprintf_r+0x17e>
 800f00c:	b1b0      	cbz	r0, 800f03c <_svfiprintf_r+0x110>
 800f00e:	9207      	str	r2, [sp, #28]
 800f010:	e014      	b.n	800f03c <_svfiprintf_r+0x110>
 800f012:	eba0 0308 	sub.w	r3, r0, r8
 800f016:	fa09 f303 	lsl.w	r3, r9, r3
 800f01a:	4313      	orrs	r3, r2
 800f01c:	9304      	str	r3, [sp, #16]
 800f01e:	46a2      	mov	sl, r4
 800f020:	e7d2      	b.n	800efc8 <_svfiprintf_r+0x9c>
 800f022:	9b03      	ldr	r3, [sp, #12]
 800f024:	1d19      	adds	r1, r3, #4
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	9103      	str	r1, [sp, #12]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	bfbb      	ittet	lt
 800f02e:	425b      	neglt	r3, r3
 800f030:	f042 0202 	orrlt.w	r2, r2, #2
 800f034:	9307      	strge	r3, [sp, #28]
 800f036:	9307      	strlt	r3, [sp, #28]
 800f038:	bfb8      	it	lt
 800f03a:	9204      	strlt	r2, [sp, #16]
 800f03c:	7823      	ldrb	r3, [r4, #0]
 800f03e:	2b2e      	cmp	r3, #46	; 0x2e
 800f040:	d10c      	bne.n	800f05c <_svfiprintf_r+0x130>
 800f042:	7863      	ldrb	r3, [r4, #1]
 800f044:	2b2a      	cmp	r3, #42	; 0x2a
 800f046:	d135      	bne.n	800f0b4 <_svfiprintf_r+0x188>
 800f048:	9b03      	ldr	r3, [sp, #12]
 800f04a:	1d1a      	adds	r2, r3, #4
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	9203      	str	r2, [sp, #12]
 800f050:	2b00      	cmp	r3, #0
 800f052:	bfb8      	it	lt
 800f054:	f04f 33ff 	movlt.w	r3, #4294967295
 800f058:	3402      	adds	r4, #2
 800f05a:	9305      	str	r3, [sp, #20]
 800f05c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f128 <_svfiprintf_r+0x1fc>
 800f060:	7821      	ldrb	r1, [r4, #0]
 800f062:	2203      	movs	r2, #3
 800f064:	4650      	mov	r0, sl
 800f066:	f7f1 f8f3 	bl	8000250 <memchr>
 800f06a:	b140      	cbz	r0, 800f07e <_svfiprintf_r+0x152>
 800f06c:	2340      	movs	r3, #64	; 0x40
 800f06e:	eba0 000a 	sub.w	r0, r0, sl
 800f072:	fa03 f000 	lsl.w	r0, r3, r0
 800f076:	9b04      	ldr	r3, [sp, #16]
 800f078:	4303      	orrs	r3, r0
 800f07a:	3401      	adds	r4, #1
 800f07c:	9304      	str	r3, [sp, #16]
 800f07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f082:	4826      	ldr	r0, [pc, #152]	; (800f11c <_svfiprintf_r+0x1f0>)
 800f084:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f088:	2206      	movs	r2, #6
 800f08a:	f7f1 f8e1 	bl	8000250 <memchr>
 800f08e:	2800      	cmp	r0, #0
 800f090:	d038      	beq.n	800f104 <_svfiprintf_r+0x1d8>
 800f092:	4b23      	ldr	r3, [pc, #140]	; (800f120 <_svfiprintf_r+0x1f4>)
 800f094:	bb1b      	cbnz	r3, 800f0de <_svfiprintf_r+0x1b2>
 800f096:	9b03      	ldr	r3, [sp, #12]
 800f098:	3307      	adds	r3, #7
 800f09a:	f023 0307 	bic.w	r3, r3, #7
 800f09e:	3308      	adds	r3, #8
 800f0a0:	9303      	str	r3, [sp, #12]
 800f0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0a4:	4433      	add	r3, r6
 800f0a6:	9309      	str	r3, [sp, #36]	; 0x24
 800f0a8:	e767      	b.n	800ef7a <_svfiprintf_r+0x4e>
 800f0aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0ae:	460c      	mov	r4, r1
 800f0b0:	2001      	movs	r0, #1
 800f0b2:	e7a5      	b.n	800f000 <_svfiprintf_r+0xd4>
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	3401      	adds	r4, #1
 800f0b8:	9305      	str	r3, [sp, #20]
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	f04f 0c0a 	mov.w	ip, #10
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0c6:	3a30      	subs	r2, #48	; 0x30
 800f0c8:	2a09      	cmp	r2, #9
 800f0ca:	d903      	bls.n	800f0d4 <_svfiprintf_r+0x1a8>
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d0c5      	beq.n	800f05c <_svfiprintf_r+0x130>
 800f0d0:	9105      	str	r1, [sp, #20]
 800f0d2:	e7c3      	b.n	800f05c <_svfiprintf_r+0x130>
 800f0d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0d8:	4604      	mov	r4, r0
 800f0da:	2301      	movs	r3, #1
 800f0dc:	e7f0      	b.n	800f0c0 <_svfiprintf_r+0x194>
 800f0de:	ab03      	add	r3, sp, #12
 800f0e0:	9300      	str	r3, [sp, #0]
 800f0e2:	462a      	mov	r2, r5
 800f0e4:	4b0f      	ldr	r3, [pc, #60]	; (800f124 <_svfiprintf_r+0x1f8>)
 800f0e6:	a904      	add	r1, sp, #16
 800f0e8:	4638      	mov	r0, r7
 800f0ea:	f7fc f885 	bl	800b1f8 <_printf_float>
 800f0ee:	1c42      	adds	r2, r0, #1
 800f0f0:	4606      	mov	r6, r0
 800f0f2:	d1d6      	bne.n	800f0a2 <_svfiprintf_r+0x176>
 800f0f4:	89ab      	ldrh	r3, [r5, #12]
 800f0f6:	065b      	lsls	r3, r3, #25
 800f0f8:	f53f af2c 	bmi.w	800ef54 <_svfiprintf_r+0x28>
 800f0fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0fe:	b01d      	add	sp, #116	; 0x74
 800f100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f104:	ab03      	add	r3, sp, #12
 800f106:	9300      	str	r3, [sp, #0]
 800f108:	462a      	mov	r2, r5
 800f10a:	4b06      	ldr	r3, [pc, #24]	; (800f124 <_svfiprintf_r+0x1f8>)
 800f10c:	a904      	add	r1, sp, #16
 800f10e:	4638      	mov	r0, r7
 800f110:	f7fc fafe 	bl	800b710 <_printf_i>
 800f114:	e7eb      	b.n	800f0ee <_svfiprintf_r+0x1c2>
 800f116:	bf00      	nop
 800f118:	0800fefc 	.word	0x0800fefc
 800f11c:	0800ff06 	.word	0x0800ff06
 800f120:	0800b1f9 	.word	0x0800b1f9
 800f124:	0800ee77 	.word	0x0800ee77
 800f128:	0800ff02 	.word	0x0800ff02

0800f12c <__sfputc_r>:
 800f12c:	6893      	ldr	r3, [r2, #8]
 800f12e:	3b01      	subs	r3, #1
 800f130:	2b00      	cmp	r3, #0
 800f132:	b410      	push	{r4}
 800f134:	6093      	str	r3, [r2, #8]
 800f136:	da08      	bge.n	800f14a <__sfputc_r+0x1e>
 800f138:	6994      	ldr	r4, [r2, #24]
 800f13a:	42a3      	cmp	r3, r4
 800f13c:	db01      	blt.n	800f142 <__sfputc_r+0x16>
 800f13e:	290a      	cmp	r1, #10
 800f140:	d103      	bne.n	800f14a <__sfputc_r+0x1e>
 800f142:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f146:	f7fd be11 	b.w	800cd6c <__swbuf_r>
 800f14a:	6813      	ldr	r3, [r2, #0]
 800f14c:	1c58      	adds	r0, r3, #1
 800f14e:	6010      	str	r0, [r2, #0]
 800f150:	7019      	strb	r1, [r3, #0]
 800f152:	4608      	mov	r0, r1
 800f154:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f158:	4770      	bx	lr

0800f15a <__sfputs_r>:
 800f15a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f15c:	4606      	mov	r6, r0
 800f15e:	460f      	mov	r7, r1
 800f160:	4614      	mov	r4, r2
 800f162:	18d5      	adds	r5, r2, r3
 800f164:	42ac      	cmp	r4, r5
 800f166:	d101      	bne.n	800f16c <__sfputs_r+0x12>
 800f168:	2000      	movs	r0, #0
 800f16a:	e007      	b.n	800f17c <__sfputs_r+0x22>
 800f16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f170:	463a      	mov	r2, r7
 800f172:	4630      	mov	r0, r6
 800f174:	f7ff ffda 	bl	800f12c <__sfputc_r>
 800f178:	1c43      	adds	r3, r0, #1
 800f17a:	d1f3      	bne.n	800f164 <__sfputs_r+0xa>
 800f17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f180 <_vfiprintf_r>:
 800f180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f184:	460d      	mov	r5, r1
 800f186:	b09d      	sub	sp, #116	; 0x74
 800f188:	4614      	mov	r4, r2
 800f18a:	4698      	mov	r8, r3
 800f18c:	4606      	mov	r6, r0
 800f18e:	b118      	cbz	r0, 800f198 <_vfiprintf_r+0x18>
 800f190:	6983      	ldr	r3, [r0, #24]
 800f192:	b90b      	cbnz	r3, 800f198 <_vfiprintf_r+0x18>
 800f194:	f7fb fe10 	bl	800adb8 <__sinit>
 800f198:	4b89      	ldr	r3, [pc, #548]	; (800f3c0 <_vfiprintf_r+0x240>)
 800f19a:	429d      	cmp	r5, r3
 800f19c:	d11b      	bne.n	800f1d6 <_vfiprintf_r+0x56>
 800f19e:	6875      	ldr	r5, [r6, #4]
 800f1a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1a2:	07d9      	lsls	r1, r3, #31
 800f1a4:	d405      	bmi.n	800f1b2 <_vfiprintf_r+0x32>
 800f1a6:	89ab      	ldrh	r3, [r5, #12]
 800f1a8:	059a      	lsls	r2, r3, #22
 800f1aa:	d402      	bmi.n	800f1b2 <_vfiprintf_r+0x32>
 800f1ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1ae:	f7fb fec6 	bl	800af3e <__retarget_lock_acquire_recursive>
 800f1b2:	89ab      	ldrh	r3, [r5, #12]
 800f1b4:	071b      	lsls	r3, r3, #28
 800f1b6:	d501      	bpl.n	800f1bc <_vfiprintf_r+0x3c>
 800f1b8:	692b      	ldr	r3, [r5, #16]
 800f1ba:	b9eb      	cbnz	r3, 800f1f8 <_vfiprintf_r+0x78>
 800f1bc:	4629      	mov	r1, r5
 800f1be:	4630      	mov	r0, r6
 800f1c0:	f7fd fe38 	bl	800ce34 <__swsetup_r>
 800f1c4:	b1c0      	cbz	r0, 800f1f8 <_vfiprintf_r+0x78>
 800f1c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1c8:	07dc      	lsls	r4, r3, #31
 800f1ca:	d50e      	bpl.n	800f1ea <_vfiprintf_r+0x6a>
 800f1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f1d0:	b01d      	add	sp, #116	; 0x74
 800f1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1d6:	4b7b      	ldr	r3, [pc, #492]	; (800f3c4 <_vfiprintf_r+0x244>)
 800f1d8:	429d      	cmp	r5, r3
 800f1da:	d101      	bne.n	800f1e0 <_vfiprintf_r+0x60>
 800f1dc:	68b5      	ldr	r5, [r6, #8]
 800f1de:	e7df      	b.n	800f1a0 <_vfiprintf_r+0x20>
 800f1e0:	4b79      	ldr	r3, [pc, #484]	; (800f3c8 <_vfiprintf_r+0x248>)
 800f1e2:	429d      	cmp	r5, r3
 800f1e4:	bf08      	it	eq
 800f1e6:	68f5      	ldreq	r5, [r6, #12]
 800f1e8:	e7da      	b.n	800f1a0 <_vfiprintf_r+0x20>
 800f1ea:	89ab      	ldrh	r3, [r5, #12]
 800f1ec:	0598      	lsls	r0, r3, #22
 800f1ee:	d4ed      	bmi.n	800f1cc <_vfiprintf_r+0x4c>
 800f1f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1f2:	f7fb fea5 	bl	800af40 <__retarget_lock_release_recursive>
 800f1f6:	e7e9      	b.n	800f1cc <_vfiprintf_r+0x4c>
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	9309      	str	r3, [sp, #36]	; 0x24
 800f1fc:	2320      	movs	r3, #32
 800f1fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f202:	f8cd 800c 	str.w	r8, [sp, #12]
 800f206:	2330      	movs	r3, #48	; 0x30
 800f208:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f3cc <_vfiprintf_r+0x24c>
 800f20c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f210:	f04f 0901 	mov.w	r9, #1
 800f214:	4623      	mov	r3, r4
 800f216:	469a      	mov	sl, r3
 800f218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f21c:	b10a      	cbz	r2, 800f222 <_vfiprintf_r+0xa2>
 800f21e:	2a25      	cmp	r2, #37	; 0x25
 800f220:	d1f9      	bne.n	800f216 <_vfiprintf_r+0x96>
 800f222:	ebba 0b04 	subs.w	fp, sl, r4
 800f226:	d00b      	beq.n	800f240 <_vfiprintf_r+0xc0>
 800f228:	465b      	mov	r3, fp
 800f22a:	4622      	mov	r2, r4
 800f22c:	4629      	mov	r1, r5
 800f22e:	4630      	mov	r0, r6
 800f230:	f7ff ff93 	bl	800f15a <__sfputs_r>
 800f234:	3001      	adds	r0, #1
 800f236:	f000 80aa 	beq.w	800f38e <_vfiprintf_r+0x20e>
 800f23a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f23c:	445a      	add	r2, fp
 800f23e:	9209      	str	r2, [sp, #36]	; 0x24
 800f240:	f89a 3000 	ldrb.w	r3, [sl]
 800f244:	2b00      	cmp	r3, #0
 800f246:	f000 80a2 	beq.w	800f38e <_vfiprintf_r+0x20e>
 800f24a:	2300      	movs	r3, #0
 800f24c:	f04f 32ff 	mov.w	r2, #4294967295
 800f250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f254:	f10a 0a01 	add.w	sl, sl, #1
 800f258:	9304      	str	r3, [sp, #16]
 800f25a:	9307      	str	r3, [sp, #28]
 800f25c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f260:	931a      	str	r3, [sp, #104]	; 0x68
 800f262:	4654      	mov	r4, sl
 800f264:	2205      	movs	r2, #5
 800f266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f26a:	4858      	ldr	r0, [pc, #352]	; (800f3cc <_vfiprintf_r+0x24c>)
 800f26c:	f7f0 fff0 	bl	8000250 <memchr>
 800f270:	9a04      	ldr	r2, [sp, #16]
 800f272:	b9d8      	cbnz	r0, 800f2ac <_vfiprintf_r+0x12c>
 800f274:	06d1      	lsls	r1, r2, #27
 800f276:	bf44      	itt	mi
 800f278:	2320      	movmi	r3, #32
 800f27a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f27e:	0713      	lsls	r3, r2, #28
 800f280:	bf44      	itt	mi
 800f282:	232b      	movmi	r3, #43	; 0x2b
 800f284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f288:	f89a 3000 	ldrb.w	r3, [sl]
 800f28c:	2b2a      	cmp	r3, #42	; 0x2a
 800f28e:	d015      	beq.n	800f2bc <_vfiprintf_r+0x13c>
 800f290:	9a07      	ldr	r2, [sp, #28]
 800f292:	4654      	mov	r4, sl
 800f294:	2000      	movs	r0, #0
 800f296:	f04f 0c0a 	mov.w	ip, #10
 800f29a:	4621      	mov	r1, r4
 800f29c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2a0:	3b30      	subs	r3, #48	; 0x30
 800f2a2:	2b09      	cmp	r3, #9
 800f2a4:	d94e      	bls.n	800f344 <_vfiprintf_r+0x1c4>
 800f2a6:	b1b0      	cbz	r0, 800f2d6 <_vfiprintf_r+0x156>
 800f2a8:	9207      	str	r2, [sp, #28]
 800f2aa:	e014      	b.n	800f2d6 <_vfiprintf_r+0x156>
 800f2ac:	eba0 0308 	sub.w	r3, r0, r8
 800f2b0:	fa09 f303 	lsl.w	r3, r9, r3
 800f2b4:	4313      	orrs	r3, r2
 800f2b6:	9304      	str	r3, [sp, #16]
 800f2b8:	46a2      	mov	sl, r4
 800f2ba:	e7d2      	b.n	800f262 <_vfiprintf_r+0xe2>
 800f2bc:	9b03      	ldr	r3, [sp, #12]
 800f2be:	1d19      	adds	r1, r3, #4
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	9103      	str	r1, [sp, #12]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	bfbb      	ittet	lt
 800f2c8:	425b      	neglt	r3, r3
 800f2ca:	f042 0202 	orrlt.w	r2, r2, #2
 800f2ce:	9307      	strge	r3, [sp, #28]
 800f2d0:	9307      	strlt	r3, [sp, #28]
 800f2d2:	bfb8      	it	lt
 800f2d4:	9204      	strlt	r2, [sp, #16]
 800f2d6:	7823      	ldrb	r3, [r4, #0]
 800f2d8:	2b2e      	cmp	r3, #46	; 0x2e
 800f2da:	d10c      	bne.n	800f2f6 <_vfiprintf_r+0x176>
 800f2dc:	7863      	ldrb	r3, [r4, #1]
 800f2de:	2b2a      	cmp	r3, #42	; 0x2a
 800f2e0:	d135      	bne.n	800f34e <_vfiprintf_r+0x1ce>
 800f2e2:	9b03      	ldr	r3, [sp, #12]
 800f2e4:	1d1a      	adds	r2, r3, #4
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	9203      	str	r2, [sp, #12]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	bfb8      	it	lt
 800f2ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2f2:	3402      	adds	r4, #2
 800f2f4:	9305      	str	r3, [sp, #20]
 800f2f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f3dc <_vfiprintf_r+0x25c>
 800f2fa:	7821      	ldrb	r1, [r4, #0]
 800f2fc:	2203      	movs	r2, #3
 800f2fe:	4650      	mov	r0, sl
 800f300:	f7f0 ffa6 	bl	8000250 <memchr>
 800f304:	b140      	cbz	r0, 800f318 <_vfiprintf_r+0x198>
 800f306:	2340      	movs	r3, #64	; 0x40
 800f308:	eba0 000a 	sub.w	r0, r0, sl
 800f30c:	fa03 f000 	lsl.w	r0, r3, r0
 800f310:	9b04      	ldr	r3, [sp, #16]
 800f312:	4303      	orrs	r3, r0
 800f314:	3401      	adds	r4, #1
 800f316:	9304      	str	r3, [sp, #16]
 800f318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f31c:	482c      	ldr	r0, [pc, #176]	; (800f3d0 <_vfiprintf_r+0x250>)
 800f31e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f322:	2206      	movs	r2, #6
 800f324:	f7f0 ff94 	bl	8000250 <memchr>
 800f328:	2800      	cmp	r0, #0
 800f32a:	d03f      	beq.n	800f3ac <_vfiprintf_r+0x22c>
 800f32c:	4b29      	ldr	r3, [pc, #164]	; (800f3d4 <_vfiprintf_r+0x254>)
 800f32e:	bb1b      	cbnz	r3, 800f378 <_vfiprintf_r+0x1f8>
 800f330:	9b03      	ldr	r3, [sp, #12]
 800f332:	3307      	adds	r3, #7
 800f334:	f023 0307 	bic.w	r3, r3, #7
 800f338:	3308      	adds	r3, #8
 800f33a:	9303      	str	r3, [sp, #12]
 800f33c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f33e:	443b      	add	r3, r7
 800f340:	9309      	str	r3, [sp, #36]	; 0x24
 800f342:	e767      	b.n	800f214 <_vfiprintf_r+0x94>
 800f344:	fb0c 3202 	mla	r2, ip, r2, r3
 800f348:	460c      	mov	r4, r1
 800f34a:	2001      	movs	r0, #1
 800f34c:	e7a5      	b.n	800f29a <_vfiprintf_r+0x11a>
 800f34e:	2300      	movs	r3, #0
 800f350:	3401      	adds	r4, #1
 800f352:	9305      	str	r3, [sp, #20]
 800f354:	4619      	mov	r1, r3
 800f356:	f04f 0c0a 	mov.w	ip, #10
 800f35a:	4620      	mov	r0, r4
 800f35c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f360:	3a30      	subs	r2, #48	; 0x30
 800f362:	2a09      	cmp	r2, #9
 800f364:	d903      	bls.n	800f36e <_vfiprintf_r+0x1ee>
 800f366:	2b00      	cmp	r3, #0
 800f368:	d0c5      	beq.n	800f2f6 <_vfiprintf_r+0x176>
 800f36a:	9105      	str	r1, [sp, #20]
 800f36c:	e7c3      	b.n	800f2f6 <_vfiprintf_r+0x176>
 800f36e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f372:	4604      	mov	r4, r0
 800f374:	2301      	movs	r3, #1
 800f376:	e7f0      	b.n	800f35a <_vfiprintf_r+0x1da>
 800f378:	ab03      	add	r3, sp, #12
 800f37a:	9300      	str	r3, [sp, #0]
 800f37c:	462a      	mov	r2, r5
 800f37e:	4b16      	ldr	r3, [pc, #88]	; (800f3d8 <_vfiprintf_r+0x258>)
 800f380:	a904      	add	r1, sp, #16
 800f382:	4630      	mov	r0, r6
 800f384:	f7fb ff38 	bl	800b1f8 <_printf_float>
 800f388:	4607      	mov	r7, r0
 800f38a:	1c78      	adds	r0, r7, #1
 800f38c:	d1d6      	bne.n	800f33c <_vfiprintf_r+0x1bc>
 800f38e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f390:	07d9      	lsls	r1, r3, #31
 800f392:	d405      	bmi.n	800f3a0 <_vfiprintf_r+0x220>
 800f394:	89ab      	ldrh	r3, [r5, #12]
 800f396:	059a      	lsls	r2, r3, #22
 800f398:	d402      	bmi.n	800f3a0 <_vfiprintf_r+0x220>
 800f39a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f39c:	f7fb fdd0 	bl	800af40 <__retarget_lock_release_recursive>
 800f3a0:	89ab      	ldrh	r3, [r5, #12]
 800f3a2:	065b      	lsls	r3, r3, #25
 800f3a4:	f53f af12 	bmi.w	800f1cc <_vfiprintf_r+0x4c>
 800f3a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3aa:	e711      	b.n	800f1d0 <_vfiprintf_r+0x50>
 800f3ac:	ab03      	add	r3, sp, #12
 800f3ae:	9300      	str	r3, [sp, #0]
 800f3b0:	462a      	mov	r2, r5
 800f3b2:	4b09      	ldr	r3, [pc, #36]	; (800f3d8 <_vfiprintf_r+0x258>)
 800f3b4:	a904      	add	r1, sp, #16
 800f3b6:	4630      	mov	r0, r6
 800f3b8:	f7fc f9aa 	bl	800b710 <_printf_i>
 800f3bc:	e7e4      	b.n	800f388 <_vfiprintf_r+0x208>
 800f3be:	bf00      	nop
 800f3c0:	0800fbb8 	.word	0x0800fbb8
 800f3c4:	0800fbd8 	.word	0x0800fbd8
 800f3c8:	0800fb98 	.word	0x0800fb98
 800f3cc:	0800fefc 	.word	0x0800fefc
 800f3d0:	0800ff06 	.word	0x0800ff06
 800f3d4:	0800b1f9 	.word	0x0800b1f9
 800f3d8:	0800f15b 	.word	0x0800f15b
 800f3dc:	0800ff02 	.word	0x0800ff02

0800f3e0 <_putc_r>:
 800f3e0:	b570      	push	{r4, r5, r6, lr}
 800f3e2:	460d      	mov	r5, r1
 800f3e4:	4614      	mov	r4, r2
 800f3e6:	4606      	mov	r6, r0
 800f3e8:	b118      	cbz	r0, 800f3f2 <_putc_r+0x12>
 800f3ea:	6983      	ldr	r3, [r0, #24]
 800f3ec:	b90b      	cbnz	r3, 800f3f2 <_putc_r+0x12>
 800f3ee:	f7fb fce3 	bl	800adb8 <__sinit>
 800f3f2:	4b1c      	ldr	r3, [pc, #112]	; (800f464 <_putc_r+0x84>)
 800f3f4:	429c      	cmp	r4, r3
 800f3f6:	d124      	bne.n	800f442 <_putc_r+0x62>
 800f3f8:	6874      	ldr	r4, [r6, #4]
 800f3fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3fc:	07d8      	lsls	r0, r3, #31
 800f3fe:	d405      	bmi.n	800f40c <_putc_r+0x2c>
 800f400:	89a3      	ldrh	r3, [r4, #12]
 800f402:	0599      	lsls	r1, r3, #22
 800f404:	d402      	bmi.n	800f40c <_putc_r+0x2c>
 800f406:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f408:	f7fb fd99 	bl	800af3e <__retarget_lock_acquire_recursive>
 800f40c:	68a3      	ldr	r3, [r4, #8]
 800f40e:	3b01      	subs	r3, #1
 800f410:	2b00      	cmp	r3, #0
 800f412:	60a3      	str	r3, [r4, #8]
 800f414:	da05      	bge.n	800f422 <_putc_r+0x42>
 800f416:	69a2      	ldr	r2, [r4, #24]
 800f418:	4293      	cmp	r3, r2
 800f41a:	db1c      	blt.n	800f456 <_putc_r+0x76>
 800f41c:	b2eb      	uxtb	r3, r5
 800f41e:	2b0a      	cmp	r3, #10
 800f420:	d019      	beq.n	800f456 <_putc_r+0x76>
 800f422:	6823      	ldr	r3, [r4, #0]
 800f424:	1c5a      	adds	r2, r3, #1
 800f426:	6022      	str	r2, [r4, #0]
 800f428:	701d      	strb	r5, [r3, #0]
 800f42a:	b2ed      	uxtb	r5, r5
 800f42c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f42e:	07da      	lsls	r2, r3, #31
 800f430:	d405      	bmi.n	800f43e <_putc_r+0x5e>
 800f432:	89a3      	ldrh	r3, [r4, #12]
 800f434:	059b      	lsls	r3, r3, #22
 800f436:	d402      	bmi.n	800f43e <_putc_r+0x5e>
 800f438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f43a:	f7fb fd81 	bl	800af40 <__retarget_lock_release_recursive>
 800f43e:	4628      	mov	r0, r5
 800f440:	bd70      	pop	{r4, r5, r6, pc}
 800f442:	4b09      	ldr	r3, [pc, #36]	; (800f468 <_putc_r+0x88>)
 800f444:	429c      	cmp	r4, r3
 800f446:	d101      	bne.n	800f44c <_putc_r+0x6c>
 800f448:	68b4      	ldr	r4, [r6, #8]
 800f44a:	e7d6      	b.n	800f3fa <_putc_r+0x1a>
 800f44c:	4b07      	ldr	r3, [pc, #28]	; (800f46c <_putc_r+0x8c>)
 800f44e:	429c      	cmp	r4, r3
 800f450:	bf08      	it	eq
 800f452:	68f4      	ldreq	r4, [r6, #12]
 800f454:	e7d1      	b.n	800f3fa <_putc_r+0x1a>
 800f456:	4629      	mov	r1, r5
 800f458:	4622      	mov	r2, r4
 800f45a:	4630      	mov	r0, r6
 800f45c:	f7fd fc86 	bl	800cd6c <__swbuf_r>
 800f460:	4605      	mov	r5, r0
 800f462:	e7e3      	b.n	800f42c <_putc_r+0x4c>
 800f464:	0800fbb8 	.word	0x0800fbb8
 800f468:	0800fbd8 	.word	0x0800fbd8
 800f46c:	0800fb98 	.word	0x0800fb98

0800f470 <_read_r>:
 800f470:	b538      	push	{r3, r4, r5, lr}
 800f472:	4d07      	ldr	r5, [pc, #28]	; (800f490 <_read_r+0x20>)
 800f474:	4604      	mov	r4, r0
 800f476:	4608      	mov	r0, r1
 800f478:	4611      	mov	r1, r2
 800f47a:	2200      	movs	r2, #0
 800f47c:	602a      	str	r2, [r5, #0]
 800f47e:	461a      	mov	r2, r3
 800f480:	f7f2 ffce 	bl	8002420 <_read>
 800f484:	1c43      	adds	r3, r0, #1
 800f486:	d102      	bne.n	800f48e <_read_r+0x1e>
 800f488:	682b      	ldr	r3, [r5, #0]
 800f48a:	b103      	cbz	r3, 800f48e <_read_r+0x1e>
 800f48c:	6023      	str	r3, [r4, #0]
 800f48e:	bd38      	pop	{r3, r4, r5, pc}
 800f490:	2000505c 	.word	0x2000505c
 800f494:	00000000 	.word	0x00000000

0800f498 <nan>:
 800f498:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f4a0 <nan+0x8>
 800f49c:	4770      	bx	lr
 800f49e:	bf00      	nop
 800f4a0:	00000000 	.word	0x00000000
 800f4a4:	7ff80000 	.word	0x7ff80000

0800f4a8 <strncmp>:
 800f4a8:	b510      	push	{r4, lr}
 800f4aa:	b16a      	cbz	r2, 800f4c8 <strncmp+0x20>
 800f4ac:	3901      	subs	r1, #1
 800f4ae:	1884      	adds	r4, r0, r2
 800f4b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f4b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d103      	bne.n	800f4c4 <strncmp+0x1c>
 800f4bc:	42a0      	cmp	r0, r4
 800f4be:	d001      	beq.n	800f4c4 <strncmp+0x1c>
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d1f5      	bne.n	800f4b0 <strncmp+0x8>
 800f4c4:	1a98      	subs	r0, r3, r2
 800f4c6:	bd10      	pop	{r4, pc}
 800f4c8:	4610      	mov	r0, r2
 800f4ca:	e7fc      	b.n	800f4c6 <strncmp+0x1e>

0800f4cc <__ascii_wctomb>:
 800f4cc:	b149      	cbz	r1, 800f4e2 <__ascii_wctomb+0x16>
 800f4ce:	2aff      	cmp	r2, #255	; 0xff
 800f4d0:	bf85      	ittet	hi
 800f4d2:	238a      	movhi	r3, #138	; 0x8a
 800f4d4:	6003      	strhi	r3, [r0, #0]
 800f4d6:	700a      	strbls	r2, [r1, #0]
 800f4d8:	f04f 30ff 	movhi.w	r0, #4294967295
 800f4dc:	bf98      	it	ls
 800f4de:	2001      	movls	r0, #1
 800f4e0:	4770      	bx	lr
 800f4e2:	4608      	mov	r0, r1
 800f4e4:	4770      	bx	lr
	...

0800f4e8 <__assert_func>:
 800f4e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f4ea:	4614      	mov	r4, r2
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	4b09      	ldr	r3, [pc, #36]	; (800f514 <__assert_func+0x2c>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	4605      	mov	r5, r0
 800f4f4:	68d8      	ldr	r0, [r3, #12]
 800f4f6:	b14c      	cbz	r4, 800f50c <__assert_func+0x24>
 800f4f8:	4b07      	ldr	r3, [pc, #28]	; (800f518 <__assert_func+0x30>)
 800f4fa:	9100      	str	r1, [sp, #0]
 800f4fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f500:	4906      	ldr	r1, [pc, #24]	; (800f51c <__assert_func+0x34>)
 800f502:	462b      	mov	r3, r5
 800f504:	f000 f80e 	bl	800f524 <fiprintf>
 800f508:	f000 f880 	bl	800f60c <abort>
 800f50c:	4b04      	ldr	r3, [pc, #16]	; (800f520 <__assert_func+0x38>)
 800f50e:	461c      	mov	r4, r3
 800f510:	e7f3      	b.n	800f4fa <__assert_func+0x12>
 800f512:	bf00      	nop
 800f514:	20000070 	.word	0x20000070
 800f518:	0800ff0d 	.word	0x0800ff0d
 800f51c:	0800ff1a 	.word	0x0800ff1a
 800f520:	0800ff48 	.word	0x0800ff48

0800f524 <fiprintf>:
 800f524:	b40e      	push	{r1, r2, r3}
 800f526:	b503      	push	{r0, r1, lr}
 800f528:	4601      	mov	r1, r0
 800f52a:	ab03      	add	r3, sp, #12
 800f52c:	4805      	ldr	r0, [pc, #20]	; (800f544 <fiprintf+0x20>)
 800f52e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f532:	6800      	ldr	r0, [r0, #0]
 800f534:	9301      	str	r3, [sp, #4]
 800f536:	f7ff fe23 	bl	800f180 <_vfiprintf_r>
 800f53a:	b002      	add	sp, #8
 800f53c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f540:	b003      	add	sp, #12
 800f542:	4770      	bx	lr
 800f544:	20000070 	.word	0x20000070

0800f548 <_fstat_r>:
 800f548:	b538      	push	{r3, r4, r5, lr}
 800f54a:	4d07      	ldr	r5, [pc, #28]	; (800f568 <_fstat_r+0x20>)
 800f54c:	2300      	movs	r3, #0
 800f54e:	4604      	mov	r4, r0
 800f550:	4608      	mov	r0, r1
 800f552:	4611      	mov	r1, r2
 800f554:	602b      	str	r3, [r5, #0]
 800f556:	f7f2 ffa8 	bl	80024aa <_fstat>
 800f55a:	1c43      	adds	r3, r0, #1
 800f55c:	d102      	bne.n	800f564 <_fstat_r+0x1c>
 800f55e:	682b      	ldr	r3, [r5, #0]
 800f560:	b103      	cbz	r3, 800f564 <_fstat_r+0x1c>
 800f562:	6023      	str	r3, [r4, #0]
 800f564:	bd38      	pop	{r3, r4, r5, pc}
 800f566:	bf00      	nop
 800f568:	2000505c 	.word	0x2000505c

0800f56c <_isatty_r>:
 800f56c:	b538      	push	{r3, r4, r5, lr}
 800f56e:	4d06      	ldr	r5, [pc, #24]	; (800f588 <_isatty_r+0x1c>)
 800f570:	2300      	movs	r3, #0
 800f572:	4604      	mov	r4, r0
 800f574:	4608      	mov	r0, r1
 800f576:	602b      	str	r3, [r5, #0]
 800f578:	f7f2 ffa7 	bl	80024ca <_isatty>
 800f57c:	1c43      	adds	r3, r0, #1
 800f57e:	d102      	bne.n	800f586 <_isatty_r+0x1a>
 800f580:	682b      	ldr	r3, [r5, #0]
 800f582:	b103      	cbz	r3, 800f586 <_isatty_r+0x1a>
 800f584:	6023      	str	r3, [r4, #0]
 800f586:	bd38      	pop	{r3, r4, r5, pc}
 800f588:	2000505c 	.word	0x2000505c

0800f58c <memmove>:
 800f58c:	4288      	cmp	r0, r1
 800f58e:	b510      	push	{r4, lr}
 800f590:	eb01 0402 	add.w	r4, r1, r2
 800f594:	d902      	bls.n	800f59c <memmove+0x10>
 800f596:	4284      	cmp	r4, r0
 800f598:	4623      	mov	r3, r4
 800f59a:	d807      	bhi.n	800f5ac <memmove+0x20>
 800f59c:	1e43      	subs	r3, r0, #1
 800f59e:	42a1      	cmp	r1, r4
 800f5a0:	d008      	beq.n	800f5b4 <memmove+0x28>
 800f5a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f5aa:	e7f8      	b.n	800f59e <memmove+0x12>
 800f5ac:	4402      	add	r2, r0
 800f5ae:	4601      	mov	r1, r0
 800f5b0:	428a      	cmp	r2, r1
 800f5b2:	d100      	bne.n	800f5b6 <memmove+0x2a>
 800f5b4:	bd10      	pop	{r4, pc}
 800f5b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f5ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f5be:	e7f7      	b.n	800f5b0 <memmove+0x24>

0800f5c0 <_realloc_r>:
 800f5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5c2:	4607      	mov	r7, r0
 800f5c4:	4614      	mov	r4, r2
 800f5c6:	460e      	mov	r6, r1
 800f5c8:	b921      	cbnz	r1, 800f5d4 <_realloc_r+0x14>
 800f5ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f5ce:	4611      	mov	r1, r2
 800f5d0:	f7fb bd26 	b.w	800b020 <_malloc_r>
 800f5d4:	b922      	cbnz	r2, 800f5e0 <_realloc_r+0x20>
 800f5d6:	f7fb fcd3 	bl	800af80 <_free_r>
 800f5da:	4625      	mov	r5, r4
 800f5dc:	4628      	mov	r0, r5
 800f5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5e0:	f000 f81b 	bl	800f61a <_malloc_usable_size_r>
 800f5e4:	42a0      	cmp	r0, r4
 800f5e6:	d20f      	bcs.n	800f608 <_realloc_r+0x48>
 800f5e8:	4621      	mov	r1, r4
 800f5ea:	4638      	mov	r0, r7
 800f5ec:	f7fb fd18 	bl	800b020 <_malloc_r>
 800f5f0:	4605      	mov	r5, r0
 800f5f2:	2800      	cmp	r0, #0
 800f5f4:	d0f2      	beq.n	800f5dc <_realloc_r+0x1c>
 800f5f6:	4631      	mov	r1, r6
 800f5f8:	4622      	mov	r2, r4
 800f5fa:	f7fb fcab 	bl	800af54 <memcpy>
 800f5fe:	4631      	mov	r1, r6
 800f600:	4638      	mov	r0, r7
 800f602:	f7fb fcbd 	bl	800af80 <_free_r>
 800f606:	e7e9      	b.n	800f5dc <_realloc_r+0x1c>
 800f608:	4635      	mov	r5, r6
 800f60a:	e7e7      	b.n	800f5dc <_realloc_r+0x1c>

0800f60c <abort>:
 800f60c:	b508      	push	{r3, lr}
 800f60e:	2006      	movs	r0, #6
 800f610:	f000 f834 	bl	800f67c <raise>
 800f614:	2001      	movs	r0, #1
 800f616:	f7f2 fef9 	bl	800240c <_exit>

0800f61a <_malloc_usable_size_r>:
 800f61a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f61e:	1f18      	subs	r0, r3, #4
 800f620:	2b00      	cmp	r3, #0
 800f622:	bfbc      	itt	lt
 800f624:	580b      	ldrlt	r3, [r1, r0]
 800f626:	18c0      	addlt	r0, r0, r3
 800f628:	4770      	bx	lr

0800f62a <_raise_r>:
 800f62a:	291f      	cmp	r1, #31
 800f62c:	b538      	push	{r3, r4, r5, lr}
 800f62e:	4604      	mov	r4, r0
 800f630:	460d      	mov	r5, r1
 800f632:	d904      	bls.n	800f63e <_raise_r+0x14>
 800f634:	2316      	movs	r3, #22
 800f636:	6003      	str	r3, [r0, #0]
 800f638:	f04f 30ff 	mov.w	r0, #4294967295
 800f63c:	bd38      	pop	{r3, r4, r5, pc}
 800f63e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f640:	b112      	cbz	r2, 800f648 <_raise_r+0x1e>
 800f642:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f646:	b94b      	cbnz	r3, 800f65c <_raise_r+0x32>
 800f648:	4620      	mov	r0, r4
 800f64a:	f000 f831 	bl	800f6b0 <_getpid_r>
 800f64e:	462a      	mov	r2, r5
 800f650:	4601      	mov	r1, r0
 800f652:	4620      	mov	r0, r4
 800f654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f658:	f000 b818 	b.w	800f68c <_kill_r>
 800f65c:	2b01      	cmp	r3, #1
 800f65e:	d00a      	beq.n	800f676 <_raise_r+0x4c>
 800f660:	1c59      	adds	r1, r3, #1
 800f662:	d103      	bne.n	800f66c <_raise_r+0x42>
 800f664:	2316      	movs	r3, #22
 800f666:	6003      	str	r3, [r0, #0]
 800f668:	2001      	movs	r0, #1
 800f66a:	e7e7      	b.n	800f63c <_raise_r+0x12>
 800f66c:	2400      	movs	r4, #0
 800f66e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f672:	4628      	mov	r0, r5
 800f674:	4798      	blx	r3
 800f676:	2000      	movs	r0, #0
 800f678:	e7e0      	b.n	800f63c <_raise_r+0x12>
	...

0800f67c <raise>:
 800f67c:	4b02      	ldr	r3, [pc, #8]	; (800f688 <raise+0xc>)
 800f67e:	4601      	mov	r1, r0
 800f680:	6818      	ldr	r0, [r3, #0]
 800f682:	f7ff bfd2 	b.w	800f62a <_raise_r>
 800f686:	bf00      	nop
 800f688:	20000070 	.word	0x20000070

0800f68c <_kill_r>:
 800f68c:	b538      	push	{r3, r4, r5, lr}
 800f68e:	4d07      	ldr	r5, [pc, #28]	; (800f6ac <_kill_r+0x20>)
 800f690:	2300      	movs	r3, #0
 800f692:	4604      	mov	r4, r0
 800f694:	4608      	mov	r0, r1
 800f696:	4611      	mov	r1, r2
 800f698:	602b      	str	r3, [r5, #0]
 800f69a:	f7f2 fea7 	bl	80023ec <_kill>
 800f69e:	1c43      	adds	r3, r0, #1
 800f6a0:	d102      	bne.n	800f6a8 <_kill_r+0x1c>
 800f6a2:	682b      	ldr	r3, [r5, #0]
 800f6a4:	b103      	cbz	r3, 800f6a8 <_kill_r+0x1c>
 800f6a6:	6023      	str	r3, [r4, #0]
 800f6a8:	bd38      	pop	{r3, r4, r5, pc}
 800f6aa:	bf00      	nop
 800f6ac:	2000505c 	.word	0x2000505c

0800f6b0 <_getpid_r>:
 800f6b0:	f7f2 be94 	b.w	80023dc <_getpid>

0800f6b4 <round>:
 800f6b4:	ee10 1a90 	vmov	r1, s1
 800f6b8:	f3c1 500a 	ubfx	r0, r1, #20, #11
 800f6bc:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 800f6c0:	2a13      	cmp	r2, #19
 800f6c2:	b510      	push	{r4, lr}
 800f6c4:	ee10 3a10 	vmov	r3, s0
 800f6c8:	dc19      	bgt.n	800f6fe <round+0x4a>
 800f6ca:	2a00      	cmp	r2, #0
 800f6cc:	da09      	bge.n	800f6e2 <round+0x2e>
 800f6ce:	3201      	adds	r2, #1
 800f6d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800f6d4:	d103      	bne.n	800f6de <round+0x2a>
 800f6d6:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800f6da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f6de:	2000      	movs	r0, #0
 800f6e0:	e027      	b.n	800f732 <round+0x7e>
 800f6e2:	4816      	ldr	r0, [pc, #88]	; (800f73c <round+0x88>)
 800f6e4:	4110      	asrs	r0, r2
 800f6e6:	ea01 0400 	and.w	r4, r1, r0
 800f6ea:	4323      	orrs	r3, r4
 800f6ec:	d00e      	beq.n	800f70c <round+0x58>
 800f6ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f6f2:	fa43 f202 	asr.w	r2, r3, r2
 800f6f6:	4411      	add	r1, r2
 800f6f8:	ea21 0100 	bic.w	r1, r1, r0
 800f6fc:	e7ef      	b.n	800f6de <round+0x2a>
 800f6fe:	2a33      	cmp	r2, #51	; 0x33
 800f700:	dd05      	ble.n	800f70e <round+0x5a>
 800f702:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800f706:	d101      	bne.n	800f70c <round+0x58>
 800f708:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f70c:	bd10      	pop	{r4, pc}
 800f70e:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 800f712:	f04f 30ff 	mov.w	r0, #4294967295
 800f716:	fa20 f404 	lsr.w	r4, r0, r4
 800f71a:	4223      	tst	r3, r4
 800f71c:	d0f6      	beq.n	800f70c <round+0x58>
 800f71e:	2001      	movs	r0, #1
 800f720:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800f724:	fa00 f202 	lsl.w	r2, r0, r2
 800f728:	189b      	adds	r3, r3, r2
 800f72a:	bf28      	it	cs
 800f72c:	1809      	addcs	r1, r1, r0
 800f72e:	ea23 0004 	bic.w	r0, r3, r4
 800f732:	460b      	mov	r3, r1
 800f734:	4602      	mov	r2, r0
 800f736:	ec43 2b10 	vmov	d0, r2, r3
 800f73a:	e7e7      	b.n	800f70c <round+0x58>
 800f73c:	000fffff 	.word	0x000fffff

0800f740 <_init>:
 800f740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f742:	bf00      	nop
 800f744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f746:	bc08      	pop	{r3}
 800f748:	469e      	mov	lr, r3
 800f74a:	4770      	bx	lr

0800f74c <_fini>:
 800f74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f74e:	bf00      	nop
 800f750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f752:	bc08      	pop	{r3}
 800f754:	469e      	mov	lr, r3
 800f756:	4770      	bx	lr
